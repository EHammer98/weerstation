
FreeRTOS_Weerstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001318  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080013d8  080013d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c8  080015c8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080015c8  080015c8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015c8  080015c8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c8  080015c8  000115c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015cc  080015cc  000115cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080015d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  2000006c  0800163c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  0800163c  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4f9  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173c  00000000  00000000  0002e58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  000305b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020ec  00000000  00000000  00030e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ecc  00000000  00000000  00032f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006abb0  00000000  00000000  0003cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a79a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000220c  00000000  00000000  000a79f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080013c0 	.word	0x080013c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080013c0 	.word	0x080013c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <debugPrintln>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debugPrint(UART_HandleTypeDef *huart, char _out[]){
HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
}
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	0018      	movs	r0, r3
 800023e:	f7ff ff63 	bl	8000108 <strlen>
 8000242:	0003      	movs	r3, r0
 8000244:	b29a      	uxth	r2, r3
 8000246:	6839      	ldr	r1, [r7, #0]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	230a      	movs	r3, #10
 800024c:	f000 fa3a 	bl	80006c4 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8000250:	210c      	movs	r1, #12
 8000252:	187b      	adds	r3, r7, r1
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <debugPrintln+0x3c>)
 8000256:	801a      	strh	r2, [r3, #0]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000258:	1879      	adds	r1, r7, r1
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	230a      	movs	r3, #10
 800025e:	2202      	movs	r2, #2
 8000260:	f000 fa30 	bl	80006c4 <HAL_UART_Transmit>
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}
 800026c:	00000a0d 	.word	0x00000a0d

08000270 <sendDataESP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendDataESP */
void sendDataESP(void *argument)
{
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	b0cf      	sub	sp, #316	; 0x13c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//Local var. declaration.
	char rxData[10]; //Containt data send from the ESP over UART1
	char dtDEBUG[] = "Date & Time: ";
 8000278:	238c      	movs	r3, #140	; 0x8c
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	4ac8      	ldr	r2, [pc, #800]	; (80005a0 <sendDataESP+0x330>)
 8000280:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000282:	c313      	stmia	r3!, {r0, r1, r4}
 8000284:	8812      	ldrh	r2, [r2, #0]
 8000286:	801a      	strh	r2, [r3, #0]
	char tempDEBUG[] = "Temp in C: ";
 8000288:	2386      	movs	r3, #134	; 0x86
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	4ac5      	ldr	r2, [pc, #788]	; (80005a4 <sendDataESP+0x334>)
 8000290:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000292:	c313      	stmia	r3!, {r0, r1, r4}
	char humDEBUG[] = "Hum in %: ";
 8000294:	1c7b      	adds	r3, r7, #1
 8000296:	33ff      	adds	r3, #255	; 0xff
 8000298:	4ac3      	ldr	r2, [pc, #780]	; (80005a8 <sendDataESP+0x338>)
 800029a:	ca03      	ldmia	r2!, {r0, r1}
 800029c:	c303      	stmia	r3!, {r0, r1}
 800029e:	8811      	ldrh	r1, [r2, #0]
 80002a0:	8019      	strh	r1, [r3, #0]
 80002a2:	7892      	ldrb	r2, [r2, #2]
 80002a4:	709a      	strb	r2, [r3, #2]
	char pressDEBUG[] = "Press in Pa: ";
 80002a6:	23f0      	movs	r3, #240	; 0xf0
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	4ac0      	ldr	r2, [pc, #768]	; (80005ac <sendDataESP+0x33c>)
 80002ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002ae:	c313      	stmia	r3!, {r0, r1, r4}
 80002b0:	8812      	ldrh	r2, [r2, #0]
 80002b2:	801a      	strh	r2, [r3, #0]
	char errorDEBUG[] = "Error: ";
 80002b4:	23e8      	movs	r3, #232	; 0xe8
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	4abd      	ldr	r2, [pc, #756]	; (80005b0 <sendDataESP+0x340>)
 80002ba:	ca03      	ldmia	r2!, {r0, r1}
 80002bc:	c303      	stmia	r3!, {r0, r1}
	char url[] = "GET http://server03.hammer-tech.eu/weerstationProject/connect.php?"; //Create connection with a PHP-page
 80002be:	23a4      	movs	r3, #164	; 0xa4
 80002c0:	18fa      	adds	r2, r7, r3
 80002c2:	4bbc      	ldr	r3, [pc, #752]	; (80005b4 <sendDataESP+0x344>)
 80002c4:	0010      	movs	r0, r2
 80002c6:	0019      	movs	r1, r3
 80002c8:	2343      	movs	r3, #67	; 0x43
 80002ca:	001a      	movs	r2, r3
 80002cc:	f001 f816 	bl	80012fc <memcpy>
	char temp[] = "&intTemp=";
 80002d0:	2398      	movs	r3, #152	; 0x98
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	4ab8      	ldr	r2, [pc, #736]	; (80005b8 <sendDataESP+0x348>)
 80002d6:	ca03      	ldmia	r2!, {r0, r1}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	8812      	ldrh	r2, [r2, #0]
 80002dc:	801a      	strh	r2, [r3, #0]
	char hum[] = "&intHum=";
 80002de:	238c      	movs	r3, #140	; 0x8c
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	4ab6      	ldr	r2, [pc, #728]	; (80005bc <sendDataESP+0x34c>)
 80002e4:	ca03      	ldmia	r2!, {r0, r1}
 80002e6:	c303      	stmia	r3!, {r0, r1}
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	701a      	strb	r2, [r3, #0]
	char press[] = "&intPress=";
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	4ab3      	ldr	r2, [pc, #716]	; (80005c0 <sendDataESP+0x350>)
 80002f2:	ca03      	ldmia	r2!, {r0, r1}
 80002f4:	c303      	stmia	r3!, {r0, r1}
 80002f6:	8811      	ldrh	r1, [r2, #0]
 80002f8:	8019      	strh	r1, [r3, #0]
 80002fa:	7892      	ldrb	r2, [r2, #2]
 80002fc:	709a      	strb	r2, [r3, #2]
	char datetime[] = "&dtDateTime=";
 80002fe:	2370      	movs	r3, #112	; 0x70
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	4ab0      	ldr	r2, [pc, #704]	; (80005c4 <sendDataESP+0x354>)
 8000304:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000306:	c313      	stmia	r3!, {r0, r1, r4}
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	701a      	strb	r2, [r3, #0]
	char error[] = "&intStationError=";
 800030c:	235c      	movs	r3, #92	; 0x5c
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	4aad      	ldr	r2, [pc, #692]	; (80005c8 <sendDataESP+0x358>)
 8000312:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000314:	c313      	stmia	r3!, {r0, r1, r4}
 8000316:	6811      	ldr	r1, [r2, #0]
 8000318:	6019      	str	r1, [r3, #0]
 800031a:	8892      	ldrh	r2, [r2, #4]
 800031c:	809a      	strh	r2, [r3, #4]
	char tempDAT[] = ""; //URL-part + data
 800031e:	2358      	movs	r3, #88	; 0x58
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	4aaa      	ldr	r2, [pc, #680]	; (80005cc <sendDataESP+0x35c>)
 8000324:	7812      	ldrb	r2, [r2, #0]
 8000326:	701a      	strb	r2, [r3, #0]
	char humDAT[] = ""; //URL-part + data
 8000328:	2354      	movs	r3, #84	; 0x54
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	4aa7      	ldr	r2, [pc, #668]	; (80005cc <sendDataESP+0x35c>)
 800032e:	7812      	ldrb	r2, [r2, #0]
 8000330:	701a      	strb	r2, [r3, #0]
	char pressDAT[] = ""; //URL-part + data
 8000332:	2350      	movs	r3, #80	; 0x50
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	4aa5      	ldr	r2, [pc, #660]	; (80005cc <sendDataESP+0x35c>)
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	701a      	strb	r2, [r3, #0]
	char errorDAT[] = ""; //URL-part + data
 800033c:	234c      	movs	r3, #76	; 0x4c
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	4aa2      	ldr	r2, [pc, #648]	; (80005cc <sendDataESP+0x35c>)
 8000342:	7812      	ldrb	r2, [r2, #0]
 8000344:	701a      	strb	r2, [r3, #0]
	char end[] = " HTTP/1.1\r\nHost: server03.hammer-tech.eu\r\n Connection: close\r\n\r\n"; //Close connection with PHP-page
 8000346:	4ba2      	ldr	r3, [pc, #648]	; (80005d0 <sendDataESP+0x360>)
 8000348:	229c      	movs	r2, #156	; 0x9c
 800034a:	0052      	lsls	r2, r2, #1
 800034c:	18ba      	adds	r2, r7, r2
 800034e:	18d2      	adds	r2, r2, r3
 8000350:	4ba0      	ldr	r3, [pc, #640]	; (80005d4 <sendDataESP+0x364>)
 8000352:	0010      	movs	r0, r2
 8000354:	0019      	movs	r1, r3
 8000356:	2341      	movs	r3, #65	; 0x41
 8000358:	001a      	movs	r2, r3
 800035a:	f000 ffcf 	bl	80012fc <memcpy>
  for(;;)
  {
	  int i;
	  for(i = 0;i != sizeof(intTemp);i++){
 800035e:	2300      	movs	r3, #0
 8000360:	229a      	movs	r2, #154	; 0x9a
 8000362:	0052      	lsls	r2, r2, #1
 8000364:	18ba      	adds	r2, r7, r2
 8000366:	6013      	str	r3, [r2, #0]
 8000368:	e10e      	b.n	8000588 <sendDataESP+0x318>
	  	//Convert INT to Char array
		itoa(intTemp[i],tempDAT,10);
 800036a:	4b9b      	ldr	r3, [pc, #620]	; (80005d8 <sendDataESP+0x368>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	249a      	movs	r4, #154	; 0x9a
 8000370:	0064      	lsls	r4, r4, #1
 8000372:	193b      	adds	r3, r7, r4
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	18d3      	adds	r3, r2, r3
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2558      	movs	r5, #88	; 0x58
 800037e:	1979      	adds	r1, r7, r5
 8000380:	220a      	movs	r2, #10
 8000382:	0018      	movs	r0, r3
 8000384:	f000 ffb6 	bl	80012f4 <itoa>
		itoa(intHum[i],humDAT,10);
 8000388:	4b94      	ldr	r3, [pc, #592]	; (80005dc <sendDataESP+0x36c>)
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	193b      	adds	r3, r7, r4
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	18d3      	adds	r3, r2, r3
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2654      	movs	r6, #84	; 0x54
 8000398:	19b9      	adds	r1, r7, r6
 800039a:	220a      	movs	r2, #10
 800039c:	0018      	movs	r0, r3
 800039e:	f000 ffa9 	bl	80012f4 <itoa>
		itoa(intPress[i],pressDAT,10);
 80003a2:	4b8f      	ldr	r3, [pc, #572]	; (80005e0 <sendDataESP+0x370>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	193b      	adds	r3, r7, r4
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	18d3      	adds	r3, r2, r3
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2250      	movs	r2, #80	; 0x50
 80003b2:	18b9      	adds	r1, r7, r2
 80003b4:	220a      	movs	r2, #10
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 ff9c 	bl	80012f4 <itoa>
		itoa(intError,errorDAT,10);
 80003bc:	4b89      	ldr	r3, [pc, #548]	; (80005e4 <sendDataESP+0x374>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	214c      	movs	r1, #76	; 0x4c
 80003c2:	1879      	adds	r1, r7, r1
 80003c4:	220a      	movs	r2, #10
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 ff94 	bl	80012f4 <itoa>

		//Combine array data with URL-part & print result for debugging
		strcat(datetime,senDT[i]);
 80003cc:	4b86      	ldr	r3, [pc, #536]	; (80005e8 <sendDataESP+0x378>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	011b      	lsls	r3, r3, #4
 80003d6:	18d2      	adds	r2, r2, r3
 80003d8:	2370      	movs	r3, #112	; 0x70
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	0011      	movs	r1, r2
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 ff95 	bl	800130e <strcat>
		strcat(tempDEBUG,tempDAT);
 80003e4:	197a      	adds	r2, r7, r5
 80003e6:	2086      	movs	r0, #134	; 0x86
 80003e8:	0040      	lsls	r0, r0, #1
 80003ea:	0004      	movs	r4, r0
 80003ec:	183b      	adds	r3, r7, r0
 80003ee:	0011      	movs	r1, r2
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 ff8c 	bl	800130e <strcat>
		debugPrintln(&huart2, tempDEBUG);
 80003f6:	0020      	movs	r0, r4
 80003f8:	183a      	adds	r2, r7, r0
 80003fa:	4b7c      	ldr	r3, [pc, #496]	; (80005ec <sendDataESP+0x37c>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f7ff ff16 	bl	8000230 <debugPrintln>
		strcat(humDEBUG,humDAT);
 8000404:	19ba      	adds	r2, r7, r6
 8000406:	1c7b      	adds	r3, r7, #1
 8000408:	33ff      	adds	r3, #255	; 0xff
 800040a:	0011      	movs	r1, r2
 800040c:	0018      	movs	r0, r3
 800040e:	f000 ff7e 	bl	800130e <strcat>
		debugPrintln(&huart2, humDEBUG);
 8000412:	1c7a      	adds	r2, r7, #1
 8000414:	32ff      	adds	r2, #255	; 0xff
 8000416:	4b75      	ldr	r3, [pc, #468]	; (80005ec <sendDataESP+0x37c>)
 8000418:	0011      	movs	r1, r2
 800041a:	0018      	movs	r0, r3
 800041c:	f7ff ff08 	bl	8000230 <debugPrintln>
		strcat(pressDEBUG,pressDAT);
 8000420:	2450      	movs	r4, #80	; 0x50
 8000422:	193a      	adds	r2, r7, r4
 8000424:	20f0      	movs	r0, #240	; 0xf0
 8000426:	183b      	adds	r3, r7, r0
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f000 ff6f 	bl	800130e <strcat>
		debugPrintln(&huart2, pressDEBUG);
 8000430:	20f0      	movs	r0, #240	; 0xf0
 8000432:	183a      	adds	r2, r7, r0
 8000434:	4b6d      	ldr	r3, [pc, #436]	; (80005ec <sendDataESP+0x37c>)
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f7ff fef9 	bl	8000230 <debugPrintln>
		strcat(dtDEBUG,NTPdateTime);
 800043e:	4a6c      	ldr	r2, [pc, #432]	; (80005f0 <sendDataESP+0x380>)
 8000440:	208c      	movs	r0, #140	; 0x8c
 8000442:	0040      	lsls	r0, r0, #1
 8000444:	183b      	adds	r3, r7, r0
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f000 ff60 	bl	800130e <strcat>
		debugPrintln(&huart2, dtDEBUG);
 800044e:	208c      	movs	r0, #140	; 0x8c
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	183a      	adds	r2, r7, r0
 8000454:	4b65      	ldr	r3, [pc, #404]	; (80005ec <sendDataESP+0x37c>)
 8000456:	0011      	movs	r1, r2
 8000458:	0018      	movs	r0, r3
 800045a:	f7ff fee9 	bl	8000230 <debugPrintln>
		strcat(errorDEBUG,errorDAT);
 800045e:	214c      	movs	r1, #76	; 0x4c
 8000460:	187a      	adds	r2, r7, r1
 8000462:	20e8      	movs	r0, #232	; 0xe8
 8000464:	183b      	adds	r3, r7, r0
 8000466:	0011      	movs	r1, r2
 8000468:	0018      	movs	r0, r3
 800046a:	f000 ff50 	bl	800130e <strcat>
		debugPrintln(&huart2, errorDEBUG);
 800046e:	20e8      	movs	r0, #232	; 0xe8
 8000470:	183a      	adds	r2, r7, r0
 8000472:	4b5e      	ldr	r3, [pc, #376]	; (80005ec <sendDataESP+0x37c>)
 8000474:	0011      	movs	r1, r2
 8000476:	0018      	movs	r0, r3
 8000478:	f7ff feda 	bl	8000230 <debugPrintln>
		strcat(temp,tempDAT);
 800047c:	197a      	adds	r2, r7, r5
 800047e:	2598      	movs	r5, #152	; 0x98
 8000480:	197b      	adds	r3, r7, r5
 8000482:	0011      	movs	r1, r2
 8000484:	0018      	movs	r0, r3
 8000486:	f000 ff42 	bl	800130e <strcat>
		strcat(hum,humDAT);
 800048a:	19ba      	adds	r2, r7, r6
 800048c:	268c      	movs	r6, #140	; 0x8c
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f000 ff3b 	bl	800130e <strcat>
		strcat(press,pressDAT);
 8000498:	193a      	adds	r2, r7, r4
 800049a:	2080      	movs	r0, #128	; 0x80
 800049c:	183b      	adds	r3, r7, r0
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 ff34 	bl	800130e <strcat>
		strcat(error,errorDAT);
 80004a6:	214c      	movs	r1, #76	; 0x4c
 80004a8:	187a      	adds	r2, r7, r1
 80004aa:	215c      	movs	r1, #92	; 0x5c
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 ff2c 	bl	800130e <strcat>
		strcat(url,temp);
 80004b6:	197a      	adds	r2, r7, r5
 80004b8:	24a4      	movs	r4, #164	; 0xa4
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	0011      	movs	r1, r2
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 ff25 	bl	800130e <strcat>
		strcat(url,hum);
 80004c4:	19ba      	adds	r2, r7, r6
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 ff1f 	bl	800130e <strcat>
		strcat(url,press);
 80004d0:	2080      	movs	r0, #128	; 0x80
 80004d2:	183a      	adds	r2, r7, r0
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0011      	movs	r1, r2
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 ff18 	bl	800130e <strcat>
		strcat(url,datetime);
 80004de:	2370      	movs	r3, #112	; 0x70
 80004e0:	18fa      	adds	r2, r7, r3
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	0011      	movs	r1, r2
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 ff11 	bl	800130e <strcat>
		strcat(url,error);
 80004ec:	215c      	movs	r1, #92	; 0x5c
 80004ee:	187a      	adds	r2, r7, r1
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 ff0a 	bl	800130e <strcat>
		strcat(url,end);
 80004fa:	2308      	movs	r3, #8
 80004fc:	18fa      	adds	r2, r7, r3
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f000 ff03 	bl	800130e <strcat>


		debugPrintln(&huart2, url); //Print end result AT-command for debugging
 8000508:	193a      	adds	r2, r7, r4
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <sendDataESP+0x37c>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff fe8e 	bl	8000230 <debugPrintln>
		HAL_UART_Transmit(&huart1, (uint8_t *) url, strlen(url), 100); //Send AT-command
 8000514:	193b      	adds	r3, r7, r4
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff fdf6 	bl	8000108 <strlen>
 800051c:	0003      	movs	r3, r0
 800051e:	b29a      	uxth	r2, r3
 8000520:	1939      	adds	r1, r7, r4
 8000522:	4834      	ldr	r0, [pc, #208]	; (80005f4 <sendDataESP+0x384>)
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	f000 f8cd 	bl	80006c4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t *)rxData, 8, 100); //Get response (like OK or ERROR)
 800052a:	2494      	movs	r4, #148	; 0x94
 800052c:	0064      	lsls	r4, r4, #1
 800052e:	1939      	adds	r1, r7, r4
 8000530:	4830      	ldr	r0, [pc, #192]	; (80005f4 <sendDataESP+0x384>)
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	2208      	movs	r2, #8
 8000536:	f000 f96f 	bl	8000818 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)rxData, strlen(rxData) , 100); //Print response for debugging
 800053a:	193b      	adds	r3, r7, r4
 800053c:	0018      	movs	r0, r3
 800053e:	f7ff fde3 	bl	8000108 <strlen>
 8000542:	0003      	movs	r3, r0
 8000544:	b29a      	uxth	r2, r3
 8000546:	1939      	adds	r1, r7, r4
 8000548:	4828      	ldr	r0, [pc, #160]	; (80005ec <sendDataESP+0x37c>)
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	f000 f8ba 	bl	80006c4 <HAL_UART_Transmit>
		//Check if there was an error
		if (strstr(rxData, "ERROR") != NULL) {
 8000550:	4a29      	ldr	r2, [pc, #164]	; (80005f8 <sendDataESP+0x388>)
 8000552:	193b      	adds	r3, r7, r4
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fee6 	bl	8001328 <strstr>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d008      	beq.n	8000572 <sendDataESP+0x302>
		    intError = 1; //change error code to '1' for ESP related error
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <sendDataESP+0x374>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
		    debugPrintln(&huart2, "ERROR1"); // Message for debugging
 8000566:	4a25      	ldr	r2, [pc, #148]	; (80005fc <sendDataESP+0x38c>)
 8000568:	4b20      	ldr	r3, [pc, #128]	; (80005ec <sendDataESP+0x37c>)
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff fe5f 	bl	8000230 <debugPrintln>
		}
	 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	 osDelay(60000); //Delay for sending #1min
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <sendDataESP+0x390>)
 8000574:	0018      	movs	r0, r3
 8000576:	f000 faef 	bl	8000b58 <osDelay>
	  for(i = 0;i != sizeof(intTemp);i++){
 800057a:	229a      	movs	r2, #154	; 0x9a
 800057c:	0052      	lsls	r2, r2, #1
 800057e:	18bb      	adds	r3, r7, r2
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	3301      	adds	r3, #1
 8000584:	18ba      	adds	r2, r7, r2
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	229a      	movs	r2, #154	; 0x9a
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	18bb      	adds	r3, r7, r2
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b04      	cmp	r3, #4
 8000592:	d000      	beq.n	8000596 <sendDataESP+0x326>
 8000594:	e6e9      	b.n	800036a <sendDataESP+0xfa>
	  }
	  i = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	6013      	str	r3, [r2, #0]
  {
 800059c:	e6df      	b.n	800035e <sendDataESP+0xee>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	08001408 	.word	0x08001408
 80005a4:	08001418 	.word	0x08001418
 80005a8:	08001424 	.word	0x08001424
 80005ac:	08001430 	.word	0x08001430
 80005b0:	08001440 	.word	0x08001440
 80005b4:	08001448 	.word	0x08001448
 80005b8:	0800148c 	.word	0x0800148c
 80005bc:	08001498 	.word	0x08001498
 80005c0:	080014a4 	.word	0x080014a4
 80005c4:	080014b0 	.word	0x080014b0
 80005c8:	080014c0 	.word	0x080014c0
 80005cc:	080014d4 	.word	0x080014d4
 80005d0:	fffffed0 	.word	0xfffffed0
 80005d4:	080014d8 	.word	0x080014d8
 80005d8:	200007b8 	.word	0x200007b8
 80005dc:	200006e8 	.word	0x200006e8
 80005e0:	2000058c 	.word	0x2000058c
 80005e4:	200006c0 	.word	0x200006c0
 80005e8:	200006ec 	.word	0x200006ec
 80005ec:	20000734 	.word	0x20000734
 80005f0:	20000088 	.word	0x20000088
 80005f4:	2000063c 	.word	0x2000063c
 80005f8:	080013f8 	.word	0x080013f8
 80005fc:	08001400 	.word	0x08001400
 8000600:	0000ea60 	.word	0x0000ea60

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler+0x4>

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000614:	f000 f83a 	bl	800068c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000618:	f000 fd36 	bl	8001088 <xTaskGetSchedulerState>
 800061c:	0003      	movs	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d001      	beq.n	8000626 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000622:	f000 fe11 	bl	8001248 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490e      	ldr	r1, [pc, #56]	; (8000678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0b      	ldr	r4, [pc, #44]	; (8000684 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000662:	f7ff ffe3 	bl	800062c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000666:	f000 fe09 	bl	800127c <__libc_init_array>
/* Call the application's entry point.*/
  bl sendDataESP
 800066a:	f7ff fe01 	bl	8000270 <sendDataESP>

0800066e <LoopForever>:

LoopForever:
    b LoopForever
 800066e:	e7fe      	b.n	800066e <LoopForever>
  ldr   r0, =_estack
 8000670:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800067c:	080015d0 	.word	0x080015d0
  ldr r2, =_sbss
 8000680:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000684:	200007c0 	.word	0x200007c0

08000688 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_IRQHandler>
	...

0800068c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_IncTick+0x1c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	001a      	movs	r2, r3
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_IncTick+0x20>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	18d2      	adds	r2, r2, r3
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <HAL_IncTick+0x20>)
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000000 	.word	0x20000000
 80006ac:	200007bc 	.word	0x200007bc

080006b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <HAL_GetTick+0x10>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	200007bc 	.word	0x200007bc

080006c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af02      	add	r7, sp, #8
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	1dbb      	adds	r3, r7, #6
 80006d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d000      	beq.n	80006de <HAL_UART_Transmit+0x1a>
 80006dc:	e096      	b.n	800080c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <HAL_UART_Transmit+0x28>
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e08e      	b.n	800080e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	015b      	lsls	r3, r3, #5
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d109      	bne.n	8000710 <HAL_UART_Transmit+0x4c>
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d105      	bne.n	8000710 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	d001      	beq.n	8000710 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	e07e      	b.n	800080e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2274      	movs	r2, #116	; 0x74
 8000714:	5c9b      	ldrb	r3, [r3, r2]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d101      	bne.n	800071e <HAL_UART_Transmit+0x5a>
 800071a:	2302      	movs	r3, #2
 800071c:	e077      	b.n	800080e <HAL_UART_Transmit+0x14a>
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2274      	movs	r2, #116	; 0x74
 8000722:	2101      	movs	r1, #1
 8000724:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	2100      	movs	r1, #0
 800072c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2221      	movs	r2, #33	; 0x21
 8000732:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000734:	f7ff ffbc 	bl	80006b0 <HAL_GetTick>
 8000738:	0003      	movs	r3, r0
 800073a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1dba      	adds	r2, r7, #6
 8000740:	2150      	movs	r1, #80	; 0x50
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	1dba      	adds	r2, r7, #6
 800074a:	2152      	movs	r1, #82	; 0x52
 800074c:	8812      	ldrh	r2, [r2, #0]
 800074e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	689a      	ldr	r2, [r3, #8]
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	015b      	lsls	r3, r3, #5
 8000758:	429a      	cmp	r2, r3
 800075a:	d108      	bne.n	800076e <HAL_UART_Transmit+0xaa>
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d104      	bne.n	800076e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	e003      	b.n	8000776 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2274      	movs	r2, #116	; 0x74
 800077a:	2100      	movs	r1, #0
 800077c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800077e:	e02d      	b.n	80007dc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	0013      	movs	r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	f000 f91f 	bl	80009d0 <UART_WaitOnFlagUntilTimeout>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8000796:	2303      	movs	r3, #3
 8000798:	e039      	b.n	800080e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10b      	bne.n	80007b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	881a      	ldrh	r2, [r3, #0]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	05d2      	lsls	r2, r2, #23
 80007aa:	0dd2      	lsrs	r2, r2, #23
 80007ac:	b292      	uxth	r2, r2
 80007ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	3302      	adds	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	e008      	b.n	80007ca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	b292      	uxth	r2, r2
 80007c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	3301      	adds	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2252      	movs	r2, #82	; 0x52
 80007ce:	5a9b      	ldrh	r3, [r3, r2]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	3b01      	subs	r3, #1
 80007d4:	b299      	uxth	r1, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2252      	movs	r2, #82	; 0x52
 80007da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2252      	movs	r2, #82	; 0x52
 80007e0:	5a9b      	ldrh	r3, [r3, r2]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1cb      	bne.n	8000780 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	0013      	movs	r3, r2
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	f000 f8eb 	bl	80009d0 <UART_WaitOnFlagUntilTimeout>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80007fe:	2303      	movs	r3, #3
 8000800:	e005      	b.n	800080e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2220      	movs	r2, #32
 8000806:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	e000      	b.n	800080e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800080c:	2302      	movs	r3, #2
  }
}
 800080e:	0018      	movs	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	b008      	add	sp, #32
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af02      	add	r7, sp, #8
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	1dbb      	adds	r3, r7, #6
 8000826:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800082c:	2b20      	cmp	r3, #32
 800082e:	d000      	beq.n	8000832 <HAL_UART_Receive+0x1a>
 8000830:	e0c6      	b.n	80009c0 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d003      	beq.n	8000840 <HAL_UART_Receive+0x28>
 8000838:	1dbb      	adds	r3, r7, #6
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d101      	bne.n	8000844 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	e0be      	b.n	80009c2 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	689a      	ldr	r2, [r3, #8]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	015b      	lsls	r3, r3, #5
 800084c:	429a      	cmp	r2, r3
 800084e:	d109      	bne.n	8000864 <HAL_UART_Receive+0x4c>
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d105      	bne.n	8000864 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	d001      	beq.n	8000864 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e0ae      	b.n	80009c2 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2274      	movs	r2, #116	; 0x74
 8000868:	5c9b      	ldrb	r3, [r3, r2]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d101      	bne.n	8000872 <HAL_UART_Receive+0x5a>
 800086e:	2302      	movs	r3, #2
 8000870:	e0a7      	b.n	80009c2 <HAL_UART_Receive+0x1aa>
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2274      	movs	r2, #116	; 0x74
 8000876:	2101      	movs	r1, #1
 8000878:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	2100      	movs	r1, #0
 8000880:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2222      	movs	r2, #34	; 0x22
 8000886:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2200      	movs	r2, #0
 800088c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800088e:	f7ff ff0f 	bl	80006b0 <HAL_GetTick>
 8000892:	0003      	movs	r3, r0
 8000894:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	1dba      	adds	r2, r7, #6
 800089a:	2158      	movs	r1, #88	; 0x58
 800089c:	8812      	ldrh	r2, [r2, #0]
 800089e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	1dba      	adds	r2, r7, #6
 80008a4:	215a      	movs	r1, #90	; 0x5a
 80008a6:	8812      	ldrh	r2, [r2, #0]
 80008a8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	015b      	lsls	r3, r3, #5
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d10d      	bne.n	80008d2 <HAL_UART_Receive+0xba>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d104      	bne.n	80008c8 <HAL_UART_Receive+0xb0>
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	225c      	movs	r2, #92	; 0x5c
 80008c2:	4942      	ldr	r1, [pc, #264]	; (80009cc <HAL_UART_Receive+0x1b4>)
 80008c4:	5299      	strh	r1, [r3, r2]
 80008c6:	e01a      	b.n	80008fe <HAL_UART_Receive+0xe6>
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	225c      	movs	r2, #92	; 0x5c
 80008cc:	21ff      	movs	r1, #255	; 0xff
 80008ce:	5299      	strh	r1, [r3, r2]
 80008d0:	e015      	b.n	80008fe <HAL_UART_Receive+0xe6>
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10d      	bne.n	80008f6 <HAL_UART_Receive+0xde>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d104      	bne.n	80008ec <HAL_UART_Receive+0xd4>
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	225c      	movs	r2, #92	; 0x5c
 80008e6:	21ff      	movs	r1, #255	; 0xff
 80008e8:	5299      	strh	r1, [r3, r2]
 80008ea:	e008      	b.n	80008fe <HAL_UART_Receive+0xe6>
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	225c      	movs	r2, #92	; 0x5c
 80008f0:	217f      	movs	r1, #127	; 0x7f
 80008f2:	5299      	strh	r1, [r3, r2]
 80008f4:	e003      	b.n	80008fe <HAL_UART_Receive+0xe6>
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	225c      	movs	r2, #92	; 0x5c
 80008fa:	2100      	movs	r1, #0
 80008fc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80008fe:	2312      	movs	r3, #18
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	215c      	movs	r1, #92	; 0x5c
 8000906:	5a52      	ldrh	r2, [r2, r1]
 8000908:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	015b      	lsls	r3, r3, #5
 8000912:	429a      	cmp	r2, r3
 8000914:	d108      	bne.n	8000928 <HAL_UART_Receive+0x110>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d104      	bne.n	8000928 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	e003      	b.n	8000930 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2274      	movs	r2, #116	; 0x74
 8000934:	2100      	movs	r1, #0
 8000936:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8000938:	e037      	b.n	80009aa <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	0013      	movs	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	2120      	movs	r1, #32
 8000948:	f000 f842 	bl	80009d0 <UART_WaitOnFlagUntilTimeout>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8000950:	2303      	movs	r3, #3
 8000952:	e036      	b.n	80009c2 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d10e      	bne.n	8000978 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000960:	b29b      	uxth	r3, r3
 8000962:	2212      	movs	r2, #18
 8000964:	18ba      	adds	r2, r7, r2
 8000966:	8812      	ldrh	r2, [r2, #0]
 8000968:	4013      	ands	r3, r2
 800096a:	b29a      	uxth	r2, r3
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	3302      	adds	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	e00f      	b.n	8000998 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800097e:	b29b      	uxth	r3, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2212      	movs	r2, #18
 8000984:	18ba      	adds	r2, r7, r2
 8000986:	8812      	ldrh	r2, [r2, #0]
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	4013      	ands	r3, r2
 800098c:	b2da      	uxtb	r2, r3
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3301      	adds	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	225a      	movs	r2, #90	; 0x5a
 800099c:	5a9b      	ldrh	r3, [r3, r2]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3b01      	subs	r3, #1
 80009a2:	b299      	uxth	r1, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	225a      	movs	r2, #90	; 0x5a
 80009a8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	225a      	movs	r2, #90	; 0x5a
 80009ae:	5a9b      	ldrh	r3, [r3, r2]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1c1      	bne.n	800093a <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2220      	movs	r2, #32
 80009ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	e000      	b.n	80009c2 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 80009c0:	2302      	movs	r3, #2
  }
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b008      	add	sp, #32
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	000001ff 	.word	0x000001ff

080009d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80009e0:	e0a3      	b.n	8000b2a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80009e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009e4:	3301      	adds	r3, #1
 80009e6:	d100      	bne.n	80009ea <UART_WaitOnFlagUntilTimeout+0x1a>
 80009e8:	e09f      	b.n	8000b2a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009ea:	f7ff fe61 	bl	80006b0 <HAL_GetTick>
 80009ee:	0002      	movs	r2, r0
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d302      	bcc.n	8000a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80009fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d13d      	bne.n	8000a7c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a00:	f3ef 8310 	mrs	r3, PRIMASK
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8000a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a10:	f383 8810 	msr	PRIMASK, r3
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	494c      	ldr	r1, [pc, #304]	; (8000b54 <UART_WaitOnFlagUntilTimeout+0x184>)
 8000a22:	400a      	ands	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a2c:	f383 8810 	msr	PRIMASK, r3
}
 8000a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a32:	f3ef 8310 	mrs	r3, PRIMASK
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8000a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a42:	f383 8810 	msr	PRIMASK, r3
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2101      	movs	r1, #1
 8000a54:	438a      	bics	r2, r1
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a5e:	f383 8810 	msr	PRIMASK, r3
}
 8000a62:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2220      	movs	r2, #32
 8000a68:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2274      	movs	r2, #116	; 0x74
 8000a74:	2100      	movs	r1, #0
 8000a76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	e067      	b.n	8000b4c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2204      	movs	r2, #4
 8000a84:	4013      	ands	r3, r2
 8000a86:	d050      	beq.n	8000b2a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	69da      	ldr	r2, [r3, #28]
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	401a      	ands	r2, r3
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d146      	bne.n	8000b2a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2280      	movs	r2, #128	; 0x80
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8000aaa:	613b      	str	r3, [r7, #16]
  return(result);
 8000aac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f383 8810 	msr	PRIMASK, r3
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4923      	ldr	r1, [pc, #140]	; (8000b54 <UART_WaitOnFlagUntilTimeout+0x184>)
 8000ac8:	400a      	ands	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ace:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	f383 8810 	msr	PRIMASK, r3
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8000adc:	61fb      	str	r3, [r7, #28]
  return(result);
 8000ade:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	f383 8810 	msr	PRIMASK, r3
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2101      	movs	r1, #1
 8000afa:	438a      	bics	r2, r1
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	f383 8810 	msr	PRIMASK, r3
}
 8000b08:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2220      	movs	r2, #32
 8000b14:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2274      	movs	r2, #116	; 0x74
 8000b22:	2100      	movs	r1, #0
 8000b24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	e010      	b.n	8000b4c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4013      	ands	r3, r2
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	425a      	negs	r2, r3
 8000b3a:	4153      	adcs	r3, r2
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	001a      	movs	r2, r3
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d100      	bne.n	8000b4a <UART_WaitOnFlagUntilTimeout+0x17a>
 8000b48:	e74b      	b.n	80009e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b014      	add	sp, #80	; 0x50
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	fffffe5f 	.word	0xfffffe5f

08000b58 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000b60:	f3ef 8305 	mrs	r3, IPSR
 8000b64:	613b      	str	r3, [r7, #16]
  return(result);
 8000b66:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d109      	bne.n	8000b80 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8000b70:	60fb      	str	r3, [r7, #12]
  return(result);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d007      	beq.n	8000b88 <osDelay+0x30>
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <osDelay+0x4c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d103      	bne.n	8000b88 <osDelay+0x30>
    stat = osErrorISR;
 8000b80:	2306      	movs	r3, #6
 8000b82:	425b      	negs	r3, r3
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e008      	b.n	8000b9a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <osDelay+0x42>
      vTaskDelay(ticks);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 f887 	bl	8000ca8 <vTaskDelay>
    }
  }

  return (stat);
 8000b9a:	697b      	ldr	r3, [r7, #20]
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b006      	add	sp, #24
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000008c 	.word	0x2000008c

08000ba8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b004      	add	sp, #16
 8000bea:	bd80      	pop	{r7, pc}

08000bec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	d103      	bne.n	8000c0a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e00c      	b.n	8000c24 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3308      	adds	r3, #8
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e002      	b.n	8000c18 <vListInsert+0x2c>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d2f6      	bcs.n	8000c12 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b004      	add	sp, #16
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	6892      	ldr	r2, [r2, #8]
 8000c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	6852      	ldr	r2, [r2, #4]
 8000c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d103      	bne.n	8000c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1e5a      	subs	r2, r3, #1
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b004      	add	sp, #16
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d010      	beq.n	8000cdc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <vTaskDelay+0x48>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <vTaskDelay+0x1e>
 8000cc2:	b672      	cpsid	i
 8000cc4:	e7fe      	b.n	8000cc4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8000cc6:	f000 f815 	bl	8000cf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 f9f6 	bl	80010c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000cd4:	f000 f81a 	bl	8000d0c <xTaskResumeAll>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8000ce2:	f000 fa47 	bl	8001174 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000544 	.word	0x20000544

08000cf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <vTaskSuspendAll+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <vTaskSuspendAll+0x14>)
 8000d00:	601a      	str	r2, [r3, #0]
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000544 	.word	0x20000544

08000d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <xTaskResumeAll+0xf8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <xTaskResumeAll+0x1a>
 8000d22:	b672      	cpsid	i
 8000d24:	e7fe      	b.n	8000d24 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000d26:	f000 fa35 	bl	8001194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000d2a:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <xTaskResumeAll+0xf8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	1e5a      	subs	r2, r3, #1
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <xTaskResumeAll+0xf8>)
 8000d32:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d34:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <xTaskResumeAll+0xf8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d15b      	bne.n	8000df4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <xTaskResumeAll+0xfc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d057      	beq.n	8000df4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d44:	e02f      	b.n	8000da6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <xTaskResumeAll+0x100>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3318      	adds	r3, #24
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff ff80 	bl	8000c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff ff7b 	bl	8000c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <xTaskResumeAll+0x104>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d903      	bls.n	8000d76 <xTaskResumeAll+0x6a>
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <xTaskResumeAll+0x104>)
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	189b      	adds	r3, r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <xTaskResumeAll+0x108>)
 8000d84:	189a      	adds	r2, r3, r2
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	0010      	movs	r0, r2
 8000d8e:	f7ff ff0b 	bl	8000ba8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <xTaskResumeAll+0x10c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d302      	bcc.n	8000da6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <xTaskResumeAll+0x110>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <xTaskResumeAll+0x100>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1cb      	bne.n	8000d46 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000db4:	f000 f944 	bl	8001040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <xTaskResumeAll+0x114>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00f      	beq.n	8000de4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000dc4:	f000 f82e 	bl	8000e24 <xTaskIncrementTick>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d002      	beq.n	8000dd2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <xTaskResumeAll+0x110>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f2      	bne.n	8000dc4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <xTaskResumeAll+0x114>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <xTaskResumeAll+0x110>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000df0:	f000 f9c0 	bl	8001174 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000df4:	f000 f9e0 	bl	80011b8 <vPortExitCritical>

	return xAlreadyYielded;
 8000df8:	68bb      	ldr	r3, [r7, #8]
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	20000544 	.word	0x20000544
 8000e08:	20000524 	.word	0x20000524
 8000e0c:	200004fc 	.word	0x200004fc
 8000e10:	2000052c 	.word	0x2000052c
 8000e14:	20000094 	.word	0x20000094
 8000e18:	20000090 	.word	0x20000090
 8000e1c:	20000538 	.word	0x20000538
 8000e20:	20000534 	.word	0x20000534

08000e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <xTaskIncrementTick+0x13c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d000      	beq.n	8000e38 <xTaskIncrementTick+0x14>
 8000e36:	e083      	b.n	8000f40 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000e38:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <xTaskIncrementTick+0x140>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000e40:	4b48      	ldr	r3, [pc, #288]	; (8000f64 <xTaskIncrementTick+0x140>)
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d117      	bne.n	8000e7c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8000e4c:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <xTaskIncrementTick+0x144>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <xTaskIncrementTick+0x36>
 8000e56:	b672      	cpsid	i
 8000e58:	e7fe      	b.n	8000e58 <xTaskIncrementTick+0x34>
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <xTaskIncrementTick+0x144>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <xTaskIncrementTick+0x148>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <xTaskIncrementTick+0x144>)
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <xTaskIncrementTick+0x148>)
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <xTaskIncrementTick+0x14c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	4b3e      	ldr	r3, [pc, #248]	; (8000f70 <xTaskIncrementTick+0x14c>)
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	f000 f8e2 	bl	8001040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <xTaskIncrementTick+0x150>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d34e      	bcc.n	8000f24 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <xTaskIncrementTick+0x144>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <xTaskIncrementTick+0x70>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <xTaskIncrementTick+0x72>
 8000e94:	2300      	movs	r3, #0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d004      	beq.n	8000ea4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <xTaskIncrementTick+0x150>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	601a      	str	r2, [r3, #0]
					break;
 8000ea2:	e03f      	b.n	8000f24 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ea4:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <xTaskIncrementTick+0x144>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d203      	bcs.n	8000ec4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <xTaskIncrementTick+0x150>)
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
						break;
 8000ec2:	e02f      	b.n	8000f24 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fec5 	bl	8000c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	3318      	adds	r3, #24
 8000eda:	0018      	movs	r0, r3
 8000edc:	f7ff febc 	bl	8000c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <xTaskIncrementTick+0x154>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d903      	bls.n	8000ef4 <xTaskIncrementTick+0xd0>
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <xTaskIncrementTick+0x154>)
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef8:	0013      	movs	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	189b      	adds	r3, r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <xTaskIncrementTick+0x158>)
 8000f02:	189a      	adds	r2, r3, r2
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	3304      	adds	r3, #4
 8000f08:	0019      	movs	r1, r3
 8000f0a:	0010      	movs	r0, r2
 8000f0c:	f7ff fe4c 	bl	8000ba8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <xTaskIncrementTick+0x15c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3b3      	bcc.n	8000e86 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f22:	e7b0      	b.n	8000e86 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <xTaskIncrementTick+0x15c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2a:	4914      	ldr	r1, [pc, #80]	; (8000f7c <xTaskIncrementTick+0x158>)
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	189b      	adds	r3, r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	585b      	ldr	r3, [r3, r1]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d907      	bls.n	8000f4a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e004      	b.n	8000f4a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <xTaskIncrementTick+0x160>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <xTaskIncrementTick+0x160>)
 8000f48:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <xTaskIncrementTick+0x164>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000f56:	697b      	ldr	r3, [r7, #20]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b006      	add	sp, #24
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000544 	.word	0x20000544
 8000f64:	20000528 	.word	0x20000528
 8000f68:	200004f4 	.word	0x200004f4
 8000f6c:	200004f8 	.word	0x200004f8
 8000f70:	2000053c 	.word	0x2000053c
 8000f74:	20000540 	.word	0x20000540
 8000f78:	2000052c 	.word	0x2000052c
 8000f7c:	20000094 	.word	0x20000094
 8000f80:	20000090 	.word	0x20000090
 8000f84:	20000534 	.word	0x20000534
 8000f88:	20000538 	.word	0x20000538

08000f8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <vTaskSwitchContext+0x9c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <vTaskSwitchContext+0xa0>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000fa0:	e03d      	b.n	800101e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <vTaskSwitchContext+0xa0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <vTaskSwitchContext+0xa4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	e007      	b.n	8000fc0 <vTaskSwitchContext+0x34>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <vTaskSwitchContext+0x2e>
 8000fb6:	b672      	cpsid	i
 8000fb8:	e7fe      	b.n	8000fb8 <vTaskSwitchContext+0x2c>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	491c      	ldr	r1, [pc, #112]	; (8001034 <vTaskSwitchContext+0xa8>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	189b      	adds	r3, r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	585b      	ldr	r3, [r3, r1]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0ee      	beq.n	8000fb0 <vTaskSwitchContext+0x24>
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	189b      	adds	r3, r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4a15      	ldr	r2, [pc, #84]	; (8001034 <vTaskSwitchContext+0xa8>)
 8000fde:	189b      	adds	r3, r3, r2
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d104      	bne.n	8001002 <vTaskSwitchContext+0x76>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <vTaskSwitchContext+0xac>)
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <vTaskSwitchContext+0xa4>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <vTaskSwitchContext+0xac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3354      	adds	r3, #84	; 0x54
 8001018:	001a      	movs	r2, r3
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <vTaskSwitchContext+0xb0>)
 800101c:	601a      	str	r2, [r3, #0]
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	20000544 	.word	0x20000544
 800102c:	20000538 	.word	0x20000538
 8001030:	2000052c 	.word	0x2000052c
 8001034:	20000094 	.word	0x20000094
 8001038:	20000090 	.word	0x20000090
 800103c:	20000008 	.word	0x20000008

08001040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <prvResetNextTaskUnblockTime+0x40>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <prvResetNextTaskUnblockTime+0x14>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <prvResetNextTaskUnblockTime+0x16>
 8001054:	2300      	movs	r3, #0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <prvResetNextTaskUnblockTime+0x44>)
 800105c:	2201      	movs	r2, #1
 800105e:	4252      	negs	r2, r2
 8001060:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001062:	e008      	b.n	8001076 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <prvResetNextTaskUnblockTime+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <prvResetNextTaskUnblockTime+0x44>)
 8001074:	601a      	str	r2, [r3, #0]
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	200004f4 	.word	0x200004f4
 8001084:	20000540 	.word	0x20000540

08001088 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <xTaskGetSchedulerState+0x30>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	e008      	b.n	80010ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <xTaskGetSchedulerState+0x34>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80010a4:	2302      	movs	r3, #2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	e001      	b.n	80010ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80010ae:	687b      	ldr	r3, [r7, #4]
	}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000530 	.word	0x20000530
 80010bc:	20000544 	.word	0x20000544

080010c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <prvAddCurrentTaskToDelayedList+0x90>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <prvAddCurrentTaskToDelayedList+0x94>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3304      	adds	r3, #4
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff fdbe 	bl	8000c58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3301      	adds	r3, #1
 80010e0:	d10b      	bne.n	80010fa <prvAddCurrentTaskToDelayedList+0x3a>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <prvAddCurrentTaskToDelayedList+0x94>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	1d1a      	adds	r2, r3, #4
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <prvAddCurrentTaskToDelayedList+0x98>)
 80010f0:	0011      	movs	r1, r2
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff fd58 	bl	8000ba8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80010f8:	e026      	b.n	8001148 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	18d3      	adds	r3, r2, r3
 8001100:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <prvAddCurrentTaskToDelayedList+0x94>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d209      	bcs.n	8001126 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <prvAddCurrentTaskToDelayedList+0x9c>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <prvAddCurrentTaskToDelayedList+0x94>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3304      	adds	r3, #4
 800111c:	0019      	movs	r1, r3
 800111e:	0010      	movs	r0, r2
 8001120:	f7ff fd64 	bl	8000bec <vListInsert>
}
 8001124:	e010      	b.n	8001148 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <prvAddCurrentTaskToDelayedList+0x94>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3304      	adds	r3, #4
 8001130:	0019      	movs	r1, r3
 8001132:	0010      	movs	r0, r2
 8001134:	f7ff fd5a 	bl	8000bec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	429a      	cmp	r2, r3
 8001140:	d202      	bcs.n	8001148 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000528 	.word	0x20000528
 8001154:	20000090 	.word	0x20000090
 8001158:	20000510 	.word	0x20000510
 800115c:	200004f8 	.word	0x200004f8
 8001160:	200004f4 	.word	0x200004f4
 8001164:	20000540 	.word	0x20000540

08001168 <SVC_Handler>:
	}
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <vPortYield+0x1c>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	0552      	lsls	r2, r2, #21
 800117e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8001180:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001184:	f3bf 8f6f 	isb	sy
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	e000ed04 	.word	0xe000ed04

08001194 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8001198:	b672      	cpsid	i
    uxCriticalNesting++;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <vPortEnterCritical+0x20>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <vPortEnterCritical+0x20>)
 80011a2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80011a4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80011a8:	f3bf 8f6f 	isb	sy
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	20000004 	.word	0x20000004

080011b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <vPortExitCritical+0x2c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <vPortExitCritical+0x10>
 80011c4:	b672      	cpsid	i
 80011c6:	e7fe      	b.n	80011c6 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <vPortExitCritical+0x2c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <vPortExitCritical+0x2c>)
 80011d0:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <vPortExitCritical+0x2c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d100      	bne.n	80011dc <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80011da:	b662      	cpsie	i
    }
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	20000004 	.word	0x20000004

080011e8 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80011e8:	f3ef 8010 	mrs	r0, PRIMASK
 80011ec:	b672      	cpsid	i
 80011ee:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	0018      	movs	r0, r3

080011f4 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80011f4:	f380 8810 	msr	PRIMASK, r0
 80011f8:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	0000      	movs	r0, r0
	...

08001200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001200:	f3ef 8009 	mrs	r0, PSP
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <pxCurrentTCBConst>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	3820      	subs	r0, #32
 800120a:	6010      	str	r0, [r2, #0]
 800120c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800120e:	4644      	mov	r4, r8
 8001210:	464d      	mov	r5, r9
 8001212:	4656      	mov	r6, sl
 8001214:	465f      	mov	r7, fp
 8001216:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001218:	b508      	push	{r3, lr}
 800121a:	b672      	cpsid	i
 800121c:	f7ff feb6 	bl	8000f8c <vTaskSwitchContext>
 8001220:	b662      	cpsie	i
 8001222:	bc0c      	pop	{r2, r3}
 8001224:	6811      	ldr	r1, [r2, #0]
 8001226:	6808      	ldr	r0, [r1, #0]
 8001228:	3010      	adds	r0, #16
 800122a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800122c:	46a0      	mov	r8, r4
 800122e:	46a9      	mov	r9, r5
 8001230:	46b2      	mov	sl, r6
 8001232:	46bb      	mov	fp, r7
 8001234:	f380 8809 	msr	PSP, r0
 8001238:	3820      	subs	r0, #32
 800123a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800123c:	4718      	bx	r3
 800123e:	46c0      	nop			; (mov r8, r8)

08001240 <pxCurrentTCBConst>:
 8001240:	20000090 	.word	0x20000090
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46c0      	nop			; (mov r8, r8)

08001248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800124e:	f7ff ffcb 	bl	80011e8 <ulSetInterruptMaskFromISR>
 8001252:	0003      	movs	r3, r0
 8001254:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001256:	f7ff fde5 	bl	8000e24 <xTaskIncrementTick>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d003      	beq.n	8001266 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <xPortSysTickHandler+0x30>)
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	0552      	lsls	r2, r2, #21
 8001264:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ffc3 	bl	80011f4 <vClearInterruptMaskFromISR>
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	e000ed04 	.word	0xe000ed04

0800127c <__libc_init_array>:
 800127c:	b570      	push	{r4, r5, r6, lr}
 800127e:	2600      	movs	r6, #0
 8001280:	4d0c      	ldr	r5, [pc, #48]	; (80012b4 <__libc_init_array+0x38>)
 8001282:	4c0d      	ldr	r4, [pc, #52]	; (80012b8 <__libc_init_array+0x3c>)
 8001284:	1b64      	subs	r4, r4, r5
 8001286:	10a4      	asrs	r4, r4, #2
 8001288:	42a6      	cmp	r6, r4
 800128a:	d109      	bne.n	80012a0 <__libc_init_array+0x24>
 800128c:	2600      	movs	r6, #0
 800128e:	f000 f897 	bl	80013c0 <_init>
 8001292:	4d0a      	ldr	r5, [pc, #40]	; (80012bc <__libc_init_array+0x40>)
 8001294:	4c0a      	ldr	r4, [pc, #40]	; (80012c0 <__libc_init_array+0x44>)
 8001296:	1b64      	subs	r4, r4, r5
 8001298:	10a4      	asrs	r4, r4, #2
 800129a:	42a6      	cmp	r6, r4
 800129c:	d105      	bne.n	80012aa <__libc_init_array+0x2e>
 800129e:	bd70      	pop	{r4, r5, r6, pc}
 80012a0:	00b3      	lsls	r3, r6, #2
 80012a2:	58eb      	ldr	r3, [r5, r3]
 80012a4:	4798      	blx	r3
 80012a6:	3601      	adds	r6, #1
 80012a8:	e7ee      	b.n	8001288 <__libc_init_array+0xc>
 80012aa:	00b3      	lsls	r3, r6, #2
 80012ac:	58eb      	ldr	r3, [r5, r3]
 80012ae:	4798      	blx	r3
 80012b0:	3601      	adds	r6, #1
 80012b2:	e7f2      	b.n	800129a <__libc_init_array+0x1e>
 80012b4:	080015c8 	.word	0x080015c8
 80012b8:	080015c8 	.word	0x080015c8
 80012bc:	080015c8 	.word	0x080015c8
 80012c0:	080015cc 	.word	0x080015cc

080012c4 <__itoa>:
 80012c4:	1e93      	subs	r3, r2, #2
 80012c6:	b510      	push	{r4, lr}
 80012c8:	000c      	movs	r4, r1
 80012ca:	2b22      	cmp	r3, #34	; 0x22
 80012cc:	d904      	bls.n	80012d8 <__itoa+0x14>
 80012ce:	2300      	movs	r3, #0
 80012d0:	001c      	movs	r4, r3
 80012d2:	700b      	strb	r3, [r1, #0]
 80012d4:	0020      	movs	r0, r4
 80012d6:	bd10      	pop	{r4, pc}
 80012d8:	2a0a      	cmp	r2, #10
 80012da:	d109      	bne.n	80012f0 <__itoa+0x2c>
 80012dc:	2800      	cmp	r0, #0
 80012de:	da07      	bge.n	80012f0 <__itoa+0x2c>
 80012e0:	232d      	movs	r3, #45	; 0x2d
 80012e2:	700b      	strb	r3, [r1, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	4240      	negs	r0, r0
 80012e8:	1861      	adds	r1, r4, r1
 80012ea:	f000 f833 	bl	8001354 <__utoa>
 80012ee:	e7f1      	b.n	80012d4 <__itoa+0x10>
 80012f0:	2100      	movs	r1, #0
 80012f2:	e7f9      	b.n	80012e8 <__itoa+0x24>

080012f4 <itoa>:
 80012f4:	b510      	push	{r4, lr}
 80012f6:	f7ff ffe5 	bl	80012c4 <__itoa>
 80012fa:	bd10      	pop	{r4, pc}

080012fc <memcpy>:
 80012fc:	2300      	movs	r3, #0
 80012fe:	b510      	push	{r4, lr}
 8001300:	429a      	cmp	r2, r3
 8001302:	d100      	bne.n	8001306 <memcpy+0xa>
 8001304:	bd10      	pop	{r4, pc}
 8001306:	5ccc      	ldrb	r4, [r1, r3]
 8001308:	54c4      	strb	r4, [r0, r3]
 800130a:	3301      	adds	r3, #1
 800130c:	e7f8      	b.n	8001300 <memcpy+0x4>

0800130e <strcat>:
 800130e:	0002      	movs	r2, r0
 8001310:	b510      	push	{r4, lr}
 8001312:	7813      	ldrb	r3, [r2, #0]
 8001314:	0014      	movs	r4, r2
 8001316:	3201      	adds	r2, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1fa      	bne.n	8001312 <strcat+0x4>
 800131c:	5cca      	ldrb	r2, [r1, r3]
 800131e:	54e2      	strb	r2, [r4, r3]
 8001320:	3301      	adds	r3, #1
 8001322:	2a00      	cmp	r2, #0
 8001324:	d1fa      	bne.n	800131c <strcat+0xe>
 8001326:	bd10      	pop	{r4, pc}

08001328 <strstr>:
 8001328:	780a      	ldrb	r2, [r1, #0]
 800132a:	b530      	push	{r4, r5, lr}
 800132c:	2a00      	cmp	r2, #0
 800132e:	d10c      	bne.n	800134a <strstr+0x22>
 8001330:	bd30      	pop	{r4, r5, pc}
 8001332:	429a      	cmp	r2, r3
 8001334:	d108      	bne.n	8001348 <strstr+0x20>
 8001336:	2301      	movs	r3, #1
 8001338:	5ccc      	ldrb	r4, [r1, r3]
 800133a:	2c00      	cmp	r4, #0
 800133c:	d0f8      	beq.n	8001330 <strstr+0x8>
 800133e:	5cc5      	ldrb	r5, [r0, r3]
 8001340:	42a5      	cmp	r5, r4
 8001342:	d101      	bne.n	8001348 <strstr+0x20>
 8001344:	3301      	adds	r3, #1
 8001346:	e7f7      	b.n	8001338 <strstr+0x10>
 8001348:	3001      	adds	r0, #1
 800134a:	7803      	ldrb	r3, [r0, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f0      	bne.n	8001332 <strstr+0xa>
 8001350:	0018      	movs	r0, r3
 8001352:	e7ed      	b.n	8001330 <strstr+0x8>

08001354 <__utoa>:
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	0016      	movs	r6, r2
 8001358:	b08d      	sub	sp, #52	; 0x34
 800135a:	0007      	movs	r7, r0
 800135c:	000c      	movs	r4, r1
 800135e:	2225      	movs	r2, #37	; 0x25
 8001360:	4916      	ldr	r1, [pc, #88]	; (80013bc <__utoa+0x68>)
 8001362:	a802      	add	r0, sp, #8
 8001364:	f7ff ffca 	bl	80012fc <memcpy>
 8001368:	1eb3      	subs	r3, r6, #2
 800136a:	2500      	movs	r5, #0
 800136c:	2b22      	cmp	r3, #34	; 0x22
 800136e:	d820      	bhi.n	80013b2 <__utoa+0x5e>
 8001370:	1e63      	subs	r3, r4, #1
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	ab02      	add	r3, sp, #8
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	0038      	movs	r0, r7
 800137a:	0031      	movs	r1, r6
 800137c:	f7fe ff52 	bl	8000224 <__aeabi_uidivmod>
 8001380:	000b      	movs	r3, r1
 8001382:	9a01      	ldr	r2, [sp, #4]
 8001384:	0029      	movs	r1, r5
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	9a00      	ldr	r2, [sp, #0]
 800138a:	3501      	adds	r5, #1
 800138c:	5553      	strb	r3, [r2, r5]
 800138e:	003b      	movs	r3, r7
 8001390:	0007      	movs	r7, r0
 8001392:	429e      	cmp	r6, r3
 8001394:	d9f0      	bls.n	8001378 <__utoa+0x24>
 8001396:	2300      	movs	r3, #0
 8001398:	0022      	movs	r2, r4
 800139a:	5563      	strb	r3, [r4, r5]
 800139c:	000b      	movs	r3, r1
 800139e:	1ac8      	subs	r0, r1, r3
 80013a0:	4283      	cmp	r3, r0
 80013a2:	dd08      	ble.n	80013b6 <__utoa+0x62>
 80013a4:	7810      	ldrb	r0, [r2, #0]
 80013a6:	5ce5      	ldrb	r5, [r4, r3]
 80013a8:	7015      	strb	r5, [r2, #0]
 80013aa:	54e0      	strb	r0, [r4, r3]
 80013ac:	3201      	adds	r2, #1
 80013ae:	3b01      	subs	r3, #1
 80013b0:	e7f5      	b.n	800139e <__utoa+0x4a>
 80013b2:	7025      	strb	r5, [r4, #0]
 80013b4:	002c      	movs	r4, r5
 80013b6:	0020      	movs	r0, r4
 80013b8:	b00d      	add	sp, #52	; 0x34
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013bc:	080015a0 	.word	0x080015a0

080013c0 <_init>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c6:	bc08      	pop	{r3}
 80013c8:	469e      	mov	lr, r3
 80013ca:	4770      	bx	lr

080013cc <_fini>:
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d2:	bc08      	pop	{r3}
 80013d4:	469e      	mov	lr, r3
 80013d6:	4770      	bx	lr
