
FreeRTOS_Weerstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000079c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800085c  0800085c  0001085c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008bc  080008bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080008bc  080008bc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008bc  080008bc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008bc  080008bc  000108bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008c0  080008c0  000108c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080008c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000068  0800092c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800092c  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9af  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e2  00000000  00000000  0002ba3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ef8  00000000  00000000  0002e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a795  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fd19  00000000  00000000  0003ab1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aa836  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002530  00000000  00000000  000aa88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000844 	.word	0x08000844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08000844 	.word	0x08000844

08000108 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000110:	687b      	ldr	r3, [r7, #4]
 8000112:	681b      	ldr	r3, [r3, #0]
 8000114:	4a04      	ldr	r2, [pc, #16]	; (8000128 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000116:	4293      	cmp	r3, r2
 8000118:	d101      	bne.n	800011e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800011a:	f000 f847 	bl	80001ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800011e:	46c0      	nop			; (mov r8, r8)
 8000120:	46bd      	mov	sp, r7
 8000122:	b002      	add	sp, #8
 8000124:	bd80      	pop	{r7, pc}
 8000126:	46c0      	nop			; (mov r8, r8)
 8000128:	40014800 	.word	0x40014800

0800012c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800012c:	b580      	push	{r7, lr}
 800012e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000130:	e7fe      	b.n	8000130 <NMI_Handler+0x4>

08000132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000132:	b580      	push	{r7, lr}
 8000134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000136:	e7fe      	b.n	8000136 <HardFault_Handler+0x4>

08000138 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000138:	b580      	push	{r7, lr}
 800013a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800013c:	4b03      	ldr	r3, [pc, #12]	; (800014c <TIM17_IRQHandler+0x14>)
 800013e:	0018      	movs	r0, r3
 8000140:	f000 f846 	bl	80001d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000144:	46c0      	nop			; (mov r8, r8)
 8000146:	46bd      	mov	sp, r7
 8000148:	bd80      	pop	{r7, pc}
 800014a:	46c0      	nop			; (mov r8, r8)
 800014c:	2000050c 	.word	0x2000050c

08000150 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000154:	46c0      	nop			; (mov r8, r8)
 8000156:	46bd      	mov	sp, r7
 8000158:	bd80      	pop	{r7, pc}
	...

0800015c <Reset_Handler>:
 800015c:	480c      	ldr	r0, [pc, #48]	; (8000190 <LoopForever+0x2>)
 800015e:	4685      	mov	sp, r0
 8000160:	480c      	ldr	r0, [pc, #48]	; (8000194 <LoopForever+0x6>)
 8000162:	490d      	ldr	r1, [pc, #52]	; (8000198 <LoopForever+0xa>)
 8000164:	4a0d      	ldr	r2, [pc, #52]	; (800019c <LoopForever+0xe>)
 8000166:	2300      	movs	r3, #0
 8000168:	e002      	b.n	8000170 <LoopCopyDataInit>

0800016a <CopyDataInit>:
 800016a:	58d4      	ldr	r4, [r2, r3]
 800016c:	50c4      	str	r4, [r0, r3]
 800016e:	3304      	adds	r3, #4

08000170 <LoopCopyDataInit>:
 8000170:	18c4      	adds	r4, r0, r3
 8000172:	428c      	cmp	r4, r1
 8000174:	d3f9      	bcc.n	800016a <CopyDataInit>
 8000176:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <LoopForever+0x12>)
 8000178:	4c0a      	ldr	r4, [pc, #40]	; (80001a4 <LoopForever+0x16>)
 800017a:	2300      	movs	r3, #0
 800017c:	e001      	b.n	8000182 <LoopFillZerobss>

0800017e <FillZerobss>:
 800017e:	6013      	str	r3, [r2, #0]
 8000180:	3204      	adds	r2, #4

08000182 <LoopFillZerobss>:
 8000182:	42a2      	cmp	r2, r4
 8000184:	d3fb      	bcc.n	800017e <FillZerobss>
 8000186:	f7ff ffe3 	bl	8000150 <SystemInit>
 800018a:	f000 fb37 	bl	80007fc <__libc_init_array>

0800018e <LoopForever>:
 800018e:	e7fe      	b.n	800018e <LoopForever>
 8000190:	20002000 	.word	0x20002000
 8000194:	20000000 	.word	0x20000000
 8000198:	20000068 	.word	0x20000068
 800019c:	080008c4 	.word	0x080008c4
 80001a0:	20000068 	.word	0x20000068
 80001a4:	20000558 	.word	0x20000558

080001a8 <ADC1_IRQHandler>:
 80001a8:	e7fe      	b.n	80001a8 <ADC1_IRQHandler>
	...

080001ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <HAL_IncTick+0x1c>)
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	001a      	movs	r2, r3
 80001b6:	4b05      	ldr	r3, [pc, #20]	; (80001cc <HAL_IncTick+0x20>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	18d2      	adds	r2, r2, r3
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <HAL_IncTick+0x20>)
 80001be:	601a      	str	r2, [r3, #0]
}
 80001c0:	46c0      	nop			; (mov r8, r8)
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	46c0      	nop			; (mov r8, r8)
 80001c8:	20000000 	.word	0x20000000
 80001cc:	20000554 	.word	0x20000554

080001d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	691b      	ldr	r3, [r3, #16]
 80001de:	2202      	movs	r2, #2
 80001e0:	4013      	ands	r3, r2
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d124      	bne.n	8000230 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	68db      	ldr	r3, [r3, #12]
 80001ec:	2202      	movs	r2, #2
 80001ee:	4013      	ands	r3, r2
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d11d      	bne.n	8000230 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2203      	movs	r2, #3
 80001fa:	4252      	negs	r2, r2
 80001fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2201      	movs	r2, #1
 8000202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	2203      	movs	r2, #3
 800020c:	4013      	ands	r3, r2
 800020e:	d004      	beq.n	800021a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	0018      	movs	r0, r3
 8000214:	f000 f8fa 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8000218:	e007      	b.n	800022a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	0018      	movs	r0, r3
 800021e:	f000 f8ed 	bl	80003fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	0018      	movs	r0, r3
 8000226:	f000 f8f9 	bl	800041c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2200      	movs	r2, #0
 800022e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	691b      	ldr	r3, [r3, #16]
 8000236:	2204      	movs	r2, #4
 8000238:	4013      	ands	r3, r2
 800023a:	2b04      	cmp	r3, #4
 800023c:	d125      	bne.n	800028a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	2204      	movs	r2, #4
 8000246:	4013      	ands	r3, r2
 8000248:	2b04      	cmp	r3, #4
 800024a:	d11e      	bne.n	800028a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2205      	movs	r2, #5
 8000252:	4252      	negs	r2, r2
 8000254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2202      	movs	r2, #2
 800025a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	699a      	ldr	r2, [r3, #24]
 8000262:	23c0      	movs	r3, #192	; 0xc0
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4013      	ands	r3, r2
 8000268:	d004      	beq.n	8000274 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	0018      	movs	r0, r3
 800026e:	f000 f8cd 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8000272:	e007      	b.n	8000284 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f000 f8c0 	bl	80003fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	0018      	movs	r0, r3
 8000280:	f000 f8cc 	bl	800041c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	691b      	ldr	r3, [r3, #16]
 8000290:	2208      	movs	r2, #8
 8000292:	4013      	ands	r3, r2
 8000294:	2b08      	cmp	r3, #8
 8000296:	d124      	bne.n	80002e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	2208      	movs	r2, #8
 80002a0:	4013      	ands	r3, r2
 80002a2:	2b08      	cmp	r3, #8
 80002a4:	d11d      	bne.n	80002e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2209      	movs	r2, #9
 80002ac:	4252      	negs	r2, r2
 80002ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2204      	movs	r2, #4
 80002b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	69db      	ldr	r3, [r3, #28]
 80002bc:	2203      	movs	r2, #3
 80002be:	4013      	ands	r3, r2
 80002c0:	d004      	beq.n	80002cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8a1 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 80002ca:	e007      	b.n	80002dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 f894 	bl	80003fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 f8a0 	bl	800041c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2200      	movs	r2, #0
 80002e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	691b      	ldr	r3, [r3, #16]
 80002e8:	2210      	movs	r2, #16
 80002ea:	4013      	ands	r3, r2
 80002ec:	2b10      	cmp	r3, #16
 80002ee:	d125      	bne.n	800033c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	2210      	movs	r2, #16
 80002f8:	4013      	ands	r3, r2
 80002fa:	2b10      	cmp	r3, #16
 80002fc:	d11e      	bne.n	800033c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2211      	movs	r2, #17
 8000304:	4252      	negs	r2, r2
 8000306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2208      	movs	r2, #8
 800030c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	69da      	ldr	r2, [r3, #28]
 8000314:	23c0      	movs	r3, #192	; 0xc0
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	4013      	ands	r3, r2
 800031a:	d004      	beq.n	8000326 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	0018      	movs	r0, r3
 8000320:	f000 f874 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8000324:	e007      	b.n	8000336 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0018      	movs	r0, r3
 800032a:	f000 f867 	bl	80003fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f873 	bl	800041c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2200      	movs	r2, #0
 800033a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	691b      	ldr	r3, [r3, #16]
 8000342:	2201      	movs	r2, #1
 8000344:	4013      	ands	r3, r2
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	2201      	movs	r2, #1
 8000352:	4013      	ands	r3, r2
 8000354:	2b01      	cmp	r3, #1
 8000356:	d108      	bne.n	800036a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2202      	movs	r2, #2
 800035e:	4252      	negs	r2, r2
 8000360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	0018      	movs	r0, r3
 8000366:	f7ff fecf 	bl	8000108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	4013      	ands	r3, r2
 8000374:	2b80      	cmp	r3, #128	; 0x80
 8000376:	d10f      	bne.n	8000398 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	68db      	ldr	r3, [r3, #12]
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	4013      	ands	r3, r2
 8000382:	2b80      	cmp	r3, #128	; 0x80
 8000384:	d108      	bne.n	8000398 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2281      	movs	r2, #129	; 0x81
 800038c:	4252      	negs	r2, r2
 800038e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	0018      	movs	r0, r3
 8000394:	f000 f85a 	bl	800044c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	2240      	movs	r2, #64	; 0x40
 80003a0:	4013      	ands	r3, r2
 80003a2:	2b40      	cmp	r3, #64	; 0x40
 80003a4:	d10f      	bne.n	80003c6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	2240      	movs	r2, #64	; 0x40
 80003ae:	4013      	ands	r3, r2
 80003b0:	2b40      	cmp	r3, #64	; 0x40
 80003b2:	d108      	bne.n	80003c6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2241      	movs	r2, #65	; 0x41
 80003ba:	4252      	negs	r2, r2
 80003bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 f833 	bl	800042c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	2220      	movs	r2, #32
 80003ce:	4013      	ands	r3, r2
 80003d0:	2b20      	cmp	r3, #32
 80003d2:	d10f      	bne.n	80003f4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	2220      	movs	r2, #32
 80003dc:	4013      	ands	r3, r2
 80003de:	2b20      	cmp	r3, #32
 80003e0:	d108      	bne.n	80003f4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2221      	movs	r2, #33	; 0x21
 80003e8:	4252      	negs	r2, r2
 80003ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 f824 	bl	800043c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b002      	add	sp, #8
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}

0800041c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}

0800042c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b002      	add	sp, #8
 800043a:	bd80      	pop	{r7, pc}

0800043c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bd80      	pop	{r7, pc}

0800044c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b002      	add	sp, #8
 800045a:	bd80      	pop	{r7, pc}

0800045c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	689a      	ldr	r2, [r3, #8]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	683a      	ldr	r2, [r7, #0]
 8000486:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	601a      	str	r2, [r3, #0]
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b004      	add	sp, #16
 800049e:	bd80      	pop	{r7, pc}

080004a0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	691b      	ldr	r3, [r3, #16]
 80004ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	6892      	ldr	r2, [r2, #8]
 80004b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	6852      	ldr	r2, [r2, #4]
 80004c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d103      	bne.n	80004d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	689a      	ldr	r2, [r3, #8]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	1e5a      	subs	r2, r3, #1
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	681b      	ldr	r3, [r3, #0]
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b004      	add	sp, #16
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80004fa:	4b4c      	ldr	r3, [pc, #304]	; (800062c <xTaskIncrementTick+0x13c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d000      	beq.n	8000504 <xTaskIncrementTick+0x14>
 8000502:	e083      	b.n	800060c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000504:	4b4a      	ldr	r3, [pc, #296]	; (8000630 <xTaskIncrementTick+0x140>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800050c:	4b48      	ldr	r3, [pc, #288]	; (8000630 <xTaskIncrementTick+0x140>)
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d117      	bne.n	8000548 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8000518:	4b46      	ldr	r3, [pc, #280]	; (8000634 <xTaskIncrementTick+0x144>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <xTaskIncrementTick+0x36>
 8000522:	b672      	cpsid	i
 8000524:	e7fe      	b.n	8000524 <xTaskIncrementTick+0x34>
 8000526:	4b43      	ldr	r3, [pc, #268]	; (8000634 <xTaskIncrementTick+0x144>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	4b42      	ldr	r3, [pc, #264]	; (8000638 <xTaskIncrementTick+0x148>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b40      	ldr	r3, [pc, #256]	; (8000634 <xTaskIncrementTick+0x144>)
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	4b40      	ldr	r3, [pc, #256]	; (8000638 <xTaskIncrementTick+0x148>)
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	4b40      	ldr	r3, [pc, #256]	; (800063c <xTaskIncrementTick+0x14c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	4b3e      	ldr	r3, [pc, #248]	; (800063c <xTaskIncrementTick+0x14c>)
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	f000 f8e2 	bl	800070c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000548:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <xTaskIncrementTick+0x150>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	429a      	cmp	r2, r3
 8000550:	d34e      	bcc.n	80005f0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <xTaskIncrementTick+0x144>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <xTaskIncrementTick+0x70>
 800055c:	2301      	movs	r3, #1
 800055e:	e000      	b.n	8000562 <xTaskIncrementTick+0x72>
 8000560:	2300      	movs	r3, #0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d004      	beq.n	8000570 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000566:	4b36      	ldr	r3, [pc, #216]	; (8000640 <xTaskIncrementTick+0x150>)
 8000568:	2201      	movs	r2, #1
 800056a:	4252      	negs	r2, r2
 800056c:	601a      	str	r2, [r3, #0]
					break;
 800056e:	e03f      	b.n	80005f0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000570:	4b30      	ldr	r3, [pc, #192]	; (8000634 <xTaskIncrementTick+0x144>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	d203      	bcs.n	8000590 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000588:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <xTaskIncrementTick+0x150>)
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
						break;
 800058e:	e02f      	b.n	80005f0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	3304      	adds	r3, #4
 8000594:	0018      	movs	r0, r3
 8000596:	f7ff ff83 	bl	80004a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d004      	beq.n	80005ac <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	3318      	adds	r3, #24
 80005a6:	0018      	movs	r0, r3
 80005a8:	f7ff ff7a 	bl	80004a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <xTaskIncrementTick+0x154>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d903      	bls.n	80005c0 <xTaskIncrementTick+0xd0>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <xTaskIncrementTick+0x154>)
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005c4:	0013      	movs	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	189b      	adds	r3, r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <xTaskIncrementTick+0x158>)
 80005ce:	189a      	adds	r2, r3, r2
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	3304      	adds	r3, #4
 80005d4:	0019      	movs	r1, r3
 80005d6:	0010      	movs	r0, r2
 80005d8:	f7ff ff40 	bl	800045c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <xTaskIncrementTick+0x15c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d3b3      	bcc.n	8000552 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80005ee:	e7b0      	b.n	8000552 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <xTaskIncrementTick+0x15c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005f6:	4914      	ldr	r1, [pc, #80]	; (8000648 <xTaskIncrementTick+0x158>)
 80005f8:	0013      	movs	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	189b      	adds	r3, r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	585b      	ldr	r3, [r3, r1]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d907      	bls.n	8000616 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e004      	b.n	8000616 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <xTaskIncrementTick+0x160>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <xTaskIncrementTick+0x160>)
 8000614:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <xTaskIncrementTick+0x164>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800061e:	2301      	movs	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000622:	697b      	ldr	r3, [r7, #20]
}
 8000624:	0018      	movs	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	b006      	add	sp, #24
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000508 	.word	0x20000508
 8000630:	200004f0 	.word	0x200004f0
 8000634:	200004e8 	.word	0x200004e8
 8000638:	200004ec 	.word	0x200004ec
 800063c:	20000500 	.word	0x20000500
 8000640:	20000504 	.word	0x20000504
 8000644:	200004f4 	.word	0x200004f4
 8000648:	20000088 	.word	0x20000088
 800064c:	20000084 	.word	0x20000084
 8000650:	200004f8 	.word	0x200004f8
 8000654:	200004fc 	.word	0x200004fc

08000658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <vTaskSwitchContext+0x9c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d003      	beq.n	800066e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000666:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <vTaskSwitchContext+0xa0>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800066c:	e03d      	b.n	80006ea <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <vTaskSwitchContext+0xa0>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <vTaskSwitchContext+0xa4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	e007      	b.n	800068c <vTaskSwitchContext+0x34>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <vTaskSwitchContext+0x2e>
 8000682:	b672      	cpsid	i
 8000684:	e7fe      	b.n	8000684 <vTaskSwitchContext+0x2c>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3b01      	subs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	491c      	ldr	r1, [pc, #112]	; (8000700 <vTaskSwitchContext+0xa8>)
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	0013      	movs	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	189b      	adds	r3, r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	585b      	ldr	r3, [r3, r1]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0ee      	beq.n	800067c <vTaskSwitchContext+0x24>
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	0013      	movs	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	189b      	adds	r3, r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <vTaskSwitchContext+0xa8>)
 80006aa:	189b      	adds	r3, r3, r2
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	3308      	adds	r3, #8
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d104      	bne.n	80006ce <vTaskSwitchContext+0x76>
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	68da      	ldr	r2, [r3, #12]
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <vTaskSwitchContext+0xac>)
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <vTaskSwitchContext+0xa4>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <vTaskSwitchContext+0xac>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3354      	adds	r3, #84	; 0x54
 80006e4:	001a      	movs	r2, r3
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <vTaskSwitchContext+0xb0>)
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	20000508 	.word	0x20000508
 80006f8:	200004fc 	.word	0x200004fc
 80006fc:	200004f4 	.word	0x200004f4
 8000700:	20000088 	.word	0x20000088
 8000704:	20000084 	.word	0x20000084
 8000708:	20000004 	.word	0x20000004

0800070c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <prvResetNextTaskUnblockTime+0x40>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d101      	bne.n	8000720 <prvResetNextTaskUnblockTime+0x14>
 800071c:	2301      	movs	r3, #1
 800071e:	e000      	b.n	8000722 <prvResetNextTaskUnblockTime+0x16>
 8000720:	2300      	movs	r3, #0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d004      	beq.n	8000730 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <prvResetNextTaskUnblockTime+0x44>)
 8000728:	2201      	movs	r2, #1
 800072a:	4252      	negs	r2, r2
 800072c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800072e:	e008      	b.n	8000742 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <prvResetNextTaskUnblockTime+0x40>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <prvResetNextTaskUnblockTime+0x44>)
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200004e8 	.word	0x200004e8
 8000750:	20000504 	.word	0x20000504

08000754 <SVC_Handler>:
	}
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800075e:	f3ef 8010 	mrs	r0, PRIMASK
 8000762:	b672      	cpsid	i
 8000764:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	0018      	movs	r0, r3

0800076a <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800076a:	f380 8810 	msr	PRIMASK, r0
 800076e:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8000770:	46c0      	nop			; (mov r8, r8)
	...

08000780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000780:	f3ef 8009 	mrs	r0, PSP
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <pxCurrentTCBConst>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	3820      	subs	r0, #32
 800078a:	6010      	str	r0, [r2, #0]
 800078c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800078e:	4644      	mov	r4, r8
 8000790:	464d      	mov	r5, r9
 8000792:	4656      	mov	r6, sl
 8000794:	465f      	mov	r7, fp
 8000796:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8000798:	b508      	push	{r3, lr}
 800079a:	b672      	cpsid	i
 800079c:	f7ff ff5c 	bl	8000658 <vTaskSwitchContext>
 80007a0:	b662      	cpsie	i
 80007a2:	bc0c      	pop	{r2, r3}
 80007a4:	6811      	ldr	r1, [r2, #0]
 80007a6:	6808      	ldr	r0, [r1, #0]
 80007a8:	3010      	adds	r0, #16
 80007aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80007ac:	46a0      	mov	r8, r4
 80007ae:	46a9      	mov	r9, r5
 80007b0:	46b2      	mov	sl, r6
 80007b2:	46bb      	mov	fp, r7
 80007b4:	f380 8809 	msr	PSP, r0
 80007b8:	3820      	subs	r0, #32
 80007ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80007bc:	4718      	bx	r3
 80007be:	46c0      	nop			; (mov r8, r8)

080007c0 <pxCurrentTCBConst>:
 80007c0:	20000084 	.word	0x20000084
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46c0      	nop			; (mov r8, r8)

080007c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80007ce:	f7ff ffc6 	bl	800075e <ulSetInterruptMaskFromISR>
 80007d2:	0003      	movs	r3, r0
 80007d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80007d6:	f7ff fe8b 	bl	80004f0 <xTaskIncrementTick>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d003      	beq.n	80007e6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <SysTick_Handler+0x30>)
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	0552      	lsls	r2, r2, #21
 80007e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff ffbe 	bl	800076a <vClearInterruptMaskFromISR>
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	e000ed04 	.word	0xe000ed04

080007fc <__libc_init_array>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	2600      	movs	r6, #0
 8000800:	4d0c      	ldr	r5, [pc, #48]	; (8000834 <__libc_init_array+0x38>)
 8000802:	4c0d      	ldr	r4, [pc, #52]	; (8000838 <__libc_init_array+0x3c>)
 8000804:	1b64      	subs	r4, r4, r5
 8000806:	10a4      	asrs	r4, r4, #2
 8000808:	42a6      	cmp	r6, r4
 800080a:	d109      	bne.n	8000820 <__libc_init_array+0x24>
 800080c:	2600      	movs	r6, #0
 800080e:	f000 f819 	bl	8000844 <_init>
 8000812:	4d0a      	ldr	r5, [pc, #40]	; (800083c <__libc_init_array+0x40>)
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <__libc_init_array+0x44>)
 8000816:	1b64      	subs	r4, r4, r5
 8000818:	10a4      	asrs	r4, r4, #2
 800081a:	42a6      	cmp	r6, r4
 800081c:	d105      	bne.n	800082a <__libc_init_array+0x2e>
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	00b3      	lsls	r3, r6, #2
 8000822:	58eb      	ldr	r3, [r5, r3]
 8000824:	4798      	blx	r3
 8000826:	3601      	adds	r6, #1
 8000828:	e7ee      	b.n	8000808 <__libc_init_array+0xc>
 800082a:	00b3      	lsls	r3, r6, #2
 800082c:	58eb      	ldr	r3, [r5, r3]
 800082e:	4798      	blx	r3
 8000830:	3601      	adds	r6, #1
 8000832:	e7f2      	b.n	800081a <__libc_init_array+0x1e>
 8000834:	080008bc 	.word	0x080008bc
 8000838:	080008bc 	.word	0x080008bc
 800083c:	080008bc 	.word	0x080008bc
 8000840:	080008c0 	.word	0x080008c0

08000844 <_init>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr

08000850 <_fini>:
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000856:	bc08      	pop	{r3}
 8000858:	469e      	mov	lr, r3
 800085a:	4770      	bx	lr
