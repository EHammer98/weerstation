
FreeRTOS_Weerstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000051c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800063c  0800063c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800063c  0800063c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800063c  0800063c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800063c  0800063c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000640  08000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08000644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000068  080006ac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080006ac  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e50  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d4f  00000000  00000000  00024ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00025c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a8  00000000  00000000  00026040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ccb  00000000  00000000  000263e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004413  00000000  00000000  000270b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064e1e  00000000  00000000  0002b4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000902e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e90  00000000  00000000  00090338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080005c4 	.word	0x080005c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080005c4 	.word	0x080005c4

08000108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800010c:	e7fe      	b.n	800010c <NMI_Handler+0x4>

0800010e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800010e:	b580      	push	{r7, lr}
 8000110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000112:	e7fe      	b.n	8000112 <HardFault_Handler+0x4>

08000114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000114:	b580      	push	{r7, lr}
 8000116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000118:	f000 f838 	bl	800018c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800011c:	f000 f9c4 	bl	80004a8 <xTaskGetSchedulerState>
 8000120:	0003      	movs	r3, r0
 8000122:	2b01      	cmp	r3, #1
 8000124:	d001      	beq.n	800012a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000126:	f000 fa0f 	bl	8000548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800012a:	46c0      	nop			; (mov r8, r8)
 800012c:	46bd      	mov	sp, r7
 800012e:	bd80      	pop	{r7, pc}

08000130 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000130:	b580      	push	{r7, lr}
 8000132:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000134:	46c0      	nop			; (mov r8, r8)
 8000136:	46bd      	mov	sp, r7
 8000138:	bd80      	pop	{r7, pc}
	...

0800013c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800013c:	480c      	ldr	r0, [pc, #48]	; (8000170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800013e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000140:	480c      	ldr	r0, [pc, #48]	; (8000174 <LoopForever+0x6>)
  ldr r1, =_edata
 8000142:	490d      	ldr	r1, [pc, #52]	; (8000178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000144:	4a0d      	ldr	r2, [pc, #52]	; (800017c <LoopForever+0xe>)
  movs r3, #0
 8000146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000148:	e002      	b.n	8000150 <LoopCopyDataInit>

0800014a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800014a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800014c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800014e:	3304      	adds	r3, #4

08000150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000154:	d3f9      	bcc.n	800014a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000156:	4a0a      	ldr	r2, [pc, #40]	; (8000180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000158:	4c0a      	ldr	r4, [pc, #40]	; (8000184 <LoopForever+0x16>)
  movs r3, #0
 800015a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800015c:	e001      	b.n	8000162 <LoopFillZerobss>

0800015e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800015e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000160:	3204      	adds	r2, #4

08000162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000164:	d3fb      	bcc.n	800015e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000166:	f7ff ffe3 	bl	8000130 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800016a:	f000 fa07 	bl	800057c <__libc_init_array>

0800016e <LoopForever>:
/* Call the application's entry point.*/
  //bl main

LoopForever:
    b LoopForever
 800016e:	e7fe      	b.n	800016e <LoopForever>
  ldr   r0, =_estack
 8000170:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000178:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800017c:	08000644 	.word	0x08000644
  ldr r2, =_sbss
 8000180:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000184:	20000514 	.word	0x20000514

08000188 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000188:	e7fe      	b.n	8000188 <ADC1_IRQHandler>
	...

0800018c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <HAL_IncTick+0x1c>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	001a      	movs	r2, r3
 8000196:	4b05      	ldr	r3, [pc, #20]	; (80001ac <HAL_IncTick+0x20>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	18d2      	adds	r2, r2, r3
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <HAL_IncTick+0x20>)
 800019e:	601a      	str	r2, [r3, #0]
}
 80001a0:	46c0      	nop			; (mov r8, r8)
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	46c0      	nop			; (mov r8, r8)
 80001a8:	20000000 	.word	0x20000000
 80001ac:	20000510 	.word	0x20000510

080001b0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
 80001b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	68fa      	ldr	r2, [r7, #12]
 80001c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	689a      	ldr	r2, [r3, #8]
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	689b      	ldr	r3, [r3, #8]
 80001d2:	683a      	ldr	r2, [r7, #0]
 80001d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	683a      	ldr	r2, [r7, #0]
 80001da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	1c5a      	adds	r2, r3, #1
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	601a      	str	r2, [r3, #0]
}
 80001ec:	46c0      	nop			; (mov r8, r8)
 80001ee:	46bd      	mov	sp, r7
 80001f0:	b004      	add	sp, #16
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	691b      	ldr	r3, [r3, #16]
 8000200:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	6892      	ldr	r2, [r2, #8]
 800020a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	6852      	ldr	r2, [r2, #4]
 8000214:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	429a      	cmp	r2, r3
 800021e:	d103      	bne.n	8000228 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	689a      	ldr	r2, [r3, #8]
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	1e5a      	subs	r2, r3, #1
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	681b      	ldr	r3, [r3, #0]
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	b004      	add	sp, #16
 8000242:	bd80      	pop	{r7, pc}

08000244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800024e:	4b4c      	ldr	r3, [pc, #304]	; (8000380 <xTaskIncrementTick+0x13c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d000      	beq.n	8000258 <xTaskIncrementTick+0x14>
 8000256:	e083      	b.n	8000360 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000258:	4b4a      	ldr	r3, [pc, #296]	; (8000384 <xTaskIncrementTick+0x140>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000260:	4b48      	ldr	r3, [pc, #288]	; (8000384 <xTaskIncrementTick+0x140>)
 8000262:	693a      	ldr	r2, [r7, #16]
 8000264:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d117      	bne.n	800029c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800026c:	4b46      	ldr	r3, [pc, #280]	; (8000388 <xTaskIncrementTick+0x144>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <xTaskIncrementTick+0x36>
 8000276:	b672      	cpsid	i
 8000278:	e7fe      	b.n	8000278 <xTaskIncrementTick+0x34>
 800027a:	4b43      	ldr	r3, [pc, #268]	; (8000388 <xTaskIncrementTick+0x144>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	4b42      	ldr	r3, [pc, #264]	; (800038c <xTaskIncrementTick+0x148>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b40      	ldr	r3, [pc, #256]	; (8000388 <xTaskIncrementTick+0x144>)
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	4b40      	ldr	r3, [pc, #256]	; (800038c <xTaskIncrementTick+0x148>)
 800028a:	68fa      	ldr	r2, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	4b40      	ldr	r3, [pc, #256]	; (8000390 <xTaskIncrementTick+0x14c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	1c5a      	adds	r2, r3, #1
 8000294:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <xTaskIncrementTick+0x14c>)
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	f000 f8e2 	bl	8000460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <xTaskIncrementTick+0x150>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d34e      	bcc.n	8000344 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80002a6:	4b38      	ldr	r3, [pc, #224]	; (8000388 <xTaskIncrementTick+0x144>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d101      	bne.n	80002b4 <xTaskIncrementTick+0x70>
 80002b0:	2301      	movs	r3, #1
 80002b2:	e000      	b.n	80002b6 <xTaskIncrementTick+0x72>
 80002b4:	2300      	movs	r3, #0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d004      	beq.n	80002c4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80002ba:	4b36      	ldr	r3, [pc, #216]	; (8000394 <xTaskIncrementTick+0x150>)
 80002bc:	2201      	movs	r2, #1
 80002be:	4252      	negs	r2, r2
 80002c0:	601a      	str	r2, [r3, #0]
					break;
 80002c2:	e03f      	b.n	8000344 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80002c4:	4b30      	ldr	r3, [pc, #192]	; (8000388 <xTaskIncrementTick+0x144>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80002d4:	693a      	ldr	r2, [r7, #16]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d203      	bcs.n	80002e4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80002dc:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <xTaskIncrementTick+0x150>)
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	601a      	str	r2, [r3, #0]
						break;
 80002e2:	e02f      	b.n	8000344 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	3304      	adds	r3, #4
 80002e8:	0018      	movs	r0, r3
 80002ea:	f7ff ff83 	bl	80001f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d004      	beq.n	8000300 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	3318      	adds	r3, #24
 80002fa:	0018      	movs	r0, r3
 80002fc:	f7ff ff7a 	bl	80001f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <xTaskIncrementTick+0x154>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	429a      	cmp	r2, r3
 800030a:	d903      	bls.n	8000314 <xTaskIncrementTick+0xd0>
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000310:	4b21      	ldr	r3, [pc, #132]	; (8000398 <xTaskIncrementTick+0x154>)
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000318:	0013      	movs	r3, r2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	189b      	adds	r3, r3, r2
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	4a1e      	ldr	r2, [pc, #120]	; (800039c <xTaskIncrementTick+0x158>)
 8000322:	189a      	adds	r2, r3, r2
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	3304      	adds	r3, #4
 8000328:	0019      	movs	r1, r3
 800032a:	0010      	movs	r0, r2
 800032c:	f7ff ff40 	bl	80001b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <xTaskIncrementTick+0x15c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033a:	429a      	cmp	r2, r3
 800033c:	d3b3      	bcc.n	80002a6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800033e:	2301      	movs	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000342:	e7b0      	b.n	80002a6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <xTaskIncrementTick+0x15c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800034a:	4914      	ldr	r1, [pc, #80]	; (800039c <xTaskIncrementTick+0x158>)
 800034c:	0013      	movs	r3, r2
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	189b      	adds	r3, r3, r2
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	585b      	ldr	r3, [r3, r1]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d907      	bls.n	800036a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800035a:	2301      	movs	r3, #1
 800035c:	617b      	str	r3, [r7, #20]
 800035e:	e004      	b.n	800036a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000360:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <xTaskIncrementTick+0x160>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	1c5a      	adds	r2, r3, #1
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <xTaskIncrementTick+0x160>)
 8000368:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <xTaskIncrementTick+0x164>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8000372:	2301      	movs	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000376:	697b      	ldr	r3, [r7, #20]
}
 8000378:	0018      	movs	r0, r3
 800037a:	46bd      	mov	sp, r7
 800037c:	b006      	add	sp, #24
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000050c 	.word	0x2000050c
 8000384:	200004f0 	.word	0x200004f0
 8000388:	200004e8 	.word	0x200004e8
 800038c:	200004ec 	.word	0x200004ec
 8000390:	20000504 	.word	0x20000504
 8000394:	20000508 	.word	0x20000508
 8000398:	200004f4 	.word	0x200004f4
 800039c:	20000088 	.word	0x20000088
 80003a0:	20000084 	.word	0x20000084
 80003a4:	200004fc 	.word	0x200004fc
 80003a8:	20000500 	.word	0x20000500

080003ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80003b2:	4b25      	ldr	r3, [pc, #148]	; (8000448 <vTaskSwitchContext+0x9c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d003      	beq.n	80003c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80003ba:	4b24      	ldr	r3, [pc, #144]	; (800044c <vTaskSwitchContext+0xa0>)
 80003bc:	2201      	movs	r2, #1
 80003be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80003c0:	e03d      	b.n	800043e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <vTaskSwitchContext+0xa0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <vTaskSwitchContext+0xa4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	e007      	b.n	80003e0 <vTaskSwitchContext+0x34>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d101      	bne.n	80003da <vTaskSwitchContext+0x2e>
 80003d6:	b672      	cpsid	i
 80003d8:	e7fe      	b.n	80003d8 <vTaskSwitchContext+0x2c>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3b01      	subs	r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	491c      	ldr	r1, [pc, #112]	; (8000454 <vTaskSwitchContext+0xa8>)
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	0013      	movs	r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	189b      	adds	r3, r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	585b      	ldr	r3, [r3, r1]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0ee      	beq.n	80003d0 <vTaskSwitchContext+0x24>
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	0013      	movs	r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	189b      	adds	r3, r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4a15      	ldr	r2, [pc, #84]	; (8000454 <vTaskSwitchContext+0xa8>)
 80003fe:	189b      	adds	r3, r3, r2
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	685a      	ldr	r2, [r3, #4]
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685a      	ldr	r2, [r3, #4]
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	3308      	adds	r3, #8
 8000414:	429a      	cmp	r2, r3
 8000416:	d104      	bne.n	8000422 <vTaskSwitchContext+0x76>
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	68da      	ldr	r2, [r3, #12]
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <vTaskSwitchContext+0xac>)
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <vTaskSwitchContext+0xa4>)
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <vTaskSwitchContext+0xac>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	3354      	adds	r3, #84	; 0x54
 8000438:	001a      	movs	r2, r3
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <vTaskSwitchContext+0xb0>)
 800043c:	601a      	str	r2, [r3, #0]
}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	2000050c 	.word	0x2000050c
 800044c:	20000500 	.word	0x20000500
 8000450:	200004f4 	.word	0x200004f4
 8000454:	20000088 	.word	0x20000088
 8000458:	20000084 	.word	0x20000084
 800045c:	20000004 	.word	0x20000004

08000460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <prvResetNextTaskUnblockTime+0x40>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d101      	bne.n	8000474 <prvResetNextTaskUnblockTime+0x14>
 8000470:	2301      	movs	r3, #1
 8000472:	e000      	b.n	8000476 <prvResetNextTaskUnblockTime+0x16>
 8000474:	2300      	movs	r3, #0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d004      	beq.n	8000484 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <prvResetNextTaskUnblockTime+0x44>)
 800047c:	2201      	movs	r2, #1
 800047e:	4252      	negs	r2, r2
 8000480:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000482:	e008      	b.n	8000496 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <prvResetNextTaskUnblockTime+0x40>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <prvResetNextTaskUnblockTime+0x44>)
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	200004e8 	.word	0x200004e8
 80004a4:	20000508 	.word	0x20000508

080004a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <xTaskGetSchedulerState+0x30>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d102      	bne.n	80004bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80004b6:	2301      	movs	r3, #1
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	e008      	b.n	80004ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <xTaskGetSchedulerState+0x34>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d102      	bne.n	80004ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80004c4:	2302      	movs	r3, #2
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	e001      	b.n	80004ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80004ce:	687b      	ldr	r3, [r7, #4]
	}
 80004d0:	0018      	movs	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200004f8 	.word	0x200004f8
 80004dc:	2000050c 	.word	0x2000050c

080004e0 <SVC_Handler>:
	}
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80004ea:	f3ef 8010 	mrs	r0, PRIMASK
 80004ee:	b672      	cpsid	i
 80004f0:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	0018      	movs	r0, r3

080004f6 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80004f6:	f380 8810 	msr	PRIMASK, r0
 80004fa:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80004fc:	46c0      	nop			; (mov r8, r8)
	...

08000500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000500:	f3ef 8009 	mrs	r0, PSP
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <pxCurrentTCBConst>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	3820      	subs	r0, #32
 800050a:	6010      	str	r0, [r2, #0]
 800050c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800050e:	4644      	mov	r4, r8
 8000510:	464d      	mov	r5, r9
 8000512:	4656      	mov	r6, sl
 8000514:	465f      	mov	r7, fp
 8000516:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8000518:	b508      	push	{r3, lr}
 800051a:	b672      	cpsid	i
 800051c:	f7ff ff46 	bl	80003ac <vTaskSwitchContext>
 8000520:	b662      	cpsie	i
 8000522:	bc0c      	pop	{r2, r3}
 8000524:	6811      	ldr	r1, [r2, #0]
 8000526:	6808      	ldr	r0, [r1, #0]
 8000528:	3010      	adds	r0, #16
 800052a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800052c:	46a0      	mov	r8, r4
 800052e:	46a9      	mov	r9, r5
 8000530:	46b2      	mov	sl, r6
 8000532:	46bb      	mov	fp, r7
 8000534:	f380 8809 	msr	PSP, r0
 8000538:	3820      	subs	r0, #32
 800053a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800053c:	4718      	bx	r3
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <pxCurrentTCBConst>:
 8000540:	20000084 	.word	0x20000084
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46c0      	nop			; (mov r8, r8)

08000548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800054e:	f7ff ffcc 	bl	80004ea <ulSetInterruptMaskFromISR>
 8000552:	0003      	movs	r3, r0
 8000554:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000556:	f7ff fe75 	bl	8000244 <xTaskIncrementTick>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d003      	beq.n	8000566 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <xPortSysTickHandler+0x30>)
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	0552      	lsls	r2, r2, #21
 8000564:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ffc4 	bl	80004f6 <vClearInterruptMaskFromISR>
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	e000ed04 	.word	0xe000ed04

0800057c <__libc_init_array>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	2600      	movs	r6, #0
 8000580:	4d0c      	ldr	r5, [pc, #48]	; (80005b4 <__libc_init_array+0x38>)
 8000582:	4c0d      	ldr	r4, [pc, #52]	; (80005b8 <__libc_init_array+0x3c>)
 8000584:	1b64      	subs	r4, r4, r5
 8000586:	10a4      	asrs	r4, r4, #2
 8000588:	42a6      	cmp	r6, r4
 800058a:	d109      	bne.n	80005a0 <__libc_init_array+0x24>
 800058c:	2600      	movs	r6, #0
 800058e:	f000 f819 	bl	80005c4 <_init>
 8000592:	4d0a      	ldr	r5, [pc, #40]	; (80005bc <__libc_init_array+0x40>)
 8000594:	4c0a      	ldr	r4, [pc, #40]	; (80005c0 <__libc_init_array+0x44>)
 8000596:	1b64      	subs	r4, r4, r5
 8000598:	10a4      	asrs	r4, r4, #2
 800059a:	42a6      	cmp	r6, r4
 800059c:	d105      	bne.n	80005aa <__libc_init_array+0x2e>
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	00b3      	lsls	r3, r6, #2
 80005a2:	58eb      	ldr	r3, [r5, r3]
 80005a4:	4798      	blx	r3
 80005a6:	3601      	adds	r6, #1
 80005a8:	e7ee      	b.n	8000588 <__libc_init_array+0xc>
 80005aa:	00b3      	lsls	r3, r6, #2
 80005ac:	58eb      	ldr	r3, [r5, r3]
 80005ae:	4798      	blx	r3
 80005b0:	3601      	adds	r6, #1
 80005b2:	e7f2      	b.n	800059a <__libc_init_array+0x1e>
 80005b4:	0800063c 	.word	0x0800063c
 80005b8:	0800063c 	.word	0x0800063c
 80005bc:	0800063c 	.word	0x0800063c
 80005c0:	08000640 	.word	0x08000640

080005c4 <_init>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	469e      	mov	lr, r3
 80005ce:	4770      	bx	lr

080005d0 <_fini>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr
