
FreeRTOS_Weerstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b54  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e9c  08005e9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005e9c  08005e9c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e9c  08005e9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017b0  20000070  08005f14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001820  08005f14  00021820  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be3f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e5  00000000  00000000  0003bed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0003f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  00040970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d9b  00000000  00000000  00041dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a6e  00000000  00000000  00045b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007006a  00000000  00000000  0005e5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce64b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005348  00000000  00000000  000ce6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005bfc 	.word	0x08005bfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005bfc 	.word	0x08005bfc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 fdb0 	bl	8000dac <HAL_Init>

  /* USER CODE BEGIN Init */
  //Reset sensor data.
  //memory allocation
  intTemp = (int*)calloc(10, sizeof(int));
 800024c:	2104      	movs	r1, #4
 800024e:	200a      	movs	r0, #10
 8000250:	f004 fffc 	bl	800524c <calloc>
 8000254:	0003      	movs	r3, r0
 8000256:	001a      	movs	r2, r3
 8000258:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <main+0x94>)
 800025a:	601a      	str	r2, [r3, #0]
  intHum = (int*)calloc(10, sizeof(int));
 800025c:	2104      	movs	r1, #4
 800025e:	200a      	movs	r0, #10
 8000260:	f004 fff4 	bl	800524c <calloc>
 8000264:	0003      	movs	r3, r0
 8000266:	001a      	movs	r2, r3
 8000268:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <main+0x98>)
 800026a:	601a      	str	r2, [r3, #0]
  intPress = (int*)calloc(10, sizeof(int));
 800026c:	2104      	movs	r1, #4
 800026e:	200a      	movs	r0, #10
 8000270:	f004 ffec 	bl	800524c <calloc>
 8000274:	0003      	movs	r3, r0
 8000276:	001a      	movs	r2, r3
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <main+0x9c>)
 800027a:	601a      	str	r2, [r3, #0]
  senDT = calloc(10, sizeof(*senDT));
 800027c:	2110      	movs	r1, #16
 800027e:	200a      	movs	r0, #10
 8000280:	f004 ffe4 	bl	800524c <calloc>
 8000284:	0003      	movs	r3, r0
 8000286:	001a      	movs	r2, r3
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <main+0xa0>)
 800028a:	601a      	str	r2, [r3, #0]
  intError = 0;
 800028c:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <main+0xa4>)
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
   *
   */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000292:	f000 f837 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000296:	f000 f979 	bl	800058c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800029a:	f000 f947 	bl	800052c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800029e:	f000 f895 	bl	80003cc <MX_I2C1_Init>
  MX_I2C2_Init();
 80002a2:	f000 f8d3 	bl	800044c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80002a6:	f000 f911 	bl	80004cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002aa:	f002 fdb7 	bl	8002e1c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendESPtask */
  sendESPtaskHandle = osThreadNew(sendESP, NULL, &sendESPtask_attributes);
 80002ae:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <main+0xa8>)
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <main+0xac>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	0018      	movs	r0, r3
 80002b6:	f002 fe0b 	bl	8002ed0 <osThreadNew>
 80002ba:	0002      	movs	r2, r0
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <main+0xb0>)
 80002be:	601a      	str	r2, [r3, #0]

  /* creation of readDataTask */
  readDataTaskHandle = osThreadNew(readData, NULL, &readDataTask_attributes);
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <main+0xb4>)
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <main+0xb8>)
 80002c4:	2100      	movs	r1, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f002 fe02 	bl	8002ed0 <osThreadNew>
 80002cc:	0002      	movs	r2, r0
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <main+0xbc>)
 80002d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002d2:	f002 fdcf 	bl	8002e74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d6:	e7fe      	b.n	80002d6 <main+0x92>
 80002d8:	20001780 	.word	0x20001780
 80002dc:	200016f0 	.word	0x200016f0
 80002e0:	200015cc 	.word	0x200015cc
 80002e4:	200016f4 	.word	0x200016f4
 80002e8:	200016ec 	.word	0x200016ec
 80002ec:	08005dbc 	.word	0x08005dbc
 80002f0:	080006bd 	.word	0x080006bd
 80002f4:	200015c8 	.word	0x200015c8
 80002f8:	08005de0 	.word	0x08005de0
 80002fc:	0800094d 	.word	0x0800094d
 8000300:	200016f8 	.word	0x200016f8

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b095      	sub	sp, #84	; 0x54
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	2420      	movs	r4, #32
 800030c:	193b      	adds	r3, r7, r4
 800030e:	0018      	movs	r0, r3
 8000310:	2330      	movs	r3, #48	; 0x30
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f004 fff2 	bl	80052fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031a:	2310      	movs	r3, #16
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	0018      	movs	r0, r3
 8000320:	2310      	movs	r3, #16
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f004 ffea 	bl	80052fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032a:	003b      	movs	r3, r7
 800032c:	0018      	movs	r0, r3
 800032e:	2310      	movs	r3, #16
 8000330:	001a      	movs	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	f004 ffe3 	bl	80052fe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000338:	0021      	movs	r1, r4
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2202      	movs	r2, #2
 800033e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2201      	movs	r2, #1
 8000344:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2210      	movs	r2, #16
 800034a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2202      	movs	r2, #2
 8000350:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2200      	movs	r2, #0
 8000356:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	22a0      	movs	r2, #160	; 0xa0
 800035c:	0392      	lsls	r2, r2, #14
 800035e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000366:	187b      	adds	r3, r7, r1
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f8b9 	bl	80014e0 <HAL_RCC_OscConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000372:	f000 fb05 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	2110      	movs	r1, #16
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2207      	movs	r2, #7
 800037c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2202      	movs	r2, #2
 8000382:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2101      	movs	r1, #1
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fbbd 	bl	8001b14 <HAL_RCC_ClockConfig>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800039e:	f000 faef 	bl	8000980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80003a2:	003b      	movs	r3, r7
 80003a4:	2221      	movs	r2, #33	; 0x21
 80003a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003a8:	003b      	movs	r3, r7
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003ae:	003b      	movs	r3, r7
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b4:	003b      	movs	r3, r7
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 fd28 	bl	8001e0c <HAL_RCCEx_PeriphCLKConfig>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80003c0:	f000 fade 	bl	8000980 <Error_Handler>
  }
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b015      	add	sp, #84	; 0x54
 80003ca:	bd90      	pop	{r4, r7, pc}

080003cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d0:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <MX_I2C1_Init+0x74>)
 80003d2:	4a1c      	ldr	r2, [pc, #112]	; (8000444 <MX_I2C1_Init+0x78>)
 80003d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <MX_I2C1_Init+0x74>)
 80003d8:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <MX_I2C1_Init+0x7c>)
 80003da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_I2C1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_I2C1_Init+0x74>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_I2C1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_I2C1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_I2C1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_I2C1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_I2C1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_I2C1_Init+0x74>)
 8000408:	0018      	movs	r0, r3
 800040a:	f000 ff3b 	bl	8001284 <HAL_I2C_Init>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000412:	f000 fab5 	bl	8000980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <MX_I2C1_Init+0x74>)
 8000418:	2100      	movs	r1, #0
 800041a:	0018      	movs	r0, r3
 800041c:	f000 ffc8 	bl	80013b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000424:	f000 faac 	bl	8000980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <MX_I2C1_Init+0x74>)
 800042a:	2100      	movs	r1, #0
 800042c:	0018      	movs	r0, r3
 800042e:	f001 f80b 	bl	8001448 <HAL_I2CEx_ConfigDigitalFilter>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000436:	f000 faa3 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200015d0 	.word	0x200015d0
 8000444:	40005400 	.word	0x40005400
 8000448:	2000090e 	.word	0x2000090e

0800044c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <MX_I2C2_Init+0x74>)
 8000452:	4a1c      	ldr	r2, [pc, #112]	; (80004c4 <MX_I2C2_Init+0x78>)
 8000454:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <MX_I2C2_Init+0x74>)
 8000458:	4a1b      	ldr	r2, [pc, #108]	; (80004c8 <MX_I2C2_Init+0x7c>)
 800045a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <MX_I2C2_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <MX_I2C2_Init+0x74>)
 8000464:	2201      	movs	r2, #1
 8000466:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_I2C2_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_I2C2_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_I2C2_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_I2C2_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_I2C2_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_I2C2_Init+0x74>)
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fefb 	bl	8001284 <HAL_I2C_Init>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000492:	f000 fa75 	bl	8000980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <MX_I2C2_Init+0x74>)
 8000498:	2100      	movs	r1, #0
 800049a:	0018      	movs	r0, r3
 800049c:	f000 ff88 	bl	80013b0 <HAL_I2CEx_ConfigAnalogFilter>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004a4:	f000 fa6c 	bl	8000980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <MX_I2C2_Init+0x74>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 ffcb 	bl	8001448 <HAL_I2CEx_ConfigDigitalFilter>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004b6:	f000 fa63 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000161c 	.word	0x2000161c
 80004c4:	40005800 	.word	0x40005800
 80004c8:	20303e5d 	.word	0x20303e5d

080004cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_USART1_UART_Init+0x58>)
 80004d2:	4a15      	ldr	r2, [pc, #84]	; (8000528 <MX_USART1_UART_Init+0x5c>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_USART1_UART_Init+0x58>)
 80004d8:	22e1      	movs	r2, #225	; 0xe1
 80004da:	0252      	lsls	r2, r2, #9
 80004dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_USART1_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_USART1_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_USART1_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART1_UART_Init+0x58>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_USART1_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_USART1_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART1_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_USART1_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MX_USART1_UART_Init+0x58>)
 8000510:	0018      	movs	r0, r3
 8000512:	f001 ffa9 	bl	8002468 <HAL_UART_Init>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800051a:	f000 fa31 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20001668 	.word	0x20001668
 8000528:	40013800 	.word	0x40013800

0800052c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <MX_USART2_UART_Init+0x5c>)
 8000534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000538:	22e1      	movs	r2, #225	; 0xe1
 800053a:	0252      	lsls	r2, r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000570:	0018      	movs	r0, r3
 8000572:	f001 ff79 	bl	8002468 <HAL_UART_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800057a:	f000 fa01 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200016fc 	.word	0x200016fc
 8000588:	40004400 	.word	0x40004400

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08b      	sub	sp, #44	; 0x2c
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	2414      	movs	r4, #20
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2314      	movs	r3, #20
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f004 feae 	bl	80052fe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b33      	ldr	r3, [pc, #204]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0309      	lsls	r1, r1, #12
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b30      	ldr	r3, [pc, #192]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	031b      	lsls	r3, r3, #12
 80005b8:	4013      	ands	r3, r2
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	03c9      	lsls	r1, r1, #15
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	03db      	lsls	r3, r3, #15
 80005d4:	4013      	ands	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	0289      	lsls	r1, r1, #10
 80005e4:	430a      	orrs	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	029b      	lsls	r3, r3, #10
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_GPIO_Init+0xe8>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	02c9      	lsls	r1, r1, #11
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_GPIO_Init+0xe8>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	02db      	lsls	r3, r3, #11
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000612:	2390      	movs	r3, #144	; 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fe14 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	0192      	lsls	r2, r2, #6
 8000626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2284      	movs	r2, #132	; 0x84
 800062c:	0392      	lsls	r2, r2, #14
 800062e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000636:	193b      	adds	r3, r7, r4
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <MX_GPIO_Init+0xec>)
 800063a:	0019      	movs	r1, r3
 800063c:	0010      	movs	r0, r2
 800063e:	f000 fc93 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000642:	0021      	movs	r1, r4
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2220      	movs	r2, #32
 8000648:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2201      	movs	r2, #1
 800064e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800065c:	187a      	adds	r2, r7, r1
 800065e:	2390      	movs	r3, #144	; 0x90
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fc7f 	bl	8000f68 <HAL_GPIO_Init>

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b00b      	add	sp, #44	; 0x2c
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000
 8000678:	48000800 	.word	0x48000800

0800067c <debugPrintln>:
/* USER CODE BEGIN 4 */
void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
}

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff fd3d 	bl	8000108 <strlen>
 800068e:	0003      	movs	r3, r0
 8000690:	b29a      	uxth	r2, r3
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	230a      	movs	r3, #10
 8000698:	f001 ff3a 	bl	8002510 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 800069c:	210c      	movs	r1, #12
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <debugPrintln+0x3c>)
 80006a2:	801a      	strh	r2, [r3, #0]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 80006a4:	1879      	adds	r1, r7, r1
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	230a      	movs	r3, #10
 80006aa:	2202      	movs	r2, #2
 80006ac:	f001 ff30 	bl	8002510 <HAL_UART_Transmit>
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b004      	add	sp, #16
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	00000a0d 	.word	0x00000a0d

080006bc <sendESP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendESP */
void sendESP(void *argument)
{
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	b0d1      	sub	sp, #324	; 0x144
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//Local var. declaration.
	char rxData[10]; //Containt data send from the ESP over UART1
	char dtDEBUG[] = "Date & Time: ";
 80006c4:	238c      	movs	r3, #140	; 0x8c
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	4a88      	ldr	r2, [pc, #544]	; (80008ec <sendESP+0x230>)
 80006cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006ce:	c313      	stmia	r3!, {r0, r1, r4}
 80006d0:	8812      	ldrh	r2, [r2, #0]
 80006d2:	801a      	strh	r2, [r3, #0]
	char tempDEBUG[] = "Temp in C: ";
 80006d4:	2386      	movs	r3, #134	; 0x86
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	4a85      	ldr	r2, [pc, #532]	; (80008f0 <sendESP+0x234>)
 80006dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006de:	c313      	stmia	r3!, {r0, r1, r4}
	char humDEBUG[] = "Hum in %: ";
 80006e0:	1c7b      	adds	r3, r7, #1
 80006e2:	33ff      	adds	r3, #255	; 0xff
 80006e4:	4a83      	ldr	r2, [pc, #524]	; (80008f4 <sendESP+0x238>)
 80006e6:	ca03      	ldmia	r2!, {r0, r1}
 80006e8:	c303      	stmia	r3!, {r0, r1}
 80006ea:	8811      	ldrh	r1, [r2, #0]
 80006ec:	8019      	strh	r1, [r3, #0]
 80006ee:	7892      	ldrb	r2, [r2, #2]
 80006f0:	709a      	strb	r2, [r3, #2]
	char pressDEBUG[] = "Press in Pa: ";
 80006f2:	23f0      	movs	r3, #240	; 0xf0
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	4a80      	ldr	r2, [pc, #512]	; (80008f8 <sendESP+0x23c>)
 80006f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006fa:	c313      	stmia	r3!, {r0, r1, r4}
 80006fc:	8812      	ldrh	r2, [r2, #0]
 80006fe:	801a      	strh	r2, [r3, #0]
	char errorDEBUG[] = "Error: ";
 8000700:	23e8      	movs	r3, #232	; 0xe8
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	4a7d      	ldr	r2, [pc, #500]	; (80008fc <sendESP+0x240>)
 8000706:	ca03      	ldmia	r2!, {r0, r1}
 8000708:	c303      	stmia	r3!, {r0, r1}
	char url[] = "GET http://server03.hammer-tech.eu/weerstationProject/connect.php?"; //Create connection with a PHP-page
 800070a:	23a4      	movs	r3, #164	; 0xa4
 800070c:	18fa      	adds	r2, r7, r3
 800070e:	4b7c      	ldr	r3, [pc, #496]	; (8000900 <sendESP+0x244>)
 8000710:	0010      	movs	r0, r2
 8000712:	0019      	movs	r1, r3
 8000714:	2343      	movs	r3, #67	; 0x43
 8000716:	001a      	movs	r2, r3
 8000718:	f004 fde8 	bl	80052ec <memcpy>
	char temp[] = "&intTemp=";
 800071c:	2398      	movs	r3, #152	; 0x98
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	4a78      	ldr	r2, [pc, #480]	; (8000904 <sendESP+0x248>)
 8000722:	ca03      	ldmia	r2!, {r0, r1}
 8000724:	c303      	stmia	r3!, {r0, r1}
 8000726:	8812      	ldrh	r2, [r2, #0]
 8000728:	801a      	strh	r2, [r3, #0]
	char hum[] = "&intHum=";
 800072a:	238c      	movs	r3, #140	; 0x8c
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	4a76      	ldr	r2, [pc, #472]	; (8000908 <sendESP+0x24c>)
 8000730:	ca03      	ldmia	r2!, {r0, r1}
 8000732:	c303      	stmia	r3!, {r0, r1}
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	701a      	strb	r2, [r3, #0]
	char press[] = "&intPress=";
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	4a73      	ldr	r2, [pc, #460]	; (800090c <sendESP+0x250>)
 800073e:	ca03      	ldmia	r2!, {r0, r1}
 8000740:	c303      	stmia	r3!, {r0, r1}
 8000742:	8811      	ldrh	r1, [r2, #0]
 8000744:	8019      	strh	r1, [r3, #0]
 8000746:	7892      	ldrb	r2, [r2, #2]
 8000748:	709a      	strb	r2, [r3, #2]
	char datetime[] = "&dtDateTime=";
 800074a:	2370      	movs	r3, #112	; 0x70
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	4a70      	ldr	r2, [pc, #448]	; (8000910 <sendESP+0x254>)
 8000750:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000752:	c313      	stmia	r3!, {r0, r1, r4}
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	701a      	strb	r2, [r3, #0]
	char error[] = "&intStationError=";
 8000758:	235c      	movs	r3, #92	; 0x5c
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	4a6d      	ldr	r2, [pc, #436]	; (8000914 <sendESP+0x258>)
 800075e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000760:	c313      	stmia	r3!, {r0, r1, r4}
 8000762:	6811      	ldr	r1, [r2, #0]
 8000764:	6019      	str	r1, [r3, #0]
 8000766:	8892      	ldrh	r2, [r2, #4]
 8000768:	809a      	strh	r2, [r3, #4]
	char tempDAT[] = ""; //URL-part + data
 800076a:	2358      	movs	r3, #88	; 0x58
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	4a6a      	ldr	r2, [pc, #424]	; (8000918 <sendESP+0x25c>)
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	701a      	strb	r2, [r3, #0]
	char humDAT[] = ""; //URL-part + data
 8000774:	2354      	movs	r3, #84	; 0x54
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	4a67      	ldr	r2, [pc, #412]	; (8000918 <sendESP+0x25c>)
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	701a      	strb	r2, [r3, #0]
	char pressDAT[] = ""; //URL-part + data
 800077e:	2350      	movs	r3, #80	; 0x50
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	4a65      	ldr	r2, [pc, #404]	; (8000918 <sendESP+0x25c>)
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	701a      	strb	r2, [r3, #0]
	char errorDAT[] = ""; //URL-part + data
 8000788:	234c      	movs	r3, #76	; 0x4c
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	4a62      	ldr	r2, [pc, #392]	; (8000918 <sendESP+0x25c>)
 800078e:	7812      	ldrb	r2, [r2, #0]
 8000790:	701a      	strb	r2, [r3, #0]
	char end[] = " HTTP/1.1\r\nHost: server03.hammer-tech.eu\r\n Connection: close\r\n\r\n"; //Close connection with PHP-page
 8000792:	4b62      	ldr	r3, [pc, #392]	; (800091c <sendESP+0x260>)
 8000794:	229c      	movs	r2, #156	; 0x9c
 8000796:	0052      	lsls	r2, r2, #1
 8000798:	18ba      	adds	r2, r7, r2
 800079a:	18d2      	adds	r2, r2, r3
 800079c:	4b60      	ldr	r3, [pc, #384]	; (8000920 <sendESP+0x264>)
 800079e:	0010      	movs	r0, r2
 80007a0:	0019      	movs	r1, r3
 80007a2:	2341      	movs	r3, #65	; 0x41
 80007a4:	001a      	movs	r2, r3
 80007a6:	f004 fda1 	bl	80052ec <memcpy>
  for(;;)
  {
	  int i;
	  for(i = 0;i != sizeof(intTemp);i++){
 80007aa:	2300      	movs	r3, #0
 80007ac:	229a      	movs	r2, #154	; 0x9a
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	18ba      	adds	r2, r7, r2
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e08f      	b.n	80008d6 <sendESP+0x21a>
	  	//Convert INT to Char array
		itoa(intTemp[i],tempDAT,10);
 80007b6:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <sendESP+0x268>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	249a      	movs	r4, #154	; 0x9a
 80007bc:	0064      	lsls	r4, r4, #1
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2258      	movs	r2, #88	; 0x58
 80007ca:	18b9      	adds	r1, r7, r2
 80007cc:	220a      	movs	r2, #10
 80007ce:	0018      	movs	r0, r3
 80007d0:	f004 fd88 	bl	80052e4 <itoa>
		itoa(intHum[i],humDAT,10);
 80007d4:	4b54      	ldr	r3, [pc, #336]	; (8000928 <sendESP+0x26c>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	18d3      	adds	r3, r2, r3
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2254      	movs	r2, #84	; 0x54
 80007e4:	18b9      	adds	r1, r7, r2
 80007e6:	220a      	movs	r2, #10
 80007e8:	0018      	movs	r0, r3
 80007ea:	f004 fd7b 	bl	80052e4 <itoa>
		itoa(intPress[i],pressDAT,10);
 80007ee:	4b4f      	ldr	r3, [pc, #316]	; (800092c <sendESP+0x270>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	18d3      	adds	r3, r2, r3
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2250      	movs	r2, #80	; 0x50
 80007fe:	18b9      	adds	r1, r7, r2
 8000800:	220a      	movs	r2, #10
 8000802:	0018      	movs	r0, r3
 8000804:	f004 fd6e 	bl	80052e4 <itoa>
		itoa(intError,errorDAT,10);
 8000808:	4b49      	ldr	r3, [pc, #292]	; (8000930 <sendESP+0x274>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	224c      	movs	r2, #76	; 0x4c
 800080e:	18b9      	adds	r1, r7, r2
 8000810:	220a      	movs	r2, #10
 8000812:	0018      	movs	r0, r3
 8000814:	f004 fd66 	bl	80052e4 <itoa>
		strcat(url,press);
		strcat(url,datetime);
		strcat(url,error);
		strcat(url,end);
*/
		sprintf(url, "temperatuur=%d&vochtigheid=%d&luchtdruk=%d\r\n", intTemp[i], intHum[i], intPress[i]);
 8000818:	4b42      	ldr	r3, [pc, #264]	; (8000924 <sendESP+0x268>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	0021      	movs	r1, r4
 800081e:	187b      	adds	r3, r7, r1
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	681c      	ldr	r4, [r3, #0]
 8000828:	4b3f      	ldr	r3, [pc, #252]	; (8000928 <sendESP+0x26c>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	187b      	adds	r3, r7, r1
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	18d3      	adds	r3, r2, r3
 8000834:	681d      	ldr	r5, [r3, #0]
 8000836:	4b3d      	ldr	r3, [pc, #244]	; (800092c <sendESP+0x270>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	187b      	adds	r3, r7, r1
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	493b      	ldr	r1, [pc, #236]	; (8000934 <sendESP+0x278>)
 8000846:	26a4      	movs	r6, #164	; 0xa4
 8000848:	19b8      	adds	r0, r7, r6
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	002b      	movs	r3, r5
 800084e:	0022      	movs	r2, r4
 8000850:	f004 fddc 	bl	800540c <siprintf>
		debugPrintln(&huart2, url); //Print end result AT-command for debugging
 8000854:	0034      	movs	r4, r6
 8000856:	193a      	adds	r2, r7, r4
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <sendESP+0x27c>)
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff ff0d 	bl	800067c <debugPrintln>
		HAL_UART_Transmit(&huart1, (uint8_t *) url, strlen(url), 100); //Send AT-command
 8000862:	193b      	adds	r3, r7, r4
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff fc4f 	bl	8000108 <strlen>
 800086a:	0003      	movs	r3, r0
 800086c:	b29a      	uxth	r2, r3
 800086e:	1939      	adds	r1, r7, r4
 8000870:	4832      	ldr	r0, [pc, #200]	; (800093c <sendESP+0x280>)
 8000872:	2364      	movs	r3, #100	; 0x64
 8000874:	f001 fe4c 	bl	8002510 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t *)rxData, 8, 100); //Get response (like OK or ERROR)
 8000878:	2494      	movs	r4, #148	; 0x94
 800087a:	0064      	lsls	r4, r4, #1
 800087c:	1939      	adds	r1, r7, r4
 800087e:	482f      	ldr	r0, [pc, #188]	; (800093c <sendESP+0x280>)
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	2208      	movs	r2, #8
 8000884:	f001 feee 	bl	8002664 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)rxData, strlen(rxData) , 100); //Print response for debugging
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fc3c 	bl	8000108 <strlen>
 8000890:	0003      	movs	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	1939      	adds	r1, r7, r4
 8000896:	4828      	ldr	r0, [pc, #160]	; (8000938 <sendESP+0x27c>)
 8000898:	2364      	movs	r3, #100	; 0x64
 800089a:	f001 fe39 	bl	8002510 <HAL_UART_Transmit>
		//Check if there was an error
		if (strstr(rxData, "ERROR") != NULL) {
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <sendESP+0x284>)
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f004 fdd1 	bl	800544c <strstr>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d008      	beq.n	80008c0 <sendESP+0x204>
		    intError = 1; //change error code to '1' for ESP related error
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <sendESP+0x274>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
		    debugPrintln(&huart2, "ERROR1"); // Message for debugging
 80008b4:	4a23      	ldr	r2, [pc, #140]	; (8000944 <sendESP+0x288>)
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <sendESP+0x27c>)
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff fede 	bl	800067c <debugPrintln>
		}
	 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	 osDelay(5000); //Delay for sending #1min
 80008c0:	4b21      	ldr	r3, [pc, #132]	; (8000948 <sendESP+0x28c>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f002 fbac 	bl	8003020 <osDelay>
	  for(i = 0;i != sizeof(intTemp);i++){
 80008c8:	229a      	movs	r2, #154	; 0x9a
 80008ca:	0052      	lsls	r2, r2, #1
 80008cc:	18bb      	adds	r3, r7, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	18ba      	adds	r2, r7, r2
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	229a      	movs	r2, #154	; 0x9a
 80008d8:	0052      	lsls	r2, r2, #1
 80008da:	18bb      	adds	r3, r7, r2
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d000      	beq.n	80008e4 <sendESP+0x228>
 80008e2:	e768      	b.n	80007b6 <sendESP+0xfa>
	  }
	  i = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	18ba      	adds	r2, r7, r2
 80008e8:	6013      	str	r3, [r2, #0]
  {
 80008ea:	e75e      	b.n	80007aa <sendESP+0xee>
 80008ec:	08005c70 	.word	0x08005c70
 80008f0:	08005c80 	.word	0x08005c80
 80008f4:	08005c8c 	.word	0x08005c8c
 80008f8:	08005c98 	.word	0x08005c98
 80008fc:	08005ca8 	.word	0x08005ca8
 8000900:	08005cb0 	.word	0x08005cb0
 8000904:	08005cf4 	.word	0x08005cf4
 8000908:	08005d00 	.word	0x08005d00
 800090c:	08005d0c 	.word	0x08005d0c
 8000910:	08005d18 	.word	0x08005d18
 8000914:	08005d28 	.word	0x08005d28
 8000918:	08005d3c 	.word	0x08005d3c
 800091c:	fffffed0 	.word	0xfffffed0
 8000920:	08005d40 	.word	0x08005d40
 8000924:	20001780 	.word	0x20001780
 8000928:	200016f0 	.word	0x200016f0
 800092c:	200015cc 	.word	0x200015cc
 8000930:	200016ec 	.word	0x200016ec
 8000934:	08005c30 	.word	0x08005c30
 8000938:	200016fc 	.word	0x200016fc
 800093c:	20001668 	.word	0x20001668
 8000940:	08005c60 	.word	0x08005c60
 8000944:	08005c68 	.word	0x08005c68
 8000948:	00001388 	.word	0x00001388

0800094c <readData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readData */
void readData(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readData */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f002 fb63 	bl	8003020 <osDelay>
 800095a:	e7fb      	b.n	8000954 <readData+0x8>

0800095c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d101      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096e:	f000 fa31 	bl	8000dd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40014800 	.word	0x40014800

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_MspInit+0x50>)
 8000994:	699a      	ldr	r2, [r3, #24]
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_MspInit+0x50>)
 8000998:	2101      	movs	r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	619a      	str	r2, [r3, #24]
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x50>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x50>)
 80009ac:	69da      	ldr	r2, [r3, #28]
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x50>)
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	0549      	lsls	r1, r1, #21
 80009b4:	430a      	orrs	r2, r1
 80009b6:	61da      	str	r2, [r3, #28]
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_MspInit+0x50>)
 80009ba:	69da      	ldr	r2, [r3, #28]
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	055b      	lsls	r3, r3, #21
 80009c0:	4013      	ands	r3, r2
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80009c6:	2302      	movs	r3, #2
 80009c8:	425b      	negs	r3, r3
 80009ca:	2200      	movs	r2, #0
 80009cc:	2103      	movs	r1, #3
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 faa4 	bl	8000f1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b08d      	sub	sp, #52	; 0x34
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	241c      	movs	r4, #28
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	0018      	movs	r0, r3
 80009ee:	2314      	movs	r3, #20
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f004 fc83 	bl	80052fe <memset>
  if(hi2c->Instance==I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a38      	ldr	r2, [pc, #224]	; (8000ae0 <HAL_I2C_MspInit+0x100>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d132      	bne.n	8000a68 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	02c9      	lsls	r1, r1, #11
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000a12:	695a      	ldr	r2, [r3, #20]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	02db      	lsls	r3, r3, #11
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1e:	0021      	movs	r1, r4
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	22c0      	movs	r2, #192	; 0xc0
 8000a24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2212      	movs	r2, #18
 8000a2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2203      	movs	r2, #3
 8000a36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	4a29      	ldr	r2, [pc, #164]	; (8000ae8 <HAL_I2C_MspInit+0x108>)
 8000a42:	0019      	movs	r1, r3
 8000a44:	0010      	movs	r0, r2
 8000a46:	f000 fa8f 	bl	8000f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000a4c:	69da      	ldr	r2, [r3, #28]
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	0389      	lsls	r1, r1, #14
 8000a54:	430a      	orrs	r2, r1
 8000a56:	61da      	str	r2, [r3, #28]
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000a5a:	69da      	ldr	r2, [r3, #28]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	039b      	lsls	r3, r3, #14
 8000a60:	4013      	ands	r3, r2
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a66:	e037      	b.n	8000ad8 <HAL_I2C_MspInit+0xf8>
  else if(hi2c->Instance==I2C2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <HAL_I2C_MspInit+0x10c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d132      	bne.n	8000ad8 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	02c9      	lsls	r1, r1, #11
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	02db      	lsls	r3, r3, #11
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a8e:	211c      	movs	r1, #28
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	22c0      	movs	r2, #192	; 0xc0
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2212      	movs	r2, #18
 8000a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2201      	movs	r2, #1
 8000aae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_I2C_MspInit+0x108>)
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	0010      	movs	r0, r2
 8000ab8:	f000 fa56 	bl	8000f68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000abe:	69da      	ldr	r2, [r3, #28]
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	03c9      	lsls	r1, r1, #15
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	61da      	str	r2, [r3, #28]
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_I2C_MspInit+0x104>)
 8000acc:	69da      	ldr	r2, [r3, #28]
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	03db      	lsls	r3, r3, #15
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b00d      	add	sp, #52	; 0x34
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	40005800 	.word	0x40005800

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b08d      	sub	sp, #52	; 0x34
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	241c      	movs	r4, #28
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	0018      	movs	r0, r3
 8000afe:	2314      	movs	r3, #20
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f004 fbfb 	bl	80052fe <memset>
  if(huart->Instance==USART1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a39      	ldr	r2, [pc, #228]	; (8000bf4 <HAL_UART_MspInit+0x104>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d134      	bne.n	8000b7c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b12:	4b39      	ldr	r3, [pc, #228]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000b14:	699a      	ldr	r2, [r3, #24]
 8000b16:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	01c9      	lsls	r1, r1, #7
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	619a      	str	r2, [r3, #24]
 8000b20:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000b22:	699a      	ldr	r2, [r3, #24]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	01db      	lsls	r3, r3, #7
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0289      	lsls	r1, r1, #10
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000b3e:	695a      	ldr	r2, [r3, #20]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	029b      	lsls	r3, r3, #10
 8000b44:	4013      	ands	r3, r2
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	22c0      	movs	r2, #192	; 0xc0
 8000b4e:	00d2      	lsls	r2, r2, #3
 8000b50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	0021      	movs	r1, r4
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2203      	movs	r2, #3
 8000b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2201      	movs	r2, #1
 8000b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	187a      	adds	r2, r7, r1
 8000b6e:	2390      	movs	r3, #144	; 0x90
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 f9f7 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7a:	e037      	b.n	8000bec <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <HAL_UART_MspInit+0x10c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d132      	bne.n	8000bec <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000b88:	69da      	ldr	r2, [r3, #28]
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0289      	lsls	r1, r1, #10
 8000b90:	430a      	orrs	r2, r1
 8000b92:	61da      	str	r2, [r3, #28]
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000b96:	69da      	ldr	r2, [r3, #28]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	029b      	lsls	r3, r3, #10
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	0289      	lsls	r1, r1, #10
 8000bac:	430a      	orrs	r2, r1
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0x108>)
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	029b      	lsls	r3, r3, #10
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bbe:	211c      	movs	r1, #28
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2202      	movs	r2, #2
 8000bca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2201      	movs	r2, #1
 8000bdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	187a      	adds	r2, r7, r1
 8000be0:	2390      	movs	r3, #144	; 0x90
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	0011      	movs	r1, r2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 f9be 	bl	8000f68 <HAL_GPIO_Init>
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b00d      	add	sp, #52	; 0x34
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40004400 	.word	0x40004400

08000c00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	0019      	movs	r1, r3
 8000c16:	2016      	movs	r0, #22
 8000c18:	f000 f980 	bl	8000f1c <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000c1c:	2016      	movs	r0, #22
 8000c1e:	f000 f992 	bl	8000f46 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c24:	699a      	ldr	r2, [r3, #24]
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	02c9      	lsls	r1, r1, #11
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	619a      	str	r2, [r3, #24]
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_InitTick+0xa8>)
 8000c32:	699a      	ldr	r2, [r3, #24]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	02db      	lsls	r3, r3, #11
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3e:	230c      	movs	r3, #12
 8000c40:	18fa      	adds	r2, r7, r3
 8000c42:	2310      	movs	r3, #16
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f001 f8b5 	bl	8001db8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c4e:	f001 f89d 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 8000c52:	0003      	movs	r3, r0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	4914      	ldr	r1, [pc, #80]	; (8000cac <HAL_InitTick+0xac>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fa66 	bl	800012c <__udivsi3>
 8000c60:	0003      	movs	r3, r0
 8000c62:	3b01      	subs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0xb0>)
 8000c68:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <HAL_InitTick+0xb4>)
 8000c6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_InitTick+0xb0>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <HAL_InitTick+0xb8>)
 8000c70:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_InitTick+0xb0>)
 8000c74:	6a3a      	ldr	r2, [r7, #32]
 8000c76:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_InitTick+0xb0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_InitTick+0xb0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_InitTick+0xb0>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 f98e 	bl	8001fa8 <HAL_TIM_Base_Init>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d105      	bne.n	8000c9c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <HAL_InitTick+0xb0>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f001 f9e0 	bl	8002058 <HAL_TIM_Base_Start_IT>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	e000      	b.n	8000c9e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b00a      	add	sp, #40	; 0x28
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	000f4240 	.word	0x000f4240
 8000cb0:	20001784 	.word	0x20001784
 8000cb4:	40014800 	.word	0x40014800
 8000cb8:	000003e7 	.word	0x000003e7

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <TIM17_IRQHandler+0x14>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f001 fa0e 	bl	80020f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20001784 	.word	0x20001784

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	18d3      	adds	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f004 faa6 	bl	8005260 <__errno>
 8000d14:	0003      	movs	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	18d2      	adds	r2, r2, r3
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b006      	add	sp, #24
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20002000 	.word	0x20002000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	20001820 	.word	0x20001820

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0b      	ldr	r4, [pc, #44]	; (8000da4 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d82:	f7ff ffe3 	bl	8000d4c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d86:	f004 fa71 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fa5b 	bl	8000244 <main>

08000d8e <LoopForever>:

LoopForever:
    b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   r0, =_estack
 8000d90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d9c:	08005ea4 	.word	0x08005ea4
  ldr r2, =_sbss
 8000da0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000da4:	20001820 	.word	0x20001820

08000da8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_IRQHandler>
	...

08000dac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_Init+0x24>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_Init+0x24>)
 8000db6:	2110      	movs	r1, #16
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f7ff ff1f 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc2:	f7ff fde3 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	001a      	movs	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	18d2      	adds	r2, r2, r3
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_IncTick+0x20>)
 8000de6:	601a      	str	r2, [r3, #0]
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	20000004 	.word	0x20000004
 8000df4:	200017cc 	.word	0x200017cc

08000df8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	200017cc 	.word	0x200017cc

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	0002      	movs	r2, r0
 8000e14:	1dfb      	adds	r3, r7, #7
 8000e16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e1e:	d809      	bhi.n	8000e34 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	001a      	movs	r2, r3
 8000e26:	231f      	movs	r3, #31
 8000e28:	401a      	ands	r2, r3
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <__NVIC_EnableIRQ+0x30>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4091      	lsls	r1, r2
 8000e30:	000a      	movs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
  }
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	0002      	movs	r2, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b7f      	cmp	r3, #127	; 0x7f
 8000e54:	d828      	bhi.n	8000ea8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e56:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <__NVIC_SetPriority+0xd4>)
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	33c0      	adds	r3, #192	; 0xc0
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	589b      	ldr	r3, [r3, r2]
 8000e66:	1dfa      	adds	r2, r7, #7
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	400a      	ands	r2, r1
 8000e70:	00d2      	lsls	r2, r2, #3
 8000e72:	21ff      	movs	r1, #255	; 0xff
 8000e74:	4091      	lsls	r1, r2
 8000e76:	000a      	movs	r2, r1
 8000e78:	43d2      	mvns	r2, r2
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	401a      	ands	r2, r3
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	4003      	ands	r3, r0
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e94:	481f      	ldr	r0, [pc, #124]	; (8000f14 <__NVIC_SetPriority+0xd4>)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	33c0      	adds	r3, #192	; 0xc0
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ea6:	e031      	b.n	8000f0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <__NVIC_SetPriority+0xd8>)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	0019      	movs	r1, r3
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	3b08      	subs	r3, #8
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3306      	adds	r3, #6
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	18d3      	adds	r3, r2, r3
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1dfa      	adds	r2, r7, #7
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	2203      	movs	r2, #3
 8000eca:	400a      	ands	r2, r1
 8000ecc:	00d2      	lsls	r2, r2, #3
 8000ece:	21ff      	movs	r1, #255	; 0xff
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	43d2      	mvns	r2, r2
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	22ff      	movs	r2, #255	; 0xff
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2303      	movs	r3, #3
 8000eea:	4003      	ands	r3, r0
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <__NVIC_SetPriority+0xd8>)
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	001c      	movs	r4, r3
 8000ef8:	230f      	movs	r3, #15
 8000efa:	4023      	ands	r3, r4
 8000efc:	3b08      	subs	r3, #8
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	430a      	orrs	r2, r1
 8000f02:	3306      	adds	r3, #6
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	18c3      	adds	r3, r0, r3
 8000f08:	3304      	adds	r3, #4
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b003      	add	sp, #12
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	210f      	movs	r1, #15
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	1c02      	adds	r2, r0, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	0011      	movs	r1, r2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff ff81 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff ff57 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e14f      	b.n	8001218 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4091      	lsls	r1, r2
 8000f82:	000a      	movs	r2, r1
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d100      	bne.n	8000f90 <HAL_GPIO_Init+0x28>
 8000f8e:	e140      	b.n	8001212 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d130      	bne.n	800100a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	0013      	movs	r3, r2
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2203      	movs	r2, #3
 8001010:	4013      	ands	r3, r2
 8001012:	2b03      	cmp	r3, #3
 8001014:	d017      	beq.n	8001046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	4013      	ands	r3, r2
 800104e:	2b02      	cmp	r3, #2
 8001050:	d123      	bne.n	800109a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	58d3      	ldr	r3, [r2, r3]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	2207      	movs	r2, #7
 8001064:	4013      	ands	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2107      	movs	r1, #7
 800107e:	400b      	ands	r3, r1
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	6939      	ldr	r1, [r7, #16]
 8001098:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	43da      	mvns	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2203      	movs	r2, #3
 80010b8:	401a      	ands	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	23c0      	movs	r3, #192	; 0xc0
 80010d4:	029b      	lsls	r3, r3, #10
 80010d6:	4013      	ands	r3, r2
 80010d8:	d100      	bne.n	80010dc <HAL_GPIO_Init+0x174>
 80010da:	e09a      	b.n	8001212 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b54      	ldr	r3, [pc, #336]	; (8001230 <HAL_GPIO_Init+0x2c8>)
 80010de:	699a      	ldr	r2, [r3, #24]
 80010e0:	4b53      	ldr	r3, [pc, #332]	; (8001230 <HAL_GPIO_Init+0x2c8>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	430a      	orrs	r2, r1
 80010e6:	619a      	str	r2, [r3, #24]
 80010e8:	4b51      	ldr	r3, [pc, #324]	; (8001230 <HAL_GPIO_Init+0x2c8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	2201      	movs	r2, #1
 80010ee:	4013      	ands	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f4:	4a4f      	ldr	r2, [pc, #316]	; (8001234 <HAL_GPIO_Init+0x2cc>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	589b      	ldr	r3, [r3, r2]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	409a      	lsls	r2, r3
 800110e:	0013      	movs	r3, r2
 8001110:	43da      	mvns	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	2390      	movs	r3, #144	; 0x90
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	429a      	cmp	r2, r3
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x1e2>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a44      	ldr	r2, [pc, #272]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x1de>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a43      	ldr	r2, [pc, #268]	; (800123c <HAL_GPIO_Init+0x2d4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x1da>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a42      	ldr	r2, [pc, #264]	; (8001240 <HAL_GPIO_Init+0x2d8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x1d6>
 800113a:	2303      	movs	r3, #3
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x1e4>
 800113e:	2305      	movs	r3, #5
 8001140:	e004      	b.n	800114c <HAL_GPIO_Init+0x1e4>
 8001142:	2302      	movs	r3, #2
 8001144:	e002      	b.n	800114c <HAL_GPIO_Init+0x1e4>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_GPIO_Init+0x1e4>
 800114a:	2300      	movs	r3, #0
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	2103      	movs	r1, #3
 8001150:	400a      	ands	r2, r1
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4093      	lsls	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800115c:	4935      	ldr	r1, [pc, #212]	; (8001234 <HAL_GPIO_Init+0x2cc>)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	025b      	lsls	r3, r3, #9
 8001182:	4013      	ands	r3, r2
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43da      	mvns	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	029b      	lsls	r3, r3, #10
 80011ac:	4013      	ands	r3, r2
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	035b      	lsls	r3, r3, #13
 80011d6:	4013      	ands	r3, r2
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43da      	mvns	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	039b      	lsls	r3, r3, #14
 8001200:	4013      	ands	r3, r2
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_GPIO_Init+0x2dc>)
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3301      	adds	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	40da      	lsrs	r2, r3
 8001220:	1e13      	subs	r3, r2, #0
 8001222:	d000      	beq.n	8001226 <HAL_GPIO_Init+0x2be>
 8001224:	e6a8      	b.n	8000f78 <HAL_GPIO_Init+0x10>
  } 
}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b006      	add	sp, #24
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	48000400 	.word	0x48000400
 800123c:	48000800 	.word	0x48000800
 8001240:	48000c00 	.word	0x48000c00
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	0008      	movs	r0, r1
 8001252:	0011      	movs	r1, r2
 8001254:	1cbb      	adds	r3, r7, #2
 8001256:	1c02      	adds	r2, r0, #0
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	1c7b      	adds	r3, r7, #1
 800125c:	1c0a      	adds	r2, r1, #0
 800125e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001260:	1c7b      	adds	r3, r7, #1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001268:	1cbb      	adds	r3, r7, #2
 800126a:	881a      	ldrh	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001272:	1cbb      	adds	r3, r7, #2
 8001274:	881a      	ldrh	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e082      	b.n	800139c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2241      	movs	r2, #65	; 0x41
 800129a:	5c9b      	ldrb	r3, [r3, r2]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2240      	movs	r2, #64	; 0x40
 80012a6:	2100      	movs	r1, #0
 80012a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff fb97 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2241      	movs	r2, #65	; 0x41
 80012b6:	2124      	movs	r1, #36	; 0x24
 80012b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	438a      	bics	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4934      	ldr	r1, [pc, #208]	; (80013a4 <HAL_I2C_Init+0x120>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4931      	ldr	r1, [pc, #196]	; (80013a8 <HAL_I2C_Init+0x124>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	0209      	lsls	r1, r1, #8
 80012fc:	430a      	orrs	r2, r1
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	e007      	b.n	8001312 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2184      	movs	r1, #132	; 0x84
 800130c:	0209      	lsls	r1, r1, #8
 800130e:	430a      	orrs	r2, r1
 8001310:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d104      	bne.n	8001324 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	491f      	ldr	r1, [pc, #124]	; (80013ac <HAL_I2C_Init+0x128>)
 8001330:	430a      	orrs	r2, r1
 8001332:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	491a      	ldr	r1, [pc, #104]	; (80013a8 <HAL_I2C_Init+0x124>)
 8001340:	400a      	ands	r2, r1
 8001342:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	431a      	orrs	r2, r3
 800134e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69d9      	ldr	r1, [r3, #28]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2241      	movs	r2, #65	; 0x41
 8001388:	2120      	movs	r1, #32
 800138a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2242      	movs	r2, #66	; 0x42
 8001396:	2100      	movs	r1, #0
 8001398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	f0ffffff 	.word	0xf0ffffff
 80013a8:	ffff7fff 	.word	0xffff7fff
 80013ac:	02008000 	.word	0x02008000

080013b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2241      	movs	r2, #65	; 0x41
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d138      	bne.n	8001438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	5c9b      	ldrb	r3, [r3, r2]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e032      	b.n	800143a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2240      	movs	r2, #64	; 0x40
 80013d8:	2101      	movs	r1, #1
 80013da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2241      	movs	r2, #65	; 0x41
 80013e0:	2124      	movs	r1, #36	; 0x24
 80013e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2101      	movs	r1, #1
 80013f0:	438a      	bics	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4911      	ldr	r1, [pc, #68]	; (8001444 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6819      	ldr	r1, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2101      	movs	r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2241      	movs	r2, #65	; 0x41
 8001428:	2120      	movs	r1, #32
 800142a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e000      	b.n	800143a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001438:	2302      	movs	r3, #2
  }
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	ffffefff 	.word	0xffffefff

08001448 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2241      	movs	r2, #65	; 0x41
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b20      	cmp	r3, #32
 800145c:	d139      	bne.n	80014d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001468:	2302      	movs	r3, #2
 800146a:	e033      	b.n	80014d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2240      	movs	r2, #64	; 0x40
 8001470:	2101      	movs	r1, #1
 8001472:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2241      	movs	r2, #65	; 0x41
 8001478:	2124      	movs	r1, #36	; 0x24
 800147a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2101      	movs	r1, #1
 8001488:	438a      	bics	r2, r1
 800148a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2241      	movs	r2, #65	; 0x41
 80014c2:	2120      	movs	r1, #32
 80014c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2240      	movs	r2, #64	; 0x40
 80014ca:	2100      	movs	r1, #0
 80014cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014d2:	2302      	movs	r3, #2
  }
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b004      	add	sp, #16
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	fffff0ff 	.word	0xfffff0ff

080014e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e301      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2201      	movs	r2, #1
 80014f8:	4013      	ands	r3, r2
 80014fa:	d100      	bne.n	80014fe <HAL_RCC_OscConfig+0x1e>
 80014fc:	e08d      	b.n	800161a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014fe:	4bc3      	ldr	r3, [pc, #780]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	220c      	movs	r2, #12
 8001504:	4013      	ands	r3, r2
 8001506:	2b04      	cmp	r3, #4
 8001508:	d00e      	beq.n	8001528 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800150a:	4bc0      	ldr	r3, [pc, #768]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	220c      	movs	r2, #12
 8001510:	4013      	ands	r3, r2
 8001512:	2b08      	cmp	r3, #8
 8001514:	d116      	bne.n	8001544 <HAL_RCC_OscConfig+0x64>
 8001516:	4bbd      	ldr	r3, [pc, #756]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	401a      	ands	r2, r3
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	429a      	cmp	r2, r3
 8001526:	d10d      	bne.n	8001544 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	4bb8      	ldr	r3, [pc, #736]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	4013      	ands	r3, r2
 8001532:	d100      	bne.n	8001536 <HAL_RCC_OscConfig+0x56>
 8001534:	e070      	b.n	8001618 <HAL_RCC_OscConfig+0x138>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d000      	beq.n	8001540 <HAL_RCC_OscConfig+0x60>
 800153e:	e06b      	b.n	8001618 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e2d8      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d107      	bne.n	800155c <HAL_RCC_OscConfig+0x7c>
 800154c:	4baf      	ldr	r3, [pc, #700]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4bae      	ldr	r3, [pc, #696]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	0249      	lsls	r1, r1, #9
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e02f      	b.n	80015bc <HAL_RCC_OscConfig+0xdc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x9e>
 8001564:	4ba9      	ldr	r3, [pc, #676]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4ba8      	ldr	r3, [pc, #672]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800156a:	49a9      	ldr	r1, [pc, #676]	; (8001810 <HAL_RCC_OscConfig+0x330>)
 800156c:	400a      	ands	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	4ba6      	ldr	r3, [pc, #664]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4ba5      	ldr	r3, [pc, #660]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001576:	49a7      	ldr	r1, [pc, #668]	; (8001814 <HAL_RCC_OscConfig+0x334>)
 8001578:	400a      	ands	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e01e      	b.n	80015bc <HAL_RCC_OscConfig+0xdc>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b05      	cmp	r3, #5
 8001584:	d10e      	bne.n	80015a4 <HAL_RCC_OscConfig+0xc4>
 8001586:	4ba1      	ldr	r3, [pc, #644]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4ba0      	ldr	r3, [pc, #640]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	02c9      	lsls	r1, r1, #11
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4b9d      	ldr	r3, [pc, #628]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b9c      	ldr	r3, [pc, #624]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	0249      	lsls	r1, r1, #9
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0xdc>
 80015a4:	4b99      	ldr	r3, [pc, #612]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b98      	ldr	r3, [pc, #608]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80015aa:	4999      	ldr	r1, [pc, #612]	; (8001810 <HAL_RCC_OscConfig+0x330>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	4b96      	ldr	r3, [pc, #600]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b95      	ldr	r3, [pc, #596]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80015b6:	4997      	ldr	r1, [pc, #604]	; (8001814 <HAL_RCC_OscConfig+0x334>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d014      	beq.n	80015ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc18 	bl	8000df8 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ce:	f7ff fc13 	bl	8000df8 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b64      	cmp	r3, #100	; 0x64
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e28a      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e0:	4b8a      	ldr	r3, [pc, #552]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	029b      	lsls	r3, r3, #10
 80015e8:	4013      	ands	r3, r2
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0xee>
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fc03 	bl	8000df8 <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbfe 	bl	8000df8 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e275      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	4b80      	ldr	r3, [pc, #512]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	029b      	lsls	r3, r3, #10
 8001612:	4013      	ands	r3, r2
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x118>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2202      	movs	r2, #2
 8001620:	4013      	ands	r3, r2
 8001622:	d100      	bne.n	8001626 <HAL_RCC_OscConfig+0x146>
 8001624:	e069      	b.n	80016fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001626:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	220c      	movs	r2, #12
 800162c:	4013      	ands	r3, r2
 800162e:	d00b      	beq.n	8001648 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001630:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	220c      	movs	r2, #12
 8001636:	4013      	ands	r3, r2
 8001638:	2b08      	cmp	r3, #8
 800163a:	d11c      	bne.n	8001676 <HAL_RCC_OscConfig+0x196>
 800163c:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	4013      	ands	r3, r2
 8001646:	d116      	bne.n	8001676 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001648:	4b70      	ldr	r3, [pc, #448]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2202      	movs	r2, #2
 800164e:	4013      	ands	r3, r2
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x17e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e24b      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b6b      	ldr	r3, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	22f8      	movs	r2, #248	; 0xf8
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	00da      	lsls	r2, r3, #3
 800166e:	4b67      	ldr	r3, [pc, #412]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001674:	e041      	b.n	80016fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d024      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001684:	2101      	movs	r1, #1
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fbb5 	bl	8000df8 <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fbb0 	bl	8000df8 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e227      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d0f1      	beq.n	8001694 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	22f8      	movs	r2, #248	; 0xf8
 80016b6:	4393      	bics	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00da      	lsls	r2, r3, #3
 80016c0:	4b52      	ldr	r3, [pc, #328]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80016c2:	430a      	orrs	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e018      	b.n	80016fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c8:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	438a      	bics	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb90 	bl	8000df8 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fb8b 	bl	8000df8 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e202      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f0:	4b46      	ldr	r3, [pc, #280]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2202      	movs	r2, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	d1f1      	bne.n	80016de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2208      	movs	r2, #8
 8001700:	4013      	ands	r3, r2
 8001702:	d036      	beq.n	8001772 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d019      	beq.n	8001740 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170c:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800170e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001710:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff fb6e 	bl	8000df8 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fb69 	bl	8000df8 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1e0      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	2202      	movs	r2, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d0f1      	beq.n	8001722 <HAL_RCC_OscConfig+0x242>
 800173e:	e018      	b.n	8001772 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001746:	2101      	movs	r1, #1
 8001748:	438a      	bics	r2, r1
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff fb54 	bl	8000df8 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fb4f 	bl	8000df8 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1c6      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d1f1      	bne.n	8001756 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2204      	movs	r2, #4
 8001778:	4013      	ands	r3, r2
 800177a:	d100      	bne.n	800177e <HAL_RCC_OscConfig+0x29e>
 800177c:	e0b4      	b.n	80018e8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	201f      	movs	r0, #31
 8001780:	183b      	adds	r3, r7, r0
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	055b      	lsls	r3, r3, #21
 800178e:	4013      	ands	r3, r2
 8001790:	d110      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0549      	lsls	r1, r1, #21
 800179c:	430a      	orrs	r2, r1
 800179e:	61da      	str	r2, [r3, #28]
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_RCC_OscConfig+0x338>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d11a      	bne.n	80017f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_RCC_OscConfig+0x338>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_RCC_OscConfig+0x338>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0049      	lsls	r1, r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fb13 	bl	8000df8 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7ff fb0e 	bl	8000df8 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e185      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x338>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d10e      	bne.n	800181c <HAL_RCC_OscConfig+0x33c>
 80017fe:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001800:	6a1a      	ldr	r2, [r3, #32]
 8001802:	4b02      	ldr	r3, [pc, #8]	; (800180c <HAL_RCC_OscConfig+0x32c>)
 8001804:	2101      	movs	r1, #1
 8001806:	430a      	orrs	r2, r1
 8001808:	621a      	str	r2, [r3, #32]
 800180a:	e035      	b.n	8001878 <HAL_RCC_OscConfig+0x398>
 800180c:	40021000 	.word	0x40021000
 8001810:	fffeffff 	.word	0xfffeffff
 8001814:	fffbffff 	.word	0xfffbffff
 8001818:	40007000 	.word	0x40007000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10c      	bne.n	800183e <HAL_RCC_OscConfig+0x35e>
 8001824:	4bb6      	ldr	r3, [pc, #728]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	4bb5      	ldr	r3, [pc, #724]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800182a:	2101      	movs	r1, #1
 800182c:	438a      	bics	r2, r1
 800182e:	621a      	str	r2, [r3, #32]
 8001830:	4bb3      	ldr	r3, [pc, #716]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	4bb2      	ldr	r3, [pc, #712]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001836:	2104      	movs	r1, #4
 8001838:	438a      	bics	r2, r1
 800183a:	621a      	str	r2, [r3, #32]
 800183c:	e01c      	b.n	8001878 <HAL_RCC_OscConfig+0x398>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x380>
 8001846:	4bae      	ldr	r3, [pc, #696]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001848:	6a1a      	ldr	r2, [r3, #32]
 800184a:	4bad      	ldr	r3, [pc, #692]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800184c:	2104      	movs	r1, #4
 800184e:	430a      	orrs	r2, r1
 8001850:	621a      	str	r2, [r3, #32]
 8001852:	4bab      	ldr	r3, [pc, #684]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001854:	6a1a      	ldr	r2, [r3, #32]
 8001856:	4baa      	ldr	r3, [pc, #680]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	621a      	str	r2, [r3, #32]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0x398>
 8001860:	4ba7      	ldr	r3, [pc, #668]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	4ba6      	ldr	r3, [pc, #664]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	621a      	str	r2, [r3, #32]
 800186c:	4ba4      	ldr	r3, [pc, #656]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	4ba3      	ldr	r3, [pc, #652]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001872:	2104      	movs	r1, #4
 8001874:	438a      	bics	r2, r1
 8001876:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d014      	beq.n	80018aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff faba 	bl	8000df8 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	e009      	b.n	800189e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff fab5 	bl	8000df8 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4a9b      	ldr	r2, [pc, #620]	; (8001b04 <HAL_RCC_OscConfig+0x624>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e12b      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189e:	4b98      	ldr	r3, [pc, #608]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	2202      	movs	r2, #2
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x3aa>
 80018a8:	e013      	b.n	80018d2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff faa5 	bl	8000df8 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b2:	e009      	b.n	80018c8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff faa0 	bl	8000df8 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4a91      	ldr	r2, [pc, #580]	; (8001b04 <HAL_RCC_OscConfig+0x624>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e116      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	4b8d      	ldr	r3, [pc, #564]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	2202      	movs	r2, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018d2:	231f      	movs	r3, #31
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	4b87      	ldr	r3, [pc, #540]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 80018e2:	4989      	ldr	r1, [pc, #548]	; (8001b08 <HAL_RCC_OscConfig+0x628>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2210      	movs	r2, #16
 80018ee:	4013      	ands	r3, r2
 80018f0:	d063      	beq.n	80019ba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d12a      	bne.n	8001950 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018fa:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	4b80      	ldr	r3, [pc, #512]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001900:	2104      	movs	r1, #4
 8001902:	430a      	orrs	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001906:	4b7e      	ldr	r3, [pc, #504]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190a:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800190c:	2101      	movs	r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7ff fa71 	bl	8000df8 <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800191c:	f7ff fa6c 	bl	8000df8 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0e3      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800192e:	4b74      	ldr	r3, [pc, #464]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	d0f1      	beq.n	800191c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001938:	4b71      	ldr	r3, [pc, #452]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193c:	22f8      	movs	r2, #248	; 0xf8
 800193e:	4393      	bics	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	00da      	lsls	r2, r3, #3
 8001948:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800194a:	430a      	orrs	r2, r1
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
 800194e:	e034      	b.n	80019ba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	3305      	adds	r3, #5
 8001956:	d111      	bne.n	800197c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001958:	4b69      	ldr	r3, [pc, #420]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800195a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195c:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800195e:	2104      	movs	r1, #4
 8001960:	438a      	bics	r2, r1
 8001962:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001964:	4b66      	ldr	r3, [pc, #408]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001968:	22f8      	movs	r2, #248	; 0xf8
 800196a:	4393      	bics	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	00da      	lsls	r2, r3, #3
 8001974:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001976:	430a      	orrs	r2, r1
 8001978:	635a      	str	r2, [r3, #52]	; 0x34
 800197a:	e01e      	b.n	80019ba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800197c:	4b60      	ldr	r3, [pc, #384]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800197e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001980:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001982:	2104      	movs	r1, #4
 8001984:	430a      	orrs	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001988:	4b5d      	ldr	r3, [pc, #372]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800198a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198c:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 800198e:	2101      	movs	r1, #1
 8001990:	438a      	bics	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fa30 	bl	8000df8 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800199e:	f7ff fa2b 	bl	8000df8 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0a2      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	2202      	movs	r2, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	d1f1      	bne.n	800199e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d100      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4e4>
 80019c2:	e097      	b.n	8001af4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c4:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	220c      	movs	r2, #12
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d100      	bne.n	80019d2 <HAL_RCC_OscConfig+0x4f2>
 80019d0:	e06b      	b.n	8001aaa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d14c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 80019e0:	494a      	ldr	r1, [pc, #296]	; (8001b0c <HAL_RCC_OscConfig+0x62c>)
 80019e2:	400a      	ands	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff fa07 	bl	8000df8 <HAL_GetTick>
 80019ea:	0003      	movs	r3, r0
 80019ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff fa02 	bl	8000df8 <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e079      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	049b      	lsls	r3, r3, #18
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	220f      	movs	r2, #15
 8001a14:	4393      	bics	r3, r2
 8001a16:	0019      	movs	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1c:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a3a      	ldr	r2, [pc, #232]	; (8001b10 <HAL_RCC_OscConfig+0x630>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	431a      	orrs	r2, r3
 8001a36:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	0449      	lsls	r1, r1, #17
 8001a46:	430a      	orrs	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f9d5 	bl	8000df8 <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f9d0 	bl	8000df8 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e047      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	049b      	lsls	r3, r3, #18
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x574>
 8001a72:	e03f      	b.n	8001af4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a7a:	4924      	ldr	r1, [pc, #144]	; (8001b0c <HAL_RCC_OscConfig+0x62c>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff f9ba 	bl	8000df8 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f9b5 	bl	8000df8 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e02c      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	049b      	lsls	r3, r3, #18
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5aa>
 8001aa8:	e024      	b.n	8001af4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e01f      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_RCC_OscConfig+0x620>)
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	025b      	lsls	r3, r3, #9
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d10e      	bne.n	8001af0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	23f0      	movs	r3, #240	; 0xf0
 8001ae4:	039b      	lsls	r3, r3, #14
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b008      	add	sp, #32
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	40021000 	.word	0x40021000
 8001b04:	00001388 	.word	0x00001388
 8001b08:	efffffff 	.word	0xefffffff
 8001b0c:	feffffff 	.word	0xfeffffff
 8001b10:	ffc2ffff 	.word	0xffc2ffff

08001b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0b3      	b.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <HAL_RCC_ClockConfig+0x184>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d911      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_ClockConfig+0x184>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <HAL_RCC_ClockConfig+0x184>)
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_RCC_ClockConfig+0x184>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e09a      	b.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	d015      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d006      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b6e:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001b74:	21e0      	movs	r1, #224	; 0xe0
 8001b76:	00c9      	lsls	r1, r1, #3
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	22f0      	movs	r2, #240	; 0xf0
 8001b82:	4393      	bics	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	d040      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	4013      	ands	r3, r2
 8001bac:	d114      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e06e      	b.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	049b      	lsls	r3, r3, #18
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d108      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e062      	b.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e05b      	b.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4393      	bics	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7ff f904 	bl	8000df8 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7ff f8ff 	bl	8000df8 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a27      	ldr	r2, [pc, #156]	; (8001ca0 <HAL_RCC_ClockConfig+0x18c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e042      	b.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	220c      	movs	r2, #12
 8001c10:	401a      	ands	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1ec      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_RCC_ClockConfig+0x184>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d211      	bcs.n	8001c4e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_RCC_ClockConfig+0x184>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4393      	bics	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_RCC_ClockConfig+0x184>)
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_RCC_ClockConfig+0x184>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e020      	b.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2204      	movs	r2, #4
 8001c54:	4013      	ands	r3, r2
 8001c56:	d009      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <HAL_RCC_ClockConfig+0x190>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c6c:	f000 f820 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c70:	0001      	movs	r1, r0
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_ClockConfig+0x188>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	220f      	movs	r2, #15
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x194>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	000a      	movs	r2, r1
 8001c82:	40da      	lsrs	r2, r3
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x198>)
 8001c86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f7fe ffb9 	bl	8000c00 <HAL_InitTick>
  
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	00001388 	.word	0x00001388
 8001ca4:	fffff8ff 	.word	0xfffff8ff
 8001ca8:	08005e04 	.word	0x08005e04
 8001cac:	20000000 	.word	0x20000000

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b08f      	sub	sp, #60	; 0x3c
 8001cb4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001cb6:	2314      	movs	r3, #20
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cbe:	c313      	stmia	r3!, {r0, r1, r4}
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	4a29      	ldr	r2, [pc, #164]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cca:	c313      	stmia	r3!, {r0, r1, r4}
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd8:	2300      	movs	r3, #0
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	220c      	movs	r2, #12
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d002      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x4a>
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d003      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x50>
 8001cf8:	e02d      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cfe:	e02d      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	0c9b      	lsrs	r3, r3, #18
 8001d04:	220f      	movs	r2, #15
 8001d06:	4013      	ands	r3, r2
 8001d08:	2214      	movs	r2, #20
 8001d0a:	18ba      	adds	r2, r7, r2
 8001d0c:	5cd3      	ldrb	r3, [r2, r3]
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	220f      	movs	r2, #15
 8001d16:	4013      	ands	r3, r2
 8001d18:	1d3a      	adds	r2, r7, #4
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	025b      	lsls	r3, r3, #9
 8001d24:	4013      	ands	r3, r2
 8001d26:	d009      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d2a:	4812      	ldr	r0, [pc, #72]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d2c:	f7fe f9fe 	bl	800012c <__udivsi3>
 8001d30:	0003      	movs	r3, r0
 8001d32:	001a      	movs	r2, r3
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	4353      	muls	r3, r2
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
 8001d3a:	e009      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d3e:	000a      	movs	r2, r1
 8001d40:	0152      	lsls	r2, r2, #5
 8001d42:	1a52      	subs	r2, r2, r1
 8001d44:	0193      	lsls	r3, r2, #6
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	185b      	adds	r3, r3, r1
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d54:	e002      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d5a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b00f      	add	sp, #60	; 0x3c
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	08005d84 	.word	0x08005d84
 8001d6c:	08005d94 	.word	0x08005d94
 8001d70:	40021000 	.word	0x40021000
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	20000000 	.word	0x20000000

08001d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d90:	f7ff fff2 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d94:	0001      	movs	r1, r0
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	4013      	ands	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	40d9      	lsrs	r1, r3
 8001da6:	000b      	movs	r3, r1
}    
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40021000 	.word	0x40021000
 8001db4:	08005e14 	.word	0x08005e14

08001db8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_RCC_GetClockConfig+0x4c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2203      	movs	r2, #3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_GetClockConfig+0x4c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	22f0      	movs	r2, #240	; 0xf0
 8001dda:	401a      	ands	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_RCC_GetClockConfig+0x4c>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	23e0      	movs	r3, #224	; 0xe0
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	401a      	ands	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_GetClockConfig+0x50>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	401a      	ands	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40022000 	.word	0x40022000

08001e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	025b      	lsls	r3, r3, #9
 8001e24:	4013      	ands	r3, r2
 8001e26:	d100      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e28:	e08e      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2017      	movs	r0, #23
 8001e2c:	183b      	adds	r3, r7, r0
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	055b      	lsls	r3, r3, #21
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d110      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	0549      	lsls	r1, r1, #21
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	61da      	str	r2, [r3, #28]
 8001e4c:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e4e:	69da      	ldr	r2, [r3, #28]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	055b      	lsls	r3, r3, #21
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d11a      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b48      	ldr	r3, [pc, #288]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	0049      	lsls	r1, r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7fe ffbd 	bl	8000df8 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	e008      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7fe ffb8 	bl	8000df8 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e077      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	23c0      	movs	r3, #192	; 0xc0
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d034      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d02c      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a33      	ldr	r2, [pc, #204]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ece:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	0249      	lsls	r1, r1, #9
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001edc:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee2:	492e      	ldr	r1, [pc, #184]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ee8:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7fe ff7f 	bl	8000df8 <HAL_GetTick>
 8001efa:	0003      	movs	r3, r0
 8001efc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efe:	e009      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe ff7a 	bl	8000df8 <HAL_GetTick>
 8001f04:	0002      	movs	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e038      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f32:	2317      	movs	r3, #23
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f3e:	69da      	ldr	r2, [r3, #28]
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f42:	4918      	ldr	r1, [pc, #96]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d009      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	2203      	movs	r2, #3
 8001f58:	4393      	bics	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d009      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	2210      	movs	r2, #16
 8001f76:	4393      	bics	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b006      	add	sp, #24
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
 8001f98:	fffffcff 	.word	0xfffffcff
 8001f9c:	fffeffff 	.word	0xfffeffff
 8001fa0:	00001388 	.word	0x00001388
 8001fa4:	efffffff 	.word	0xefffffff

08001fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e042      	b.n	8002040 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	223d      	movs	r2, #61	; 0x3d
 8001fbe:	5c9b      	ldrb	r3, [r3, r2]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	223c      	movs	r2, #60	; 0x3c
 8001fca:	2100      	movs	r1, #0
 8001fcc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f000 f839 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	223d      	movs	r2, #61	; 0x3d
 8001fda:	2102      	movs	r1, #2
 8001fdc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	0010      	movs	r0, r2
 8001fea:	f000 f9b7 	bl	800235c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2246      	movs	r2, #70	; 0x46
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	223e      	movs	r2, #62	; 0x3e
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	223f      	movs	r2, #63	; 0x3f
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2240      	movs	r2, #64	; 0x40
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2241      	movs	r2, #65	; 0x41
 8002012:	2101      	movs	r1, #1
 8002014:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2242      	movs	r2, #66	; 0x42
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2243      	movs	r2, #67	; 0x43
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2244      	movs	r2, #68	; 0x44
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2245      	movs	r2, #69	; 0x45
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	223d      	movs	r2, #61	; 0x3d
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	223d      	movs	r2, #61	; 0x3d
 8002064:	5c9b      	ldrb	r3, [r3, r2]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d001      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e035      	b.n	80020dc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	223d      	movs	r2, #61	; 0x3d
 8002074:	2102      	movs	r1, #2
 8002076:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	430a      	orrs	r2, r1
 8002086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_TIM_Base_Start_IT+0x8c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_TIM_Base_Start_IT+0x4e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_TIM_Base_Start_IT+0x90>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d004      	beq.n	80020a6 <HAL_TIM_Base_Start_IT+0x4e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a12      	ldr	r2, [pc, #72]	; (80020ec <HAL_TIM_Base_Start_IT+0x94>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d111      	bne.n	80020ca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2207      	movs	r2, #7
 80020ae:	4013      	ands	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b06      	cmp	r3, #6
 80020b6:	d010      	beq.n	80020da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2101      	movs	r1, #1
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c8:	e007      	b.n	80020da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b004      	add	sp, #16
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40012c00 	.word	0x40012c00
 80020e8:	40000400 	.word	0x40000400
 80020ec:	40014000 	.word	0x40014000

080020f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2202      	movs	r2, #2
 8002100:	4013      	ands	r3, r2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d124      	bne.n	8002150 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d11d      	bne.n	8002150 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2203      	movs	r2, #3
 800211a:	4252      	negs	r2, r2
 800211c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2203      	movs	r2, #3
 800212c:	4013      	ands	r3, r2
 800212e:	d004      	beq.n	800213a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 f8fa 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8002138:	e007      	b.n	800214a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f8ed 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f000 f8f9 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2204      	movs	r2, #4
 8002158:	4013      	ands	r3, r2
 800215a:	2b04      	cmp	r3, #4
 800215c:	d125      	bne.n	80021aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2204      	movs	r2, #4
 8002166:	4013      	ands	r3, r2
 8002168:	2b04      	cmp	r3, #4
 800216a:	d11e      	bne.n	80021aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2205      	movs	r2, #5
 8002172:	4252      	negs	r2, r2
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	23c0      	movs	r3, #192	; 0xc0
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f000 f8cd 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8002192:	e007      	b.n	80021a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 f8c0 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 f8cc 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2208      	movs	r2, #8
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d124      	bne.n	8002202 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2208      	movs	r2, #8
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d11d      	bne.n	8002202 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2209      	movs	r2, #9
 80021cc:	4252      	negs	r2, r2
 80021ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	2203      	movs	r2, #3
 80021de:	4013      	ands	r3, r2
 80021e0:	d004      	beq.n	80021ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f8a1 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 80021ea:	e007      	b.n	80021fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 f894 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	0018      	movs	r0, r3
 80021f8:	f000 f8a0 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2210      	movs	r2, #16
 800220a:	4013      	ands	r3, r2
 800220c:	2b10      	cmp	r3, #16
 800220e:	d125      	bne.n	800225c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2210      	movs	r2, #16
 8002218:	4013      	ands	r3, r2
 800221a:	2b10      	cmp	r3, #16
 800221c:	d11e      	bne.n	800225c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2211      	movs	r2, #17
 8002224:	4252      	negs	r2, r2
 8002226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2208      	movs	r2, #8
 800222c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	23c0      	movs	r3, #192	; 0xc0
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f874 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8002244:	e007      	b.n	8002256 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f867 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	0018      	movs	r0, r3
 8002252:	f000 f873 	bl	800233c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2201      	movs	r2, #1
 8002264:	4013      	ands	r3, r2
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10f      	bne.n	800228a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	4013      	ands	r3, r2
 8002274:	2b01      	cmp	r3, #1
 8002276:	d108      	bne.n	800228a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2202      	movs	r2, #2
 800227e:	4252      	negs	r2, r2
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0018      	movs	r0, r3
 8002286:	f7fe fb69 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2280      	movs	r2, #128	; 0x80
 8002292:	4013      	ands	r3, r2
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d10f      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b80      	cmp	r3, #128	; 0x80
 80022a4:	d108      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2281      	movs	r2, #129	; 0x81
 80022ac:	4252      	negs	r2, r2
 80022ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 f8d0 	bl	8002458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d10f      	bne.n	80022e6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2240      	movs	r2, #64	; 0x40
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d108      	bne.n	80022e6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2241      	movs	r2, #65	; 0x41
 80022da:	4252      	negs	r2, r2
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f833 	bl	800234c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2220      	movs	r2, #32
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d10f      	bne.n	8002314 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d108      	bne.n	8002314 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2221      	movs	r2, #33	; 0x21
 8002308:	4252      	negs	r2, r2
 800230a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0018      	movs	r0, r3
 8002310:	f000 f89a 	bl	8002448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}

0800235c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a2f      	ldr	r2, [pc, #188]	; (800242c <TIM_Base_SetConfig+0xd0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0x20>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a2e      	ldr	r2, [pc, #184]	; (8002430 <TIM_Base_SetConfig+0xd4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d108      	bne.n	800238e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2270      	movs	r2, #112	; 0x70
 8002380:	4393      	bics	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a26      	ldr	r2, [pc, #152]	; (800242c <TIM_Base_SetConfig+0xd0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a25      	ldr	r2, [pc, #148]	; (8002430 <TIM_Base_SetConfig+0xd4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00f      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a24      	ldr	r2, [pc, #144]	; (8002434 <TIM_Base_SetConfig+0xd8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00b      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <TIM_Base_SetConfig+0xdc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a22      	ldr	r2, [pc, #136]	; (800243c <TIM_Base_SetConfig+0xe0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d003      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a21      	ldr	r2, [pc, #132]	; (8002440 <TIM_Base_SetConfig+0xe4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d108      	bne.n	80023d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a20      	ldr	r2, [pc, #128]	; (8002444 <TIM_Base_SetConfig+0xe8>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	4393      	bics	r3, r2
 80023d6:	001a      	movs	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a0c      	ldr	r2, [pc, #48]	; (800242c <TIM_Base_SetConfig+0xd0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00b      	beq.n	8002416 <TIM_Base_SetConfig+0xba>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <TIM_Base_SetConfig+0xdc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <TIM_Base_SetConfig+0xba>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a0c      	ldr	r2, [pc, #48]	; (800243c <TIM_Base_SetConfig+0xe0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <TIM_Base_SetConfig+0xba>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <TIM_Base_SetConfig+0xe4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d103      	bne.n	800241e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	615a      	str	r2, [r3, #20]
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b004      	add	sp, #16
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40000400 	.word	0x40000400
 8002434:	40002000 	.word	0x40002000
 8002438:	40014000 	.word	0x40014000
 800243c:	40014400 	.word	0x40014400
 8002440:	40014800 	.word	0x40014800
 8002444:	fffffcff 	.word	0xfffffcff

08002448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e044      	b.n	8002504 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2274      	movs	r2, #116	; 0x74
 8002486:	2100      	movs	r1, #0
 8002488:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f7fe fb2f 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2224      	movs	r2, #36	; 0x24
 8002496:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2101      	movs	r1, #1
 80024a4:	438a      	bics	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 f9b6 	bl	800281c <UART_SetConfig>
 80024b0:	0003      	movs	r3, r0
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e024      	b.n	8002504 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 fae9 	bl	8002a9c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	490d      	ldr	r1, [pc, #52]	; (800250c <HAL_UART_Init+0xa4>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2108      	movs	r1, #8
 80024e6:	438a      	bics	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 fb81 	bl	8002c04 <UART_CheckIdleState>
 8002502:	0003      	movs	r3, r0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b002      	add	sp, #8
 800250a:	bd80      	pop	{r7, pc}
 800250c:	fffff7ff 	.word	0xfffff7ff

08002510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	1dbb      	adds	r3, r7, #6
 800251e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002524:	2b20      	cmp	r3, #32
 8002526:	d000      	beq.n	800252a <HAL_UART_Transmit+0x1a>
 8002528:	e096      	b.n	8002658 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_UART_Transmit+0x28>
 8002530:	1dbb      	adds	r3, r7, #6
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e08e      	b.n	800265a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	015b      	lsls	r3, r3, #5
 8002544:	429a      	cmp	r2, r3
 8002546:	d109      	bne.n	800255c <HAL_UART_Transmit+0x4c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2201      	movs	r2, #1
 8002554:	4013      	ands	r3, r2
 8002556:	d001      	beq.n	800255c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e07e      	b.n	800265a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2274      	movs	r2, #116	; 0x74
 8002560:	5c9b      	ldrb	r3, [r3, r2]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_UART_Transmit+0x5a>
 8002566:	2302      	movs	r3, #2
 8002568:	e077      	b.n	800265a <HAL_UART_Transmit+0x14a>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2274      	movs	r2, #116	; 0x74
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	2100      	movs	r1, #0
 8002578:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2221      	movs	r2, #33	; 0x21
 800257e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002580:	f7fe fc3a 	bl	8000df8 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1dba      	adds	r2, r7, #6
 800258c:	2150      	movs	r1, #80	; 0x50
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1dba      	adds	r2, r7, #6
 8002596:	2152      	movs	r1, #82	; 0x52
 8002598:	8812      	ldrh	r2, [r2, #0]
 800259a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	015b      	lsls	r3, r3, #5
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d108      	bne.n	80025ba <HAL_UART_Transmit+0xaa>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e003      	b.n	80025c2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2274      	movs	r2, #116	; 0x74
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80025ca:	e02d      	b.n	8002628 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	0013      	movs	r3, r2
 80025d6:	2200      	movs	r2, #0
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	f000 fb5b 	bl	8002c94 <UART_WaitOnFlagUntilTimeout>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e039      	b.n	800265a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	881a      	ldrh	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	05d2      	lsls	r2, r2, #23
 80025f6:	0dd2      	lsrs	r2, r2, #23
 80025f8:	b292      	uxth	r2, r2
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	3302      	adds	r3, #2
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	e008      	b.n	8002616 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b292      	uxth	r2, r2
 800260e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	3301      	adds	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2252      	movs	r2, #82	; 0x52
 800261a:	5a9b      	ldrh	r3, [r3, r2]
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b299      	uxth	r1, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2252      	movs	r2, #82	; 0x52
 8002626:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2252      	movs	r2, #82	; 0x52
 800262c:	5a9b      	ldrh	r3, [r3, r2]
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1cb      	bne.n	80025cc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	0013      	movs	r3, r2
 800263e:	2200      	movs	r2, #0
 8002640:	2140      	movs	r1, #64	; 0x40
 8002642:	f000 fb27 	bl	8002c94 <UART_WaitOnFlagUntilTimeout>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d001      	beq.n	800264e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e005      	b.n	800265a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b008      	add	sp, #32
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	1dbb      	adds	r3, r7, #6
 8002672:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002678:	2b20      	cmp	r3, #32
 800267a:	d000      	beq.n	800267e <HAL_UART_Receive+0x1a>
 800267c:	e0c6      	b.n	800280c <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_UART_Receive+0x28>
 8002684:	1dbb      	adds	r3, r7, #6
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0be      	b.n	800280e <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	015b      	lsls	r3, r3, #5
 8002698:	429a      	cmp	r2, r3
 800269a:	d109      	bne.n	80026b0 <HAL_UART_Receive+0x4c>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2201      	movs	r2, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0ae      	b.n	800280e <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2274      	movs	r2, #116	; 0x74
 80026b4:	5c9b      	ldrb	r3, [r3, r2]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_UART_Receive+0x5a>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0a7      	b.n	800280e <HAL_UART_Receive+0x1aa>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2274      	movs	r2, #116	; 0x74
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	2100      	movs	r1, #0
 80026cc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2222      	movs	r2, #34	; 0x22
 80026d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026da:	f7fe fb8d 	bl	8000df8 <HAL_GetTick>
 80026de:	0003      	movs	r3, r0
 80026e0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1dba      	adds	r2, r7, #6
 80026e6:	2158      	movs	r1, #88	; 0x58
 80026e8:	8812      	ldrh	r2, [r2, #0]
 80026ea:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1dba      	adds	r2, r7, #6
 80026f0:	215a      	movs	r1, #90	; 0x5a
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	015b      	lsls	r3, r3, #5
 80026fe:	429a      	cmp	r2, r3
 8002700:	d10d      	bne.n	800271e <HAL_UART_Receive+0xba>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d104      	bne.n	8002714 <HAL_UART_Receive+0xb0>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	225c      	movs	r2, #92	; 0x5c
 800270e:	4942      	ldr	r1, [pc, #264]	; (8002818 <HAL_UART_Receive+0x1b4>)
 8002710:	5299      	strh	r1, [r3, r2]
 8002712:	e01a      	b.n	800274a <HAL_UART_Receive+0xe6>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	225c      	movs	r2, #92	; 0x5c
 8002718:	21ff      	movs	r1, #255	; 0xff
 800271a:	5299      	strh	r1, [r3, r2]
 800271c:	e015      	b.n	800274a <HAL_UART_Receive+0xe6>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_UART_Receive+0xde>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d104      	bne.n	8002738 <HAL_UART_Receive+0xd4>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	225c      	movs	r2, #92	; 0x5c
 8002732:	21ff      	movs	r1, #255	; 0xff
 8002734:	5299      	strh	r1, [r3, r2]
 8002736:	e008      	b.n	800274a <HAL_UART_Receive+0xe6>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	225c      	movs	r2, #92	; 0x5c
 800273c:	217f      	movs	r1, #127	; 0x7f
 800273e:	5299      	strh	r1, [r3, r2]
 8002740:	e003      	b.n	800274a <HAL_UART_Receive+0xe6>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	225c      	movs	r2, #92	; 0x5c
 8002746:	2100      	movs	r1, #0
 8002748:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800274a:	2312      	movs	r3, #18
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	215c      	movs	r1, #92	; 0x5c
 8002752:	5a52      	ldrh	r2, [r2, r1]
 8002754:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	015b      	lsls	r3, r3, #5
 800275e:	429a      	cmp	r2, r3
 8002760:	d108      	bne.n	8002774 <HAL_UART_Receive+0x110>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e003      	b.n	800277c <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2274      	movs	r2, #116	; 0x74
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002784:	e037      	b.n	80027f6 <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	0013      	movs	r3, r2
 8002790:	2200      	movs	r2, #0
 8002792:	2120      	movs	r1, #32
 8002794:	f000 fa7e 	bl	8002c94 <UART_WaitOnFlagUntilTimeout>
 8002798:	1e03      	subs	r3, r0, #0
 800279a:	d001      	beq.n	80027a0 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e036      	b.n	800280e <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10e      	bne.n	80027c4 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2212      	movs	r2, #18
 80027b0:	18ba      	adds	r2, r7, r2
 80027b2:	8812      	ldrh	r2, [r2, #0]
 80027b4:	4013      	ands	r3, r2
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	3302      	adds	r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	e00f      	b.n	80027e4 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2212      	movs	r2, #18
 80027d0:	18ba      	adds	r2, r7, r2
 80027d2:	8812      	ldrh	r2, [r2, #0]
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	4013      	ands	r3, r2
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	225a      	movs	r2, #90	; 0x5a
 80027e8:	5a9b      	ldrh	r3, [r3, r2]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b299      	uxth	r1, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	225a      	movs	r2, #90	; 0x5a
 80027f4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	225a      	movs	r2, #90	; 0x5a
 80027fa:	5a9b      	ldrh	r3, [r3, r2]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1c1      	bne.n	8002786 <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b008      	add	sp, #32
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	000001ff 	.word	0x000001ff

0800281c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002824:	231e      	movs	r3, #30
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a8d      	ldr	r2, [pc, #564]	; (8002a80 <UART_SetConfig+0x264>)
 800284c:	4013      	ands	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a88      	ldr	r2, [pc, #544]	; (8002a84 <UART_SetConfig+0x268>)
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a7f      	ldr	r2, [pc, #508]	; (8002a88 <UART_SetConfig+0x26c>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a7b      	ldr	r2, [pc, #492]	; (8002a8c <UART_SetConfig+0x270>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d127      	bne.n	80028f2 <UART_SetConfig+0xd6>
 80028a2:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <UART_SetConfig+0x274>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	2203      	movs	r2, #3
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d00d      	beq.n	80028ca <UART_SetConfig+0xae>
 80028ae:	d81b      	bhi.n	80028e8 <UART_SetConfig+0xcc>
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d014      	beq.n	80028de <UART_SetConfig+0xc2>
 80028b4:	d818      	bhi.n	80028e8 <UART_SetConfig+0xcc>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <UART_SetConfig+0xa4>
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d00a      	beq.n	80028d4 <UART_SetConfig+0xb8>
 80028be:	e013      	b.n	80028e8 <UART_SetConfig+0xcc>
 80028c0:	231f      	movs	r3, #31
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e021      	b.n	800290e <UART_SetConfig+0xf2>
 80028ca:	231f      	movs	r3, #31
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	2202      	movs	r2, #2
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e01c      	b.n	800290e <UART_SetConfig+0xf2>
 80028d4:	231f      	movs	r3, #31
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	2204      	movs	r2, #4
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e017      	b.n	800290e <UART_SetConfig+0xf2>
 80028de:	231f      	movs	r3, #31
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2208      	movs	r2, #8
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e012      	b.n	800290e <UART_SetConfig+0xf2>
 80028e8:	231f      	movs	r3, #31
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2210      	movs	r2, #16
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e00d      	b.n	800290e <UART_SetConfig+0xf2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a67      	ldr	r2, [pc, #412]	; (8002a94 <UART_SetConfig+0x278>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d104      	bne.n	8002906 <UART_SetConfig+0xea>
 80028fc:	231f      	movs	r3, #31
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e003      	b.n	800290e <UART_SetConfig+0xf2>
 8002906:	231f      	movs	r3, #31
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	2210      	movs	r2, #16
 800290c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	429a      	cmp	r2, r3
 8002918:	d15d      	bne.n	80029d6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800291a:	231f      	movs	r3, #31
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d015      	beq.n	8002950 <UART_SetConfig+0x134>
 8002924:	dc18      	bgt.n	8002958 <UART_SetConfig+0x13c>
 8002926:	2b04      	cmp	r3, #4
 8002928:	d00d      	beq.n	8002946 <UART_SetConfig+0x12a>
 800292a:	dc15      	bgt.n	8002958 <UART_SetConfig+0x13c>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <UART_SetConfig+0x11a>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d005      	beq.n	8002940 <UART_SetConfig+0x124>
 8002934:	e010      	b.n	8002958 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002936:	f7ff fa29 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 800293a:	0003      	movs	r3, r0
 800293c:	61bb      	str	r3, [r7, #24]
        break;
 800293e:	e012      	b.n	8002966 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002940:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <UART_SetConfig+0x27c>)
 8002942:	61bb      	str	r3, [r7, #24]
        break;
 8002944:	e00f      	b.n	8002966 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002946:	f7ff f9b3 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 800294a:	0003      	movs	r3, r0
 800294c:	61bb      	str	r3, [r7, #24]
        break;
 800294e:	e00a      	b.n	8002966 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	61bb      	str	r3, [r7, #24]
        break;
 8002956:	e006      	b.n	8002966 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800295c:	231e      	movs	r3, #30
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
        break;
 8002964:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d100      	bne.n	800296e <UART_SetConfig+0x152>
 800296c:	e07b      	b.n	8002a66 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	005a      	lsls	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	18d2      	adds	r2, r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	0019      	movs	r1, r3
 8002980:	0010      	movs	r0, r2
 8002982:	f7fd fbd3 	bl	800012c <__udivsi3>
 8002986:	0003      	movs	r3, r0
 8002988:	b29b      	uxth	r3, r3
 800298a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	d91c      	bls.n	80029cc <UART_SetConfig+0x1b0>
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	429a      	cmp	r2, r3
 800299a:	d217      	bcs.n	80029cc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	200e      	movs	r0, #14
 80029a2:	183b      	adds	r3, r7, r0
 80029a4:	210f      	movs	r1, #15
 80029a6:	438a      	bics	r2, r1
 80029a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2207      	movs	r2, #7
 80029b2:	4013      	ands	r3, r2
 80029b4:	b299      	uxth	r1, r3
 80029b6:	183b      	adds	r3, r7, r0
 80029b8:	183a      	adds	r2, r7, r0
 80029ba:	8812      	ldrh	r2, [r2, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	183a      	adds	r2, r7, r0
 80029c6:	8812      	ldrh	r2, [r2, #0]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	e04c      	b.n	8002a66 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80029cc:	231e      	movs	r3, #30
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	e047      	b.n	8002a66 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029d6:	231f      	movs	r3, #31
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d015      	beq.n	8002a0c <UART_SetConfig+0x1f0>
 80029e0:	dc18      	bgt.n	8002a14 <UART_SetConfig+0x1f8>
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d00d      	beq.n	8002a02 <UART_SetConfig+0x1e6>
 80029e6:	dc15      	bgt.n	8002a14 <UART_SetConfig+0x1f8>
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <UART_SetConfig+0x1d6>
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d005      	beq.n	80029fc <UART_SetConfig+0x1e0>
 80029f0:	e010      	b.n	8002a14 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029f2:	f7ff f9cb 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]
        break;
 80029fa:	e012      	b.n	8002a22 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <UART_SetConfig+0x27c>)
 80029fe:	61bb      	str	r3, [r7, #24]
        break;
 8002a00:	e00f      	b.n	8002a22 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a02:	f7ff f955 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8002a06:	0003      	movs	r3, r0
 8002a08:	61bb      	str	r3, [r7, #24]
        break;
 8002a0a:	e00a      	b.n	8002a22 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	61bb      	str	r3, [r7, #24]
        break;
 8002a12:	e006      	b.n	8002a22 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a18:	231e      	movs	r3, #30
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
        break;
 8002a20:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01e      	beq.n	8002a66 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	085a      	lsrs	r2, r3, #1
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	18d2      	adds	r2, r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0019      	movs	r1, r3
 8002a38:	0010      	movs	r0, r2
 8002a3a:	f7fd fb77 	bl	800012c <__udivsi3>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b0f      	cmp	r3, #15
 8002a48:	d909      	bls.n	8002a5e <UART_SetConfig+0x242>
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	025b      	lsls	r3, r3, #9
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d204      	bcs.n	8002a5e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	e003      	b.n	8002a66 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002a5e:	231e      	movs	r3, #30
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a72:	231e      	movs	r3, #30
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	781b      	ldrb	r3, [r3, #0]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b008      	add	sp, #32
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	ffff69f3 	.word	0xffff69f3
 8002a84:	ffffcfff 	.word	0xffffcfff
 8002a88:	fffff4ff 	.word	0xfffff4ff
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40004400 	.word	0x40004400
 8002a98:	007a1200 	.word	0x007a1200

08002a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d00b      	beq.n	8002ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a4a      	ldr	r2, [pc, #296]	; (8002be0 <UART_AdvFeatureConfig+0x144>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	0019      	movs	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	2202      	movs	r2, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d00b      	beq.n	8002ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4a43      	ldr	r2, [pc, #268]	; (8002be4 <UART_AdvFeatureConfig+0x148>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	0019      	movs	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2204      	movs	r2, #4
 8002aee:	4013      	ands	r3, r2
 8002af0:	d00b      	beq.n	8002b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <UART_AdvFeatureConfig+0x14c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2208      	movs	r2, #8
 8002b10:	4013      	ands	r3, r2
 8002b12:	d00b      	beq.n	8002b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a34      	ldr	r2, [pc, #208]	; (8002bec <UART_AdvFeatureConfig+0x150>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2210      	movs	r2, #16
 8002b32:	4013      	ands	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <UART_AdvFeatureConfig+0x154>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2220      	movs	r2, #32
 8002b54:	4013      	ands	r3, r2
 8002b56:	d00b      	beq.n	8002b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <UART_AdvFeatureConfig+0x158>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2240      	movs	r2, #64	; 0x40
 8002b76:	4013      	ands	r3, r2
 8002b78:	d01d      	beq.n	8002bb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <UART_AdvFeatureConfig+0x15c>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	035b      	lsls	r3, r3, #13
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d10b      	bne.n	8002bb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <UART_AdvFeatureConfig+0x160>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d00b      	beq.n	8002bd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <UART_AdvFeatureConfig+0x164>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  }
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	fffdffff 	.word	0xfffdffff
 8002be4:	fffeffff 	.word	0xfffeffff
 8002be8:	fffbffff 	.word	0xfffbffff
 8002bec:	ffff7fff 	.word	0xffff7fff
 8002bf0:	ffffefff 	.word	0xffffefff
 8002bf4:	ffffdfff 	.word	0xffffdfff
 8002bf8:	ffefffff 	.word	0xffefffff
 8002bfc:	ff9fffff 	.word	0xff9fffff
 8002c00:	fff7ffff 	.word	0xfff7ffff

08002c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	2100      	movs	r1, #0
 8002c12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c14:	f7fe f8f0 	bl	8000df8 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2208      	movs	r2, #8
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d10c      	bne.n	8002c44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	0391      	lsls	r1, r2, #14
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <UART_CheckIdleState+0x8c>)
 8002c34:	9200      	str	r2, [sp, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f000 f82c 	bl	8002c94 <UART_WaitOnFlagUntilTimeout>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d001      	beq.n	8002c44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e021      	b.n	8002c88 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d10c      	bne.n	8002c6c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	03d1      	lsls	r1, r2, #15
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <UART_CheckIdleState+0x8c>)
 8002c5c:	9200      	str	r2, [sp, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f000 f818 	bl	8002c94 <UART_WaitOnFlagUntilTimeout>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d001      	beq.n	8002c6c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e00d      	b.n	8002c88 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2274      	movs	r2, #116	; 0x74
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	01ffffff 	.word	0x01ffffff

08002c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b094      	sub	sp, #80	; 0x50
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca4:	e0a3      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca8:	3301      	adds	r3, #1
 8002caa:	d100      	bne.n	8002cae <UART_WaitOnFlagUntilTimeout+0x1a>
 8002cac:	e09f      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7fe f8a3 	bl	8000df8 <HAL_GetTick>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d13d      	bne.n	8002d40 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8002cce:	2301      	movs	r3, #1
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	494c      	ldr	r1, [pc, #304]	; (8002e18 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	f383 8810 	msr	PRIMASK, r3
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8002d00:	2301      	movs	r3, #1
 8002d02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	f383 8810 	msr	PRIMASK, r3
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2101      	movs	r1, #1
 8002d18:	438a      	bics	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d22:	f383 8810 	msr	PRIMASK, r3
}
 8002d26:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2274      	movs	r2, #116	; 0x74
 8002d38:	2100      	movs	r1, #0
 8002d3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e067      	b.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2204      	movs	r2, #4
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d050      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	401a      	ands	r2, r3
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d146      	bne.n	8002dee <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6e:	613b      	str	r3, [r7, #16]
  return(result);
 8002d70:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d74:	2301      	movs	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4923      	ldr	r1, [pc, #140]	; (8002e18 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f383 8810 	msr	PRIMASK, r3
}
 8002d9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002da0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002da2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002da6:	2301      	movs	r3, #1
 8002da8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f383 8810 	msr	PRIMASK, r3
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	438a      	bics	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	2120      	movs	r1, #32
 8002de0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2274      	movs	r2, #116	; 0x74
 8002de6:	2100      	movs	r1, #0
 8002de8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e010      	b.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	4013      	ands	r3, r2
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	425a      	negs	r2, r3
 8002dfe:	4153      	adcs	r3, r2
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	001a      	movs	r2, r3
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d100      	bne.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002e0c:	e74b      	b.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b014      	add	sp, #80	; 0x50
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	fffffe5f 	.word	0xfffffe5f

08002e1c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e22:	f3ef 8305 	mrs	r3, IPSR
 8002e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e32:	607b      	str	r3, [r7, #4]
  return(result);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <osKernelInitialize+0x2e>
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <osKernelInitialize+0x54>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d103      	bne.n	8002e4a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8002e42:	2306      	movs	r3, #6
 8002e44:	425b      	negs	r3, r3
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e00c      	b.n	8002e64 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <osKernelInitialize+0x54>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <osKernelInitialize+0x54>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e002      	b.n	8002e64 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	425b      	negs	r3, r3
 8002e62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	20000090 	.word	0x20000090

08002e74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e7a:	f3ef 8305 	mrs	r3, IPSR
 8002e7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e86:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8a:	607b      	str	r3, [r7, #4]
  return(result);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <osKernelStart+0x2e>
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <osKernelStart+0x58>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d103      	bne.n	8002ea2 <osKernelStart+0x2e>
    stat = osErrorISR;
 8002e9a:	2306      	movs	r3, #6
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	e00e      	b.n	8002ec0 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <osKernelStart+0x58>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <osKernelStart+0x58>)
 8002eac:	2202      	movs	r2, #2
 8002eae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002eb0:	f000 ff7e 	bl	8003db0 <vTaskStartScheduler>
      stat = osOK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e002      	b.n	8002ec0 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b004      	add	sp, #16
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	20000090 	.word	0x20000090

08002ed0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b090      	sub	sp, #64	; 0x40
 8002ed4:	af04      	add	r7, sp, #16
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ee0:	f3ef 8305 	mrs	r3, IPSR
 8002ee4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ee6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d000      	beq.n	8002eee <osThreadNew+0x1e>
 8002eec:	e090      	b.n	8003010 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eee:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <osThreadNew+0x34>
 8002efa:	4b48      	ldr	r3, [pc, #288]	; (800301c <osThreadNew+0x14c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d100      	bne.n	8002f04 <osThreadNew+0x34>
 8002f02:	e085      	b.n	8003010 <osThreadNew+0x140>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d100      	bne.n	8002f0c <osThreadNew+0x3c>
 8002f0a:	e081      	b.n	8003010 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002f10:	2318      	movs	r3, #24
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8002f14:	2117      	movs	r1, #23
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8002f20:	2301      	movs	r3, #1
 8002f22:	425b      	negs	r3, r3
 8002f24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d044      	beq.n	8002fb6 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <osThreadNew+0x6a>
        name = attr->name;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <osThreadNew+0x8e>
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	2b38      	cmp	r3, #56	; 0x38
 8002f52:	d804      	bhi.n	8002f5e <osThreadNew+0x8e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d001      	beq.n	8002f62 <osThreadNew+0x92>
        return (NULL);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e057      	b.n	8003012 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <osThreadNew+0xc8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b5b      	cmp	r3, #91	; 0x5b
 8002f80:	d90a      	bls.n	8002f98 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <osThreadNew+0xc8>
        mem = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	e010      	b.n	8002fba <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10c      	bne.n	8002fba <osThreadNew+0xea>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d108      	bne.n	8002fba <osThreadNew+0xea>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d104      	bne.n	8002fba <osThreadNew+0xea>
          mem = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	e001      	b.n	8002fba <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d112      	bne.n	8002fe6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fc8:	68bd      	ldr	r5, [r7, #8]
 8002fca:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	9302      	str	r3, [sp, #8]
 8002fd2:	9201      	str	r2, [sp, #4]
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	002b      	movs	r3, r5
 8002fda:	0022      	movs	r2, r4
 8002fdc:	f000 fd49 	bl	8003a72 <xTaskCreateStatic>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e014      	b.n	8003010 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d111      	bne.n	8003010 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68bc      	ldr	r4, [r7, #8]
 8002ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	0023      	movs	r3, r4
 8003002:	f000 fd79 	bl	8003af8 <xTaskCreate>
 8003006:	0003      	movs	r3, r0
 8003008:	2b01      	cmp	r3, #1
 800300a:	d001      	beq.n	8003010 <osThreadNew+0x140>
          hTask = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003010:	693b      	ldr	r3, [r7, #16]
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b00c      	add	sp, #48	; 0x30
 8003018:	bdb0      	pop	{r4, r5, r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	20000090 	.word	0x20000090

08003020 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003028:	f3ef 8305 	mrs	r3, IPSR
 800302c:	613b      	str	r3, [r7, #16]
  return(result);
 800302e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003034:	f3ef 8310 	mrs	r3, PRIMASK
 8003038:	60fb      	str	r3, [r7, #12]
  return(result);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <osDelay+0x30>
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <osDelay+0x4c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d103      	bne.n	8003050 <osDelay+0x30>
    stat = osErrorISR;
 8003048:	2306      	movs	r3, #6
 800304a:	425b      	negs	r3, r3
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e008      	b.n	8003062 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <osDelay+0x42>
      vTaskDelay(ticks);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f000 fe81 	bl	8003d64 <vTaskDelay>
    }
  }

  return (stat);
 8003062:	697b      	ldr	r3, [r7, #20]
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b006      	add	sp, #24
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000090 	.word	0x20000090

08003070 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a06      	ldr	r2, [pc, #24]	; (8003098 <vApplicationGetIdleTaskMemory+0x28>)
 8003080:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4a05      	ldr	r2, [pc, #20]	; (800309c <vApplicationGetIdleTaskMemory+0x2c>)
 8003086:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	601a      	str	r2, [r3, #0]
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b004      	add	sp, #16
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	20000094 	.word	0x20000094
 800309c:	200000f0 	.word	0x200000f0

080030a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a06      	ldr	r2, [pc, #24]	; (80030c8 <vApplicationGetTimerTaskMemory+0x28>)
 80030b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4a05      	ldr	r2, [pc, #20]	; (80030cc <vApplicationGetTimerTaskMemory+0x2c>)
 80030b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	0052      	lsls	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200002f0 	.word	0x200002f0
 80030cc:	2000034c 	.word	0x2000034c

080030d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3308      	adds	r3, #8
 80030dc:	001a      	movs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	4252      	negs	r2, r2
 80030e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3308      	adds	r3, #8
 80030ee:	001a      	movs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3308      	adds	r3, #8
 80030f8:	001a      	movs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}

08003122 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}

08003166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3301      	adds	r3, #1
 800317a:	d103      	bne.n	8003184 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	e00c      	b.n	800319e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3308      	adds	r3, #8
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e002      	b.n	8003192 <vListInsert+0x2c>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d2f6      	bcs.n	800318c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6892      	ldr	r2, [r2, #8]
 80031e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6852      	ldr	r2, [r2, #4]
 80031f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d103      	bne.n	8003206 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b004      	add	sp, #16
 8003220:	bd80      	pop	{r7, pc}

08003222 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <xQueueGenericReset+0x18>
 8003236:	b672      	cpsid	i
 8003238:	e7fe      	b.n	8003238 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800323a:	f001 fdc9 	bl	8004dd0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	434b      	muls	r3, r1
 800324c:	18d2      	adds	r2, r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	1e59      	subs	r1, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	434b      	muls	r3, r1
 8003270:	18d2      	adds	r2, r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2244      	movs	r2, #68	; 0x44
 800327a:	21ff      	movs	r1, #255	; 0xff
 800327c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2245      	movs	r2, #69	; 0x45
 8003282:	21ff      	movs	r1, #255	; 0xff
 8003284:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3310      	adds	r3, #16
 8003298:	0018      	movs	r0, r3
 800329a:	f000 ffcd 	bl	8004238 <xTaskRemoveFromEventList>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d00c      	beq.n	80032bc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032a2:	f001 fd85 	bl	8004db0 <vPortYield>
 80032a6:	e009      	b.n	80032bc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3310      	adds	r3, #16
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff ff0f 	bl	80030d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3324      	adds	r3, #36	; 0x24
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff ff0a 	bl	80030d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032bc:	f001 fd9a 	bl	8004df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032c0:	2301      	movs	r3, #1
}
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b004      	add	sp, #16
 80032c8:	bd80      	pop	{r7, pc}

080032ca <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032ca:	b590      	push	{r4, r7, lr}
 80032cc:	b089      	sub	sp, #36	; 0x24
 80032ce:	af02      	add	r7, sp, #8
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <xQueueGenericCreateStatic+0x18>
 80032de:	b672      	cpsid	i
 80032e0:	e7fe      	b.n	80032e0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <xQueueGenericCreateStatic+0x22>
 80032e8:	b672      	cpsid	i
 80032ea:	e7fe      	b.n	80032ea <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <xQueueGenericCreateStatic+0x2e>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <xQueueGenericCreateStatic+0x32>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <xQueueGenericCreateStatic+0x34>
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <xQueueGenericCreateStatic+0x3c>
 8003302:	b672      	cpsid	i
 8003304:	e7fe      	b.n	8003304 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <xQueueGenericCreateStatic+0x48>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <xQueueGenericCreateStatic+0x4c>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <xQueueGenericCreateStatic+0x4e>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <xQueueGenericCreateStatic+0x56>
 800331c:	b672      	cpsid	i
 800331e:	e7fe      	b.n	800331e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003320:	2350      	movs	r3, #80	; 0x50
 8003322:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b50      	cmp	r3, #80	; 0x50
 8003328:	d001      	beq.n	800332e <xQueueGenericCreateStatic+0x64>
 800332a:	b672      	cpsid	i
 800332c:	e7fe      	b.n	800332c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00e      	beq.n	8003356 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2246      	movs	r2, #70	; 0x46
 800333c:	2101      	movs	r1, #1
 800333e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003340:	2328      	movs	r3, #40	; 0x28
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	781c      	ldrb	r4, [r3, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	0023      	movs	r3, r4
 8003352:	f000 f805 	bl	8003360 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003356:	697b      	ldr	r3, [r7, #20]
	}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b007      	add	sp, #28
 800335e:	bd90      	pop	{r4, r7, pc}

08003360 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	001a      	movs	r2, r3
 800336e:	1cfb      	adds	r3, r7, #3
 8003370:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d103      	bne.n	8003380 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e002      	b.n	8003386 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2101      	movs	r1, #1
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff ff43 	bl	8003222 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	1cfa      	adds	r2, r7, #3
 80033a0:	214c      	movs	r1, #76	; 0x4c
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bd80      	pop	{r7, pc}

080033ae <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b08a      	sub	sp, #40	; 0x28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <xQueueGenericSend+0x20>
 80033ca:	b672      	cpsid	i
 80033cc:	e7fe      	b.n	80033cc <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <xQueueGenericSend+0x2e>
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <xQueueGenericSend+0x32>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <xQueueGenericSend+0x34>
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <xQueueGenericSend+0x3c>
 80033e6:	b672      	cpsid	i
 80033e8:	e7fe      	b.n	80033e8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d103      	bne.n	80033f8 <xQueueGenericSend+0x4a>
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <xQueueGenericSend+0x4e>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <xQueueGenericSend+0x50>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <xQueueGenericSend+0x58>
 8003402:	b672      	cpsid	i
 8003404:	e7fe      	b.n	8003404 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003406:	f001 f8af 	bl	8004568 <xTaskGetSchedulerState>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d102      	bne.n	8003414 <xQueueGenericSend+0x66>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <xQueueGenericSend+0x6a>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <xQueueGenericSend+0x6c>
 8003418:	2300      	movs	r3, #0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <xQueueGenericSend+0x74>
 800341e:	b672      	cpsid	i
 8003420:	e7fe      	b.n	8003420 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003422:	f001 fcd5 	bl	8004dd0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <xQueueGenericSend+0x8a>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d11e      	bne.n	8003476 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	0018      	movs	r0, r3
 8003440:	f000 f99f 	bl	8003782 <prvCopyDataToQueue>
 8003444:	0003      	movs	r3, r0
 8003446:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	3324      	adds	r3, #36	; 0x24
 8003454:	0018      	movs	r0, r3
 8003456:	f000 feef 	bl	8004238 <xTaskRemoveFromEventList>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d007      	beq.n	800346e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800345e:	f001 fca7 	bl	8004db0 <vPortYield>
 8003462:	e004      	b.n	800346e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800346a:	f001 fca1 	bl	8004db0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800346e:	f001 fcc1 	bl	8004df4 <vPortExitCritical>
				return pdPASS;
 8003472:	2301      	movs	r3, #1
 8003474:	e05b      	b.n	800352e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800347c:	f001 fcba 	bl	8004df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003480:	2300      	movs	r3, #0
 8003482:	e054      	b.n	800352e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800348a:	2314      	movs	r3, #20
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	0018      	movs	r0, r3
 8003490:	f000 ff2e 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003494:	2301      	movs	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003498:	f001 fcac 	bl	8004df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800349c:	f000 fcdc 	bl	8003e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034a0:	f001 fc96 	bl	8004dd0 <vPortEnterCritical>
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	2244      	movs	r2, #68	; 0x44
 80034a8:	5c9b      	ldrb	r3, [r3, r2]
 80034aa:	b25b      	sxtb	r3, r3
 80034ac:	3301      	adds	r3, #1
 80034ae:	d103      	bne.n	80034b8 <xQueueGenericSend+0x10a>
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	2244      	movs	r2, #68	; 0x44
 80034b4:	2100      	movs	r1, #0
 80034b6:	5499      	strb	r1, [r3, r2]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	2245      	movs	r2, #69	; 0x45
 80034bc:	5c9b      	ldrb	r3, [r3, r2]
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	d103      	bne.n	80034cc <xQueueGenericSend+0x11e>
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	2245      	movs	r2, #69	; 0x45
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]
 80034cc:	f001 fc92 	bl	8004df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d0:	1d3a      	adds	r2, r7, #4
 80034d2:	2314      	movs	r3, #20
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	0011      	movs	r1, r2
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 ff1d 	bl	8004318 <xTaskCheckForTimeOut>
 80034de:	1e03      	subs	r3, r0, #0
 80034e0:	d11e      	bne.n	8003520 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 fa51 	bl	800398c <prvIsQueueFull>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d011      	beq.n	8003512 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	3310      	adds	r3, #16
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	0011      	movs	r1, r2
 80034f6:	0018      	movs	r0, r3
 80034f8:	f000 fe5a 	bl	80041b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 f9d0 	bl	80038a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003504:	f000 fcb4 	bl	8003e70 <xTaskResumeAll>
 8003508:	1e03      	subs	r3, r0, #0
 800350a:	d18a      	bne.n	8003422 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800350c:	f001 fc50 	bl	8004db0 <vPortYield>
 8003510:	e787      	b.n	8003422 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 f9c5 	bl	80038a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800351a:	f000 fca9 	bl	8003e70 <xTaskResumeAll>
 800351e:	e780      	b.n	8003422 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f9be 	bl	80038a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003528:	f000 fca2 	bl	8003e70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800352c:	2300      	movs	r3, #0
		}
	}
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b00a      	add	sp, #40	; 0x28
 8003534:	bd80      	pop	{r7, pc}

08003536 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003536:	b590      	push	{r4, r7, lr}
 8003538:	b089      	sub	sp, #36	; 0x24
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <xQueueGenericSendFromISR+0x1c>
 800354e:	b672      	cpsid	i
 8003550:	e7fe      	b.n	8003550 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <xQueueGenericSendFromISR+0x2a>
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <xQueueGenericSendFromISR+0x2e>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <xQueueGenericSendFromISR+0x30>
 8003564:	2300      	movs	r3, #0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <xQueueGenericSendFromISR+0x38>
 800356a:	b672      	cpsid	i
 800356c:	e7fe      	b.n	800356c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d103      	bne.n	800357c <xQueueGenericSendFromISR+0x46>
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <xQueueGenericSendFromISR+0x4a>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <xQueueGenericSendFromISR+0x4c>
 8003580:	2300      	movs	r3, #0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <xQueueGenericSendFromISR+0x54>
 8003586:	b672      	cpsid	i
 8003588:	e7fe      	b.n	8003588 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800358a:	f001 fc4b 	bl	8004e24 <ulSetInterruptMaskFromISR>
 800358e:	0003      	movs	r3, r0
 8003590:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <xQueueGenericSendFromISR+0x6e>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d12e      	bne.n	8003602 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035a4:	2413      	movs	r4, #19
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	2145      	movs	r1, #69	; 0x45
 80035ac:	5c52      	ldrb	r2, [r2, r1]
 80035ae:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f000 f8e3 	bl	8003782 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035bc:	193b      	adds	r3, r7, r4
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	d111      	bne.n	80035ea <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	3324      	adds	r3, #36	; 0x24
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 fe30 	bl	8004238 <xTaskRemoveFromEventList>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d00f      	beq.n	80035fc <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e008      	b.n	80035fc <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035ea:	2313      	movs	r3, #19
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	b259      	sxtb	r1, r3
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2245      	movs	r2, #69	; 0x45
 80035fa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80035fc:	2301      	movs	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
		{
 8003600:	e001      	b.n	8003606 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	0018      	movs	r0, r3
 800360a:	f001 fc11 	bl	8004e30 <vClearInterruptMaskFromISR>

	return xReturn;
 800360e:	69fb      	ldr	r3, [r7, #28]
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b009      	add	sp, #36	; 0x24
 8003616:	bd90      	pop	{r4, r7, pc}

08003618 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	; 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <xQueueReceive+0x1e>
 8003632:	b672      	cpsid	i
 8003634:	e7fe      	b.n	8003634 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d103      	bne.n	8003644 <xQueueReceive+0x2c>
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <xQueueReceive+0x30>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <xQueueReceive+0x32>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <xQueueReceive+0x3a>
 800364e:	b672      	cpsid	i
 8003650:	e7fe      	b.n	8003650 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003652:	f000 ff89 	bl	8004568 <xTaskGetSchedulerState>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d102      	bne.n	8003660 <xQueueReceive+0x48>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <xQueueReceive+0x4c>
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <xQueueReceive+0x4e>
 8003664:	2300      	movs	r3, #0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <xQueueReceive+0x56>
 800366a:	b672      	cpsid	i
 800366c:	e7fe      	b.n	800366c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800366e:	f001 fbaf 	bl	8004dd0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01a      	beq.n	80036b4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	0011      	movs	r1, r2
 8003684:	0018      	movs	r0, r3
 8003686:	f000 f8e7 	bl	8003858 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	3310      	adds	r3, #16
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 fdca 	bl	8004238 <xTaskRemoveFromEventList>
 80036a4:	1e03      	subs	r3, r0, #0
 80036a6:	d001      	beq.n	80036ac <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036a8:	f001 fb82 	bl	8004db0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036ac:	f001 fba2 	bl	8004df4 <vPortExitCritical>
				return pdPASS;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e062      	b.n	800377a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036ba:	f001 fb9b 	bl	8004df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036be:	2300      	movs	r3, #0
 80036c0:	e05b      	b.n	800377a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036c8:	2314      	movs	r3, #20
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	0018      	movs	r0, r3
 80036ce:	f000 fe0f 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036d2:	2301      	movs	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036d6:	f001 fb8d 	bl	8004df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036da:	f000 fbbd 	bl	8003e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036de:	f001 fb77 	bl	8004dd0 <vPortEnterCritical>
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	2244      	movs	r2, #68	; 0x44
 80036e6:	5c9b      	ldrb	r3, [r3, r2]
 80036e8:	b25b      	sxtb	r3, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	d103      	bne.n	80036f6 <xQueueReceive+0xde>
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	2244      	movs	r2, #68	; 0x44
 80036f2:	2100      	movs	r1, #0
 80036f4:	5499      	strb	r1, [r3, r2]
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	2245      	movs	r2, #69	; 0x45
 80036fa:	5c9b      	ldrb	r3, [r3, r2]
 80036fc:	b25b      	sxtb	r3, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	d103      	bne.n	800370a <xQueueReceive+0xf2>
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	2245      	movs	r2, #69	; 0x45
 8003706:	2100      	movs	r1, #0
 8003708:	5499      	strb	r1, [r3, r2]
 800370a:	f001 fb73 	bl	8004df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800370e:	1d3a      	adds	r2, r7, #4
 8003710:	2314      	movs	r3, #20
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	0011      	movs	r1, r2
 8003716:	0018      	movs	r0, r3
 8003718:	f000 fdfe 	bl	8004318 <xTaskCheckForTimeOut>
 800371c:	1e03      	subs	r3, r0, #0
 800371e:	d11e      	bne.n	800375e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	0018      	movs	r0, r3
 8003724:	f000 f91c 	bl	8003960 <prvIsQueueEmpty>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d011      	beq.n	8003750 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	3324      	adds	r3, #36	; 0x24
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f000 fd3b 	bl	80041b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	0018      	movs	r0, r3
 800373e:	f000 f8b1 	bl	80038a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003742:	f000 fb95 	bl	8003e70 <xTaskResumeAll>
 8003746:	1e03      	subs	r3, r0, #0
 8003748:	d191      	bne.n	800366e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800374a:	f001 fb31 	bl	8004db0 <vPortYield>
 800374e:	e78e      	b.n	800366e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	0018      	movs	r0, r3
 8003754:	f000 f8a6 	bl	80038a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003758:	f000 fb8a 	bl	8003e70 <xTaskResumeAll>
 800375c:	e787      	b.n	800366e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f89f 	bl	80038a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003766:	f000 fb83 	bl	8003e70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 f8f7 	bl	8003960 <prvIsQueueEmpty>
 8003772:	1e03      	subs	r3, r0, #0
 8003774:	d100      	bne.n	8003778 <xQueueReceive+0x160>
 8003776:	e77a      	b.n	800366e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003778:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b00a      	add	sp, #40	; 0x28
 8003780:	bd80      	pop	{r7, pc}

08003782 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10e      	bne.n	80037be <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d14e      	bne.n	8003846 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 fef7 	bl	80045a0 <xTaskPriorityDisinherit>
 80037b2:	0003      	movs	r3, r0
 80037b4:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	e043      	b.n	8003846 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d119      	bne.n	80037f8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6898      	ldr	r0, [r3, #8]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	0019      	movs	r1, r3
 80037d0:	f001 fd8c 	bl	80052ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	18d2      	adds	r2, r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d32b      	bcc.n	8003846 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	609a      	str	r2, [r3, #8]
 80037f6:	e026      	b.n	8003846 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	68d8      	ldr	r0, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	0019      	movs	r1, r3
 8003804:	f001 fd72 	bl	80052ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	425b      	negs	r3, r3
 8003812:	18d2      	adds	r2, r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	425b      	negs	r3, r3
 800382e:	18d2      	adds	r2, r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d105      	bne.n	8003846 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3b01      	subs	r3, #1
 8003844:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800384e:	697b      	ldr	r3, [r7, #20]
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b006      	add	sp, #24
 8003856:	bd80      	pop	{r7, pc}

08003858 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	18d2      	adds	r2, r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	d303      	bcc.n	800388c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68d9      	ldr	r1, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	0018      	movs	r0, r3
 8003898:	f001 fd28 	bl	80052ec <memcpy>
	}
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038ac:	f001 fa90 	bl	8004dd0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038b0:	230f      	movs	r3, #15
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	2145      	movs	r1, #69	; 0x45
 80038b8:	5c52      	ldrb	r2, [r2, r1]
 80038ba:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038bc:	e013      	b.n	80038e6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3324      	adds	r3, #36	; 0x24
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 fcb4 	bl	8004238 <xTaskRemoveFromEventList>
 80038d0:	1e03      	subs	r3, r0, #0
 80038d2:	d001      	beq.n	80038d8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038d4:	f000 fd70 	bl	80043b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038d8:	210f      	movs	r1, #15
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	3b01      	subs	r3, #1
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038e6:	230f      	movs	r3, #15
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dce5      	bgt.n	80038be <prvUnlockQueue+0x1a>
 80038f2:	e000      	b.n	80038f6 <prvUnlockQueue+0x52>
					break;
 80038f4:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2245      	movs	r2, #69	; 0x45
 80038fa:	21ff      	movs	r1, #255	; 0xff
 80038fc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80038fe:	f001 fa79 	bl	8004df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003902:	f001 fa65 	bl	8004dd0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003906:	230e      	movs	r3, #14
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	2144      	movs	r1, #68	; 0x44
 800390e:	5c52      	ldrb	r2, [r2, r1]
 8003910:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003912:	e013      	b.n	800393c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3310      	adds	r3, #16
 8003920:	0018      	movs	r0, r3
 8003922:	f000 fc89 	bl	8004238 <xTaskRemoveFromEventList>
 8003926:	1e03      	subs	r3, r0, #0
 8003928:	d001      	beq.n	800392e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800392a:	f000 fd45 	bl	80043b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800392e:	210e      	movs	r1, #14
 8003930:	187b      	adds	r3, r7, r1
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	3b01      	subs	r3, #1
 8003936:	b2da      	uxtb	r2, r3
 8003938:	187b      	adds	r3, r7, r1
 800393a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800393c:	230e      	movs	r3, #14
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	b25b      	sxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	dce5      	bgt.n	8003914 <prvUnlockQueue+0x70>
 8003948:	e000      	b.n	800394c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800394a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2244      	movs	r2, #68	; 0x44
 8003950:	21ff      	movs	r1, #255	; 0xff
 8003952:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003954:	f001 fa4e 	bl	8004df4 <vPortExitCritical>
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}

08003960 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003968:	f001 fa32 	bl	8004dd0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003974:	2301      	movs	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e001      	b.n	800397e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800397e:	f001 fa39 	bl	8004df4 <vPortExitCritical>

	return xReturn;
 8003982:	68fb      	ldr	r3, [r7, #12]
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}

0800398c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003994:	f001 fa1c 	bl	8004dd0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d102      	bne.n	80039aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e001      	b.n	80039ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039ae:	f001 fa21 	bl	8004df4 <vPortExitCritical>

	return xReturn;
 80039b2:	68fb      	ldr	r3, [r7, #12]
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b004      	add	sp, #16
 80039ba:	bd80      	pop	{r7, pc}

080039bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	e015      	b.n	80039f8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <vQueueAddToRegistry+0x4c>)
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	00d2      	lsls	r2, r2, #3
 80039d2:	58d3      	ldr	r3, [r2, r3]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10c      	bne.n	80039f2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <vQueueAddToRegistry+0x4c>)
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	00d2      	lsls	r2, r2, #3
 80039de:	6839      	ldr	r1, [r7, #0]
 80039e0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039e2:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <vQueueAddToRegistry+0x4c>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	18d3      	adds	r3, r2, r3
 80039ea:	3304      	adds	r3, #4
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039f0:	e006      	b.n	8003a00 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3301      	adds	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b07      	cmp	r3, #7
 80039fc:	d9e6      	bls.n	80039cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	200017d0 	.word	0x200017d0

08003a0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a1c:	f001 f9d8 	bl	8004dd0 <vPortEnterCritical>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2244      	movs	r2, #68	; 0x44
 8003a24:	5c9b      	ldrb	r3, [r3, r2]
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	d103      	bne.n	8003a34 <vQueueWaitForMessageRestricted+0x28>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2244      	movs	r2, #68	; 0x44
 8003a30:	2100      	movs	r1, #0
 8003a32:	5499      	strb	r1, [r3, r2]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2245      	movs	r2, #69	; 0x45
 8003a38:	5c9b      	ldrb	r3, [r3, r2]
 8003a3a:	b25b      	sxtb	r3, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	d103      	bne.n	8003a48 <vQueueWaitForMessageRestricted+0x3c>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2245      	movs	r2, #69	; 0x45
 8003a44:	2100      	movs	r1, #0
 8003a46:	5499      	strb	r1, [r3, r2]
 8003a48:	f001 f9d4 	bl	8004df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3324      	adds	r3, #36	; 0x24
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 fbc5 	bl	80041ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7ff ff1d 	bl	80038a4 <prvUnlockQueue>
	}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b006      	add	sp, #24
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a72:	b590      	push	{r4, r7, lr}
 8003a74:	b08d      	sub	sp, #52	; 0x34
 8003a76:	af04      	add	r7, sp, #16
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <xTaskCreateStatic+0x18>
 8003a86:	b672      	cpsid	i
 8003a88:	e7fe      	b.n	8003a88 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <xTaskCreateStatic+0x22>
 8003a90:	b672      	cpsid	i
 8003a92:	e7fe      	b.n	8003a92 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a94:	235c      	movs	r3, #92	; 0x5c
 8003a96:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b5c      	cmp	r3, #92	; 0x5c
 8003a9c:	d001      	beq.n	8003aa2 <xTaskCreateStatic+0x30>
 8003a9e:	b672      	cpsid	i
 8003aa0:	e7fe      	b.n	8003aa0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <xTaskCreateStatic+0x78>
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01d      	beq.n	8003aea <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2259      	movs	r2, #89	; 0x59
 8003abc:	2102      	movs	r1, #2
 8003abe:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ac0:	683c      	ldr	r4, [r7, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9303      	str	r3, [sp, #12]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	9302      	str	r3, [sp, #8]
 8003ad0:	2318      	movs	r3, #24
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	0023      	movs	r3, r4
 8003adc:	f000 f858 	bl	8003b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 f8d6 	bl	8003c94 <prvAddNewTaskToReadyList>
 8003ae8:	e001      	b.n	8003aee <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aee:	69bb      	ldr	r3, [r7, #24]
	}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b009      	add	sp, #36	; 0x24
 8003af6:	bd90      	pop	{r4, r7, pc}

08003af8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b08d      	sub	sp, #52	; 0x34
 8003afc:	af04      	add	r7, sp, #16
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	1dbb      	adds	r3, r7, #6
 8003b06:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b08:	1dbb      	adds	r3, r7, #6
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f001 f9f6 	bl	8004f00 <pvPortMalloc>
 8003b14:	0003      	movs	r3, r0
 8003b16:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d010      	beq.n	8003b40 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b1e:	205c      	movs	r0, #92	; 0x5c
 8003b20:	f001 f9ee 	bl	8004f00 <pvPortMalloc>
 8003b24:	0003      	movs	r3, r0
 8003b26:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
 8003b34:	e006      	b.n	8003b44 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f001 fa87 	bl	800504c <vPortFree>
 8003b3e:	e001      	b.n	8003b44 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01a      	beq.n	8003b80 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2259      	movs	r2, #89	; 0x59
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b52:	1dbb      	adds	r3, r7, #6
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	683c      	ldr	r4, [r7, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9303      	str	r3, [sp, #12]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	9302      	str	r3, [sp, #8]
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	0023      	movs	r3, r4
 8003b6e:	f000 f80f 	bl	8003b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f000 f88d 	bl	8003c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	e002      	b.n	8003b86 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b80:	2301      	movs	r3, #1
 8003b82:	425b      	negs	r3, r3
 8003b84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b86:	69bb      	ldr	r3, [r7, #24]
	}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b009      	add	sp, #36	; 0x24
 8003b8e:	bd90      	pop	{r4, r7, pc}

08003b90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	21a5      	movs	r1, #165	; 0xa5
 8003baa:	f001 fba8 	bl	80052fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4936      	ldr	r1, [pc, #216]	; (8003c90 <prvInitialiseNewTask+0x100>)
 8003bb6:	468c      	mov	ip, r1
 8003bb8:	4463      	add	r3, ip
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	18d3      	adds	r3, r2, r3
 8003bbe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2207      	movs	r2, #7
 8003bc4:	4393      	bics	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2207      	movs	r2, #7
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d001      	beq.n	8003bd4 <prvInitialiseNewTask+0x44>
 8003bd0:	b672      	cpsid	i
 8003bd2:	e7fe      	b.n	8003bd2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e013      	b.n	8003c02 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	18d3      	adds	r3, r2, r3
 8003be0:	7818      	ldrb	r0, [r3, #0]
 8003be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be4:	2134      	movs	r1, #52	; 0x34
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	18d3      	adds	r3, r2, r3
 8003bea:	185b      	adds	r3, r3, r1
 8003bec:	1c02      	adds	r2, r0, #0
 8003bee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	18d3      	adds	r3, r2, r3
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b0f      	cmp	r3, #15
 8003c06:	d9e8      	bls.n	8003bda <prvInitialiseNewTask+0x4a>
 8003c08:	e000      	b.n	8003c0c <prvInitialiseNewTask+0x7c>
		{
			break;
 8003c0a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	2243      	movs	r2, #67	; 0x43
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	2b37      	cmp	r3, #55	; 0x37
 8003c18:	d901      	bls.n	8003c1e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c1a:	2337      	movs	r3, #55	; 0x37
 8003c1c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	6a3a      	ldr	r2, [r7, #32]
 8003c28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	3304      	adds	r3, #4
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7ff fa69 	bl	800310c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff fa64 	bl	800310c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	2238      	movs	r2, #56	; 0x38
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2258      	movs	r2, #88	; 0x58
 8003c64:	2100      	movs	r1, #0
 8003c66:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f001 f816 	bl	8004ca0 <pxPortInitialiseStack>
 8003c74:	0002      	movs	r2, r0
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b006      	add	sp, #24
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	3fffffff 	.word	0x3fffffff

08003c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c9c:	f001 f898 	bl	8004dd0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <prvAddNewTaskToReadyList+0xb8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <prvAddNewTaskToReadyList+0xb8>)
 8003ca8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003caa:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cb2:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cb8:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <prvAddNewTaskToReadyList+0xb8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d110      	bne.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cc0:	f000 fb94 	bl	80043ec <prvInitialiseTaskLists>
 8003cc4:	e00d      	b.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cc6:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <prvAddNewTaskToReadyList+0xc0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d802      	bhi.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cdc:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <prvAddNewTaskToReadyList+0xc4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <prvAddNewTaskToReadyList+0xc4>)
 8003cea:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <prvAddNewTaskToReadyList+0xc4>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf8:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <prvAddNewTaskToReadyList+0xc8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d903      	bls.n	8003d08 <prvAddNewTaskToReadyList+0x74>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <prvAddNewTaskToReadyList+0xc8>)
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	0013      	movs	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	189b      	adds	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <prvAddNewTaskToReadyList+0xcc>)
 8003d16:	189a      	adds	r2, r3, r2
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	0010      	movs	r0, r2
 8003d20:	f7ff f9ff 	bl	8003122 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d24:	f001 f866 	bl	8004df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <prvAddNewTaskToReadyList+0xc0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d201      	bcs.n	8003d42 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d3e:	f001 f837 	bl	8004db0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	20000c20 	.word	0x20000c20
 8003d50:	2000074c 	.word	0x2000074c
 8003d54:	20000c2c 	.word	0x20000c2c
 8003d58:	20000c3c 	.word	0x20000c3c
 8003d5c:	20000c28 	.word	0x20000c28
 8003d60:	20000750 	.word	0x20000750

08003d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d010      	beq.n	8003d98 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <vTaskDelay+0x48>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <vTaskDelay+0x1e>
 8003d7e:	b672      	cpsid	i
 8003d80:	e7fe      	b.n	8003d80 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003d82:	f000 f869 	bl	8003e58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2100      	movs	r1, #0
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f000 fc64 	bl	8004658 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d90:	f000 f86e 	bl	8003e70 <xTaskResumeAll>
 8003d94:	0003      	movs	r3, r0
 8003d96:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003d9e:	f001 f807 	bl	8004db0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	20000c48 	.word	0x20000c48

08003db0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dbe:	003a      	movs	r2, r7
 8003dc0:	1d39      	adds	r1, r7, #4
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7ff f952 	bl	8003070 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dcc:	683c      	ldr	r4, [r7, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	491b      	ldr	r1, [pc, #108]	; (8003e40 <vTaskStartScheduler+0x90>)
 8003dd4:	481b      	ldr	r0, [pc, #108]	; (8003e44 <vTaskStartScheduler+0x94>)
 8003dd6:	9202      	str	r2, [sp, #8]
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	0022      	movs	r2, r4
 8003de2:	f7ff fe46 	bl	8003a72 <xTaskCreateStatic>
 8003de6:	0002      	movs	r2, r0
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <vTaskStartScheduler+0x98>)
 8003dea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <vTaskStartScheduler+0x98>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003df4:	2301      	movs	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e001      	b.n	8003dfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d103      	bne.n	8003e0c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003e04:	f000 fc7c 	bl	8004700 <xTimerCreateTimerTask>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10d      	bne.n	8003e2e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003e12:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e14:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <vTaskStartScheduler+0x9c>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	4252      	negs	r2, r2
 8003e1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <vTaskStartScheduler+0xa0>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <vTaskStartScheduler+0xa4>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e28:	f000 ff9e 	bl	8004d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e2c:	e004      	b.n	8003e38 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3301      	adds	r3, #1
 8003e32:	d101      	bne.n	8003e38 <vTaskStartScheduler+0x88>
 8003e34:	b672      	cpsid	i
 8003e36:	e7fe      	b.n	8003e36 <vTaskStartScheduler+0x86>
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b005      	add	sp, #20
 8003e3e:	bd90      	pop	{r4, r7, pc}
 8003e40:	08005da4 	.word	0x08005da4
 8003e44:	080043cd 	.word	0x080043cd
 8003e48:	20000c44 	.word	0x20000c44
 8003e4c:	20000c40 	.word	0x20000c40
 8003e50:	20000c2c 	.word	0x20000c2c
 8003e54:	20000c24 	.word	0x20000c24

08003e58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <vTaskSuspendAll+0x14>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	4b02      	ldr	r3, [pc, #8]	; (8003e6c <vTaskSuspendAll+0x14>)
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000c48 	.word	0x20000c48

08003e70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e7e:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <xTaskResumeAll+0xf8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <xTaskResumeAll+0x1a>
 8003e86:	b672      	cpsid	i
 8003e88:	e7fe      	b.n	8003e88 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e8a:	f000 ffa1 	bl	8004dd0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e8e:	4b36      	ldr	r3, [pc, #216]	; (8003f68 <xTaskResumeAll+0xf8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	1e5a      	subs	r2, r3, #1
 8003e94:	4b34      	ldr	r3, [pc, #208]	; (8003f68 <xTaskResumeAll+0xf8>)
 8003e96:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e98:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <xTaskResumeAll+0xf8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d15b      	bne.n	8003f58 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ea0:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <xTaskResumeAll+0xfc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d057      	beq.n	8003f58 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ea8:	e02f      	b.n	8003f0a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <xTaskResumeAll+0x100>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7ff f98b 	bl	80031d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff f986 	bl	80031d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <xTaskResumeAll+0x104>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d903      	bls.n	8003eda <xTaskResumeAll+0x6a>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <xTaskResumeAll+0x104>)
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ede:	0013      	movs	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <xTaskResumeAll+0x108>)
 8003ee8:	189a      	adds	r2, r3, r2
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3304      	adds	r3, #4
 8003eee:	0019      	movs	r1, r3
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	f7ff f916 	bl	8003122 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <xTaskResumeAll+0x10c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003f04:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <xTaskResumeAll+0x110>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f0a:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <xTaskResumeAll+0x100>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1cb      	bne.n	8003eaa <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f18:	f000 fb02 	bl	8004520 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f1c:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <xTaskResumeAll+0x114>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00f      	beq.n	8003f48 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f28:	f000 f83c 	bl	8003fa4 <xTaskIncrementTick>
 8003f2c:	1e03      	subs	r3, r0, #0
 8003f2e:	d002      	beq.n	8003f36 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <xTaskResumeAll+0x110>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f2      	bne.n	8003f28 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <xTaskResumeAll+0x114>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <xTaskResumeAll+0x110>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f54:	f000 ff2c 	bl	8004db0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f58:	f000 ff4c 	bl	8004df4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b004      	add	sp, #16
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	20000c48 	.word	0x20000c48
 8003f6c:	20000c20 	.word	0x20000c20
 8003f70:	20000be0 	.word	0x20000be0
 8003f74:	20000c28 	.word	0x20000c28
 8003f78:	20000750 	.word	0x20000750
 8003f7c:	2000074c 	.word	0x2000074c
 8003f80:	20000c34 	.word	0x20000c34
 8003f84:	20000c30 	.word	0x20000c30

08003f88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f8e:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <xTaskGetTickCount+0x18>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f94:	687b      	ldr	r3, [r7, #4]
}
 8003f96:	0018      	movs	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b002      	add	sp, #8
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	20000c24 	.word	0x20000c24

08003fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fae:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <xTaskIncrementTick+0x13c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d000      	beq.n	8003fb8 <xTaskIncrementTick+0x14>
 8003fb6:	e083      	b.n	80040c0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fb8:	4b4a      	ldr	r3, [pc, #296]	; (80040e4 <xTaskIncrementTick+0x140>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fc0:	4b48      	ldr	r3, [pc, #288]	; (80040e4 <xTaskIncrementTick+0x140>)
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d117      	bne.n	8003ffc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fcc:	4b46      	ldr	r3, [pc, #280]	; (80040e8 <xTaskIncrementTick+0x144>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <xTaskIncrementTick+0x36>
 8003fd6:	b672      	cpsid	i
 8003fd8:	e7fe      	b.n	8003fd8 <xTaskIncrementTick+0x34>
 8003fda:	4b43      	ldr	r3, [pc, #268]	; (80040e8 <xTaskIncrementTick+0x144>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	4b42      	ldr	r3, [pc, #264]	; (80040ec <xTaskIncrementTick+0x148>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <xTaskIncrementTick+0x144>)
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <xTaskIncrementTick+0x148>)
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	4b40      	ldr	r3, [pc, #256]	; (80040f0 <xTaskIncrementTick+0x14c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <xTaskIncrementTick+0x14c>)
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f000 fa92 	bl	8004520 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ffc:	4b3d      	ldr	r3, [pc, #244]	; (80040f4 <xTaskIncrementTick+0x150>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	429a      	cmp	r2, r3
 8004004:	d34e      	bcc.n	80040a4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <xTaskIncrementTick+0x144>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <xTaskIncrementTick+0x70>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <xTaskIncrementTick+0x72>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <xTaskIncrementTick+0x150>)
 800401c:	2201      	movs	r2, #1
 800401e:	4252      	negs	r2, r2
 8004020:	601a      	str	r2, [r3, #0]
					break;
 8004022:	e03f      	b.n	80040a4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004024:	4b30      	ldr	r3, [pc, #192]	; (80040e8 <xTaskIncrementTick+0x144>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d203      	bcs.n	8004044 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800403c:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <xTaskIncrementTick+0x150>)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
						break;
 8004042:	e02f      	b.n	80040a4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3304      	adds	r3, #4
 8004048:	0018      	movs	r0, r3
 800404a:	f7ff f8c2 	bl	80031d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d004      	beq.n	8004060 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3318      	adds	r3, #24
 800405a:	0018      	movs	r0, r3
 800405c:	f7ff f8b9 	bl	80031d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <xTaskIncrementTick+0x154>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d903      	bls.n	8004074 <xTaskIncrementTick+0xd0>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <xTaskIncrementTick+0x154>)
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	0013      	movs	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	189b      	adds	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <xTaskIncrementTick+0x158>)
 8004082:	189a      	adds	r2, r3, r2
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3304      	adds	r3, #4
 8004088:	0019      	movs	r1, r3
 800408a:	0010      	movs	r0, r2
 800408c:	f7ff f849 	bl	8003122 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <xTaskIncrementTick+0x15c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	429a      	cmp	r2, r3
 800409c:	d3b3      	bcc.n	8004006 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a2:	e7b0      	b.n	8004006 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040a4:	4b16      	ldr	r3, [pc, #88]	; (8004100 <xTaskIncrementTick+0x15c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	4914      	ldr	r1, [pc, #80]	; (80040fc <xTaskIncrementTick+0x158>)
 80040ac:	0013      	movs	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	189b      	adds	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	585b      	ldr	r3, [r3, r1]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d907      	bls.n	80040ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80040ba:	2301      	movs	r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e004      	b.n	80040ca <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <xTaskIncrementTick+0x160>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <xTaskIncrementTick+0x160>)
 80040c8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <xTaskIncrementTick+0x164>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040d6:	697b      	ldr	r3, [r7, #20]
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b006      	add	sp, #24
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000c48 	.word	0x20000c48
 80040e4:	20000c24 	.word	0x20000c24
 80040e8:	20000bd8 	.word	0x20000bd8
 80040ec:	20000bdc 	.word	0x20000bdc
 80040f0:	20000c38 	.word	0x20000c38
 80040f4:	20000c40 	.word	0x20000c40
 80040f8:	20000c28 	.word	0x20000c28
 80040fc:	20000750 	.word	0x20000750
 8004100:	2000074c 	.word	0x2000074c
 8004104:	20000c30 	.word	0x20000c30
 8004108:	20000c34 	.word	0x20000c34

0800410c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004112:	4b22      	ldr	r3, [pc, #136]	; (800419c <vTaskSwitchContext+0x90>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800411a:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <vTaskSwitchContext+0x94>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004120:	e037      	b.n	8004192 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004122:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <vTaskSwitchContext+0x94>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004128:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <vTaskSwitchContext+0x98>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	e007      	b.n	8004140 <vTaskSwitchContext+0x34>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <vTaskSwitchContext+0x2e>
 8004136:	b672      	cpsid	i
 8004138:	e7fe      	b.n	8004138 <vTaskSwitchContext+0x2c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3b01      	subs	r3, #1
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	4919      	ldr	r1, [pc, #100]	; (80041a8 <vTaskSwitchContext+0x9c>)
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	0013      	movs	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	189b      	adds	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	585b      	ldr	r3, [r3, r1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0ee      	beq.n	8004130 <vTaskSwitchContext+0x24>
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	0013      	movs	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	189b      	adds	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <vTaskSwitchContext+0x9c>)
 800415e:	189b      	adds	r3, r3, r2
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	3308      	adds	r3, #8
 8004174:	429a      	cmp	r2, r3
 8004176:	d104      	bne.n	8004182 <vTaskSwitchContext+0x76>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <vTaskSwitchContext+0xa0>)
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <vTaskSwitchContext+0x98>)
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	601a      	str	r2, [r3, #0]
}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b002      	add	sp, #8
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	20000c48 	.word	0x20000c48
 80041a0:	20000c34 	.word	0x20000c34
 80041a4:	20000c28 	.word	0x20000c28
 80041a8:	20000750 	.word	0x20000750
 80041ac:	2000074c 	.word	0x2000074c

080041b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <vTaskPlaceOnEventList+0x14>
 80041c0:	b672      	cpsid	i
 80041c2:	e7fe      	b.n	80041c2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <vTaskPlaceOnEventList+0x38>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3318      	adds	r3, #24
 80041ca:	001a      	movs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	0011      	movs	r1, r2
 80041d0:	0018      	movs	r0, r3
 80041d2:	f7fe ffc8 	bl	8003166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2101      	movs	r1, #1
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 fa3c 	bl	8004658 <prvAddCurrentTaskToDelayedList>
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	2000074c 	.word	0x2000074c

080041ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <vTaskPlaceOnEventListRestricted+0x16>
 80041fe:	b672      	cpsid	i
 8004200:	e7fe      	b.n	8004200 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004202:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <vTaskPlaceOnEventListRestricted+0x48>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3318      	adds	r3, #24
 8004208:	001a      	movs	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	0011      	movs	r1, r2
 800420e:	0018      	movs	r0, r3
 8004210:	f7fe ff87 	bl	8003122 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800421a:	2301      	movs	r3, #1
 800421c:	425b      	negs	r3, r3
 800421e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	0011      	movs	r1, r2
 8004226:	0018      	movs	r0, r3
 8004228:	f000 fa16 	bl	8004658 <prvAddCurrentTaskToDelayedList>
	}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b004      	add	sp, #16
 8004232:	bd80      	pop	{r7, pc}
 8004234:	2000074c 	.word	0x2000074c

08004238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <xTaskRemoveFromEventList+0x1a>
 800424e:	b672      	cpsid	i
 8004250:	e7fe      	b.n	8004250 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	3318      	adds	r3, #24
 8004256:	0018      	movs	r0, r3
 8004258:	f7fe ffbb 	bl	80031d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800425c:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <xTaskRemoveFromEventList+0xa0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d11d      	bne.n	80042a0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3304      	adds	r3, #4
 8004268:	0018      	movs	r0, r3
 800426a:	f7fe ffb2 	bl	80031d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <xTaskRemoveFromEventList+0xa4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d903      	bls.n	8004282 <xTaskRemoveFromEventList+0x4a>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427e:	4b17      	ldr	r3, [pc, #92]	; (80042dc <xTaskRemoveFromEventList+0xa4>)
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004286:	0013      	movs	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	189b      	adds	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <xTaskRemoveFromEventList+0xa8>)
 8004290:	189a      	adds	r2, r3, r2
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	3304      	adds	r3, #4
 8004296:	0019      	movs	r1, r3
 8004298:	0010      	movs	r0, r2
 800429a:	f7fe ff42 	bl	8003122 <vListInsertEnd>
 800429e:	e007      	b.n	80042b0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	3318      	adds	r3, #24
 80042a4:	001a      	movs	r2, r3
 80042a6:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <xTaskRemoveFromEventList+0xac>)
 80042a8:	0011      	movs	r1, r2
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7fe ff39 	bl	8003122 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <xTaskRemoveFromEventList+0xb0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d905      	bls.n	80042ca <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <xTaskRemoveFromEventList+0xb4>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e001      	b.n	80042ce <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b004      	add	sp, #16
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000c48 	.word	0x20000c48
 80042dc:	20000c28 	.word	0x20000c28
 80042e0:	20000750 	.word	0x20000750
 80042e4:	20000be0 	.word	0x20000be0
 80042e8:	2000074c 	.word	0x2000074c
 80042ec:	20000c34 	.word	0x20000c34

080042f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <vTaskInternalSetTimeOutState+0x20>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <vTaskInternalSetTimeOutState+0x24>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000c38 	.word	0x20000c38
 8004314:	20000c24 	.word	0x20000c24

08004318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <xTaskCheckForTimeOut+0x14>
 8004328:	b672      	cpsid	i
 800432a:	e7fe      	b.n	800432a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <xTaskCheckForTimeOut+0x1e>
 8004332:	b672      	cpsid	i
 8004334:	e7fe      	b.n	8004334 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004336:	f000 fd4b 	bl	8004dd0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <xTaskCheckForTimeOut+0x98>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3301      	adds	r3, #1
 8004350:	d102      	bne.n	8004358 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e024      	b.n	80043a2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <xTaskCheckForTimeOut+0x9c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d007      	beq.n	8004374 <xTaskCheckForTimeOut+0x5c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e016      	b.n	80043a2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	429a      	cmp	r2, r3
 800437c:	d20c      	bcs.n	8004398 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad2      	subs	r2, r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	0018      	movs	r0, r3
 800438e:	f7ff ffaf 	bl	80042f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e004      	b.n	80043a2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800439e:	2301      	movs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80043a2:	f000 fd27 	bl	8004df4 <vPortExitCritical>

	return xReturn;
 80043a6:	697b      	ldr	r3, [r7, #20]
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b006      	add	sp, #24
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000c24 	.word	0x20000c24
 80043b4:	20000c38 	.word	0x20000c38

080043b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043bc:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <vTaskMissedYield+0x10>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000c34 	.word	0x20000c34

080043cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043d4:	f000 f84e 	bl	8004474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <prvIdleTask+0x1c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d9f9      	bls.n	80043d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043e0:	f000 fce6 	bl	8004db0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80043e4:	e7f6      	b.n	80043d4 <prvIdleTask+0x8>
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	20000750 	.word	0x20000750

080043ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	e00c      	b.n	8004412 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	0013      	movs	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4a14      	ldr	r2, [pc, #80]	; (8004454 <prvInitialiseTaskLists+0x68>)
 8004404:	189b      	adds	r3, r3, r2
 8004406:	0018      	movs	r0, r3
 8004408:	f7fe fe62 	bl	80030d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3301      	adds	r3, #1
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b37      	cmp	r3, #55	; 0x37
 8004416:	d9ef      	bls.n	80043f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <prvInitialiseTaskLists+0x6c>)
 800441a:	0018      	movs	r0, r3
 800441c:	f7fe fe58 	bl	80030d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <prvInitialiseTaskLists+0x70>)
 8004422:	0018      	movs	r0, r3
 8004424:	f7fe fe54 	bl	80030d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <prvInitialiseTaskLists+0x74>)
 800442a:	0018      	movs	r0, r3
 800442c:	f7fe fe50 	bl	80030d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <prvInitialiseTaskLists+0x78>)
 8004432:	0018      	movs	r0, r3
 8004434:	f7fe fe4c 	bl	80030d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <prvInitialiseTaskLists+0x7c>)
 800443a:	0018      	movs	r0, r3
 800443c:	f7fe fe48 	bl	80030d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <prvInitialiseTaskLists+0x80>)
 8004442:	4a05      	ldr	r2, [pc, #20]	; (8004458 <prvInitialiseTaskLists+0x6c>)
 8004444:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <prvInitialiseTaskLists+0x84>)
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <prvInitialiseTaskLists+0x70>)
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000750 	.word	0x20000750
 8004458:	20000bb0 	.word	0x20000bb0
 800445c:	20000bc4 	.word	0x20000bc4
 8004460:	20000be0 	.word	0x20000be0
 8004464:	20000bf4 	.word	0x20000bf4
 8004468:	20000c0c 	.word	0x20000c0c
 800446c:	20000bd8 	.word	0x20000bd8
 8004470:	20000bdc 	.word	0x20000bdc

08004474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800447a:	e01a      	b.n	80044b2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800447c:	f000 fca8 	bl	8004dd0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <prvCheckTasksWaitingTermination+0x50>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	0018      	movs	r0, r3
 800448e:	f7fe fea0 	bl	80031d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <prvCheckTasksWaitingTermination+0x54>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <prvCheckTasksWaitingTermination+0x54>)
 800449a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <prvCheckTasksWaitingTermination+0x58>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	1e5a      	subs	r2, r3, #1
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <prvCheckTasksWaitingTermination+0x58>)
 80044a4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80044a6:	f000 fca5 	bl	8004df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	0018      	movs	r0, r3
 80044ae:	f000 f80f 	bl	80044d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <prvCheckTasksWaitingTermination+0x58>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e0      	bne.n	800447c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b002      	add	sp, #8
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000bf4 	.word	0x20000bf4
 80044c8:	20000c20 	.word	0x20000c20
 80044cc:	20000c08 	.word	0x20000c08

080044d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2259      	movs	r2, #89	; 0x59
 80044dc:	5c9b      	ldrb	r3, [r3, r2]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 fdb0 	bl	800504c <vPortFree>
				vPortFree( pxTCB );
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f000 fdac 	bl	800504c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044f4:	e010      	b.n	8004518 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2259      	movs	r2, #89	; 0x59
 80044fa:	5c9b      	ldrb	r3, [r3, r2]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d104      	bne.n	800450a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0018      	movs	r0, r3
 8004504:	f000 fda2 	bl	800504c <vPortFree>
	}
 8004508:	e006      	b.n	8004518 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2259      	movs	r2, #89	; 0x59
 800450e:	5c9b      	ldrb	r3, [r3, r2]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d001      	beq.n	8004518 <prvDeleteTCB+0x48>
 8004514:	b672      	cpsid	i
 8004516:	e7fe      	b.n	8004516 <prvDeleteTCB+0x46>
	}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b002      	add	sp, #8
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004526:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <prvResetNextTaskUnblockTime+0x40>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <prvResetNextTaskUnblockTime+0x14>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <prvResetNextTaskUnblockTime+0x16>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <prvResetNextTaskUnblockTime+0x44>)
 800453c:	2201      	movs	r2, #1
 800453e:	4252      	negs	r2, r2
 8004540:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004542:	e008      	b.n	8004556 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <prvResetNextTaskUnblockTime+0x40>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	4b04      	ldr	r3, [pc, #16]	; (8004564 <prvResetNextTaskUnblockTime+0x44>)
 8004554:	601a      	str	r2, [r3, #0]
}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b002      	add	sp, #8
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	20000bd8 	.word	0x20000bd8
 8004564:	20000c40 	.word	0x20000c40

08004568 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <xTaskGetSchedulerState+0x30>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004576:	2301      	movs	r3, #1
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	e008      	b.n	800458e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <xTaskGetSchedulerState+0x34>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004584:	2302      	movs	r3, #2
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	e001      	b.n	800458e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800458e:	687b      	ldr	r3, [r7, #4]
	}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}
 8004598:	20000c2c 	.word	0x20000c2c
 800459c:	20000c48 	.word	0x20000c48

080045a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d044      	beq.n	8004640 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045b6:	4b25      	ldr	r3, [pc, #148]	; (800464c <xTaskPriorityDisinherit+0xac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <xTaskPriorityDisinherit+0x24>
 80045c0:	b672      	cpsid	i
 80045c2:	e7fe      	b.n	80045c2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <xTaskPriorityDisinherit+0x30>
 80045cc:	b672      	cpsid	i
 80045ce:	e7fe      	b.n	80045ce <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	1e5a      	subs	r2, r3, #1
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d02c      	beq.n	8004640 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d128      	bne.n	8004640 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3304      	adds	r3, #4
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7fe fded 	bl	80031d2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2238      	movs	r2, #56	; 0x38
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <xTaskPriorityDisinherit+0xb0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d903      	bls.n	8004620 <xTaskPriorityDisinherit+0x80>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <xTaskPriorityDisinherit+0xb0>)
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	0013      	movs	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	189b      	adds	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4a09      	ldr	r2, [pc, #36]	; (8004654 <xTaskPriorityDisinherit+0xb4>)
 800462e:	189a      	adds	r2, r3, r2
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3304      	adds	r3, #4
 8004634:	0019      	movs	r1, r3
 8004636:	0010      	movs	r0, r2
 8004638:	f7fe fd73 	bl	8003122 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004640:	68fb      	ldr	r3, [r7, #12]
	}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b004      	add	sp, #16
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	2000074c 	.word	0x2000074c
 8004650:	20000c28 	.word	0x20000c28
 8004654:	20000750 	.word	0x20000750

08004658 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004662:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004668:	4b20      	ldr	r3, [pc, #128]	; (80046ec <prvAddCurrentTaskToDelayedList+0x94>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3304      	adds	r3, #4
 800466e:	0018      	movs	r0, r3
 8004670:	f7fe fdaf 	bl	80031d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3301      	adds	r3, #1
 8004678:	d10b      	bne.n	8004692 <prvAddCurrentTaskToDelayedList+0x3a>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <prvAddCurrentTaskToDelayedList+0x94>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1d1a      	adds	r2, r3, #4
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004688:	0011      	movs	r1, r2
 800468a:	0018      	movs	r0, r3
 800468c:	f7fe fd49 	bl	8003122 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004690:	e026      	b.n	80046e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	18d3      	adds	r3, r2, r3
 8004698:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800469a:	4b14      	ldr	r3, [pc, #80]	; (80046ec <prvAddCurrentTaskToDelayedList+0x94>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d209      	bcs.n	80046be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <prvAddCurrentTaskToDelayedList+0x94>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3304      	adds	r3, #4
 80046b4:	0019      	movs	r1, r3
 80046b6:	0010      	movs	r0, r2
 80046b8:	f7fe fd55 	bl	8003166 <vListInsert>
}
 80046bc:	e010      	b.n	80046e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046be:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <prvAddCurrentTaskToDelayedList+0x94>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3304      	adds	r3, #4
 80046c8:	0019      	movs	r1, r3
 80046ca:	0010      	movs	r0, r2
 80046cc:	f7fe fd4b 	bl	8003166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d202      	bcs.n	80046e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80046da:	4b08      	ldr	r3, [pc, #32]	; (80046fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b004      	add	sp, #16
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000c24 	.word	0x20000c24
 80046ec:	2000074c 	.word	0x2000074c
 80046f0:	20000c0c 	.word	0x20000c0c
 80046f4:	20000bdc 	.word	0x20000bdc
 80046f8:	20000bd8 	.word	0x20000bd8
 80046fc:	20000c40 	.word	0x20000c40

08004700 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b089      	sub	sp, #36	; 0x24
 8004704:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800470a:	f000 fa87 	bl	8004c1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <xTimerCreateTimerTask+0x6c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d020      	beq.n	8004758 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800471e:	003a      	movs	r2, r7
 8004720:	1d39      	adds	r1, r7, #4
 8004722:	2308      	movs	r3, #8
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	0018      	movs	r0, r3
 8004728:	f7fe fcba 	bl	80030a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800472c:	683c      	ldr	r4, [r7, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	490f      	ldr	r1, [pc, #60]	; (8004770 <xTimerCreateTimerTask+0x70>)
 8004734:	480f      	ldr	r0, [pc, #60]	; (8004774 <xTimerCreateTimerTask+0x74>)
 8004736:	9202      	str	r2, [sp, #8]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	2302      	movs	r3, #2
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	0022      	movs	r2, r4
 8004742:	f7ff f996 	bl	8003a72 <xTaskCreateStatic>
 8004746:	0002      	movs	r2, r0
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <xTimerCreateTimerTask+0x78>)
 800474a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <xTimerCreateTimerTask+0x78>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004754:	2301      	movs	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <xTimerCreateTimerTask+0x62>
 800475e:	b672      	cpsid	i
 8004760:	e7fe      	b.n	8004760 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	0018      	movs	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	b005      	add	sp, #20
 800476a:	bd90      	pop	{r4, r7, pc}
 800476c:	20000c7c 	.word	0x20000c7c
 8004770:	08005dac 	.word	0x08005dac
 8004774:	08004881 	.word	0x08004881
 8004778:	20000c80 	.word	0x20000c80

0800477c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b08b      	sub	sp, #44	; 0x2c
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800478a:	2300      	movs	r3, #0
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <xTimerGenericCommand+0x1c>
 8004794:	b672      	cpsid	i
 8004796:	e7fe      	b.n	8004796 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004798:	4b1c      	ldr	r3, [pc, #112]	; (800480c <xTimerGenericCommand+0x90>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d030      	beq.n	8004802 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047a0:	2414      	movs	r4, #20
 80047a2:	193b      	adds	r3, r7, r4
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047a8:	193b      	adds	r3, r7, r4
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80047ae:	193b      	adds	r3, r7, r4
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	dc19      	bgt.n	80047ee <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047ba:	f7ff fed5 	bl	8004568 <xTaskGetSchedulerState>
 80047be:	0003      	movs	r3, r0
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d109      	bne.n	80047d8 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <xTimerGenericCommand+0x90>)
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ca:	1939      	adds	r1, r7, r4
 80047cc:	2300      	movs	r3, #0
 80047ce:	f7fe fdee 	bl	80033ae <xQueueGenericSend>
 80047d2:	0003      	movs	r3, r0
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
 80047d6:	e014      	b.n	8004802 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <xTimerGenericCommand+0x90>)
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	2314      	movs	r3, #20
 80047de:	18f9      	adds	r1, r7, r3
 80047e0:	2300      	movs	r3, #0
 80047e2:	2200      	movs	r2, #0
 80047e4:	f7fe fde3 	bl	80033ae <xQueueGenericSend>
 80047e8:	0003      	movs	r3, r0
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
 80047ec:	e009      	b.n	8004802 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <xTimerGenericCommand+0x90>)
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	2314      	movs	r3, #20
 80047f6:	18f9      	adds	r1, r7, r3
 80047f8:	2300      	movs	r3, #0
 80047fa:	f7fe fe9c 	bl	8003536 <xQueueGenericSendFromISR>
 80047fe:	0003      	movs	r3, r0
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	b00b      	add	sp, #44	; 0x2c
 800480a:	bd90      	pop	{r4, r7, pc}
 800480c:	20000c7c 	.word	0x20000c7c

08004810 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af02      	add	r7, sp, #8
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800481a:	4b18      	ldr	r3, [pc, #96]	; (800487c <prvProcessExpiredTimer+0x6c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3304      	adds	r3, #4
 8004828:	0018      	movs	r0, r3
 800482a:	f7fe fcd2 	bl	80031d2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d119      	bne.n	800486a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	18d1      	adds	r1, r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8b6 	bl	80049b4 <prvInsertTimerInActiveList>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d00e      	beq.n	800486a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	2300      	movs	r3, #0
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2300      	movs	r3, #0
 8004856:	2100      	movs	r1, #0
 8004858:	f7ff ff90 	bl	800477c <xTimerGenericCommand>
 800485c:	0003      	movs	r3, r0
 800485e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <prvProcessExpiredTimer+0x5a>
 8004866:	b672      	cpsid	i
 8004868:	e7fe      	b.n	8004868 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	0010      	movs	r0, r2
 8004872:	4798      	blx	r3
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b004      	add	sp, #16
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000c74 	.word	0x20000c74

08004880 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004888:	2308      	movs	r3, #8
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	0018      	movs	r0, r3
 800488e:	f000 f851 	bl	8004934 <prvGetNextExpireTime>
 8004892:	0003      	movs	r3, r0
 8004894:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	0011      	movs	r1, r2
 800489c:	0018      	movs	r0, r3
 800489e:	f000 f803 	bl	80048a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048a2:	f000 f8c9 	bl	8004a38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048a6:	e7ef      	b.n	8004888 <prvTimerTask+0x8>

080048a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80048b2:	f7ff fad1 	bl	8003e58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048b6:	2308      	movs	r3, #8
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	0018      	movs	r0, r3
 80048bc:	f000 f85a 	bl	8004974 <prvSampleTimeNow>
 80048c0:	0003      	movs	r3, r0
 80048c2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d129      	bne.n	800491e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10c      	bne.n	80048ea <prvProcessTimerOrBlockTask+0x42>
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d808      	bhi.n	80048ea <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80048d8:	f7ff faca 	bl	8003e70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	0011      	movs	r1, r2
 80048e2:	0018      	movs	r0, r3
 80048e4:	f7ff ff94 	bl	8004810 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048e8:	e01b      	b.n	8004922 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <prvProcessTimerOrBlockTask+0x84>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	425a      	negs	r2, r3
 80048f8:	4153      	adcs	r3, r2
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <prvProcessTimerOrBlockTask+0x88>)
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	0019      	movs	r1, r3
 800490c:	f7ff f87e 	bl	8003a0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004910:	f7ff faae 	bl	8003e70 <xTaskResumeAll>
 8004914:	1e03      	subs	r3, r0, #0
 8004916:	d104      	bne.n	8004922 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8004918:	f000 fa4a 	bl	8004db0 <vPortYield>
}
 800491c:	e001      	b.n	8004922 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800491e:	f7ff faa7 	bl	8003e70 <xTaskResumeAll>
}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	46bd      	mov	sp, r7
 8004926:	b004      	add	sp, #16
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	20000c78 	.word	0x20000c78
 8004930:	20000c7c 	.word	0x20000c7c

08004934 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800493c:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <prvGetNextExpireTime+0x3c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	425a      	negs	r2, r3
 8004944:	4153      	adcs	r3, r2
 8004946:	b2db      	uxtb	r3, r3
 8004948:	001a      	movs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <prvGetNextExpireTime+0x3c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e001      	b.n	8004966 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	0018      	movs	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	b004      	add	sp, #16
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000c74 	.word	0x20000c74

08004974 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800497c:	f7ff fb04 	bl	8003f88 <xTaskGetTickCount>
 8004980:	0003      	movs	r3, r0
 8004982:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <prvSampleTimeNow+0x3c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	429a      	cmp	r2, r3
 800498c:	d205      	bcs.n	800499a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800498e:	f000 f8eb 	bl	8004b68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	e002      	b.n	80049a0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <prvSampleTimeNow+0x3c>)
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80049a6:	68fb      	ldr	r3, [r7, #12]
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b004      	add	sp, #16
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000c84 	.word	0x20000c84

080049b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d812      	bhi.n	8004a00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	1ad2      	subs	r2, r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d302      	bcc.n	80049ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e01b      	b.n	8004a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <prvInsertTimerInActiveList+0x7c>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3304      	adds	r3, #4
 80049f6:	0019      	movs	r1, r3
 80049f8:	0010      	movs	r0, r2
 80049fa:	f7fe fbb4 	bl	8003166 <vListInsert>
 80049fe:	e012      	b.n	8004a26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d206      	bcs.n	8004a16 <prvInsertTimerInActiveList+0x62>
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e007      	b.n	8004a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <prvInsertTimerInActiveList+0x80>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	0019      	movs	r1, r3
 8004a20:	0010      	movs	r0, r2
 8004a22:	f7fe fba0 	bl	8003166 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a26:	697b      	ldr	r3, [r7, #20]
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b006      	add	sp, #24
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20000c78 	.word	0x20000c78
 8004a34:	20000c74 	.word	0x20000c74

08004a38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a38:	b590      	push	{r4, r7, lr}
 8004a3a:	b08d      	sub	sp, #52	; 0x34
 8004a3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a3e:	e07f      	b.n	8004b40 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a40:	2208      	movs	r2, #8
 8004a42:	18bb      	adds	r3, r7, r2
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da0f      	bge.n	8004a6a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a4a:	18bb      	adds	r3, r7, r2
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <prvProcessReceivedCommands+0x22>
 8004a56:	b672      	cpsid	i
 8004a58:	e7fe      	b.n	8004a58 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	6858      	ldr	r0, [r3, #4]
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	0019      	movs	r1, r3
 8004a68:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	18bb      	adds	r3, r7, r2
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	db64      	blt.n	8004b3e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a74:	18bb      	adds	r3, r7, r2
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	3304      	adds	r3, #4
 8004a86:	0018      	movs	r0, r3
 8004a88:	f7fe fba3 	bl	80031d2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a8c:	1d3b      	adds	r3, r7, #4
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7ff ff70 	bl	8004974 <prvSampleTimeNow>
 8004a94:	0003      	movs	r3, r0
 8004a96:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004a98:	2308      	movs	r3, #8
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b09      	cmp	r3, #9
 8004aa0:	d84e      	bhi.n	8004b40 <prvProcessReceivedCommands+0x108>
 8004aa2:	009a      	lsls	r2, r3, #2
 8004aa4:	4b2e      	ldr	r3, [pc, #184]	; (8004b60 <prvProcessReceivedCommands+0x128>)
 8004aa6:	18d3      	adds	r3, r2, r3
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004aac:	2408      	movs	r4, #8
 8004aae:	193b      	adds	r3, r7, r4
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	18d1      	adds	r1, r2, r3
 8004ab8:	193b      	adds	r3, r7, r4
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	6a38      	ldr	r0, [r7, #32]
 8004ac0:	f7ff ff78 	bl	80049b4 <prvInsertTimerInActiveList>
 8004ac4:	1e03      	subs	r3, r0, #0
 8004ac6:	d03b      	beq.n	8004b40 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	0010      	movs	r0, r2
 8004ad0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d132      	bne.n	8004b40 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ada:	193b      	adds	r3, r7, r4
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	18d2      	adds	r2, r2, r3
 8004ae4:	6a38      	ldr	r0, [r7, #32]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	2300      	movs	r3, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	f7ff fe45 	bl	800477c <xTimerGenericCommand>
 8004af2:	0003      	movs	r3, r0
 8004af4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d121      	bne.n	8004b40 <prvProcessReceivedCommands+0x108>
 8004afc:	b672      	cpsid	i
 8004afe:	e7fe      	b.n	8004afe <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b00:	2308      	movs	r3, #8
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <prvProcessReceivedCommands+0xde>
 8004b12:	b672      	cpsid	i
 8004b14:	e7fe      	b.n	8004b14 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	18d1      	adds	r1, r2, r3
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	6a38      	ldr	r0, [r7, #32]
 8004b24:	f7ff ff46 	bl	80049b4 <prvInsertTimerInActiveList>
					break;
 8004b28:	e00a      	b.n	8004b40 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	222c      	movs	r2, #44	; 0x2c
 8004b2e:	5c9b      	ldrb	r3, [r3, r2]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 fa88 	bl	800504c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b3c:	e000      	b.n	8004b40 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b3e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <prvProcessReceivedCommands+0x12c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2208      	movs	r2, #8
 8004b46:	18b9      	adds	r1, r7, r2
 8004b48:	2200      	movs	r2, #0
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f7fe fd64 	bl	8003618 <xQueueReceive>
 8004b50:	1e03      	subs	r3, r0, #0
 8004b52:	d000      	beq.n	8004b56 <prvProcessReceivedCommands+0x11e>
 8004b54:	e774      	b.n	8004a40 <prvProcessReceivedCommands+0x8>
	}
}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b00b      	add	sp, #44	; 0x2c
 8004b5e:	bd90      	pop	{r4, r7, pc}
 8004b60:	08005e1c 	.word	0x08005e1c
 8004b64:	20000c7c 	.word	0x20000c7c

08004b68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b6e:	e03e      	b.n	8004bee <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b70:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <prvSwitchTimerLists+0xac>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b7a:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <prvSwitchTimerLists+0xac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3304      	adds	r3, #4
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7fe fb22 	bl	80031d2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	0010      	movs	r0, r2
 8004b96:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d126      	bne.n	8004bee <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	18d3      	adds	r3, r2, r3
 8004ba8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d90e      	bls.n	8004bd0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bbe:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <prvSwitchTimerLists+0xac>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	0010      	movs	r0, r2
 8004bca:	f7fe facc 	bl	8003166 <vListInsert>
 8004bce:	e00e      	b.n	8004bee <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	2100      	movs	r1, #0
 8004bdc:	f7ff fdce 	bl	800477c <xTimerGenericCommand>
 8004be0:	0003      	movs	r3, r0
 8004be2:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <prvSwitchTimerLists+0x86>
 8004bea:	b672      	cpsid	i
 8004bec:	e7fe      	b.n	8004bec <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <prvSwitchTimerLists+0xac>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1bb      	bne.n	8004b70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <prvSwitchTimerLists+0xac>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <prvSwitchTimerLists+0xb0>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <prvSwitchTimerLists+0xac>)
 8004c04:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004c06:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <prvSwitchTimerLists+0xb0>)
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	601a      	str	r2, [r3, #0]
}
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b006      	add	sp, #24
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	20000c74 	.word	0x20000c74
 8004c18:	20000c78 	.word	0x20000c78

08004c1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c22:	f000 f8d5 	bl	8004dd0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c26:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <prvCheckForValidListAndQueue+0x64>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d123      	bne.n	8004c76 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <prvCheckForValidListAndQueue+0x68>)
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7fe fa4d 	bl	80030d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <prvCheckForValidListAndQueue+0x6c>)
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7fe fa49 	bl	80030d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <prvCheckForValidListAndQueue+0x70>)
 8004c40:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <prvCheckForValidListAndQueue+0x68>)
 8004c42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c44:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <prvCheckForValidListAndQueue+0x74>)
 8004c46:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <prvCheckForValidListAndQueue+0x6c>)
 8004c48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <prvCheckForValidListAndQueue+0x78>)
 8004c4c:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <prvCheckForValidListAndQueue+0x7c>)
 8004c4e:	2100      	movs	r1, #0
 8004c50:	9100      	str	r1, [sp, #0]
 8004c52:	2110      	movs	r1, #16
 8004c54:	200a      	movs	r0, #10
 8004c56:	f7fe fb38 	bl	80032ca <xQueueGenericCreateStatic>
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <prvCheckForValidListAndQueue+0x64>)
 8004c5e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <prvCheckForValidListAndQueue+0x64>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d006      	beq.n	8004c76 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <prvCheckForValidListAndQueue+0x64>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <prvCheckForValidListAndQueue+0x80>)
 8004c6e:	0011      	movs	r1, r2
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7fe fea3 	bl	80039bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c76:	f000 f8bd 	bl	8004df4 <vPortExitCritical>
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000c7c 	.word	0x20000c7c
 8004c84:	20000c4c 	.word	0x20000c4c
 8004c88:	20000c60 	.word	0x20000c60
 8004c8c:	20000c74 	.word	0x20000c74
 8004c90:	20000c78 	.word	0x20000c78
 8004c94:	20000d28 	.word	0x20000d28
 8004c98:	20000c88 	.word	0x20000c88
 8004c9c:	08005db4 	.word	0x08005db4

08004ca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3b04      	subs	r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2280      	movs	r2, #128	; 0x80
 8004cb6:	0452      	lsls	r2, r2, #17
 8004cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3b04      	subs	r3, #4
 8004cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3b04      	subs	r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ccc:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <pxPortInitialiseStack+0x50>)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b14      	subs	r3, #20
 8004cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b20      	subs	r3, #32
 8004ce2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b004      	add	sp, #16
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	08004cf5 	.word	0x08004cf5

08004cf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <prvTaskExitError+0x2c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	d001      	beq.n	8004d0a <prvTaskExitError+0x16>
 8004d06:	b672      	cpsid	i
 8004d08:	e7fe      	b.n	8004d08 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004d0a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004d0c:	46c0      	nop			; (mov r8, r8)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0fc      	beq.n	8004d0e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b002      	add	sp, #8
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	20000008 	.word	0x20000008

08004d24 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004d30:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <pxCurrentTCBConst2>)
 8004d32:	6813      	ldr	r3, [r2, #0]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	3020      	adds	r0, #32
 8004d38:	f380 8809 	msr	PSP, r0
 8004d3c:	2002      	movs	r0, #2
 8004d3e:	f380 8814 	msr	CONTROL, r0
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004d48:	46ae      	mov	lr, r5
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	bc04      	pop	{r2}
 8004d4e:	b662      	cpsie	i
 8004d50:	4718      	bx	r3
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	46c0      	nop			; (mov r8, r8)
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	46c0      	nop			; (mov r8, r8)

08004d60 <pxCurrentTCBConst2>:
 8004d60:	2000074c 	.word	0x2000074c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004d64:	46c0      	nop			; (mov r8, r8)
 8004d66:	46c0      	nop			; (mov r8, r8)

08004d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <xPortStartScheduler+0x40>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <xPortStartScheduler+0x40>)
 8004d72:	21ff      	movs	r1, #255	; 0xff
 8004d74:	0409      	lsls	r1, r1, #16
 8004d76:	430a      	orrs	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <xPortStartScheduler+0x40>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <xPortStartScheduler+0x40>)
 8004d80:	21ff      	movs	r1, #255	; 0xff
 8004d82:	0609      	lsls	r1, r1, #24
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004d88:	f000 f898 	bl	8004ebc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d8c:	4b07      	ldr	r3, [pc, #28]	; (8004dac <xPortStartScheduler+0x44>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004d92:	f7ff ffcd 	bl	8004d30 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d96:	f7ff f9b9 	bl	800410c <vTaskSwitchContext>
	prvTaskExitError();
 8004d9a:	f7ff ffab 	bl	8004cf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	0018      	movs	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	e000ed20 	.word	0xe000ed20
 8004dac:	20000008 	.word	0x20000008

08004db0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <vPortYield+0x1c>)
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	0552      	lsls	r2, r2, #21
 8004dba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004dbc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004dc0:	f3bf 8f6f 	isb	sy
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004dd4:	b672      	cpsid	i
    uxCriticalNesting++;
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <vPortEnterCritical+0x20>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <vPortEnterCritical+0x20>)
 8004dde:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004de0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004de4:	f3bf 8f6f 	isb	sy
}
 8004de8:	46c0      	nop			; (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	20000008 	.word	0x20000008

08004df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <vPortExitCritical+0x2c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <vPortExitCritical+0x10>
 8004e00:	b672      	cpsid	i
 8004e02:	e7fe      	b.n	8004e02 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <vPortExitCritical+0x2c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	1e5a      	subs	r2, r3, #1
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <vPortExitCritical+0x2c>)
 8004e0c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <vPortExitCritical+0x2c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d100      	bne.n	8004e18 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004e16:	b662      	cpsie	i
    }
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	20000008 	.word	0x20000008

08004e24 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004e24:	f3ef 8010 	mrs	r0, PRIMASK
 8004e28:	b672      	cpsid	i
 8004e2a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	0018      	movs	r0, r3

08004e30 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004e30:	f380 8810 	msr	PRIMASK, r0
 8004e34:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004e36:	46c0      	nop			; (mov r8, r8)
	...

08004e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e40:	f3ef 8009 	mrs	r0, PSP
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <pxCurrentTCBConst>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	3820      	subs	r0, #32
 8004e4a:	6010      	str	r0, [r2, #0]
 8004e4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004e4e:	4644      	mov	r4, r8
 8004e50:	464d      	mov	r5, r9
 8004e52:	4656      	mov	r6, sl
 8004e54:	465f      	mov	r7, fp
 8004e56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004e58:	b508      	push	{r3, lr}
 8004e5a:	b672      	cpsid	i
 8004e5c:	f7ff f956 	bl	800410c <vTaskSwitchContext>
 8004e60:	b662      	cpsie	i
 8004e62:	bc0c      	pop	{r2, r3}
 8004e64:	6811      	ldr	r1, [r2, #0]
 8004e66:	6808      	ldr	r0, [r1, #0]
 8004e68:	3010      	adds	r0, #16
 8004e6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004e6c:	46a0      	mov	r8, r4
 8004e6e:	46a9      	mov	r9, r5
 8004e70:	46b2      	mov	sl, r6
 8004e72:	46bb      	mov	fp, r7
 8004e74:	f380 8809 	msr	PSP, r0
 8004e78:	3820      	subs	r0, #32
 8004e7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004e7c:	4718      	bx	r3
 8004e7e:	46c0      	nop			; (mov r8, r8)

08004e80 <pxCurrentTCBConst>:
 8004e80:	2000074c 	.word	0x2000074c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004e84:	46c0      	nop			; (mov r8, r8)
 8004e86:	46c0      	nop			; (mov r8, r8)

08004e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e8e:	f7ff ffc9 	bl	8004e24 <ulSetInterruptMaskFromISR>
 8004e92:	0003      	movs	r3, r0
 8004e94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e96:	f7ff f885 	bl	8003fa4 <xTaskIncrementTick>
 8004e9a:	1e03      	subs	r3, r0, #0
 8004e9c:	d003      	beq.n	8004ea6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <SysTick_Handler+0x30>)
 8004ea0:	2280      	movs	r2, #128	; 0x80
 8004ea2:	0552      	lsls	r2, r2, #21
 8004ea4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7ff ffc1 	bl	8004e30 <vClearInterruptMaskFromISR>
}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b002      	add	sp, #8
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <prvSetupTimerInterrupt+0x34>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <prvSetupTimerInterrupt+0x38>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <prvSetupTimerInterrupt+0x3c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	22fa      	movs	r2, #250	; 0xfa
 8004ed2:	0091      	lsls	r1, r2, #2
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7fb f929 	bl	800012c <__udivsi3>
 8004eda:	0003      	movs	r3, r0
 8004edc:	001a      	movs	r2, r3
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <prvSetupTimerInterrupt+0x40>)
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004ee4:	4b02      	ldr	r3, [pc, #8]	; (8004ef0 <prvSetupTimerInterrupt+0x34>)
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	e000e010 	.word	0xe000e010
 8004ef4:	e000e018 	.word	0xe000e018
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	e000e014 	.word	0xe000e014

08004f00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004f0c:	f7fe ffa4 	bl	8003e58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f10:	4b49      	ldr	r3, [pc, #292]	; (8005038 <pvPortMalloc+0x138>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f18:	f000 f8e0 	bl	80050dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f1c:	4b47      	ldr	r3, [pc, #284]	; (800503c <pvPortMalloc+0x13c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4013      	ands	r3, r2
 8004f24:	d000      	beq.n	8004f28 <pvPortMalloc+0x28>
 8004f26:	e079      	b.n	800501c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d012      	beq.n	8004f54 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004f2e:	2208      	movs	r2, #8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	189b      	adds	r3, r3, r2
 8004f34:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2207      	movs	r2, #7
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d00a      	beq.n	8004f54 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2207      	movs	r2, #7
 8004f42:	4393      	bics	r3, r2
 8004f44:	3308      	adds	r3, #8
 8004f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2207      	movs	r2, #7
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d001      	beq.n	8004f54 <pvPortMalloc+0x54>
 8004f50:	b672      	cpsid	i
 8004f52:	e7fe      	b.n	8004f52 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d060      	beq.n	800501c <pvPortMalloc+0x11c>
 8004f5a:	4b39      	ldr	r3, [pc, #228]	; (8005040 <pvPortMalloc+0x140>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d85b      	bhi.n	800501c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f64:	4b37      	ldr	r3, [pc, #220]	; (8005044 <pvPortMalloc+0x144>)
 8004f66:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004f68:	4b36      	ldr	r3, [pc, #216]	; (8005044 <pvPortMalloc+0x144>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f6e:	e004      	b.n	8004f7a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d903      	bls.n	8004f8c <pvPortMalloc+0x8c>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f1      	bne.n	8004f70 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f8c:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <pvPortMalloc+0x138>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d042      	beq.n	800501c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	1ad2      	subs	r2, r2, r3
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d916      	bls.n	8004fe6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	18d3      	adds	r3, r2, r3
 8004fbe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2207      	movs	r2, #7
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d001      	beq.n	8004fcc <pvPortMalloc+0xcc>
 8004fc8:	b672      	cpsid	i
 8004fca:	e7fe      	b.n	8004fca <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f000 f8db 	bl	800519c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fe6:	4b16      	ldr	r3, [pc, #88]	; (8005040 <pvPortMalloc+0x140>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	4b13      	ldr	r3, [pc, #76]	; (8005040 <pvPortMalloc+0x140>)
 8004ff2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ff4:	4b12      	ldr	r3, [pc, #72]	; (8005040 <pvPortMalloc+0x140>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b13      	ldr	r3, [pc, #76]	; (8005048 <pvPortMalloc+0x148>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d203      	bcs.n	8005008 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <pvPortMalloc+0x140>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b10      	ldr	r3, [pc, #64]	; (8005048 <pvPortMalloc+0x148>)
 8005006:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <pvPortMalloc+0x13c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	431a      	orrs	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800501c:	f7fe ff28 	bl	8003e70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2207      	movs	r2, #7
 8005024:	4013      	ands	r3, r2
 8005026:	d001      	beq.n	800502c <pvPortMalloc+0x12c>
 8005028:	b672      	cpsid	i
 800502a:	e7fe      	b.n	800502a <pvPortMalloc+0x12a>
	return pvReturn;
 800502c:	68fb      	ldr	r3, [r7, #12]
}
 800502e:	0018      	movs	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	b006      	add	sp, #24
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	200015b0 	.word	0x200015b0
 800503c:	200015bc 	.word	0x200015bc
 8005040:	200015b4 	.word	0x200015b4
 8005044:	200015a8 	.word	0x200015a8
 8005048:	200015b8 	.word	0x200015b8

0800504c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d035      	beq.n	80050ca <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800505e:	2308      	movs	r3, #8
 8005060:	425b      	negs	r3, r3
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	18d3      	adds	r3, r2, r3
 8005066:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4b18      	ldr	r3, [pc, #96]	; (80050d4 <vPortFree+0x88>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4013      	ands	r3, r2
 8005076:	d101      	bne.n	800507c <vPortFree+0x30>
 8005078:	b672      	cpsid	i
 800507a:	e7fe      	b.n	800507a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <vPortFree+0x3c>
 8005084:	b672      	cpsid	i
 8005086:	e7fe      	b.n	8005086 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <vPortFree+0x88>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4013      	ands	r3, r2
 8005092:	d01a      	beq.n	80050ca <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d116      	bne.n	80050ca <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <vPortFree+0x88>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	401a      	ands	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050ac:	f7fe fed4 	bl	8003e58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <vPortFree+0x8c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	18d2      	adds	r2, r2, r3
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <vPortFree+0x8c>)
 80050bc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	0018      	movs	r0, r3
 80050c2:	f000 f86b 	bl	800519c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80050c6:	f7fe fed3 	bl	8003e70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	200015bc 	.word	0x200015bc
 80050d8:	200015b4 	.word	0x200015b4

080050dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050e2:	4b27      	ldr	r3, [pc, #156]	; (8005180 <prvHeapInit+0xa4>)
 80050e4:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050e6:	4b27      	ldr	r3, [pc, #156]	; (8005184 <prvHeapInit+0xa8>)
 80050e8:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2207      	movs	r2, #7
 80050ee:	4013      	ands	r3, r2
 80050f0:	d00c      	beq.n	800510c <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3307      	adds	r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2207      	movs	r2, #7
 80050fc:	4393      	bics	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad2      	subs	r2, r2, r3
 8005106:	4b1f      	ldr	r3, [pc, #124]	; (8005184 <prvHeapInit+0xa8>)
 8005108:	18d3      	adds	r3, r2, r3
 800510a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005110:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <prvHeapInit+0xac>)
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005116:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <prvHeapInit+0xac>)
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	18d3      	adds	r3, r2, r3
 8005122:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005124:	2208      	movs	r2, #8
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2207      	movs	r2, #7
 8005130:	4393      	bics	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <prvHeapInit+0xb0>)
 8005138:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <prvHeapInit+0xb0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <prvHeapInit+0xb0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	1ad2      	subs	r2, r2, r3
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <prvHeapInit+0xb0>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <prvHeapInit+0xb4>)
 8005166:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <prvHeapInit+0xb8>)
 800516e:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005170:	4b09      	ldr	r3, [pc, #36]	; (8005198 <prvHeapInit+0xbc>)
 8005172:	2280      	movs	r2, #128	; 0x80
 8005174:	0612      	lsls	r2, r2, #24
 8005176:	601a      	str	r2, [r3, #0]
}
 8005178:	46c0      	nop			; (mov r8, r8)
 800517a:	46bd      	mov	sp, r7
 800517c:	b004      	add	sp, #16
 800517e:	bd80      	pop	{r7, pc}
 8005180:	0000082e 	.word	0x0000082e
 8005184:	20000d78 	.word	0x20000d78
 8005188:	200015a8 	.word	0x200015a8
 800518c:	200015b0 	.word	0x200015b0
 8005190:	200015b8 	.word	0x200015b8
 8005194:	200015b4 	.word	0x200015b4
 8005198:	200015bc 	.word	0x200015bc

0800519c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051a4:	4b27      	ldr	r3, [pc, #156]	; (8005244 <prvInsertBlockIntoFreeList+0xa8>)
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e002      	b.n	80051b0 <prvInsertBlockIntoFreeList+0x14>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d8f7      	bhi.n	80051aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	18d3      	adds	r3, r2, r3
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d108      	bne.n	80051de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	18d2      	adds	r2, r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	18d2      	adds	r2, r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d118      	bne.n	8005224 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <prvInsertBlockIntoFreeList+0xac>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d00d      	beq.n	800521a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	18d2      	adds	r2, r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e008      	b.n	800522c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <prvInsertBlockIntoFreeList+0xac>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e003      	b.n	800522c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d002      	beq.n	800523a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	46bd      	mov	sp, r7
 800523e:	b004      	add	sp, #16
 8005240:	bd80      	pop	{r7, pc}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	200015a8 	.word	0x200015a8
 8005248:	200015b0 	.word	0x200015b0

0800524c <calloc>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4b03      	ldr	r3, [pc, #12]	; (800525c <calloc+0x10>)
 8005250:	000a      	movs	r2, r1
 8005252:	0001      	movs	r1, r0
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	f000 f85a 	bl	800530e <_calloc_r>
 800525a:	bd10      	pop	{r4, pc}
 800525c:	2000000c 	.word	0x2000000c

08005260 <__errno>:
 8005260:	4b01      	ldr	r3, [pc, #4]	; (8005268 <__errno+0x8>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	4770      	bx	lr
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	2000000c 	.word	0x2000000c

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	2600      	movs	r6, #0
 8005270:	4d0c      	ldr	r5, [pc, #48]	; (80052a4 <__libc_init_array+0x38>)
 8005272:	4c0d      	ldr	r4, [pc, #52]	; (80052a8 <__libc_init_array+0x3c>)
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	2600      	movs	r6, #0
 800527e:	f000 fcbd 	bl	8005bfc <_init>
 8005282:	4d0a      	ldr	r5, [pc, #40]	; (80052ac <__libc_init_array+0x40>)
 8005284:	4c0a      	ldr	r4, [pc, #40]	; (80052b0 <__libc_init_array+0x44>)
 8005286:	1b64      	subs	r4, r4, r5
 8005288:	10a4      	asrs	r4, r4, #2
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	00b3      	lsls	r3, r6, #2
 8005292:	58eb      	ldr	r3, [r5, r3]
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	00b3      	lsls	r3, r6, #2
 800529c:	58eb      	ldr	r3, [r5, r3]
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	08005e9c 	.word	0x08005e9c
 80052a8:	08005e9c 	.word	0x08005e9c
 80052ac:	08005e9c 	.word	0x08005e9c
 80052b0:	08005ea0 	.word	0x08005ea0

080052b4 <__itoa>:
 80052b4:	1e93      	subs	r3, r2, #2
 80052b6:	b510      	push	{r4, lr}
 80052b8:	000c      	movs	r4, r1
 80052ba:	2b22      	cmp	r3, #34	; 0x22
 80052bc:	d904      	bls.n	80052c8 <__itoa+0x14>
 80052be:	2300      	movs	r3, #0
 80052c0:	001c      	movs	r4, r3
 80052c2:	700b      	strb	r3, [r1, #0]
 80052c4:	0020      	movs	r0, r4
 80052c6:	bd10      	pop	{r4, pc}
 80052c8:	2a0a      	cmp	r2, #10
 80052ca:	d109      	bne.n	80052e0 <__itoa+0x2c>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	da07      	bge.n	80052e0 <__itoa+0x2c>
 80052d0:	232d      	movs	r3, #45	; 0x2d
 80052d2:	700b      	strb	r3, [r1, #0]
 80052d4:	2101      	movs	r1, #1
 80052d6:	4240      	negs	r0, r0
 80052d8:	1861      	adds	r1, r4, r1
 80052da:	f000 f8cd 	bl	8005478 <__utoa>
 80052de:	e7f1      	b.n	80052c4 <__itoa+0x10>
 80052e0:	2100      	movs	r1, #0
 80052e2:	e7f9      	b.n	80052d8 <__itoa+0x24>

080052e4 <itoa>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	f7ff ffe5 	bl	80052b4 <__itoa>
 80052ea:	bd10      	pop	{r4, pc}

080052ec <memcpy>:
 80052ec:	2300      	movs	r3, #0
 80052ee:	b510      	push	{r4, lr}
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d100      	bne.n	80052f6 <memcpy+0xa>
 80052f4:	bd10      	pop	{r4, pc}
 80052f6:	5ccc      	ldrb	r4, [r1, r3]
 80052f8:	54c4      	strb	r4, [r0, r3]
 80052fa:	3301      	adds	r3, #1
 80052fc:	e7f8      	b.n	80052f0 <memcpy+0x4>

080052fe <memset>:
 80052fe:	0003      	movs	r3, r0
 8005300:	1882      	adds	r2, r0, r2
 8005302:	4293      	cmp	r3, r2
 8005304:	d100      	bne.n	8005308 <memset+0xa>
 8005306:	4770      	bx	lr
 8005308:	7019      	strb	r1, [r3, #0]
 800530a:	3301      	adds	r3, #1
 800530c:	e7f9      	b.n	8005302 <memset+0x4>

0800530e <_calloc_r>:
 800530e:	434a      	muls	r2, r1
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	0011      	movs	r1, r2
 8005314:	0015      	movs	r5, r2
 8005316:	f000 f809 	bl	800532c <_malloc_r>
 800531a:	1e04      	subs	r4, r0, #0
 800531c:	d003      	beq.n	8005326 <_calloc_r+0x18>
 800531e:	002a      	movs	r2, r5
 8005320:	2100      	movs	r1, #0
 8005322:	f7ff ffec 	bl	80052fe <memset>
 8005326:	0020      	movs	r0, r4
 8005328:	bd70      	pop	{r4, r5, r6, pc}
	...

0800532c <_malloc_r>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	2303      	movs	r3, #3
 8005330:	1ccd      	adds	r5, r1, #3
 8005332:	439d      	bics	r5, r3
 8005334:	3508      	adds	r5, #8
 8005336:	0006      	movs	r6, r0
 8005338:	2d0c      	cmp	r5, #12
 800533a:	d21f      	bcs.n	800537c <_malloc_r+0x50>
 800533c:	250c      	movs	r5, #12
 800533e:	42a9      	cmp	r1, r5
 8005340:	d81e      	bhi.n	8005380 <_malloc_r+0x54>
 8005342:	0030      	movs	r0, r6
 8005344:	f000 f8ce 	bl	80054e4 <__malloc_lock>
 8005348:	4925      	ldr	r1, [pc, #148]	; (80053e0 <_malloc_r+0xb4>)
 800534a:	680a      	ldr	r2, [r1, #0]
 800534c:	0014      	movs	r4, r2
 800534e:	2c00      	cmp	r4, #0
 8005350:	d11a      	bne.n	8005388 <_malloc_r+0x5c>
 8005352:	4f24      	ldr	r7, [pc, #144]	; (80053e4 <_malloc_r+0xb8>)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <_malloc_r+0x38>
 800535a:	0021      	movs	r1, r4
 800535c:	0030      	movs	r0, r6
 800535e:	f000 f843 	bl	80053e8 <_sbrk_r>
 8005362:	6038      	str	r0, [r7, #0]
 8005364:	0029      	movs	r1, r5
 8005366:	0030      	movs	r0, r6
 8005368:	f000 f83e 	bl	80053e8 <_sbrk_r>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d12b      	bne.n	80053c8 <_malloc_r+0x9c>
 8005370:	230c      	movs	r3, #12
 8005372:	0030      	movs	r0, r6
 8005374:	6033      	str	r3, [r6, #0]
 8005376:	f000 f8bd 	bl	80054f4 <__malloc_unlock>
 800537a:	e003      	b.n	8005384 <_malloc_r+0x58>
 800537c:	2d00      	cmp	r5, #0
 800537e:	dade      	bge.n	800533e <_malloc_r+0x12>
 8005380:	230c      	movs	r3, #12
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	2000      	movs	r0, #0
 8005386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	1b5b      	subs	r3, r3, r5
 800538c:	d419      	bmi.n	80053c2 <_malloc_r+0x96>
 800538e:	2b0b      	cmp	r3, #11
 8005390:	d903      	bls.n	800539a <_malloc_r+0x6e>
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	18e4      	adds	r4, r4, r3
 8005396:	6025      	str	r5, [r4, #0]
 8005398:	e003      	b.n	80053a2 <_malloc_r+0x76>
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	42a2      	cmp	r2, r4
 800539e:	d10e      	bne.n	80053be <_malloc_r+0x92>
 80053a0:	600b      	str	r3, [r1, #0]
 80053a2:	0030      	movs	r0, r6
 80053a4:	f000 f8a6 	bl	80054f4 <__malloc_unlock>
 80053a8:	0020      	movs	r0, r4
 80053aa:	2207      	movs	r2, #7
 80053ac:	300b      	adds	r0, #11
 80053ae:	1d23      	adds	r3, r4, #4
 80053b0:	4390      	bics	r0, r2
 80053b2:	1ac2      	subs	r2, r0, r3
 80053b4:	4298      	cmp	r0, r3
 80053b6:	d0e6      	beq.n	8005386 <_malloc_r+0x5a>
 80053b8:	1a1b      	subs	r3, r3, r0
 80053ba:	50a3      	str	r3, [r4, r2]
 80053bc:	e7e3      	b.n	8005386 <_malloc_r+0x5a>
 80053be:	6053      	str	r3, [r2, #4]
 80053c0:	e7ef      	b.n	80053a2 <_malloc_r+0x76>
 80053c2:	0022      	movs	r2, r4
 80053c4:	6864      	ldr	r4, [r4, #4]
 80053c6:	e7c2      	b.n	800534e <_malloc_r+0x22>
 80053c8:	2303      	movs	r3, #3
 80053ca:	1cc4      	adds	r4, r0, #3
 80053cc:	439c      	bics	r4, r3
 80053ce:	42a0      	cmp	r0, r4
 80053d0:	d0e1      	beq.n	8005396 <_malloc_r+0x6a>
 80053d2:	1a21      	subs	r1, r4, r0
 80053d4:	0030      	movs	r0, r6
 80053d6:	f000 f807 	bl	80053e8 <_sbrk_r>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d1db      	bne.n	8005396 <_malloc_r+0x6a>
 80053de:	e7c7      	b.n	8005370 <_malloc_r+0x44>
 80053e0:	200015c0 	.word	0x200015c0
 80053e4:	200015c4 	.word	0x200015c4

080053e8 <_sbrk_r>:
 80053e8:	2300      	movs	r3, #0
 80053ea:	b570      	push	{r4, r5, r6, lr}
 80053ec:	4d06      	ldr	r5, [pc, #24]	; (8005408 <_sbrk_r+0x20>)
 80053ee:	0004      	movs	r4, r0
 80053f0:	0008      	movs	r0, r1
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	f7fb fc74 	bl	8000ce0 <_sbrk>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d103      	bne.n	8005404 <_sbrk_r+0x1c>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d000      	beq.n	8005404 <_sbrk_r+0x1c>
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	bd70      	pop	{r4, r5, r6, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	20001810 	.word	0x20001810

0800540c <siprintf>:
 800540c:	b40e      	push	{r1, r2, r3}
 800540e:	b500      	push	{lr}
 8005410:	490b      	ldr	r1, [pc, #44]	; (8005440 <siprintf+0x34>)
 8005412:	b09c      	sub	sp, #112	; 0x70
 8005414:	ab1d      	add	r3, sp, #116	; 0x74
 8005416:	9002      	str	r0, [sp, #8]
 8005418:	9006      	str	r0, [sp, #24]
 800541a:	9107      	str	r1, [sp, #28]
 800541c:	9104      	str	r1, [sp, #16]
 800541e:	4809      	ldr	r0, [pc, #36]	; (8005444 <siprintf+0x38>)
 8005420:	4909      	ldr	r1, [pc, #36]	; (8005448 <siprintf+0x3c>)
 8005422:	cb04      	ldmia	r3!, {r2}
 8005424:	9105      	str	r1, [sp, #20]
 8005426:	6800      	ldr	r0, [r0, #0]
 8005428:	a902      	add	r1, sp, #8
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	f000 f8cc 	bl	80055c8 <_svfiprintf_r>
 8005430:	2300      	movs	r3, #0
 8005432:	9a02      	ldr	r2, [sp, #8]
 8005434:	7013      	strb	r3, [r2, #0]
 8005436:	b01c      	add	sp, #112	; 0x70
 8005438:	bc08      	pop	{r3}
 800543a:	b003      	add	sp, #12
 800543c:	4718      	bx	r3
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	7fffffff 	.word	0x7fffffff
 8005444:	2000000c 	.word	0x2000000c
 8005448:	ffff0208 	.word	0xffff0208

0800544c <strstr>:
 800544c:	780a      	ldrb	r2, [r1, #0]
 800544e:	b530      	push	{r4, r5, lr}
 8005450:	2a00      	cmp	r2, #0
 8005452:	d10c      	bne.n	800546e <strstr+0x22>
 8005454:	bd30      	pop	{r4, r5, pc}
 8005456:	429a      	cmp	r2, r3
 8005458:	d108      	bne.n	800546c <strstr+0x20>
 800545a:	2301      	movs	r3, #1
 800545c:	5ccc      	ldrb	r4, [r1, r3]
 800545e:	2c00      	cmp	r4, #0
 8005460:	d0f8      	beq.n	8005454 <strstr+0x8>
 8005462:	5cc5      	ldrb	r5, [r0, r3]
 8005464:	42a5      	cmp	r5, r4
 8005466:	d101      	bne.n	800546c <strstr+0x20>
 8005468:	3301      	adds	r3, #1
 800546a:	e7f7      	b.n	800545c <strstr+0x10>
 800546c:	3001      	adds	r0, #1
 800546e:	7803      	ldrb	r3, [r0, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f0      	bne.n	8005456 <strstr+0xa>
 8005474:	0018      	movs	r0, r3
 8005476:	e7ed      	b.n	8005454 <strstr+0x8>

08005478 <__utoa>:
 8005478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800547a:	0016      	movs	r6, r2
 800547c:	b08d      	sub	sp, #52	; 0x34
 800547e:	0007      	movs	r7, r0
 8005480:	000c      	movs	r4, r1
 8005482:	2225      	movs	r2, #37	; 0x25
 8005484:	4916      	ldr	r1, [pc, #88]	; (80054e0 <__utoa+0x68>)
 8005486:	a802      	add	r0, sp, #8
 8005488:	f7ff ff30 	bl	80052ec <memcpy>
 800548c:	1eb3      	subs	r3, r6, #2
 800548e:	2500      	movs	r5, #0
 8005490:	2b22      	cmp	r3, #34	; 0x22
 8005492:	d820      	bhi.n	80054d6 <__utoa+0x5e>
 8005494:	1e63      	subs	r3, r4, #1
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	ab02      	add	r3, sp, #8
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	0038      	movs	r0, r7
 800549e:	0031      	movs	r1, r6
 80054a0:	f7fa feca 	bl	8000238 <__aeabi_uidivmod>
 80054a4:	000b      	movs	r3, r1
 80054a6:	9a01      	ldr	r2, [sp, #4]
 80054a8:	0029      	movs	r1, r5
 80054aa:	5cd3      	ldrb	r3, [r2, r3]
 80054ac:	9a00      	ldr	r2, [sp, #0]
 80054ae:	3501      	adds	r5, #1
 80054b0:	5553      	strb	r3, [r2, r5]
 80054b2:	003b      	movs	r3, r7
 80054b4:	0007      	movs	r7, r0
 80054b6:	429e      	cmp	r6, r3
 80054b8:	d9f0      	bls.n	800549c <__utoa+0x24>
 80054ba:	2300      	movs	r3, #0
 80054bc:	0022      	movs	r2, r4
 80054be:	5563      	strb	r3, [r4, r5]
 80054c0:	000b      	movs	r3, r1
 80054c2:	1ac8      	subs	r0, r1, r3
 80054c4:	4283      	cmp	r3, r0
 80054c6:	dd08      	ble.n	80054da <__utoa+0x62>
 80054c8:	7810      	ldrb	r0, [r2, #0]
 80054ca:	5ce5      	ldrb	r5, [r4, r3]
 80054cc:	7015      	strb	r5, [r2, #0]
 80054ce:	54e0      	strb	r0, [r4, r3]
 80054d0:	3201      	adds	r2, #1
 80054d2:	3b01      	subs	r3, #1
 80054d4:	e7f5      	b.n	80054c2 <__utoa+0x4a>
 80054d6:	7025      	strb	r5, [r4, #0]
 80054d8:	002c      	movs	r4, r5
 80054da:	0020      	movs	r0, r4
 80054dc:	b00d      	add	sp, #52	; 0x34
 80054de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e0:	08005e44 	.word	0x08005e44

080054e4 <__malloc_lock>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4802      	ldr	r0, [pc, #8]	; (80054f0 <__malloc_lock+0xc>)
 80054e8:	f000 faf0 	bl	8005acc <__retarget_lock_acquire_recursive>
 80054ec:	bd10      	pop	{r4, pc}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	20001818 	.word	0x20001818

080054f4 <__malloc_unlock>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	4802      	ldr	r0, [pc, #8]	; (8005500 <__malloc_unlock+0xc>)
 80054f8:	f000 fae9 	bl	8005ace <__retarget_lock_release_recursive>
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	20001818 	.word	0x20001818

08005504 <__ssputs_r>:
 8005504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005506:	688e      	ldr	r6, [r1, #8]
 8005508:	b085      	sub	sp, #20
 800550a:	0007      	movs	r7, r0
 800550c:	000c      	movs	r4, r1
 800550e:	9203      	str	r2, [sp, #12]
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	429e      	cmp	r6, r3
 8005514:	d83c      	bhi.n	8005590 <__ssputs_r+0x8c>
 8005516:	2390      	movs	r3, #144	; 0x90
 8005518:	898a      	ldrh	r2, [r1, #12]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	421a      	tst	r2, r3
 800551e:	d034      	beq.n	800558a <__ssputs_r+0x86>
 8005520:	2503      	movs	r5, #3
 8005522:	6909      	ldr	r1, [r1, #16]
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	1a5b      	subs	r3, r3, r1
 8005528:	9302      	str	r3, [sp, #8]
 800552a:	6963      	ldr	r3, [r4, #20]
 800552c:	9802      	ldr	r0, [sp, #8]
 800552e:	435d      	muls	r5, r3
 8005530:	0feb      	lsrs	r3, r5, #31
 8005532:	195d      	adds	r5, r3, r5
 8005534:	9b01      	ldr	r3, [sp, #4]
 8005536:	106d      	asrs	r5, r5, #1
 8005538:	3301      	adds	r3, #1
 800553a:	181b      	adds	r3, r3, r0
 800553c:	42ab      	cmp	r3, r5
 800553e:	d900      	bls.n	8005542 <__ssputs_r+0x3e>
 8005540:	001d      	movs	r5, r3
 8005542:	0553      	lsls	r3, r2, #21
 8005544:	d532      	bpl.n	80055ac <__ssputs_r+0xa8>
 8005546:	0029      	movs	r1, r5
 8005548:	0038      	movs	r0, r7
 800554a:	f7ff feef 	bl	800532c <_malloc_r>
 800554e:	1e06      	subs	r6, r0, #0
 8005550:	d109      	bne.n	8005566 <__ssputs_r+0x62>
 8005552:	230c      	movs	r3, #12
 8005554:	603b      	str	r3, [r7, #0]
 8005556:	2340      	movs	r3, #64	; 0x40
 8005558:	2001      	movs	r0, #1
 800555a:	89a2      	ldrh	r2, [r4, #12]
 800555c:	4240      	negs	r0, r0
 800555e:	4313      	orrs	r3, r2
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	b005      	add	sp, #20
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005566:	9a02      	ldr	r2, [sp, #8]
 8005568:	6921      	ldr	r1, [r4, #16]
 800556a:	f7ff febf 	bl	80052ec <memcpy>
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <__ssputs_r+0xc0>)
 8005572:	401a      	ands	r2, r3
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	4313      	orrs	r3, r2
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	9b02      	ldr	r3, [sp, #8]
 800557c:	6126      	str	r6, [r4, #16]
 800557e:	18f6      	adds	r6, r6, r3
 8005580:	6026      	str	r6, [r4, #0]
 8005582:	6165      	str	r5, [r4, #20]
 8005584:	9e01      	ldr	r6, [sp, #4]
 8005586:	1aed      	subs	r5, r5, r3
 8005588:	60a5      	str	r5, [r4, #8]
 800558a:	9b01      	ldr	r3, [sp, #4]
 800558c:	429e      	cmp	r6, r3
 800558e:	d900      	bls.n	8005592 <__ssputs_r+0x8e>
 8005590:	9e01      	ldr	r6, [sp, #4]
 8005592:	0032      	movs	r2, r6
 8005594:	9903      	ldr	r1, [sp, #12]
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	f000 faa5 	bl	8005ae6 <memmove>
 800559c:	68a3      	ldr	r3, [r4, #8]
 800559e:	2000      	movs	r0, #0
 80055a0:	1b9b      	subs	r3, r3, r6
 80055a2:	60a3      	str	r3, [r4, #8]
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	199e      	adds	r6, r3, r6
 80055a8:	6026      	str	r6, [r4, #0]
 80055aa:	e7da      	b.n	8005562 <__ssputs_r+0x5e>
 80055ac:	002a      	movs	r2, r5
 80055ae:	0038      	movs	r0, r7
 80055b0:	f000 faf6 	bl	8005ba0 <_realloc_r>
 80055b4:	1e06      	subs	r6, r0, #0
 80055b6:	d1e0      	bne.n	800557a <__ssputs_r+0x76>
 80055b8:	0038      	movs	r0, r7
 80055ba:	6921      	ldr	r1, [r4, #16]
 80055bc:	f000 faa6 	bl	8005b0c <_free_r>
 80055c0:	e7c7      	b.n	8005552 <__ssputs_r+0x4e>
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	fffffb7f 	.word	0xfffffb7f

080055c8 <_svfiprintf_r>:
 80055c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ca:	b0a1      	sub	sp, #132	; 0x84
 80055cc:	9003      	str	r0, [sp, #12]
 80055ce:	001d      	movs	r5, r3
 80055d0:	898b      	ldrh	r3, [r1, #12]
 80055d2:	000f      	movs	r7, r1
 80055d4:	0016      	movs	r6, r2
 80055d6:	061b      	lsls	r3, r3, #24
 80055d8:	d511      	bpl.n	80055fe <_svfiprintf_r+0x36>
 80055da:	690b      	ldr	r3, [r1, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10e      	bne.n	80055fe <_svfiprintf_r+0x36>
 80055e0:	2140      	movs	r1, #64	; 0x40
 80055e2:	f7ff fea3 	bl	800532c <_malloc_r>
 80055e6:	6038      	str	r0, [r7, #0]
 80055e8:	6138      	str	r0, [r7, #16]
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d105      	bne.n	80055fa <_svfiprintf_r+0x32>
 80055ee:	230c      	movs	r3, #12
 80055f0:	9a03      	ldr	r2, [sp, #12]
 80055f2:	3801      	subs	r0, #1
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	b021      	add	sp, #132	; 0x84
 80055f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fa:	2340      	movs	r3, #64	; 0x40
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	2300      	movs	r3, #0
 8005600:	ac08      	add	r4, sp, #32
 8005602:	6163      	str	r3, [r4, #20]
 8005604:	3320      	adds	r3, #32
 8005606:	7663      	strb	r3, [r4, #25]
 8005608:	3310      	adds	r3, #16
 800560a:	76a3      	strb	r3, [r4, #26]
 800560c:	9507      	str	r5, [sp, #28]
 800560e:	0035      	movs	r5, r6
 8005610:	782b      	ldrb	r3, [r5, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <_svfiprintf_r+0x52>
 8005616:	2b25      	cmp	r3, #37	; 0x25
 8005618:	d147      	bne.n	80056aa <_svfiprintf_r+0xe2>
 800561a:	1bab      	subs	r3, r5, r6
 800561c:	9305      	str	r3, [sp, #20]
 800561e:	42b5      	cmp	r5, r6
 8005620:	d00c      	beq.n	800563c <_svfiprintf_r+0x74>
 8005622:	0032      	movs	r2, r6
 8005624:	0039      	movs	r1, r7
 8005626:	9803      	ldr	r0, [sp, #12]
 8005628:	f7ff ff6c 	bl	8005504 <__ssputs_r>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d100      	bne.n	8005632 <_svfiprintf_r+0x6a>
 8005630:	e0ae      	b.n	8005790 <_svfiprintf_r+0x1c8>
 8005632:	6962      	ldr	r2, [r4, #20]
 8005634:	9b05      	ldr	r3, [sp, #20]
 8005636:	4694      	mov	ip, r2
 8005638:	4463      	add	r3, ip
 800563a:	6163      	str	r3, [r4, #20]
 800563c:	782b      	ldrb	r3, [r5, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d100      	bne.n	8005644 <_svfiprintf_r+0x7c>
 8005642:	e0a5      	b.n	8005790 <_svfiprintf_r+0x1c8>
 8005644:	2201      	movs	r2, #1
 8005646:	2300      	movs	r3, #0
 8005648:	4252      	negs	r2, r2
 800564a:	6062      	str	r2, [r4, #4]
 800564c:	a904      	add	r1, sp, #16
 800564e:	3254      	adds	r2, #84	; 0x54
 8005650:	1852      	adds	r2, r2, r1
 8005652:	1c6e      	adds	r6, r5, #1
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	60e3      	str	r3, [r4, #12]
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	7013      	strb	r3, [r2, #0]
 800565c:	65a3      	str	r3, [r4, #88]	; 0x58
 800565e:	2205      	movs	r2, #5
 8005660:	7831      	ldrb	r1, [r6, #0]
 8005662:	4854      	ldr	r0, [pc, #336]	; (80057b4 <_svfiprintf_r+0x1ec>)
 8005664:	f000 fa34 	bl	8005ad0 <memchr>
 8005668:	1c75      	adds	r5, r6, #1
 800566a:	2800      	cmp	r0, #0
 800566c:	d11f      	bne.n	80056ae <_svfiprintf_r+0xe6>
 800566e:	6822      	ldr	r2, [r4, #0]
 8005670:	06d3      	lsls	r3, r2, #27
 8005672:	d504      	bpl.n	800567e <_svfiprintf_r+0xb6>
 8005674:	2353      	movs	r3, #83	; 0x53
 8005676:	a904      	add	r1, sp, #16
 8005678:	185b      	adds	r3, r3, r1
 800567a:	2120      	movs	r1, #32
 800567c:	7019      	strb	r1, [r3, #0]
 800567e:	0713      	lsls	r3, r2, #28
 8005680:	d504      	bpl.n	800568c <_svfiprintf_r+0xc4>
 8005682:	2353      	movs	r3, #83	; 0x53
 8005684:	a904      	add	r1, sp, #16
 8005686:	185b      	adds	r3, r3, r1
 8005688:	212b      	movs	r1, #43	; 0x2b
 800568a:	7019      	strb	r1, [r3, #0]
 800568c:	7833      	ldrb	r3, [r6, #0]
 800568e:	2b2a      	cmp	r3, #42	; 0x2a
 8005690:	d016      	beq.n	80056c0 <_svfiprintf_r+0xf8>
 8005692:	0035      	movs	r5, r6
 8005694:	2100      	movs	r1, #0
 8005696:	200a      	movs	r0, #10
 8005698:	68e3      	ldr	r3, [r4, #12]
 800569a:	782a      	ldrb	r2, [r5, #0]
 800569c:	1c6e      	adds	r6, r5, #1
 800569e:	3a30      	subs	r2, #48	; 0x30
 80056a0:	2a09      	cmp	r2, #9
 80056a2:	d94e      	bls.n	8005742 <_svfiprintf_r+0x17a>
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d111      	bne.n	80056cc <_svfiprintf_r+0x104>
 80056a8:	e017      	b.n	80056da <_svfiprintf_r+0x112>
 80056aa:	3501      	adds	r5, #1
 80056ac:	e7b0      	b.n	8005610 <_svfiprintf_r+0x48>
 80056ae:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <_svfiprintf_r+0x1ec>)
 80056b0:	6822      	ldr	r2, [r4, #0]
 80056b2:	1ac0      	subs	r0, r0, r3
 80056b4:	2301      	movs	r3, #1
 80056b6:	4083      	lsls	r3, r0
 80056b8:	4313      	orrs	r3, r2
 80056ba:	002e      	movs	r6, r5
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	e7ce      	b.n	800565e <_svfiprintf_r+0x96>
 80056c0:	9b07      	ldr	r3, [sp, #28]
 80056c2:	1d19      	adds	r1, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	9107      	str	r1, [sp, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	db01      	blt.n	80056d0 <_svfiprintf_r+0x108>
 80056cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ce:	e004      	b.n	80056da <_svfiprintf_r+0x112>
 80056d0:	425b      	negs	r3, r3
 80056d2:	60e3      	str	r3, [r4, #12]
 80056d4:	2302      	movs	r3, #2
 80056d6:	4313      	orrs	r3, r2
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	782b      	ldrb	r3, [r5, #0]
 80056dc:	2b2e      	cmp	r3, #46	; 0x2e
 80056de:	d10a      	bne.n	80056f6 <_svfiprintf_r+0x12e>
 80056e0:	786b      	ldrb	r3, [r5, #1]
 80056e2:	2b2a      	cmp	r3, #42	; 0x2a
 80056e4:	d135      	bne.n	8005752 <_svfiprintf_r+0x18a>
 80056e6:	9b07      	ldr	r3, [sp, #28]
 80056e8:	3502      	adds	r5, #2
 80056ea:	1d1a      	adds	r2, r3, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	9207      	str	r2, [sp, #28]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	db2b      	blt.n	800574c <_svfiprintf_r+0x184>
 80056f4:	9309      	str	r3, [sp, #36]	; 0x24
 80056f6:	4e30      	ldr	r6, [pc, #192]	; (80057b8 <_svfiprintf_r+0x1f0>)
 80056f8:	2203      	movs	r2, #3
 80056fa:	0030      	movs	r0, r6
 80056fc:	7829      	ldrb	r1, [r5, #0]
 80056fe:	f000 f9e7 	bl	8005ad0 <memchr>
 8005702:	2800      	cmp	r0, #0
 8005704:	d006      	beq.n	8005714 <_svfiprintf_r+0x14c>
 8005706:	2340      	movs	r3, #64	; 0x40
 8005708:	1b80      	subs	r0, r0, r6
 800570a:	4083      	lsls	r3, r0
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	3501      	adds	r5, #1
 8005710:	4313      	orrs	r3, r2
 8005712:	6023      	str	r3, [r4, #0]
 8005714:	7829      	ldrb	r1, [r5, #0]
 8005716:	2206      	movs	r2, #6
 8005718:	4828      	ldr	r0, [pc, #160]	; (80057bc <_svfiprintf_r+0x1f4>)
 800571a:	1c6e      	adds	r6, r5, #1
 800571c:	7621      	strb	r1, [r4, #24]
 800571e:	f000 f9d7 	bl	8005ad0 <memchr>
 8005722:	2800      	cmp	r0, #0
 8005724:	d03c      	beq.n	80057a0 <_svfiprintf_r+0x1d8>
 8005726:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <_svfiprintf_r+0x1f8>)
 8005728:	2b00      	cmp	r3, #0
 800572a:	d125      	bne.n	8005778 <_svfiprintf_r+0x1b0>
 800572c:	2207      	movs	r2, #7
 800572e:	9b07      	ldr	r3, [sp, #28]
 8005730:	3307      	adds	r3, #7
 8005732:	4393      	bics	r3, r2
 8005734:	3308      	adds	r3, #8
 8005736:	9307      	str	r3, [sp, #28]
 8005738:	6963      	ldr	r3, [r4, #20]
 800573a:	9a04      	ldr	r2, [sp, #16]
 800573c:	189b      	adds	r3, r3, r2
 800573e:	6163      	str	r3, [r4, #20]
 8005740:	e765      	b.n	800560e <_svfiprintf_r+0x46>
 8005742:	4343      	muls	r3, r0
 8005744:	0035      	movs	r5, r6
 8005746:	2101      	movs	r1, #1
 8005748:	189b      	adds	r3, r3, r2
 800574a:	e7a6      	b.n	800569a <_svfiprintf_r+0xd2>
 800574c:	2301      	movs	r3, #1
 800574e:	425b      	negs	r3, r3
 8005750:	e7d0      	b.n	80056f4 <_svfiprintf_r+0x12c>
 8005752:	2300      	movs	r3, #0
 8005754:	200a      	movs	r0, #10
 8005756:	001a      	movs	r2, r3
 8005758:	3501      	adds	r5, #1
 800575a:	6063      	str	r3, [r4, #4]
 800575c:	7829      	ldrb	r1, [r5, #0]
 800575e:	1c6e      	adds	r6, r5, #1
 8005760:	3930      	subs	r1, #48	; 0x30
 8005762:	2909      	cmp	r1, #9
 8005764:	d903      	bls.n	800576e <_svfiprintf_r+0x1a6>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0c5      	beq.n	80056f6 <_svfiprintf_r+0x12e>
 800576a:	9209      	str	r2, [sp, #36]	; 0x24
 800576c:	e7c3      	b.n	80056f6 <_svfiprintf_r+0x12e>
 800576e:	4342      	muls	r2, r0
 8005770:	0035      	movs	r5, r6
 8005772:	2301      	movs	r3, #1
 8005774:	1852      	adds	r2, r2, r1
 8005776:	e7f1      	b.n	800575c <_svfiprintf_r+0x194>
 8005778:	ab07      	add	r3, sp, #28
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	003a      	movs	r2, r7
 800577e:	0021      	movs	r1, r4
 8005780:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <_svfiprintf_r+0x1fc>)
 8005782:	9803      	ldr	r0, [sp, #12]
 8005784:	e000      	b.n	8005788 <_svfiprintf_r+0x1c0>
 8005786:	bf00      	nop
 8005788:	9004      	str	r0, [sp, #16]
 800578a:	9b04      	ldr	r3, [sp, #16]
 800578c:	3301      	adds	r3, #1
 800578e:	d1d3      	bne.n	8005738 <_svfiprintf_r+0x170>
 8005790:	89bb      	ldrh	r3, [r7, #12]
 8005792:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005794:	065b      	lsls	r3, r3, #25
 8005796:	d400      	bmi.n	800579a <_svfiprintf_r+0x1d2>
 8005798:	e72d      	b.n	80055f6 <_svfiprintf_r+0x2e>
 800579a:	2001      	movs	r0, #1
 800579c:	4240      	negs	r0, r0
 800579e:	e72a      	b.n	80055f6 <_svfiprintf_r+0x2e>
 80057a0:	ab07      	add	r3, sp, #28
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	003a      	movs	r2, r7
 80057a6:	0021      	movs	r1, r4
 80057a8:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <_svfiprintf_r+0x1fc>)
 80057aa:	9803      	ldr	r0, [sp, #12]
 80057ac:	f000 f87c 	bl	80058a8 <_printf_i>
 80057b0:	e7ea      	b.n	8005788 <_svfiprintf_r+0x1c0>
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	08005e69 	.word	0x08005e69
 80057b8:	08005e6f 	.word	0x08005e6f
 80057bc:	08005e73 	.word	0x08005e73
 80057c0:	00000000 	.word	0x00000000
 80057c4:	08005505 	.word	0x08005505

080057c8 <_printf_common>:
 80057c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ca:	0015      	movs	r5, r2
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	688a      	ldr	r2, [r1, #8]
 80057d0:	690b      	ldr	r3, [r1, #16]
 80057d2:	000c      	movs	r4, r1
 80057d4:	9000      	str	r0, [sp, #0]
 80057d6:	4293      	cmp	r3, r2
 80057d8:	da00      	bge.n	80057dc <_printf_common+0x14>
 80057da:	0013      	movs	r3, r2
 80057dc:	0022      	movs	r2, r4
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	3243      	adds	r2, #67	; 0x43
 80057e2:	7812      	ldrb	r2, [r2, #0]
 80057e4:	2a00      	cmp	r2, #0
 80057e6:	d001      	beq.n	80057ec <_printf_common+0x24>
 80057e8:	3301      	adds	r3, #1
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	069b      	lsls	r3, r3, #26
 80057f0:	d502      	bpl.n	80057f8 <_printf_common+0x30>
 80057f2:	682b      	ldr	r3, [r5, #0]
 80057f4:	3302      	adds	r3, #2
 80057f6:	602b      	str	r3, [r5, #0]
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	2306      	movs	r3, #6
 80057fc:	0017      	movs	r7, r2
 80057fe:	401f      	ands	r7, r3
 8005800:	421a      	tst	r2, r3
 8005802:	d027      	beq.n	8005854 <_printf_common+0x8c>
 8005804:	0023      	movs	r3, r4
 8005806:	3343      	adds	r3, #67	; 0x43
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	1e5a      	subs	r2, r3, #1
 800580c:	4193      	sbcs	r3, r2
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	0692      	lsls	r2, r2, #26
 8005812:	d430      	bmi.n	8005876 <_printf_common+0xae>
 8005814:	0022      	movs	r2, r4
 8005816:	9901      	ldr	r1, [sp, #4]
 8005818:	9800      	ldr	r0, [sp, #0]
 800581a:	9e08      	ldr	r6, [sp, #32]
 800581c:	3243      	adds	r2, #67	; 0x43
 800581e:	47b0      	blx	r6
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d025      	beq.n	8005870 <_printf_common+0xa8>
 8005824:	2306      	movs	r3, #6
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	682a      	ldr	r2, [r5, #0]
 800582a:	68e1      	ldr	r1, [r4, #12]
 800582c:	2500      	movs	r5, #0
 800582e:	4003      	ands	r3, r0
 8005830:	2b04      	cmp	r3, #4
 8005832:	d103      	bne.n	800583c <_printf_common+0x74>
 8005834:	1a8d      	subs	r5, r1, r2
 8005836:	43eb      	mvns	r3, r5
 8005838:	17db      	asrs	r3, r3, #31
 800583a:	401d      	ands	r5, r3
 800583c:	68a3      	ldr	r3, [r4, #8]
 800583e:	6922      	ldr	r2, [r4, #16]
 8005840:	4293      	cmp	r3, r2
 8005842:	dd01      	ble.n	8005848 <_printf_common+0x80>
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	18ed      	adds	r5, r5, r3
 8005848:	2700      	movs	r7, #0
 800584a:	42bd      	cmp	r5, r7
 800584c:	d120      	bne.n	8005890 <_printf_common+0xc8>
 800584e:	2000      	movs	r0, #0
 8005850:	e010      	b.n	8005874 <_printf_common+0xac>
 8005852:	3701      	adds	r7, #1
 8005854:	68e3      	ldr	r3, [r4, #12]
 8005856:	682a      	ldr	r2, [r5, #0]
 8005858:	1a9b      	subs	r3, r3, r2
 800585a:	42bb      	cmp	r3, r7
 800585c:	ddd2      	ble.n	8005804 <_printf_common+0x3c>
 800585e:	0022      	movs	r2, r4
 8005860:	2301      	movs	r3, #1
 8005862:	9901      	ldr	r1, [sp, #4]
 8005864:	9800      	ldr	r0, [sp, #0]
 8005866:	9e08      	ldr	r6, [sp, #32]
 8005868:	3219      	adds	r2, #25
 800586a:	47b0      	blx	r6
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d1f0      	bne.n	8005852 <_printf_common+0x8a>
 8005870:	2001      	movs	r0, #1
 8005872:	4240      	negs	r0, r0
 8005874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005876:	2030      	movs	r0, #48	; 0x30
 8005878:	18e1      	adds	r1, r4, r3
 800587a:	3143      	adds	r1, #67	; 0x43
 800587c:	7008      	strb	r0, [r1, #0]
 800587e:	0021      	movs	r1, r4
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	3145      	adds	r1, #69	; 0x45
 8005884:	7809      	ldrb	r1, [r1, #0]
 8005886:	18a2      	adds	r2, r4, r2
 8005888:	3243      	adds	r2, #67	; 0x43
 800588a:	3302      	adds	r3, #2
 800588c:	7011      	strb	r1, [r2, #0]
 800588e:	e7c1      	b.n	8005814 <_printf_common+0x4c>
 8005890:	0022      	movs	r2, r4
 8005892:	2301      	movs	r3, #1
 8005894:	9901      	ldr	r1, [sp, #4]
 8005896:	9800      	ldr	r0, [sp, #0]
 8005898:	9e08      	ldr	r6, [sp, #32]
 800589a:	321a      	adds	r2, #26
 800589c:	47b0      	blx	r6
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	d0e6      	beq.n	8005870 <_printf_common+0xa8>
 80058a2:	3701      	adds	r7, #1
 80058a4:	e7d1      	b.n	800584a <_printf_common+0x82>
	...

080058a8 <_printf_i>:
 80058a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058aa:	b08b      	sub	sp, #44	; 0x2c
 80058ac:	9206      	str	r2, [sp, #24]
 80058ae:	000a      	movs	r2, r1
 80058b0:	3243      	adds	r2, #67	; 0x43
 80058b2:	9307      	str	r3, [sp, #28]
 80058b4:	9005      	str	r0, [sp, #20]
 80058b6:	9204      	str	r2, [sp, #16]
 80058b8:	7e0a      	ldrb	r2, [r1, #24]
 80058ba:	000c      	movs	r4, r1
 80058bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058be:	2a78      	cmp	r2, #120	; 0x78
 80058c0:	d806      	bhi.n	80058d0 <_printf_i+0x28>
 80058c2:	2a62      	cmp	r2, #98	; 0x62
 80058c4:	d808      	bhi.n	80058d8 <_printf_i+0x30>
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	d100      	bne.n	80058cc <_printf_i+0x24>
 80058ca:	e0c0      	b.n	8005a4e <_printf_i+0x1a6>
 80058cc:	2a58      	cmp	r2, #88	; 0x58
 80058ce:	d052      	beq.n	8005976 <_printf_i+0xce>
 80058d0:	0026      	movs	r6, r4
 80058d2:	3642      	adds	r6, #66	; 0x42
 80058d4:	7032      	strb	r2, [r6, #0]
 80058d6:	e022      	b.n	800591e <_printf_i+0x76>
 80058d8:	0010      	movs	r0, r2
 80058da:	3863      	subs	r0, #99	; 0x63
 80058dc:	2815      	cmp	r0, #21
 80058de:	d8f7      	bhi.n	80058d0 <_printf_i+0x28>
 80058e0:	f7fa fc1a 	bl	8000118 <__gnu_thumb1_case_shi>
 80058e4:	001f0016 	.word	0x001f0016
 80058e8:	fff6fff6 	.word	0xfff6fff6
 80058ec:	fff6fff6 	.word	0xfff6fff6
 80058f0:	fff6001f 	.word	0xfff6001f
 80058f4:	fff6fff6 	.word	0xfff6fff6
 80058f8:	00a8fff6 	.word	0x00a8fff6
 80058fc:	009a0036 	.word	0x009a0036
 8005900:	fff6fff6 	.word	0xfff6fff6
 8005904:	fff600b9 	.word	0xfff600b9
 8005908:	fff60036 	.word	0xfff60036
 800590c:	009efff6 	.word	0x009efff6
 8005910:	0026      	movs	r6, r4
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	3642      	adds	r6, #66	; 0x42
 8005916:	1d11      	adds	r1, r2, #4
 8005918:	6019      	str	r1, [r3, #0]
 800591a:	6813      	ldr	r3, [r2, #0]
 800591c:	7033      	strb	r3, [r6, #0]
 800591e:	2301      	movs	r3, #1
 8005920:	e0a7      	b.n	8005a72 <_printf_i+0x1ca>
 8005922:	6808      	ldr	r0, [r1, #0]
 8005924:	6819      	ldr	r1, [r3, #0]
 8005926:	1d0a      	adds	r2, r1, #4
 8005928:	0605      	lsls	r5, r0, #24
 800592a:	d50b      	bpl.n	8005944 <_printf_i+0x9c>
 800592c:	680d      	ldr	r5, [r1, #0]
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	2d00      	cmp	r5, #0
 8005932:	da03      	bge.n	800593c <_printf_i+0x94>
 8005934:	232d      	movs	r3, #45	; 0x2d
 8005936:	9a04      	ldr	r2, [sp, #16]
 8005938:	426d      	negs	r5, r5
 800593a:	7013      	strb	r3, [r2, #0]
 800593c:	4b61      	ldr	r3, [pc, #388]	; (8005ac4 <_printf_i+0x21c>)
 800593e:	270a      	movs	r7, #10
 8005940:	9303      	str	r3, [sp, #12]
 8005942:	e032      	b.n	80059aa <_printf_i+0x102>
 8005944:	680d      	ldr	r5, [r1, #0]
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	0641      	lsls	r1, r0, #25
 800594a:	d5f1      	bpl.n	8005930 <_printf_i+0x88>
 800594c:	b22d      	sxth	r5, r5
 800594e:	e7ef      	b.n	8005930 <_printf_i+0x88>
 8005950:	680d      	ldr	r5, [r1, #0]
 8005952:	6819      	ldr	r1, [r3, #0]
 8005954:	1d08      	adds	r0, r1, #4
 8005956:	6018      	str	r0, [r3, #0]
 8005958:	062e      	lsls	r6, r5, #24
 800595a:	d501      	bpl.n	8005960 <_printf_i+0xb8>
 800595c:	680d      	ldr	r5, [r1, #0]
 800595e:	e003      	b.n	8005968 <_printf_i+0xc0>
 8005960:	066d      	lsls	r5, r5, #25
 8005962:	d5fb      	bpl.n	800595c <_printf_i+0xb4>
 8005964:	680d      	ldr	r5, [r1, #0]
 8005966:	b2ad      	uxth	r5, r5
 8005968:	4b56      	ldr	r3, [pc, #344]	; (8005ac4 <_printf_i+0x21c>)
 800596a:	270a      	movs	r7, #10
 800596c:	9303      	str	r3, [sp, #12]
 800596e:	2a6f      	cmp	r2, #111	; 0x6f
 8005970:	d117      	bne.n	80059a2 <_printf_i+0xfa>
 8005972:	2708      	movs	r7, #8
 8005974:	e015      	b.n	80059a2 <_printf_i+0xfa>
 8005976:	3145      	adds	r1, #69	; 0x45
 8005978:	700a      	strb	r2, [r1, #0]
 800597a:	4a52      	ldr	r2, [pc, #328]	; (8005ac4 <_printf_i+0x21c>)
 800597c:	9203      	str	r2, [sp, #12]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	6821      	ldr	r1, [r4, #0]
 8005982:	ca20      	ldmia	r2!, {r5}
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	0608      	lsls	r0, r1, #24
 8005988:	d550      	bpl.n	8005a2c <_printf_i+0x184>
 800598a:	07cb      	lsls	r3, r1, #31
 800598c:	d502      	bpl.n	8005994 <_printf_i+0xec>
 800598e:	2320      	movs	r3, #32
 8005990:	4319      	orrs	r1, r3
 8005992:	6021      	str	r1, [r4, #0]
 8005994:	2710      	movs	r7, #16
 8005996:	2d00      	cmp	r5, #0
 8005998:	d103      	bne.n	80059a2 <_printf_i+0xfa>
 800599a:	2320      	movs	r3, #32
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	439a      	bics	r2, r3
 80059a0:	6022      	str	r2, [r4, #0]
 80059a2:	0023      	movs	r3, r4
 80059a4:	2200      	movs	r2, #0
 80059a6:	3343      	adds	r3, #67	; 0x43
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	6863      	ldr	r3, [r4, #4]
 80059ac:	60a3      	str	r3, [r4, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	db03      	blt.n	80059ba <_printf_i+0x112>
 80059b2:	2204      	movs	r2, #4
 80059b4:	6821      	ldr	r1, [r4, #0]
 80059b6:	4391      	bics	r1, r2
 80059b8:	6021      	str	r1, [r4, #0]
 80059ba:	2d00      	cmp	r5, #0
 80059bc:	d102      	bne.n	80059c4 <_printf_i+0x11c>
 80059be:	9e04      	ldr	r6, [sp, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00c      	beq.n	80059de <_printf_i+0x136>
 80059c4:	9e04      	ldr	r6, [sp, #16]
 80059c6:	0028      	movs	r0, r5
 80059c8:	0039      	movs	r1, r7
 80059ca:	f7fa fc35 	bl	8000238 <__aeabi_uidivmod>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	3e01      	subs	r6, #1
 80059d2:	5c5b      	ldrb	r3, [r3, r1]
 80059d4:	7033      	strb	r3, [r6, #0]
 80059d6:	002b      	movs	r3, r5
 80059d8:	0005      	movs	r5, r0
 80059da:	429f      	cmp	r7, r3
 80059dc:	d9f3      	bls.n	80059c6 <_printf_i+0x11e>
 80059de:	2f08      	cmp	r7, #8
 80059e0:	d109      	bne.n	80059f6 <_printf_i+0x14e>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	07db      	lsls	r3, r3, #31
 80059e6:	d506      	bpl.n	80059f6 <_printf_i+0x14e>
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	6922      	ldr	r2, [r4, #16]
 80059ec:	4293      	cmp	r3, r2
 80059ee:	dc02      	bgt.n	80059f6 <_printf_i+0x14e>
 80059f0:	2330      	movs	r3, #48	; 0x30
 80059f2:	3e01      	subs	r6, #1
 80059f4:	7033      	strb	r3, [r6, #0]
 80059f6:	9b04      	ldr	r3, [sp, #16]
 80059f8:	1b9b      	subs	r3, r3, r6
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	9b07      	ldr	r3, [sp, #28]
 80059fe:	0021      	movs	r1, r4
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	9805      	ldr	r0, [sp, #20]
 8005a04:	9b06      	ldr	r3, [sp, #24]
 8005a06:	aa09      	add	r2, sp, #36	; 0x24
 8005a08:	f7ff fede 	bl	80057c8 <_printf_common>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d135      	bne.n	8005a7c <_printf_i+0x1d4>
 8005a10:	2001      	movs	r0, #1
 8005a12:	4240      	negs	r0, r0
 8005a14:	b00b      	add	sp, #44	; 0x2c
 8005a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a18:	2220      	movs	r2, #32
 8005a1a:	6809      	ldr	r1, [r1, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	6022      	str	r2, [r4, #0]
 8005a20:	0022      	movs	r2, r4
 8005a22:	2178      	movs	r1, #120	; 0x78
 8005a24:	3245      	adds	r2, #69	; 0x45
 8005a26:	7011      	strb	r1, [r2, #0]
 8005a28:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <_printf_i+0x220>)
 8005a2a:	e7a7      	b.n	800597c <_printf_i+0xd4>
 8005a2c:	0648      	lsls	r0, r1, #25
 8005a2e:	d5ac      	bpl.n	800598a <_printf_i+0xe2>
 8005a30:	b2ad      	uxth	r5, r5
 8005a32:	e7aa      	b.n	800598a <_printf_i+0xe2>
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	680d      	ldr	r5, [r1, #0]
 8005a38:	1d10      	adds	r0, r2, #4
 8005a3a:	6949      	ldr	r1, [r1, #20]
 8005a3c:	6018      	str	r0, [r3, #0]
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	062e      	lsls	r6, r5, #24
 8005a42:	d501      	bpl.n	8005a48 <_printf_i+0x1a0>
 8005a44:	6019      	str	r1, [r3, #0]
 8005a46:	e002      	b.n	8005a4e <_printf_i+0x1a6>
 8005a48:	066d      	lsls	r5, r5, #25
 8005a4a:	d5fb      	bpl.n	8005a44 <_printf_i+0x19c>
 8005a4c:	8019      	strh	r1, [r3, #0]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	9e04      	ldr	r6, [sp, #16]
 8005a52:	6123      	str	r3, [r4, #16]
 8005a54:	e7d2      	b.n	80059fc <_printf_i+0x154>
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	1d11      	adds	r1, r2, #4
 8005a5a:	6019      	str	r1, [r3, #0]
 8005a5c:	6816      	ldr	r6, [r2, #0]
 8005a5e:	2100      	movs	r1, #0
 8005a60:	0030      	movs	r0, r6
 8005a62:	6862      	ldr	r2, [r4, #4]
 8005a64:	f000 f834 	bl	8005ad0 <memchr>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d001      	beq.n	8005a70 <_printf_i+0x1c8>
 8005a6c:	1b80      	subs	r0, r0, r6
 8005a6e:	6060      	str	r0, [r4, #4]
 8005a70:	6863      	ldr	r3, [r4, #4]
 8005a72:	6123      	str	r3, [r4, #16]
 8005a74:	2300      	movs	r3, #0
 8005a76:	9a04      	ldr	r2, [sp, #16]
 8005a78:	7013      	strb	r3, [r2, #0]
 8005a7a:	e7bf      	b.n	80059fc <_printf_i+0x154>
 8005a7c:	6923      	ldr	r3, [r4, #16]
 8005a7e:	0032      	movs	r2, r6
 8005a80:	9906      	ldr	r1, [sp, #24]
 8005a82:	9805      	ldr	r0, [sp, #20]
 8005a84:	9d07      	ldr	r5, [sp, #28]
 8005a86:	47a8      	blx	r5
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d0c1      	beq.n	8005a10 <_printf_i+0x168>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	079b      	lsls	r3, r3, #30
 8005a90:	d415      	bmi.n	8005abe <_printf_i+0x216>
 8005a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a94:	68e0      	ldr	r0, [r4, #12]
 8005a96:	4298      	cmp	r0, r3
 8005a98:	dabc      	bge.n	8005a14 <_printf_i+0x16c>
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	e7ba      	b.n	8005a14 <_printf_i+0x16c>
 8005a9e:	0022      	movs	r2, r4
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	9906      	ldr	r1, [sp, #24]
 8005aa4:	9805      	ldr	r0, [sp, #20]
 8005aa6:	9e07      	ldr	r6, [sp, #28]
 8005aa8:	3219      	adds	r2, #25
 8005aaa:	47b0      	blx	r6
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d0af      	beq.n	8005a10 <_printf_i+0x168>
 8005ab0:	3501      	adds	r5, #1
 8005ab2:	68e3      	ldr	r3, [r4, #12]
 8005ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	42ab      	cmp	r3, r5
 8005aba:	dcf0      	bgt.n	8005a9e <_printf_i+0x1f6>
 8005abc:	e7e9      	b.n	8005a92 <_printf_i+0x1ea>
 8005abe:	2500      	movs	r5, #0
 8005ac0:	e7f7      	b.n	8005ab2 <_printf_i+0x20a>
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	08005e7a 	.word	0x08005e7a
 8005ac8:	08005e8b 	.word	0x08005e8b

08005acc <__retarget_lock_acquire_recursive>:
 8005acc:	4770      	bx	lr

08005ace <__retarget_lock_release_recursive>:
 8005ace:	4770      	bx	lr

08005ad0 <memchr>:
 8005ad0:	b2c9      	uxtb	r1, r1
 8005ad2:	1882      	adds	r2, r0, r2
 8005ad4:	4290      	cmp	r0, r2
 8005ad6:	d101      	bne.n	8005adc <memchr+0xc>
 8005ad8:	2000      	movs	r0, #0
 8005ada:	4770      	bx	lr
 8005adc:	7803      	ldrb	r3, [r0, #0]
 8005ade:	428b      	cmp	r3, r1
 8005ae0:	d0fb      	beq.n	8005ada <memchr+0xa>
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	e7f6      	b.n	8005ad4 <memchr+0x4>

08005ae6 <memmove>:
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	4288      	cmp	r0, r1
 8005aea:	d902      	bls.n	8005af2 <memmove+0xc>
 8005aec:	188b      	adds	r3, r1, r2
 8005aee:	4298      	cmp	r0, r3
 8005af0:	d303      	bcc.n	8005afa <memmove+0x14>
 8005af2:	2300      	movs	r3, #0
 8005af4:	e007      	b.n	8005b06 <memmove+0x20>
 8005af6:	5c8b      	ldrb	r3, [r1, r2]
 8005af8:	5483      	strb	r3, [r0, r2]
 8005afa:	3a01      	subs	r2, #1
 8005afc:	d2fb      	bcs.n	8005af6 <memmove+0x10>
 8005afe:	bd10      	pop	{r4, pc}
 8005b00:	5ccc      	ldrb	r4, [r1, r3]
 8005b02:	54c4      	strb	r4, [r0, r3]
 8005b04:	3301      	adds	r3, #1
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d1fa      	bne.n	8005b00 <memmove+0x1a>
 8005b0a:	e7f8      	b.n	8005afe <memmove+0x18>

08005b0c <_free_r>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	0005      	movs	r5, r0
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d010      	beq.n	8005b36 <_free_r+0x2a>
 8005b14:	1f0c      	subs	r4, r1, #4
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	da00      	bge.n	8005b1e <_free_r+0x12>
 8005b1c:	18e4      	adds	r4, r4, r3
 8005b1e:	0028      	movs	r0, r5
 8005b20:	f7ff fce0 	bl	80054e4 <__malloc_lock>
 8005b24:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <_free_r+0x90>)
 8005b26:	6813      	ldr	r3, [r2, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <_free_r+0x2c>
 8005b2c:	6063      	str	r3, [r4, #4]
 8005b2e:	6014      	str	r4, [r2, #0]
 8005b30:	0028      	movs	r0, r5
 8005b32:	f7ff fcdf 	bl	80054f4 <__malloc_unlock>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d908      	bls.n	8005b4e <_free_r+0x42>
 8005b3c:	6821      	ldr	r1, [r4, #0]
 8005b3e:	1860      	adds	r0, r4, r1
 8005b40:	4283      	cmp	r3, r0
 8005b42:	d1f3      	bne.n	8005b2c <_free_r+0x20>
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	1841      	adds	r1, r0, r1
 8005b4a:	6021      	str	r1, [r4, #0]
 8005b4c:	e7ee      	b.n	8005b2c <_free_r+0x20>
 8005b4e:	001a      	movs	r2, r3
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <_free_r+0x4e>
 8005b56:	42a3      	cmp	r3, r4
 8005b58:	d9f9      	bls.n	8005b4e <_free_r+0x42>
 8005b5a:	6811      	ldr	r1, [r2, #0]
 8005b5c:	1850      	adds	r0, r2, r1
 8005b5e:	42a0      	cmp	r0, r4
 8005b60:	d10b      	bne.n	8005b7a <_free_r+0x6e>
 8005b62:	6820      	ldr	r0, [r4, #0]
 8005b64:	1809      	adds	r1, r1, r0
 8005b66:	1850      	adds	r0, r2, r1
 8005b68:	6011      	str	r1, [r2, #0]
 8005b6a:	4283      	cmp	r3, r0
 8005b6c:	d1e0      	bne.n	8005b30 <_free_r+0x24>
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	1841      	adds	r1, r0, r1
 8005b74:	6011      	str	r1, [r2, #0]
 8005b76:	6053      	str	r3, [r2, #4]
 8005b78:	e7da      	b.n	8005b30 <_free_r+0x24>
 8005b7a:	42a0      	cmp	r0, r4
 8005b7c:	d902      	bls.n	8005b84 <_free_r+0x78>
 8005b7e:	230c      	movs	r3, #12
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	e7d5      	b.n	8005b30 <_free_r+0x24>
 8005b84:	6821      	ldr	r1, [r4, #0]
 8005b86:	1860      	adds	r0, r4, r1
 8005b88:	4283      	cmp	r3, r0
 8005b8a:	d103      	bne.n	8005b94 <_free_r+0x88>
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	1841      	adds	r1, r0, r1
 8005b92:	6021      	str	r1, [r4, #0]
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	6054      	str	r4, [r2, #4]
 8005b98:	e7ca      	b.n	8005b30 <_free_r+0x24>
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	200015c0 	.word	0x200015c0

08005ba0 <_realloc_r>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	0007      	movs	r7, r0
 8005ba4:	000d      	movs	r5, r1
 8005ba6:	0016      	movs	r6, r2
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d105      	bne.n	8005bb8 <_realloc_r+0x18>
 8005bac:	0011      	movs	r1, r2
 8005bae:	f7ff fbbd 	bl	800532c <_malloc_r>
 8005bb2:	0004      	movs	r4, r0
 8005bb4:	0020      	movs	r0, r4
 8005bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bb8:	2a00      	cmp	r2, #0
 8005bba:	d103      	bne.n	8005bc4 <_realloc_r+0x24>
 8005bbc:	f7ff ffa6 	bl	8005b0c <_free_r>
 8005bc0:	0034      	movs	r4, r6
 8005bc2:	e7f7      	b.n	8005bb4 <_realloc_r+0x14>
 8005bc4:	f000 f812 	bl	8005bec <_malloc_usable_size_r>
 8005bc8:	002c      	movs	r4, r5
 8005bca:	42b0      	cmp	r0, r6
 8005bcc:	d2f2      	bcs.n	8005bb4 <_realloc_r+0x14>
 8005bce:	0031      	movs	r1, r6
 8005bd0:	0038      	movs	r0, r7
 8005bd2:	f7ff fbab 	bl	800532c <_malloc_r>
 8005bd6:	1e04      	subs	r4, r0, #0
 8005bd8:	d0ec      	beq.n	8005bb4 <_realloc_r+0x14>
 8005bda:	0029      	movs	r1, r5
 8005bdc:	0032      	movs	r2, r6
 8005bde:	f7ff fb85 	bl	80052ec <memcpy>
 8005be2:	0029      	movs	r1, r5
 8005be4:	0038      	movs	r0, r7
 8005be6:	f7ff ff91 	bl	8005b0c <_free_r>
 8005bea:	e7e3      	b.n	8005bb4 <_realloc_r+0x14>

08005bec <_malloc_usable_size_r>:
 8005bec:	1f0b      	subs	r3, r1, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	1f18      	subs	r0, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	da01      	bge.n	8005bfa <_malloc_usable_size_r+0xe>
 8005bf6:	580b      	ldr	r3, [r1, r0]
 8005bf8:	18c0      	adds	r0, r0, r3
 8005bfa:	4770      	bx	lr

08005bfc <_init>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr

08005c08 <_fini>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0e:	bc08      	pop	{r3}
 8005c10:	469e      	mov	lr, r3
 8005c12:	4770      	bx	lr
