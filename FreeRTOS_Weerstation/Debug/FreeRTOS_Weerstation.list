
FreeRTOS_Weerstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c9c  08008c9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca4  08008ca4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001828  20000070  08008d1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001898  08008d1c  00021898  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d34d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003705  00000000  00000000  0003d3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00040af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  000421e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005071  00000000  00000000  00043778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019936  00000000  00000000  000487e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071147  00000000  00000000  0006211f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3266  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005958  00000000  00000000  000d32bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008950 	.word	0x08008950

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08008950 	.word	0x08008950

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_ldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d115      	bne.n	8000274 <__aeabi_ldivmod+0x30>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d113      	bne.n	8000274 <__aeabi_ldivmod+0x30>
 800024c:	2900      	cmp	r1, #0
 800024e:	db06      	blt.n	800025e <__aeabi_ldivmod+0x1a>
 8000250:	dc01      	bgt.n	8000256 <__aeabi_ldivmod+0x12>
 8000252:	2800      	cmp	r0, #0
 8000254:	d006      	beq.n	8000264 <__aeabi_ldivmod+0x20>
 8000256:	2000      	movs	r0, #0
 8000258:	43c0      	mvns	r0, r0
 800025a:	0841      	lsrs	r1, r0, #1
 800025c:	e002      	b.n	8000264 <__aeabi_ldivmod+0x20>
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	0609      	lsls	r1, r1, #24
 8000262:	2000      	movs	r0, #0
 8000264:	b407      	push	{r0, r1, r2}
 8000266:	4802      	ldr	r0, [pc, #8]	; (8000270 <__aeabi_ldivmod+0x2c>)
 8000268:	a101      	add	r1, pc, #4	; (adr r1, 8000270 <__aeabi_ldivmod+0x2c>)
 800026a:	1840      	adds	r0, r0, r1
 800026c:	9002      	str	r0, [sp, #8]
 800026e:	bd03      	pop	{r0, r1, pc}
 8000270:	ffffffd1 	.word	0xffffffd1
 8000274:	b403      	push	{r0, r1}
 8000276:	4668      	mov	r0, sp
 8000278:	b501      	push	{r0, lr}
 800027a:	9802      	ldr	r0, [sp, #8]
 800027c:	f000 f82e 	bl	80002dc <__gnu_ldivmod_helper>
 8000280:	9b01      	ldr	r3, [sp, #4]
 8000282:	469e      	mov	lr, r3
 8000284:	b002      	add	sp, #8
 8000286:	bc0c      	pop	{r2, r3}
 8000288:	4770      	bx	lr
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_lmul>:
 800028c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028e:	0415      	lsls	r5, r2, #16
 8000290:	0c2d      	lsrs	r5, r5, #16
 8000292:	000f      	movs	r7, r1
 8000294:	0001      	movs	r1, r0
 8000296:	002e      	movs	r6, r5
 8000298:	46c6      	mov	lr, r8
 800029a:	4684      	mov	ip, r0
 800029c:	0400      	lsls	r0, r0, #16
 800029e:	0c14      	lsrs	r4, r2, #16
 80002a0:	0c00      	lsrs	r0, r0, #16
 80002a2:	0c09      	lsrs	r1, r1, #16
 80002a4:	4346      	muls	r6, r0
 80002a6:	434d      	muls	r5, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	1940      	adds	r0, r0, r5
 80002ae:	0c34      	lsrs	r4, r6, #16
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	b500      	push	{lr}
 80002b4:	42a5      	cmp	r5, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x34>
 80002b8:	2080      	movs	r0, #128	; 0x80
 80002ba:	0240      	lsls	r0, r0, #9
 80002bc:	4680      	mov	r8, r0
 80002be:	4441      	add	r1, r8
 80002c0:	0c25      	lsrs	r5, r4, #16
 80002c2:	186d      	adds	r5, r5, r1
 80002c4:	4661      	mov	r1, ip
 80002c6:	4359      	muls	r1, r3
 80002c8:	437a      	muls	r2, r7
 80002ca:	0430      	lsls	r0, r6, #16
 80002cc:	1949      	adds	r1, r1, r5
 80002ce:	0424      	lsls	r4, r4, #16
 80002d0:	0c00      	lsrs	r0, r0, #16
 80002d2:	1820      	adds	r0, r4, r0
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bc80      	pop	{r7}
 80002d8:	46b8      	mov	r8, r7
 80002da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002dc <__gnu_ldivmod_helper>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	46ce      	mov	lr, r9
 80002e0:	4647      	mov	r7, r8
 80002e2:	b580      	push	{r7, lr}
 80002e4:	4691      	mov	r9, r2
 80002e6:	4698      	mov	r8, r3
 80002e8:	0004      	movs	r4, r0
 80002ea:	000d      	movs	r5, r1
 80002ec:	f000 fb80 	bl	80009f0 <__divdi3>
 80002f0:	0007      	movs	r7, r0
 80002f2:	000e      	movs	r6, r1
 80002f4:	0002      	movs	r2, r0
 80002f6:	000b      	movs	r3, r1
 80002f8:	4648      	mov	r0, r9
 80002fa:	4641      	mov	r1, r8
 80002fc:	f7ff ffc6 	bl	800028c <__aeabi_lmul>
 8000300:	1a24      	subs	r4, r4, r0
 8000302:	418d      	sbcs	r5, r1
 8000304:	9b08      	ldr	r3, [sp, #32]
 8000306:	0038      	movs	r0, r7
 8000308:	0031      	movs	r1, r6
 800030a:	601c      	str	r4, [r3, #0]
 800030c:	605d      	str	r5, [r3, #4]
 800030e:	bcc0      	pop	{r6, r7}
 8000310:	46b9      	mov	r9, r7
 8000312:	46b0      	mov	r8, r6
 8000314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)

08000318 <__aeabi_ddiv>:
 8000318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031a:	4657      	mov	r7, sl
 800031c:	464e      	mov	r6, r9
 800031e:	4645      	mov	r5, r8
 8000320:	46de      	mov	lr, fp
 8000322:	b5e0      	push	{r5, r6, r7, lr}
 8000324:	4681      	mov	r9, r0
 8000326:	0005      	movs	r5, r0
 8000328:	030c      	lsls	r4, r1, #12
 800032a:	0048      	lsls	r0, r1, #1
 800032c:	4692      	mov	sl, r2
 800032e:	001f      	movs	r7, r3
 8000330:	b085      	sub	sp, #20
 8000332:	0b24      	lsrs	r4, r4, #12
 8000334:	0d40      	lsrs	r0, r0, #21
 8000336:	0fce      	lsrs	r6, r1, #31
 8000338:	2800      	cmp	r0, #0
 800033a:	d059      	beq.n	80003f0 <__aeabi_ddiv+0xd8>
 800033c:	4b87      	ldr	r3, [pc, #540]	; (800055c <__aeabi_ddiv+0x244>)
 800033e:	4298      	cmp	r0, r3
 8000340:	d100      	bne.n	8000344 <__aeabi_ddiv+0x2c>
 8000342:	e098      	b.n	8000476 <__aeabi_ddiv+0x15e>
 8000344:	0f6b      	lsrs	r3, r5, #29
 8000346:	00e4      	lsls	r4, r4, #3
 8000348:	431c      	orrs	r4, r3
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	041b      	lsls	r3, r3, #16
 800034e:	4323      	orrs	r3, r4
 8000350:	4698      	mov	r8, r3
 8000352:	4b83      	ldr	r3, [pc, #524]	; (8000560 <__aeabi_ddiv+0x248>)
 8000354:	00ed      	lsls	r5, r5, #3
 8000356:	469b      	mov	fp, r3
 8000358:	2300      	movs	r3, #0
 800035a:	4699      	mov	r9, r3
 800035c:	4483      	add	fp, r0
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	033c      	lsls	r4, r7, #12
 8000362:	007b      	lsls	r3, r7, #1
 8000364:	4650      	mov	r0, sl
 8000366:	0b24      	lsrs	r4, r4, #12
 8000368:	0d5b      	lsrs	r3, r3, #21
 800036a:	0fff      	lsrs	r7, r7, #31
 800036c:	2b00      	cmp	r3, #0
 800036e:	d067      	beq.n	8000440 <__aeabi_ddiv+0x128>
 8000370:	4a7a      	ldr	r2, [pc, #488]	; (800055c <__aeabi_ddiv+0x244>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d018      	beq.n	80003a8 <__aeabi_ddiv+0x90>
 8000376:	497a      	ldr	r1, [pc, #488]	; (8000560 <__aeabi_ddiv+0x248>)
 8000378:	0f42      	lsrs	r2, r0, #29
 800037a:	468c      	mov	ip, r1
 800037c:	00e4      	lsls	r4, r4, #3
 800037e:	4659      	mov	r1, fp
 8000380:	4314      	orrs	r4, r2
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	4463      	add	r3, ip
 8000386:	0412      	lsls	r2, r2, #16
 8000388:	1acb      	subs	r3, r1, r3
 800038a:	4314      	orrs	r4, r2
 800038c:	469b      	mov	fp, r3
 800038e:	00c2      	lsls	r2, r0, #3
 8000390:	2000      	movs	r0, #0
 8000392:	0033      	movs	r3, r6
 8000394:	407b      	eors	r3, r7
 8000396:	469a      	mov	sl, r3
 8000398:	464b      	mov	r3, r9
 800039a:	2b0f      	cmp	r3, #15
 800039c:	d900      	bls.n	80003a0 <__aeabi_ddiv+0x88>
 800039e:	e0ef      	b.n	8000580 <__aeabi_ddiv+0x268>
 80003a0:	4970      	ldr	r1, [pc, #448]	; (8000564 <__aeabi_ddiv+0x24c>)
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	58cb      	ldr	r3, [r1, r3]
 80003a6:	469f      	mov	pc, r3
 80003a8:	4b6f      	ldr	r3, [pc, #444]	; (8000568 <__aeabi_ddiv+0x250>)
 80003aa:	4652      	mov	r2, sl
 80003ac:	469c      	mov	ip, r3
 80003ae:	4322      	orrs	r2, r4
 80003b0:	44e3      	add	fp, ip
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	d000      	beq.n	80003b8 <__aeabi_ddiv+0xa0>
 80003b6:	e095      	b.n	80004e4 <__aeabi_ddiv+0x1cc>
 80003b8:	4649      	mov	r1, r9
 80003ba:	2302      	movs	r3, #2
 80003bc:	4319      	orrs	r1, r3
 80003be:	4689      	mov	r9, r1
 80003c0:	2400      	movs	r4, #0
 80003c2:	2002      	movs	r0, #2
 80003c4:	e7e5      	b.n	8000392 <__aeabi_ddiv+0x7a>
 80003c6:	2300      	movs	r3, #0
 80003c8:	2400      	movs	r4, #0
 80003ca:	2500      	movs	r5, #0
 80003cc:	4652      	mov	r2, sl
 80003ce:	051b      	lsls	r3, r3, #20
 80003d0:	4323      	orrs	r3, r4
 80003d2:	07d2      	lsls	r2, r2, #31
 80003d4:	4313      	orrs	r3, r2
 80003d6:	0028      	movs	r0, r5
 80003d8:	0019      	movs	r1, r3
 80003da:	b005      	add	sp, #20
 80003dc:	bcf0      	pop	{r4, r5, r6, r7}
 80003de:	46bb      	mov	fp, r7
 80003e0:	46b2      	mov	sl, r6
 80003e2:	46a9      	mov	r9, r5
 80003e4:	46a0      	mov	r8, r4
 80003e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e8:	2400      	movs	r4, #0
 80003ea:	2500      	movs	r5, #0
 80003ec:	4b5b      	ldr	r3, [pc, #364]	; (800055c <__aeabi_ddiv+0x244>)
 80003ee:	e7ed      	b.n	80003cc <__aeabi_ddiv+0xb4>
 80003f0:	464b      	mov	r3, r9
 80003f2:	4323      	orrs	r3, r4
 80003f4:	4698      	mov	r8, r3
 80003f6:	d100      	bne.n	80003fa <__aeabi_ddiv+0xe2>
 80003f8:	e089      	b.n	800050e <__aeabi_ddiv+0x1f6>
 80003fa:	2c00      	cmp	r4, #0
 80003fc:	d100      	bne.n	8000400 <__aeabi_ddiv+0xe8>
 80003fe:	e1e0      	b.n	80007c2 <__aeabi_ddiv+0x4aa>
 8000400:	0020      	movs	r0, r4
 8000402:	f000 fad7 	bl	80009b4 <__clzsi2>
 8000406:	0001      	movs	r1, r0
 8000408:	0002      	movs	r2, r0
 800040a:	390b      	subs	r1, #11
 800040c:	231d      	movs	r3, #29
 800040e:	1a5b      	subs	r3, r3, r1
 8000410:	4649      	mov	r1, r9
 8000412:	0010      	movs	r0, r2
 8000414:	40d9      	lsrs	r1, r3
 8000416:	3808      	subs	r0, #8
 8000418:	4084      	lsls	r4, r0
 800041a:	000b      	movs	r3, r1
 800041c:	464d      	mov	r5, r9
 800041e:	4323      	orrs	r3, r4
 8000420:	4698      	mov	r8, r3
 8000422:	4085      	lsls	r5, r0
 8000424:	4851      	ldr	r0, [pc, #324]	; (800056c <__aeabi_ddiv+0x254>)
 8000426:	033c      	lsls	r4, r7, #12
 8000428:	1a83      	subs	r3, r0, r2
 800042a:	469b      	mov	fp, r3
 800042c:	2300      	movs	r3, #0
 800042e:	4699      	mov	r9, r3
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	007b      	lsls	r3, r7, #1
 8000434:	4650      	mov	r0, sl
 8000436:	0b24      	lsrs	r4, r4, #12
 8000438:	0d5b      	lsrs	r3, r3, #21
 800043a:	0fff      	lsrs	r7, r7, #31
 800043c:	2b00      	cmp	r3, #0
 800043e:	d197      	bne.n	8000370 <__aeabi_ddiv+0x58>
 8000440:	4652      	mov	r2, sl
 8000442:	4322      	orrs	r2, r4
 8000444:	d055      	beq.n	80004f2 <__aeabi_ddiv+0x1da>
 8000446:	2c00      	cmp	r4, #0
 8000448:	d100      	bne.n	800044c <__aeabi_ddiv+0x134>
 800044a:	e1ca      	b.n	80007e2 <__aeabi_ddiv+0x4ca>
 800044c:	0020      	movs	r0, r4
 800044e:	f000 fab1 	bl	80009b4 <__clzsi2>
 8000452:	0002      	movs	r2, r0
 8000454:	3a0b      	subs	r2, #11
 8000456:	231d      	movs	r3, #29
 8000458:	0001      	movs	r1, r0
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	4652      	mov	r2, sl
 800045e:	3908      	subs	r1, #8
 8000460:	40da      	lsrs	r2, r3
 8000462:	408c      	lsls	r4, r1
 8000464:	4314      	orrs	r4, r2
 8000466:	4652      	mov	r2, sl
 8000468:	408a      	lsls	r2, r1
 800046a:	4b41      	ldr	r3, [pc, #260]	; (8000570 <__aeabi_ddiv+0x258>)
 800046c:	4458      	add	r0, fp
 800046e:	469b      	mov	fp, r3
 8000470:	4483      	add	fp, r0
 8000472:	2000      	movs	r0, #0
 8000474:	e78d      	b.n	8000392 <__aeabi_ddiv+0x7a>
 8000476:	464b      	mov	r3, r9
 8000478:	4323      	orrs	r3, r4
 800047a:	4698      	mov	r8, r3
 800047c:	d140      	bne.n	8000500 <__aeabi_ddiv+0x1e8>
 800047e:	2308      	movs	r3, #8
 8000480:	4699      	mov	r9, r3
 8000482:	3b06      	subs	r3, #6
 8000484:	2500      	movs	r5, #0
 8000486:	4683      	mov	fp, r0
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	e769      	b.n	8000360 <__aeabi_ddiv+0x48>
 800048c:	46b2      	mov	sl, r6
 800048e:	9b00      	ldr	r3, [sp, #0]
 8000490:	2b02      	cmp	r3, #2
 8000492:	d0a9      	beq.n	80003e8 <__aeabi_ddiv+0xd0>
 8000494:	2b03      	cmp	r3, #3
 8000496:	d100      	bne.n	800049a <__aeabi_ddiv+0x182>
 8000498:	e211      	b.n	80008be <__aeabi_ddiv+0x5a6>
 800049a:	2b01      	cmp	r3, #1
 800049c:	d093      	beq.n	80003c6 <__aeabi_ddiv+0xae>
 800049e:	4a35      	ldr	r2, [pc, #212]	; (8000574 <__aeabi_ddiv+0x25c>)
 80004a0:	445a      	add	r2, fp
 80004a2:	2a00      	cmp	r2, #0
 80004a4:	dc00      	bgt.n	80004a8 <__aeabi_ddiv+0x190>
 80004a6:	e13c      	b.n	8000722 <__aeabi_ddiv+0x40a>
 80004a8:	076b      	lsls	r3, r5, #29
 80004aa:	d000      	beq.n	80004ae <__aeabi_ddiv+0x196>
 80004ac:	e1a7      	b.n	80007fe <__aeabi_ddiv+0x4e6>
 80004ae:	08ed      	lsrs	r5, r5, #3
 80004b0:	4643      	mov	r3, r8
 80004b2:	01db      	lsls	r3, r3, #7
 80004b4:	d506      	bpl.n	80004c4 <__aeabi_ddiv+0x1ac>
 80004b6:	4642      	mov	r2, r8
 80004b8:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <__aeabi_ddiv+0x260>)
 80004ba:	401a      	ands	r2, r3
 80004bc:	4690      	mov	r8, r2
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	00d2      	lsls	r2, r2, #3
 80004c2:	445a      	add	r2, fp
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <__aeabi_ddiv+0x264>)
 80004c6:	429a      	cmp	r2, r3
 80004c8:	dc8e      	bgt.n	80003e8 <__aeabi_ddiv+0xd0>
 80004ca:	4643      	mov	r3, r8
 80004cc:	0552      	lsls	r2, r2, #21
 80004ce:	0758      	lsls	r0, r3, #29
 80004d0:	025c      	lsls	r4, r3, #9
 80004d2:	4305      	orrs	r5, r0
 80004d4:	0b24      	lsrs	r4, r4, #12
 80004d6:	0d53      	lsrs	r3, r2, #21
 80004d8:	e778      	b.n	80003cc <__aeabi_ddiv+0xb4>
 80004da:	46ba      	mov	sl, r7
 80004dc:	46a0      	mov	r8, r4
 80004de:	0015      	movs	r5, r2
 80004e0:	9000      	str	r0, [sp, #0]
 80004e2:	e7d4      	b.n	800048e <__aeabi_ddiv+0x176>
 80004e4:	464a      	mov	r2, r9
 80004e6:	2303      	movs	r3, #3
 80004e8:	431a      	orrs	r2, r3
 80004ea:	4691      	mov	r9, r2
 80004ec:	2003      	movs	r0, #3
 80004ee:	4652      	mov	r2, sl
 80004f0:	e74f      	b.n	8000392 <__aeabi_ddiv+0x7a>
 80004f2:	4649      	mov	r1, r9
 80004f4:	2301      	movs	r3, #1
 80004f6:	4319      	orrs	r1, r3
 80004f8:	4689      	mov	r9, r1
 80004fa:	2400      	movs	r4, #0
 80004fc:	2001      	movs	r0, #1
 80004fe:	e748      	b.n	8000392 <__aeabi_ddiv+0x7a>
 8000500:	230c      	movs	r3, #12
 8000502:	4699      	mov	r9, r3
 8000504:	3b09      	subs	r3, #9
 8000506:	46a0      	mov	r8, r4
 8000508:	4683      	mov	fp, r0
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	e728      	b.n	8000360 <__aeabi_ddiv+0x48>
 800050e:	2304      	movs	r3, #4
 8000510:	4699      	mov	r9, r3
 8000512:	2300      	movs	r3, #0
 8000514:	469b      	mov	fp, r3
 8000516:	3301      	adds	r3, #1
 8000518:	2500      	movs	r5, #0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	e720      	b.n	8000360 <__aeabi_ddiv+0x48>
 800051e:	2300      	movs	r3, #0
 8000520:	2480      	movs	r4, #128	; 0x80
 8000522:	469a      	mov	sl, r3
 8000524:	2500      	movs	r5, #0
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <__aeabi_ddiv+0x244>)
 8000528:	0324      	lsls	r4, r4, #12
 800052a:	e74f      	b.n	80003cc <__aeabi_ddiv+0xb4>
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	4641      	mov	r1, r8
 8000530:	031b      	lsls	r3, r3, #12
 8000532:	4219      	tst	r1, r3
 8000534:	d008      	beq.n	8000548 <__aeabi_ddiv+0x230>
 8000536:	421c      	tst	r4, r3
 8000538:	d106      	bne.n	8000548 <__aeabi_ddiv+0x230>
 800053a:	431c      	orrs	r4, r3
 800053c:	0324      	lsls	r4, r4, #12
 800053e:	46ba      	mov	sl, r7
 8000540:	0015      	movs	r5, r2
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <__aeabi_ddiv+0x244>)
 8000544:	0b24      	lsrs	r4, r4, #12
 8000546:	e741      	b.n	80003cc <__aeabi_ddiv+0xb4>
 8000548:	2480      	movs	r4, #128	; 0x80
 800054a:	4643      	mov	r3, r8
 800054c:	0324      	lsls	r4, r4, #12
 800054e:	431c      	orrs	r4, r3
 8000550:	0324      	lsls	r4, r4, #12
 8000552:	46b2      	mov	sl, r6
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <__aeabi_ddiv+0x244>)
 8000556:	0b24      	lsrs	r4, r4, #12
 8000558:	e738      	b.n	80003cc <__aeabi_ddiv+0xb4>
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	000007ff 	.word	0x000007ff
 8000560:	fffffc01 	.word	0xfffffc01
 8000564:	08008b7c 	.word	0x08008b7c
 8000568:	fffff801 	.word	0xfffff801
 800056c:	fffffc0d 	.word	0xfffffc0d
 8000570:	000003f3 	.word	0x000003f3
 8000574:	000003ff 	.word	0x000003ff
 8000578:	feffffff 	.word	0xfeffffff
 800057c:	000007fe 	.word	0x000007fe
 8000580:	4544      	cmp	r4, r8
 8000582:	d200      	bcs.n	8000586 <__aeabi_ddiv+0x26e>
 8000584:	e116      	b.n	80007b4 <__aeabi_ddiv+0x49c>
 8000586:	d100      	bne.n	800058a <__aeabi_ddiv+0x272>
 8000588:	e111      	b.n	80007ae <__aeabi_ddiv+0x496>
 800058a:	2301      	movs	r3, #1
 800058c:	425b      	negs	r3, r3
 800058e:	469c      	mov	ip, r3
 8000590:	002e      	movs	r6, r5
 8000592:	4640      	mov	r0, r8
 8000594:	2500      	movs	r5, #0
 8000596:	44e3      	add	fp, ip
 8000598:	0223      	lsls	r3, r4, #8
 800059a:	0e14      	lsrs	r4, r2, #24
 800059c:	431c      	orrs	r4, r3
 800059e:	0c1b      	lsrs	r3, r3, #16
 80005a0:	4699      	mov	r9, r3
 80005a2:	0423      	lsls	r3, r4, #16
 80005a4:	0c1f      	lsrs	r7, r3, #16
 80005a6:	0212      	lsls	r2, r2, #8
 80005a8:	4649      	mov	r1, r9
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9701      	str	r7, [sp, #4]
 80005ae:	f7ff fe43 	bl	8000238 <__aeabi_uidivmod>
 80005b2:	0002      	movs	r2, r0
 80005b4:	437a      	muls	r2, r7
 80005b6:	040b      	lsls	r3, r1, #16
 80005b8:	0c31      	lsrs	r1, r6, #16
 80005ba:	4680      	mov	r8, r0
 80005bc:	4319      	orrs	r1, r3
 80005be:	428a      	cmp	r2, r1
 80005c0:	d90b      	bls.n	80005da <__aeabi_ddiv+0x2c2>
 80005c2:	2301      	movs	r3, #1
 80005c4:	425b      	negs	r3, r3
 80005c6:	469c      	mov	ip, r3
 80005c8:	1909      	adds	r1, r1, r4
 80005ca:	44e0      	add	r8, ip
 80005cc:	428c      	cmp	r4, r1
 80005ce:	d804      	bhi.n	80005da <__aeabi_ddiv+0x2c2>
 80005d0:	428a      	cmp	r2, r1
 80005d2:	d902      	bls.n	80005da <__aeabi_ddiv+0x2c2>
 80005d4:	1e83      	subs	r3, r0, #2
 80005d6:	4698      	mov	r8, r3
 80005d8:	1909      	adds	r1, r1, r4
 80005da:	1a88      	subs	r0, r1, r2
 80005dc:	4649      	mov	r1, r9
 80005de:	f7ff fe2b 	bl	8000238 <__aeabi_uidivmod>
 80005e2:	0409      	lsls	r1, r1, #16
 80005e4:	468c      	mov	ip, r1
 80005e6:	0431      	lsls	r1, r6, #16
 80005e8:	4666      	mov	r6, ip
 80005ea:	9a01      	ldr	r2, [sp, #4]
 80005ec:	0c09      	lsrs	r1, r1, #16
 80005ee:	4342      	muls	r2, r0
 80005f0:	0003      	movs	r3, r0
 80005f2:	4331      	orrs	r1, r6
 80005f4:	428a      	cmp	r2, r1
 80005f6:	d904      	bls.n	8000602 <__aeabi_ddiv+0x2ea>
 80005f8:	1909      	adds	r1, r1, r4
 80005fa:	3b01      	subs	r3, #1
 80005fc:	428c      	cmp	r4, r1
 80005fe:	d800      	bhi.n	8000602 <__aeabi_ddiv+0x2ea>
 8000600:	e111      	b.n	8000826 <__aeabi_ddiv+0x50e>
 8000602:	1a89      	subs	r1, r1, r2
 8000604:	4642      	mov	r2, r8
 8000606:	9e00      	ldr	r6, [sp, #0]
 8000608:	0412      	lsls	r2, r2, #16
 800060a:	431a      	orrs	r2, r3
 800060c:	0c33      	lsrs	r3, r6, #16
 800060e:	001f      	movs	r7, r3
 8000610:	0c10      	lsrs	r0, r2, #16
 8000612:	4690      	mov	r8, r2
 8000614:	9302      	str	r3, [sp, #8]
 8000616:	0413      	lsls	r3, r2, #16
 8000618:	0432      	lsls	r2, r6, #16
 800061a:	0c16      	lsrs	r6, r2, #16
 800061c:	0032      	movs	r2, r6
 800061e:	0c1b      	lsrs	r3, r3, #16
 8000620:	435a      	muls	r2, r3
 8000622:	9603      	str	r6, [sp, #12]
 8000624:	437b      	muls	r3, r7
 8000626:	4346      	muls	r6, r0
 8000628:	4378      	muls	r0, r7
 800062a:	0c17      	lsrs	r7, r2, #16
 800062c:	46bc      	mov	ip, r7
 800062e:	199b      	adds	r3, r3, r6
 8000630:	4463      	add	r3, ip
 8000632:	429e      	cmp	r6, r3
 8000634:	d903      	bls.n	800063e <__aeabi_ddiv+0x326>
 8000636:	2680      	movs	r6, #128	; 0x80
 8000638:	0276      	lsls	r6, r6, #9
 800063a:	46b4      	mov	ip, r6
 800063c:	4460      	add	r0, ip
 800063e:	0c1e      	lsrs	r6, r3, #16
 8000640:	1830      	adds	r0, r6, r0
 8000642:	0416      	lsls	r6, r2, #16
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	0c36      	lsrs	r6, r6, #16
 8000648:	199e      	adds	r6, r3, r6
 800064a:	4281      	cmp	r1, r0
 800064c:	d200      	bcs.n	8000650 <__aeabi_ddiv+0x338>
 800064e:	e09c      	b.n	800078a <__aeabi_ddiv+0x472>
 8000650:	d100      	bne.n	8000654 <__aeabi_ddiv+0x33c>
 8000652:	e097      	b.n	8000784 <__aeabi_ddiv+0x46c>
 8000654:	1bae      	subs	r6, r5, r6
 8000656:	1a09      	subs	r1, r1, r0
 8000658:	42b5      	cmp	r5, r6
 800065a:	4180      	sbcs	r0, r0
 800065c:	4240      	negs	r0, r0
 800065e:	1a08      	subs	r0, r1, r0
 8000660:	4284      	cmp	r4, r0
 8000662:	d100      	bne.n	8000666 <__aeabi_ddiv+0x34e>
 8000664:	e111      	b.n	800088a <__aeabi_ddiv+0x572>
 8000666:	4649      	mov	r1, r9
 8000668:	f7ff fde6 	bl	8000238 <__aeabi_uidivmod>
 800066c:	9a01      	ldr	r2, [sp, #4]
 800066e:	040b      	lsls	r3, r1, #16
 8000670:	4342      	muls	r2, r0
 8000672:	0c31      	lsrs	r1, r6, #16
 8000674:	0005      	movs	r5, r0
 8000676:	4319      	orrs	r1, r3
 8000678:	428a      	cmp	r2, r1
 800067a:	d907      	bls.n	800068c <__aeabi_ddiv+0x374>
 800067c:	1909      	adds	r1, r1, r4
 800067e:	3d01      	subs	r5, #1
 8000680:	428c      	cmp	r4, r1
 8000682:	d803      	bhi.n	800068c <__aeabi_ddiv+0x374>
 8000684:	428a      	cmp	r2, r1
 8000686:	d901      	bls.n	800068c <__aeabi_ddiv+0x374>
 8000688:	1e85      	subs	r5, r0, #2
 800068a:	1909      	adds	r1, r1, r4
 800068c:	1a88      	subs	r0, r1, r2
 800068e:	4649      	mov	r1, r9
 8000690:	f7ff fdd2 	bl	8000238 <__aeabi_uidivmod>
 8000694:	0409      	lsls	r1, r1, #16
 8000696:	468c      	mov	ip, r1
 8000698:	0431      	lsls	r1, r6, #16
 800069a:	4666      	mov	r6, ip
 800069c:	9a01      	ldr	r2, [sp, #4]
 800069e:	0c09      	lsrs	r1, r1, #16
 80006a0:	4342      	muls	r2, r0
 80006a2:	0003      	movs	r3, r0
 80006a4:	4331      	orrs	r1, r6
 80006a6:	428a      	cmp	r2, r1
 80006a8:	d907      	bls.n	80006ba <__aeabi_ddiv+0x3a2>
 80006aa:	1909      	adds	r1, r1, r4
 80006ac:	3b01      	subs	r3, #1
 80006ae:	428c      	cmp	r4, r1
 80006b0:	d803      	bhi.n	80006ba <__aeabi_ddiv+0x3a2>
 80006b2:	428a      	cmp	r2, r1
 80006b4:	d901      	bls.n	80006ba <__aeabi_ddiv+0x3a2>
 80006b6:	1e83      	subs	r3, r0, #2
 80006b8:	1909      	adds	r1, r1, r4
 80006ba:	9e03      	ldr	r6, [sp, #12]
 80006bc:	1a89      	subs	r1, r1, r2
 80006be:	0032      	movs	r2, r6
 80006c0:	042d      	lsls	r5, r5, #16
 80006c2:	431d      	orrs	r5, r3
 80006c4:	9f02      	ldr	r7, [sp, #8]
 80006c6:	042b      	lsls	r3, r5, #16
 80006c8:	0c1b      	lsrs	r3, r3, #16
 80006ca:	435a      	muls	r2, r3
 80006cc:	437b      	muls	r3, r7
 80006ce:	469c      	mov	ip, r3
 80006d0:	0c28      	lsrs	r0, r5, #16
 80006d2:	4346      	muls	r6, r0
 80006d4:	0c13      	lsrs	r3, r2, #16
 80006d6:	44b4      	add	ip, r6
 80006d8:	4463      	add	r3, ip
 80006da:	4378      	muls	r0, r7
 80006dc:	429e      	cmp	r6, r3
 80006de:	d903      	bls.n	80006e8 <__aeabi_ddiv+0x3d0>
 80006e0:	2680      	movs	r6, #128	; 0x80
 80006e2:	0276      	lsls	r6, r6, #9
 80006e4:	46b4      	mov	ip, r6
 80006e6:	4460      	add	r0, ip
 80006e8:	0c1e      	lsrs	r6, r3, #16
 80006ea:	0412      	lsls	r2, r2, #16
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	0c12      	lsrs	r2, r2, #16
 80006f0:	1830      	adds	r0, r6, r0
 80006f2:	189b      	adds	r3, r3, r2
 80006f4:	4281      	cmp	r1, r0
 80006f6:	d306      	bcc.n	8000706 <__aeabi_ddiv+0x3ee>
 80006f8:	d002      	beq.n	8000700 <__aeabi_ddiv+0x3e8>
 80006fa:	2301      	movs	r3, #1
 80006fc:	431d      	orrs	r5, r3
 80006fe:	e6ce      	b.n	800049e <__aeabi_ddiv+0x186>
 8000700:	2b00      	cmp	r3, #0
 8000702:	d100      	bne.n	8000706 <__aeabi_ddiv+0x3ee>
 8000704:	e6cb      	b.n	800049e <__aeabi_ddiv+0x186>
 8000706:	1861      	adds	r1, r4, r1
 8000708:	1e6e      	subs	r6, r5, #1
 800070a:	42a1      	cmp	r1, r4
 800070c:	d200      	bcs.n	8000710 <__aeabi_ddiv+0x3f8>
 800070e:	e0a4      	b.n	800085a <__aeabi_ddiv+0x542>
 8000710:	4281      	cmp	r1, r0
 8000712:	d200      	bcs.n	8000716 <__aeabi_ddiv+0x3fe>
 8000714:	e0c9      	b.n	80008aa <__aeabi_ddiv+0x592>
 8000716:	d100      	bne.n	800071a <__aeabi_ddiv+0x402>
 8000718:	e0d9      	b.n	80008ce <__aeabi_ddiv+0x5b6>
 800071a:	0035      	movs	r5, r6
 800071c:	e7ed      	b.n	80006fa <__aeabi_ddiv+0x3e2>
 800071e:	2501      	movs	r5, #1
 8000720:	426d      	negs	r5, r5
 8000722:	2101      	movs	r1, #1
 8000724:	1a89      	subs	r1, r1, r2
 8000726:	2938      	cmp	r1, #56	; 0x38
 8000728:	dd00      	ble.n	800072c <__aeabi_ddiv+0x414>
 800072a:	e64c      	b.n	80003c6 <__aeabi_ddiv+0xae>
 800072c:	291f      	cmp	r1, #31
 800072e:	dc00      	bgt.n	8000732 <__aeabi_ddiv+0x41a>
 8000730:	e07f      	b.n	8000832 <__aeabi_ddiv+0x51a>
 8000732:	231f      	movs	r3, #31
 8000734:	425b      	negs	r3, r3
 8000736:	1a9a      	subs	r2, r3, r2
 8000738:	4643      	mov	r3, r8
 800073a:	40d3      	lsrs	r3, r2
 800073c:	2920      	cmp	r1, #32
 800073e:	d004      	beq.n	800074a <__aeabi_ddiv+0x432>
 8000740:	4644      	mov	r4, r8
 8000742:	4a65      	ldr	r2, [pc, #404]	; (80008d8 <__aeabi_ddiv+0x5c0>)
 8000744:	445a      	add	r2, fp
 8000746:	4094      	lsls	r4, r2
 8000748:	4325      	orrs	r5, r4
 800074a:	1e6a      	subs	r2, r5, #1
 800074c:	4195      	sbcs	r5, r2
 800074e:	2207      	movs	r2, #7
 8000750:	432b      	orrs	r3, r5
 8000752:	0015      	movs	r5, r2
 8000754:	2400      	movs	r4, #0
 8000756:	401d      	ands	r5, r3
 8000758:	421a      	tst	r2, r3
 800075a:	d100      	bne.n	800075e <__aeabi_ddiv+0x446>
 800075c:	e0a1      	b.n	80008a2 <__aeabi_ddiv+0x58a>
 800075e:	220f      	movs	r2, #15
 8000760:	2400      	movs	r4, #0
 8000762:	401a      	ands	r2, r3
 8000764:	2a04      	cmp	r2, #4
 8000766:	d100      	bne.n	800076a <__aeabi_ddiv+0x452>
 8000768:	e098      	b.n	800089c <__aeabi_ddiv+0x584>
 800076a:	1d1a      	adds	r2, r3, #4
 800076c:	429a      	cmp	r2, r3
 800076e:	419b      	sbcs	r3, r3
 8000770:	425b      	negs	r3, r3
 8000772:	18e4      	adds	r4, r4, r3
 8000774:	0013      	movs	r3, r2
 8000776:	0222      	lsls	r2, r4, #8
 8000778:	d400      	bmi.n	800077c <__aeabi_ddiv+0x464>
 800077a:	e08f      	b.n	800089c <__aeabi_ddiv+0x584>
 800077c:	2301      	movs	r3, #1
 800077e:	2400      	movs	r4, #0
 8000780:	2500      	movs	r5, #0
 8000782:	e623      	b.n	80003cc <__aeabi_ddiv+0xb4>
 8000784:	42b5      	cmp	r5, r6
 8000786:	d300      	bcc.n	800078a <__aeabi_ddiv+0x472>
 8000788:	e764      	b.n	8000654 <__aeabi_ddiv+0x33c>
 800078a:	4643      	mov	r3, r8
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	9b00      	ldr	r3, [sp, #0]
 8000790:	469c      	mov	ip, r3
 8000792:	4465      	add	r5, ip
 8000794:	001f      	movs	r7, r3
 8000796:	429d      	cmp	r5, r3
 8000798:	419b      	sbcs	r3, r3
 800079a:	425b      	negs	r3, r3
 800079c:	191b      	adds	r3, r3, r4
 800079e:	18c9      	adds	r1, r1, r3
 80007a0:	428c      	cmp	r4, r1
 80007a2:	d23a      	bcs.n	800081a <__aeabi_ddiv+0x502>
 80007a4:	4288      	cmp	r0, r1
 80007a6:	d863      	bhi.n	8000870 <__aeabi_ddiv+0x558>
 80007a8:	d060      	beq.n	800086c <__aeabi_ddiv+0x554>
 80007aa:	4690      	mov	r8, r2
 80007ac:	e752      	b.n	8000654 <__aeabi_ddiv+0x33c>
 80007ae:	42aa      	cmp	r2, r5
 80007b0:	d900      	bls.n	80007b4 <__aeabi_ddiv+0x49c>
 80007b2:	e6ea      	b.n	800058a <__aeabi_ddiv+0x272>
 80007b4:	4643      	mov	r3, r8
 80007b6:	07de      	lsls	r6, r3, #31
 80007b8:	0858      	lsrs	r0, r3, #1
 80007ba:	086b      	lsrs	r3, r5, #1
 80007bc:	431e      	orrs	r6, r3
 80007be:	07ed      	lsls	r5, r5, #31
 80007c0:	e6ea      	b.n	8000598 <__aeabi_ddiv+0x280>
 80007c2:	4648      	mov	r0, r9
 80007c4:	f000 f8f6 	bl	80009b4 <__clzsi2>
 80007c8:	0001      	movs	r1, r0
 80007ca:	0002      	movs	r2, r0
 80007cc:	3115      	adds	r1, #21
 80007ce:	3220      	adds	r2, #32
 80007d0:	291c      	cmp	r1, #28
 80007d2:	dc00      	bgt.n	80007d6 <__aeabi_ddiv+0x4be>
 80007d4:	e61a      	b.n	800040c <__aeabi_ddiv+0xf4>
 80007d6:	464b      	mov	r3, r9
 80007d8:	3808      	subs	r0, #8
 80007da:	4083      	lsls	r3, r0
 80007dc:	2500      	movs	r5, #0
 80007de:	4698      	mov	r8, r3
 80007e0:	e620      	b.n	8000424 <__aeabi_ddiv+0x10c>
 80007e2:	f000 f8e7 	bl	80009b4 <__clzsi2>
 80007e6:	0003      	movs	r3, r0
 80007e8:	001a      	movs	r2, r3
 80007ea:	3215      	adds	r2, #21
 80007ec:	3020      	adds	r0, #32
 80007ee:	2a1c      	cmp	r2, #28
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_ddiv+0x4dc>
 80007f2:	e630      	b.n	8000456 <__aeabi_ddiv+0x13e>
 80007f4:	4654      	mov	r4, sl
 80007f6:	3b08      	subs	r3, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	409c      	lsls	r4, r3
 80007fc:	e635      	b.n	800046a <__aeabi_ddiv+0x152>
 80007fe:	230f      	movs	r3, #15
 8000800:	402b      	ands	r3, r5
 8000802:	2b04      	cmp	r3, #4
 8000804:	d100      	bne.n	8000808 <__aeabi_ddiv+0x4f0>
 8000806:	e652      	b.n	80004ae <__aeabi_ddiv+0x196>
 8000808:	2305      	movs	r3, #5
 800080a:	425b      	negs	r3, r3
 800080c:	42ab      	cmp	r3, r5
 800080e:	419b      	sbcs	r3, r3
 8000810:	3504      	adds	r5, #4
 8000812:	425b      	negs	r3, r3
 8000814:	08ed      	lsrs	r5, r5, #3
 8000816:	4498      	add	r8, r3
 8000818:	e64a      	b.n	80004b0 <__aeabi_ddiv+0x198>
 800081a:	428c      	cmp	r4, r1
 800081c:	d1c5      	bne.n	80007aa <__aeabi_ddiv+0x492>
 800081e:	42af      	cmp	r7, r5
 8000820:	d9c0      	bls.n	80007a4 <__aeabi_ddiv+0x48c>
 8000822:	4690      	mov	r8, r2
 8000824:	e716      	b.n	8000654 <__aeabi_ddiv+0x33c>
 8000826:	428a      	cmp	r2, r1
 8000828:	d800      	bhi.n	800082c <__aeabi_ddiv+0x514>
 800082a:	e6ea      	b.n	8000602 <__aeabi_ddiv+0x2ea>
 800082c:	1e83      	subs	r3, r0, #2
 800082e:	1909      	adds	r1, r1, r4
 8000830:	e6e7      	b.n	8000602 <__aeabi_ddiv+0x2ea>
 8000832:	4a2a      	ldr	r2, [pc, #168]	; (80008dc <__aeabi_ddiv+0x5c4>)
 8000834:	0028      	movs	r0, r5
 8000836:	445a      	add	r2, fp
 8000838:	4643      	mov	r3, r8
 800083a:	4095      	lsls	r5, r2
 800083c:	4093      	lsls	r3, r2
 800083e:	40c8      	lsrs	r0, r1
 8000840:	1e6a      	subs	r2, r5, #1
 8000842:	4195      	sbcs	r5, r2
 8000844:	4644      	mov	r4, r8
 8000846:	4303      	orrs	r3, r0
 8000848:	432b      	orrs	r3, r5
 800084a:	40cc      	lsrs	r4, r1
 800084c:	075a      	lsls	r2, r3, #29
 800084e:	d092      	beq.n	8000776 <__aeabi_ddiv+0x45e>
 8000850:	220f      	movs	r2, #15
 8000852:	401a      	ands	r2, r3
 8000854:	2a04      	cmp	r2, #4
 8000856:	d188      	bne.n	800076a <__aeabi_ddiv+0x452>
 8000858:	e78d      	b.n	8000776 <__aeabi_ddiv+0x45e>
 800085a:	0035      	movs	r5, r6
 800085c:	4281      	cmp	r1, r0
 800085e:	d000      	beq.n	8000862 <__aeabi_ddiv+0x54a>
 8000860:	e74b      	b.n	80006fa <__aeabi_ddiv+0x3e2>
 8000862:	9a00      	ldr	r2, [sp, #0]
 8000864:	4293      	cmp	r3, r2
 8000866:	d000      	beq.n	800086a <__aeabi_ddiv+0x552>
 8000868:	e747      	b.n	80006fa <__aeabi_ddiv+0x3e2>
 800086a:	e618      	b.n	800049e <__aeabi_ddiv+0x186>
 800086c:	42ae      	cmp	r6, r5
 800086e:	d99c      	bls.n	80007aa <__aeabi_ddiv+0x492>
 8000870:	2302      	movs	r3, #2
 8000872:	425b      	negs	r3, r3
 8000874:	469c      	mov	ip, r3
 8000876:	9b00      	ldr	r3, [sp, #0]
 8000878:	44e0      	add	r8, ip
 800087a:	469c      	mov	ip, r3
 800087c:	4465      	add	r5, ip
 800087e:	429d      	cmp	r5, r3
 8000880:	419b      	sbcs	r3, r3
 8000882:	425b      	negs	r3, r3
 8000884:	191b      	adds	r3, r3, r4
 8000886:	18c9      	adds	r1, r1, r3
 8000888:	e6e4      	b.n	8000654 <__aeabi_ddiv+0x33c>
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <__aeabi_ddiv+0x5c8>)
 800088c:	445a      	add	r2, fp
 800088e:	2a00      	cmp	r2, #0
 8000890:	dc00      	bgt.n	8000894 <__aeabi_ddiv+0x57c>
 8000892:	e744      	b.n	800071e <__aeabi_ddiv+0x406>
 8000894:	2301      	movs	r3, #1
 8000896:	2500      	movs	r5, #0
 8000898:	4498      	add	r8, r3
 800089a:	e609      	b.n	80004b0 <__aeabi_ddiv+0x198>
 800089c:	0765      	lsls	r5, r4, #29
 800089e:	0264      	lsls	r4, r4, #9
 80008a0:	0b24      	lsrs	r4, r4, #12
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	431d      	orrs	r5, r3
 80008a6:	2300      	movs	r3, #0
 80008a8:	e590      	b.n	80003cc <__aeabi_ddiv+0xb4>
 80008aa:	9e00      	ldr	r6, [sp, #0]
 80008ac:	3d02      	subs	r5, #2
 80008ae:	0072      	lsls	r2, r6, #1
 80008b0:	42b2      	cmp	r2, r6
 80008b2:	41bf      	sbcs	r7, r7
 80008b4:	427f      	negs	r7, r7
 80008b6:	193c      	adds	r4, r7, r4
 80008b8:	1909      	adds	r1, r1, r4
 80008ba:	9200      	str	r2, [sp, #0]
 80008bc:	e7ce      	b.n	800085c <__aeabi_ddiv+0x544>
 80008be:	2480      	movs	r4, #128	; 0x80
 80008c0:	4643      	mov	r3, r8
 80008c2:	0324      	lsls	r4, r4, #12
 80008c4:	431c      	orrs	r4, r3
 80008c6:	0324      	lsls	r4, r4, #12
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <__aeabi_ddiv+0x5cc>)
 80008ca:	0b24      	lsrs	r4, r4, #12
 80008cc:	e57e      	b.n	80003cc <__aeabi_ddiv+0xb4>
 80008ce:	9a00      	ldr	r2, [sp, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d3ea      	bcc.n	80008aa <__aeabi_ddiv+0x592>
 80008d4:	0035      	movs	r5, r6
 80008d6:	e7c4      	b.n	8000862 <__aeabi_ddiv+0x54a>
 80008d8:	0000043e 	.word	0x0000043e
 80008dc:	0000041e 	.word	0x0000041e
 80008e0:	000003ff 	.word	0x000003ff
 80008e4:	000007ff 	.word	0x000007ff

080008e8 <__aeabi_d2iz>:
 80008e8:	000a      	movs	r2, r1
 80008ea:	b530      	push	{r4, r5, lr}
 80008ec:	4c13      	ldr	r4, [pc, #76]	; (800093c <__aeabi_d2iz+0x54>)
 80008ee:	0053      	lsls	r3, r2, #1
 80008f0:	0309      	lsls	r1, r1, #12
 80008f2:	0005      	movs	r5, r0
 80008f4:	0b09      	lsrs	r1, r1, #12
 80008f6:	2000      	movs	r0, #0
 80008f8:	0d5b      	lsrs	r3, r3, #21
 80008fa:	0fd2      	lsrs	r2, r2, #31
 80008fc:	42a3      	cmp	r3, r4
 80008fe:	dd04      	ble.n	800090a <__aeabi_d2iz+0x22>
 8000900:	480f      	ldr	r0, [pc, #60]	; (8000940 <__aeabi_d2iz+0x58>)
 8000902:	4283      	cmp	r3, r0
 8000904:	dd02      	ble.n	800090c <__aeabi_d2iz+0x24>
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <__aeabi_d2iz+0x5c>)
 8000908:	18d0      	adds	r0, r2, r3
 800090a:	bd30      	pop	{r4, r5, pc}
 800090c:	2080      	movs	r0, #128	; 0x80
 800090e:	0340      	lsls	r0, r0, #13
 8000910:	4301      	orrs	r1, r0
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <__aeabi_d2iz+0x60>)
 8000914:	1ac0      	subs	r0, r0, r3
 8000916:	281f      	cmp	r0, #31
 8000918:	dd08      	ble.n	800092c <__aeabi_d2iz+0x44>
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <__aeabi_d2iz+0x64>)
 800091c:	1ac3      	subs	r3, r0, r3
 800091e:	40d9      	lsrs	r1, r3
 8000920:	000b      	movs	r3, r1
 8000922:	4258      	negs	r0, r3
 8000924:	2a00      	cmp	r2, #0
 8000926:	d1f0      	bne.n	800090a <__aeabi_d2iz+0x22>
 8000928:	0018      	movs	r0, r3
 800092a:	e7ee      	b.n	800090a <__aeabi_d2iz+0x22>
 800092c:	4c08      	ldr	r4, [pc, #32]	; (8000950 <__aeabi_d2iz+0x68>)
 800092e:	40c5      	lsrs	r5, r0
 8000930:	46a4      	mov	ip, r4
 8000932:	4463      	add	r3, ip
 8000934:	4099      	lsls	r1, r3
 8000936:	000b      	movs	r3, r1
 8000938:	432b      	orrs	r3, r5
 800093a:	e7f2      	b.n	8000922 <__aeabi_d2iz+0x3a>
 800093c:	000003fe 	.word	0x000003fe
 8000940:	0000041d 	.word	0x0000041d
 8000944:	7fffffff 	.word	0x7fffffff
 8000948:	00000433 	.word	0x00000433
 800094c:	00000413 	.word	0x00000413
 8000950:	fffffbed 	.word	0xfffffbed

08000954 <__aeabi_i2d>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	2800      	cmp	r0, #0
 8000958:	d016      	beq.n	8000988 <__aeabi_i2d+0x34>
 800095a:	17c3      	asrs	r3, r0, #31
 800095c:	18c5      	adds	r5, r0, r3
 800095e:	405d      	eors	r5, r3
 8000960:	0fc4      	lsrs	r4, r0, #31
 8000962:	0028      	movs	r0, r5
 8000964:	f000 f826 	bl	80009b4 <__clzsi2>
 8000968:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <__aeabi_i2d+0x5c>)
 800096a:	1a12      	subs	r2, r2, r0
 800096c:	280a      	cmp	r0, #10
 800096e:	dc16      	bgt.n	800099e <__aeabi_i2d+0x4a>
 8000970:	0003      	movs	r3, r0
 8000972:	002e      	movs	r6, r5
 8000974:	3315      	adds	r3, #21
 8000976:	409e      	lsls	r6, r3
 8000978:	230b      	movs	r3, #11
 800097a:	1a18      	subs	r0, r3, r0
 800097c:	40c5      	lsrs	r5, r0
 800097e:	0553      	lsls	r3, r2, #21
 8000980:	032d      	lsls	r5, r5, #12
 8000982:	0b2d      	lsrs	r5, r5, #12
 8000984:	0d5b      	lsrs	r3, r3, #21
 8000986:	e003      	b.n	8000990 <__aeabi_i2d+0x3c>
 8000988:	2400      	movs	r4, #0
 800098a:	2300      	movs	r3, #0
 800098c:	2500      	movs	r5, #0
 800098e:	2600      	movs	r6, #0
 8000990:	051b      	lsls	r3, r3, #20
 8000992:	432b      	orrs	r3, r5
 8000994:	07e4      	lsls	r4, r4, #31
 8000996:	4323      	orrs	r3, r4
 8000998:	0030      	movs	r0, r6
 800099a:	0019      	movs	r1, r3
 800099c:	bd70      	pop	{r4, r5, r6, pc}
 800099e:	380b      	subs	r0, #11
 80009a0:	4085      	lsls	r5, r0
 80009a2:	0553      	lsls	r3, r2, #21
 80009a4:	032d      	lsls	r5, r5, #12
 80009a6:	2600      	movs	r6, #0
 80009a8:	0b2d      	lsrs	r5, r5, #12
 80009aa:	0d5b      	lsrs	r3, r3, #21
 80009ac:	e7f0      	b.n	8000990 <__aeabi_i2d+0x3c>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	0000041e 	.word	0x0000041e

080009b4 <__clzsi2>:
 80009b4:	211c      	movs	r1, #28
 80009b6:	2301      	movs	r3, #1
 80009b8:	041b      	lsls	r3, r3, #16
 80009ba:	4298      	cmp	r0, r3
 80009bc:	d301      	bcc.n	80009c2 <__clzsi2+0xe>
 80009be:	0c00      	lsrs	r0, r0, #16
 80009c0:	3910      	subs	r1, #16
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	4298      	cmp	r0, r3
 80009c6:	d301      	bcc.n	80009cc <__clzsi2+0x18>
 80009c8:	0a00      	lsrs	r0, r0, #8
 80009ca:	3908      	subs	r1, #8
 80009cc:	091b      	lsrs	r3, r3, #4
 80009ce:	4298      	cmp	r0, r3
 80009d0:	d301      	bcc.n	80009d6 <__clzsi2+0x22>
 80009d2:	0900      	lsrs	r0, r0, #4
 80009d4:	3904      	subs	r1, #4
 80009d6:	a202      	add	r2, pc, #8	; (adr r2, 80009e0 <__clzsi2+0x2c>)
 80009d8:	5c10      	ldrb	r0, [r2, r0]
 80009da:	1840      	adds	r0, r0, r1
 80009dc:	4770      	bx	lr
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	02020304 	.word	0x02020304
 80009e4:	01010101 	.word	0x01010101
	...

080009f0 <__divdi3>:
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	4657      	mov	r7, sl
 80009f4:	464e      	mov	r6, r9
 80009f6:	4645      	mov	r5, r8
 80009f8:	46de      	mov	lr, fp
 80009fa:	b5e0      	push	{r5, r6, r7, lr}
 80009fc:	000f      	movs	r7, r1
 80009fe:	0019      	movs	r1, r3
 8000a00:	2300      	movs	r3, #0
 8000a02:	0006      	movs	r6, r0
 8000a04:	4698      	mov	r8, r3
 8000a06:	0010      	movs	r0, r2
 8000a08:	b083      	sub	sp, #12
 8000a0a:	2f00      	cmp	r7, #0
 8000a0c:	da07      	bge.n	8000a1e <__divdi3+0x2e>
 8000a0e:	0033      	movs	r3, r6
 8000a10:	003c      	movs	r4, r7
 8000a12:	2700      	movs	r7, #0
 8000a14:	425e      	negs	r6, r3
 8000a16:	41a7      	sbcs	r7, r4
 8000a18:	2301      	movs	r3, #1
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	2900      	cmp	r1, #0
 8000a20:	da07      	bge.n	8000a32 <__divdi3+0x42>
 8000a22:	4643      	mov	r3, r8
 8000a24:	43db      	mvns	r3, r3
 8000a26:	000c      	movs	r4, r1
 8000a28:	4698      	mov	r8, r3
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4258      	negs	r0, r3
 8000a30:	41a1      	sbcs	r1, r4
 8000a32:	0034      	movs	r4, r6
 8000a34:	003d      	movs	r5, r7
 8000a36:	4682      	mov	sl, r0
 8000a38:	4689      	mov	r9, r1
 8000a3a:	42b9      	cmp	r1, r7
 8000a3c:	d86a      	bhi.n	8000b14 <__divdi3+0x124>
 8000a3e:	d067      	beq.n	8000b10 <__divdi3+0x120>
 8000a40:	4649      	mov	r1, r9
 8000a42:	4650      	mov	r0, sl
 8000a44:	f000 f8ba 	bl	8000bbc <__clzdi2>
 8000a48:	4683      	mov	fp, r0
 8000a4a:	0039      	movs	r1, r7
 8000a4c:	0030      	movs	r0, r6
 8000a4e:	f000 f8b5 	bl	8000bbc <__clzdi2>
 8000a52:	465b      	mov	r3, fp
 8000a54:	1a1b      	subs	r3, r3, r0
 8000a56:	469c      	mov	ip, r3
 8000a58:	3b20      	subs	r3, #32
 8000a5a:	469b      	mov	fp, r3
 8000a5c:	d46b      	bmi.n	8000b36 <__divdi3+0x146>
 8000a5e:	4658      	mov	r0, fp
 8000a60:	4651      	mov	r1, sl
 8000a62:	4081      	lsls	r1, r0
 8000a64:	4660      	mov	r0, ip
 8000a66:	000b      	movs	r3, r1
 8000a68:	4651      	mov	r1, sl
 8000a6a:	4081      	lsls	r1, r0
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	42bb      	cmp	r3, r7
 8000a70:	d900      	bls.n	8000a74 <__divdi3+0x84>
 8000a72:	e072      	b.n	8000b5a <__divdi3+0x16a>
 8000a74:	42bb      	cmp	r3, r7
 8000a76:	d100      	bne.n	8000a7a <__divdi3+0x8a>
 8000a78:	e079      	b.n	8000b6e <__divdi3+0x17e>
 8000a7a:	0034      	movs	r4, r6
 8000a7c:	003d      	movs	r5, r7
 8000a7e:	4659      	mov	r1, fp
 8000a80:	1aa4      	subs	r4, r4, r2
 8000a82:	419d      	sbcs	r5, r3
 8000a84:	2900      	cmp	r1, #0
 8000a86:	da00      	bge.n	8000a8a <__divdi3+0x9a>
 8000a88:	e074      	b.n	8000b74 <__divdi3+0x184>
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	2601      	movs	r6, #1
 8000a90:	9000      	str	r0, [sp, #0]
 8000a92:	9101      	str	r1, [sp, #4]
 8000a94:	4659      	mov	r1, fp
 8000a96:	408e      	lsls	r6, r1
 8000a98:	9601      	str	r6, [sp, #4]
 8000a9a:	4661      	mov	r1, ip
 8000a9c:	2601      	movs	r6, #1
 8000a9e:	408e      	lsls	r6, r1
 8000aa0:	4661      	mov	r1, ip
 8000aa2:	9600      	str	r6, [sp, #0]
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d05f      	beq.n	8000b68 <__divdi3+0x178>
 8000aa8:	07d9      	lsls	r1, r3, #31
 8000aaa:	0856      	lsrs	r6, r2, #1
 8000aac:	430e      	orrs	r6, r1
 8000aae:	085f      	lsrs	r7, r3, #1
 8000ab0:	4661      	mov	r1, ip
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e00c      	b.n	8000ad2 <__divdi3+0xe2>
 8000ab8:	42af      	cmp	r7, r5
 8000aba:	d101      	bne.n	8000ac0 <__divdi3+0xd0>
 8000abc:	42a6      	cmp	r6, r4
 8000abe:	d80a      	bhi.n	8000ad6 <__divdi3+0xe6>
 8000ac0:	1ba4      	subs	r4, r4, r6
 8000ac2:	41bd      	sbcs	r5, r7
 8000ac4:	1924      	adds	r4, r4, r4
 8000ac6:	416d      	adcs	r5, r5
 8000ac8:	3901      	subs	r1, #1
 8000aca:	18a4      	adds	r4, r4, r2
 8000acc:	415d      	adcs	r5, r3
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d006      	beq.n	8000ae0 <__divdi3+0xf0>
 8000ad2:	42af      	cmp	r7, r5
 8000ad4:	d9f0      	bls.n	8000ab8 <__divdi3+0xc8>
 8000ad6:	3901      	subs	r1, #1
 8000ad8:	1924      	adds	r4, r4, r4
 8000ada:	416d      	adcs	r5, r5
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d1f8      	bne.n	8000ad2 <__divdi3+0xe2>
 8000ae0:	9800      	ldr	r0, [sp, #0]
 8000ae2:	9901      	ldr	r1, [sp, #4]
 8000ae4:	465b      	mov	r3, fp
 8000ae6:	1900      	adds	r0, r0, r4
 8000ae8:	4169      	adcs	r1, r5
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db4d      	blt.n	8000b8a <__divdi3+0x19a>
 8000aee:	002e      	movs	r6, r5
 8000af0:	002c      	movs	r4, r5
 8000af2:	40de      	lsrs	r6, r3
 8000af4:	4663      	mov	r3, ip
 8000af6:	40dc      	lsrs	r4, r3
 8000af8:	465b      	mov	r3, fp
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db55      	blt.n	8000baa <__divdi3+0x1ba>
 8000afe:	0034      	movs	r4, r6
 8000b00:	409c      	lsls	r4, r3
 8000b02:	0023      	movs	r3, r4
 8000b04:	4664      	mov	r4, ip
 8000b06:	40a6      	lsls	r6, r4
 8000b08:	0032      	movs	r2, r6
 8000b0a:	1a80      	subs	r0, r0, r2
 8000b0c:	4199      	sbcs	r1, r3
 8000b0e:	e003      	b.n	8000b18 <__divdi3+0x128>
 8000b10:	42b0      	cmp	r0, r6
 8000b12:	d995      	bls.n	8000a40 <__divdi3+0x50>
 8000b14:	2000      	movs	r0, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	4643      	mov	r3, r8
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d004      	beq.n	8000b28 <__divdi3+0x138>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	000c      	movs	r4, r1
 8000b22:	2100      	movs	r1, #0
 8000b24:	4258      	negs	r0, r3
 8000b26:	41a1      	sbcs	r1, r4
 8000b28:	b003      	add	sp, #12
 8000b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b2c:	46bb      	mov	fp, r7
 8000b2e:	46b2      	mov	sl, r6
 8000b30:	46a9      	mov	r9, r5
 8000b32:	46a0      	mov	r8, r4
 8000b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b36:	4662      	mov	r2, ip
 8000b38:	4648      	mov	r0, r9
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	4651      	mov	r1, sl
 8000b3e:	4090      	lsls	r0, r2
 8000b40:	1a9b      	subs	r3, r3, r2
 8000b42:	40d9      	lsrs	r1, r3
 8000b44:	0003      	movs	r3, r0
 8000b46:	9100      	str	r1, [sp, #0]
 8000b48:	9900      	ldr	r1, [sp, #0]
 8000b4a:	4660      	mov	r0, ip
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	4651      	mov	r1, sl
 8000b50:	4081      	lsls	r1, r0
 8000b52:	000a      	movs	r2, r1
 8000b54:	42bb      	cmp	r3, r7
 8000b56:	d800      	bhi.n	8000b5a <__divdi3+0x16a>
 8000b58:	e78c      	b.n	8000a74 <__divdi3+0x84>
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	9000      	str	r0, [sp, #0]
 8000b60:	9101      	str	r1, [sp, #4]
 8000b62:	4661      	mov	r1, ip
 8000b64:	2900      	cmp	r1, #0
 8000b66:	d19f      	bne.n	8000aa8 <__divdi3+0xb8>
 8000b68:	9800      	ldr	r0, [sp, #0]
 8000b6a:	9901      	ldr	r1, [sp, #4]
 8000b6c:	e7d4      	b.n	8000b18 <__divdi3+0x128>
 8000b6e:	42b1      	cmp	r1, r6
 8000b70:	d8f3      	bhi.n	8000b5a <__divdi3+0x16a>
 8000b72:	e782      	b.n	8000a7a <__divdi3+0x8a>
 8000b74:	4661      	mov	r1, ip
 8000b76:	2620      	movs	r6, #32
 8000b78:	2701      	movs	r7, #1
 8000b7a:	1a76      	subs	r6, r6, r1
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	40f7      	lsrs	r7, r6
 8000b82:	9000      	str	r0, [sp, #0]
 8000b84:	9101      	str	r1, [sp, #4]
 8000b86:	9701      	str	r7, [sp, #4]
 8000b88:	e787      	b.n	8000a9a <__divdi3+0xaa>
 8000b8a:	4662      	mov	r2, ip
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	1a9b      	subs	r3, r3, r2
 8000b90:	002a      	movs	r2, r5
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0026      	movs	r6, r4
 8000b96:	0013      	movs	r3, r2
 8000b98:	4662      	mov	r2, ip
 8000b9a:	40d6      	lsrs	r6, r2
 8000b9c:	002c      	movs	r4, r5
 8000b9e:	431e      	orrs	r6, r3
 8000ba0:	4663      	mov	r3, ip
 8000ba2:	40dc      	lsrs	r4, r3
 8000ba4:	465b      	mov	r3, fp
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	daa9      	bge.n	8000afe <__divdi3+0x10e>
 8000baa:	4662      	mov	r2, ip
 8000bac:	2320      	movs	r3, #32
 8000bae:	0035      	movs	r5, r6
 8000bb0:	4094      	lsls	r4, r2
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	40dd      	lsrs	r5, r3
 8000bb6:	0023      	movs	r3, r4
 8000bb8:	432b      	orrs	r3, r5
 8000bba:	e7a3      	b.n	8000b04 <__divdi3+0x114>

08000bbc <__clzdi2>:
 8000bbc:	b510      	push	{r4, lr}
 8000bbe:	2900      	cmp	r1, #0
 8000bc0:	d103      	bne.n	8000bca <__clzdi2+0xe>
 8000bc2:	f7ff fef7 	bl	80009b4 <__clzsi2>
 8000bc6:	3020      	adds	r0, #32
 8000bc8:	e002      	b.n	8000bd0 <__clzdi2+0x14>
 8000bca:	1c08      	adds	r0, r1, #0
 8000bcc:	f7ff fef2 	bl	80009b4 <__clzsi2>
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)

08000bd4 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000bdc:	230e      	movs	r3, #14
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	2205      	movs	r2, #5
 8000be2:	701a      	strb	r2, [r3, #0]
	uint8_t chip_id = 0;
 8000be4:	230d      	movs	r3, #13
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000bec:	250f      	movs	r5, #15
 8000bee:	197c      	adds	r4, r7, r5
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f001 fbc7 	bl	8002386 <null_ptr_check>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	7023      	strb	r3, [r4, #0]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000bfc:	197b      	adds	r3, r7, r5
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d148      	bne.n	8000c98 <bme280_init+0xc4>
		while (try_count) {
 8000c06:	e037      	b.n	8000c78 <bme280_init+0xa4>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000c08:	250f      	movs	r5, #15
 8000c0a:	197c      	adds	r4, r7, r5
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	260d      	movs	r6, #13
 8000c10:	19b9      	adds	r1, r7, r6
 8000c12:	2201      	movs	r2, #1
 8000c14:	20d0      	movs	r0, #208	; 0xd0
 8000c16:	f000 f847 	bl	8000ca8 <bme280_get_regs>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	7023      	strb	r3, [r4, #0]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000c1e:	0029      	movs	r1, r5
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11c      	bne.n	8000c64 <bme280_init+0x90>
 8000c2a:	19bb      	adds	r3, r7, r6
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b60      	cmp	r3, #96	; 0x60
 8000c30:	d118      	bne.n	8000c64 <bme280_init+0x90>
				dev->chip_id = chip_id;
 8000c32:	19bb      	adds	r3, r7, r6
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000c3a:	000d      	movs	r5, r1
 8000c3c:	187c      	adds	r4, r7, r1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 f9ea 	bl	800101a <bme280_soft_reset>
 8000c46:	0003      	movs	r3, r0
 8000c48:	7023      	strb	r3, [r4, #0]
				if (rslt == BME280_OK) {
 8000c4a:	197b      	adds	r3, r7, r5
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d117      	bne.n	8000c84 <bme280_init+0xb0>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000c54:	197c      	adds	r4, r7, r5
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f001 f9e7 	bl	800202c <get_calib_data>
 8000c5e:	0003      	movs	r3, r0
 8000c60:	7023      	strb	r3, [r4, #0]
				}
				break;
 8000c62:	e00f      	b.n	8000c84 <bme280_init+0xb0>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4798      	blx	r3
			--try_count;
 8000c6c:	220e      	movs	r2, #14
 8000c6e:	18bb      	adds	r3, r7, r2
 8000c70:	18ba      	adds	r2, r7, r2
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	3a01      	subs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
		while (try_count) {
 8000c78:	230e      	movs	r3, #14
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1c2      	bne.n	8000c08 <bme280_init+0x34>
 8000c82:	e000      	b.n	8000c86 <bme280_init+0xb2>
				break;
 8000c84:	46c0      	nop			; (mov r8, r8)
		}
		/* Chip id check failed */
		if (!try_count)
 8000c86:	230e      	movs	r3, #14
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d103      	bne.n	8000c98 <bme280_init+0xc4>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000c90:	230f      	movs	r3, #15
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	22fe      	movs	r2, #254	; 0xfe
 8000c96:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b25b      	sxtb	r3, r3
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b005      	add	sp, #20
 8000ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ca8 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	250f      	movs	r5, #15
 8000cb6:	197b      	adds	r3, r7, r5
 8000cb8:	1c02      	adds	r2, r0, #0
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	1c0a      	adds	r2, r1, #0
 8000cc2:	801a      	strh	r2, [r3, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000cc4:	2617      	movs	r6, #23
 8000cc6:	19bc      	adds	r4, r7, r6
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f001 fb5b 	bl	8002386 <null_ptr_check>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	7023      	strb	r3, [r4, #0]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000cd4:	19bb      	adds	r3, r7, r6
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d124      	bne.n	8000d28 <bme280_get_regs+0x80>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	789b      	ldrb	r3, [r3, #2]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d006      	beq.n	8000cf4 <bme280_get_regs+0x4c>
			reg_addr = reg_addr | 0x80;
 8000ce6:	197b      	adds	r3, r7, r5
 8000ce8:	197a      	adds	r2, r7, r5
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	4249      	negs	r1, r1
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	701a      	strb	r2, [r3, #0]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685d      	ldr	r5, [r3, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7858      	ldrb	r0, [r3, #1]
 8000cfc:	2217      	movs	r2, #23
 8000cfe:	18bc      	adds	r4, r7, r2
 8000d00:	230c      	movs	r3, #12
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	881e      	ldrh	r6, [r3, #0]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	7819      	ldrb	r1, [r3, #0]
 8000d0e:	0033      	movs	r3, r6
 8000d10:	47a8      	blx	r5
 8000d12:	0003      	movs	r3, r0
 8000d14:	7023      	strb	r3, [r4, #0]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8000d16:	2217      	movs	r2, #23
 8000d18:	18bb      	adds	r3, r7, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <bme280_get_regs+0x80>
			rslt = BME280_E_COMM_FAIL;
 8000d22:	18bb      	adds	r3, r7, r2
 8000d24:	22fc      	movs	r2, #252	; 0xfc
 8000d26:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8000d28:	2317      	movs	r3, #23
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b25b      	sxtb	r3, r3
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b007      	add	sp, #28
 8000d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d38 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	b08d      	sub	sp, #52	; 0x34
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b0a      	cmp	r3, #10
 8000d4e:	d902      	bls.n	8000d56 <bme280_set_regs+0x1e>
		len = 10;
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	220a      	movs	r2, #10
 8000d54:	701a      	strb	r2, [r3, #0]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000d56:	252f      	movs	r5, #47	; 0x2f
 8000d58:	197c      	adds	r4, r7, r5
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f001 fb12 	bl	8002386 <null_ptr_check>
 8000d62:	0003      	movs	r3, r0
 8000d64:	7023      	strb	r3, [r4, #0]
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8000d66:	197b      	adds	r3, r7, r5
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d16a      	bne.n	8000e46 <bme280_set_regs+0x10e>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d067      	beq.n	8000e46 <bme280_set_regs+0x10e>
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d064      	beq.n	8000e46 <bme280_set_regs+0x10e>
		if (len != 0) {
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d05b      	beq.n	8000e3c <bme280_set_regs+0x104>
			temp_buff[0] = reg_data[0];
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	2314      	movs	r3, #20
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	701a      	strb	r2, [r3, #0]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	789b      	ldrb	r3, [r3, #2]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d01e      	beq.n	8000dd4 <bme280_set_regs+0x9c>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000d96:	232b      	movs	r3, #43	; 0x2b
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e012      	b.n	8000dc6 <bme280_set_regs+0x8e>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000da0:	202b      	movs	r0, #43	; 0x2b
 8000da2:	183b      	adds	r3, r7, r0
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	183b      	adds	r3, r7, r0
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	68f9      	ldr	r1, [r7, #12]
 8000db2:	18cb      	adds	r3, r1, r3
 8000db4:	217f      	movs	r1, #127	; 0x7f
 8000db6:	400a      	ands	r2, r1
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000dbc:	183b      	adds	r3, r7, r0
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	183b      	adds	r3, r7, r0
 8000dc2:	3201      	adds	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	232b      	movs	r3, #43	; 0x2b
 8000dc8:	18fa      	adds	r2, r7, r3
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d3e5      	bcc.n	8000da0 <bme280_set_regs+0x68>
			}
			/* Burst write mode */
			if (len > 1) {
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d911      	bls.n	8000e00 <bme280_set_regs+0xc8>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	2114      	movs	r1, #20
 8000de4:	1879      	adds	r1, r7, r1
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f001 f96c 	bl	80020c4 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	18db      	adds	r3, r3, r3
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	232c      	movs	r3, #44	; 0x2c
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	3a01      	subs	r2, #1
 8000dfc:	801a      	strh	r2, [r3, #0]
 8000dfe:	e004      	b.n	8000e0a <bme280_set_regs+0xd2>
			} else {
				temp_len = len;
 8000e00:	232c      	movs	r3, #44	; 0x2c
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	1dfa      	adds	r2, r7, #7
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	801a      	strh	r2, [r3, #0]
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689d      	ldr	r5, [r3, #8]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	7858      	ldrb	r0, [r3, #1]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	7819      	ldrb	r1, [r3, #0]
 8000e16:	262f      	movs	r6, #47	; 0x2f
 8000e18:	19bc      	adds	r4, r7, r6
 8000e1a:	232c      	movs	r3, #44	; 0x2c
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	2214      	movs	r2, #20
 8000e22:	18ba      	adds	r2, r7, r2
 8000e24:	47a8      	blx	r5
 8000e26:	0003      	movs	r3, r0
 8000e28:	7023      	strb	r3, [r4, #0]
			/* Check for communication error */
			if (rslt != BME280_OK)
 8000e2a:	19bb      	adds	r3, r7, r6
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00d      	beq.n	8000e50 <bme280_set_regs+0x118>
				rslt = BME280_E_COMM_FAIL;
 8000e34:	19bb      	adds	r3, r7, r6
 8000e36:	22fc      	movs	r2, #252	; 0xfc
 8000e38:	701a      	strb	r2, [r3, #0]
		if (len != 0) {
 8000e3a:	e009      	b.n	8000e50 <bme280_set_regs+0x118>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8000e3c:	232f      	movs	r3, #47	; 0x2f
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	22fd      	movs	r2, #253	; 0xfd
 8000e42:	701a      	strb	r2, [r3, #0]
		if (len != 0) {
 8000e44:	e004      	b.n	8000e50 <bme280_set_regs+0x118>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8000e46:	232f      	movs	r3, #47	; 0x2f
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	22ff      	movs	r2, #255	; 0xff
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e000      	b.n	8000e52 <bme280_set_regs+0x11a>
		if (len != 0) {
 8000e50:	46c0      	nop			; (mov r8, r8)
	}


	return rslt;
 8000e52:	232f      	movs	r3, #47	; 0x2f
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b25b      	sxtb	r3, r3
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b00d      	add	sp, #52	; 0x34
 8000e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e62 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8000e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	0002      	movs	r2, r0
 8000e6a:	6039      	str	r1, [r7, #0]
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000e70:	250f      	movs	r5, #15
 8000e72:	197c      	adds	r4, r7, r5
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 fa85 	bl	8002386 <null_ptr_check>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	7023      	strb	r3, [r4, #0]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000e80:	197b      	adds	r3, r7, r5
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d14e      	bne.n	8000f28 <bme280_set_sensor_settings+0xc6>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8000e8a:	197c      	adds	r4, r7, r5
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	260e      	movs	r6, #14
 8000e90:	19bb      	adds	r3, r7, r6
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 f896 	bl	8000fc6 <bme280_get_sensor_mode>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	7023      	strb	r3, [r4, #0]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8000e9e:	002a      	movs	r2, r5
 8000ea0:	18bb      	adds	r3, r7, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10a      	bne.n	8000ec0 <bme280_set_sensor_settings+0x5e>
 8000eaa:	19bb      	adds	r3, r7, r6
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <bme280_set_sensor_settings+0x5e>
			rslt = put_device_to_sleep(dev);
 8000eb2:	18bc      	adds	r4, r7, r2
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 fbb2 	bl	8001620 <put_device_to_sleep>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK) {
 8000ec0:	240f      	movs	r4, #15
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d12d      	bne.n	8000f28 <bme280_set_sensor_settings+0xc6>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	2007      	movs	r0, #7
 8000ed4:	f001 fa33 	bl	800233e <are_settings_changed>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d00b      	beq.n	8000ef4 <bme280_set_sensor_settings+0x92>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	3338      	adds	r3, #56	; 0x38
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	193c      	adds	r4, r7, r4
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 f9af 	bl	800124e <set_osr_settings>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	7023      	strb	r3, [r4, #0]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8000ef4:	240f      	movs	r4, #15
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d113      	bne.n	8000f28 <bme280_set_sensor_settings+0xc6>
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	0019      	movs	r1, r3
 8000f06:	2018      	movs	r0, #24
 8000f08:	f001 fa19 	bl	800233e <are_settings_changed>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d00b      	beq.n	8000f28 <bme280_set_sensor_settings+0xc6>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	3338      	adds	r3, #56	; 0x38
 8000f14:	0019      	movs	r1, r3
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 fa5b 	bl	80013da <set_filter_standby_settings>
 8000f24:	0003      	movs	r3, r0
 8000f26:	7023      	strb	r3, [r4, #0]
		}
	}

	return rslt;
 8000f28:	230f      	movs	r3, #15
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b25b      	sxtb	r3, r3
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b005      	add	sp, #20
 8000f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f38 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	0002      	movs	r2, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f46:	250f      	movs	r5, #15
 8000f48:	197c      	adds	r4, r7, r5
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f001 fa1a 	bl	8002386 <null_ptr_check>
 8000f52:	0003      	movs	r3, r0
 8000f54:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 8000f56:	197b      	adds	r3, r7, r5
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d12a      	bne.n	8000fb6 <bme280_set_sensor_mode+0x7e>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8000f60:	197c      	adds	r4, r7, r5
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	260e      	movs	r6, #14
 8000f66:	19bb      	adds	r3, r7, r6
 8000f68:	0011      	movs	r1, r2
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 f82b 	bl	8000fc6 <bme280_get_sensor_mode>
 8000f70:	0003      	movs	r3, r0
 8000f72:	7023      	strb	r3, [r4, #0]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8000f74:	002a      	movs	r2, r5
 8000f76:	18bb      	adds	r3, r7, r2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10a      	bne.n	8000f96 <bme280_set_sensor_mode+0x5e>
 8000f80:	19bb      	adds	r3, r7, r6
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <bme280_set_sensor_mode+0x5e>
			rslt = put_device_to_sleep(dev);
 8000f88:	18bc      	adds	r4, r7, r2
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f000 fb47 	bl	8001620 <put_device_to_sleep>
 8000f92:	0003      	movs	r3, r0
 8000f94:	7023      	strb	r3, [r4, #0]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8000f96:	220f      	movs	r2, #15
 8000f98:	18bb      	adds	r3, r7, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d109      	bne.n	8000fb6 <bme280_set_sensor_mode+0x7e>
			rslt = write_power_mode(sensor_mode, dev);
 8000fa2:	18bc      	adds	r4, r7, r2
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f000 faf7 	bl	80015a0 <write_power_mode>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b25b      	sxtb	r3, r3
}
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b005      	add	sp, #20
 8000fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fc6 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8000fc6:	b5b0      	push	{r4, r5, r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fd0:	250f      	movs	r5, #15
 8000fd2:	197c      	adds	r4, r7, r5
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 f9d5 	bl	8002386 <null_ptr_check>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 8000fe0:	197b      	adds	r3, r7, r5
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10f      	bne.n	800100a <bme280_get_sensor_mode+0x44>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8000fea:	197c      	adds	r4, r7, r5
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	20f4      	movs	r0, #244	; 0xf4
 8000ff4:	f7ff fe58 	bl	8000ca8 <bme280_get_regs>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	7023      	strb	r3, [r4, #0]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2203      	movs	r2, #3
 8001002:	4013      	ands	r3, r2
 8001004:	b2da      	uxtb	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800100a:	230f      	movs	r3, #15
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b25b      	sxtb	r3, r3
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bdb0      	pop	{r4, r5, r7, pc}

0800101a <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800101a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001022:	260e      	movs	r6, #14
 8001024:	19bb      	adds	r3, r7, r6
 8001026:	22e0      	movs	r2, #224	; 0xe0
 8001028:	701a      	strb	r2, [r3, #0]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800102a:	230d      	movs	r3, #13
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	22b6      	movs	r2, #182	; 0xb6
 8001030:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001032:	250f      	movs	r5, #15
 8001034:	197c      	adds	r4, r7, r5
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	0018      	movs	r0, r3
 800103a:	f001 f9a4 	bl	8002386 <null_ptr_check>
 800103e:	0003      	movs	r3, r0
 8001040:	7023      	strb	r3, [r4, #0]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001042:	197b      	adds	r3, r7, r5
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10d      	bne.n	8001068 <bme280_soft_reset+0x4e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800104c:	197c      	adds	r4, r7, r5
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	220d      	movs	r2, #13
 8001052:	18b9      	adds	r1, r7, r2
 8001054:	19b8      	adds	r0, r7, r6
 8001056:	2201      	movs	r2, #1
 8001058:	f7ff fe6e 	bl	8000d38 <bme280_set_regs>
 800105c:	0003      	movs	r3, r0
 800105e:	7023      	strb	r3, [r4, #0]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2002      	movs	r0, #2
 8001066:	4798      	blx	r3
	}

	return rslt;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25b      	sxtb	r3, r3
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	b005      	add	sp, #20
 8001076:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001078 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(int sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001084:	261c      	movs	r6, #28
 8001086:	19bb      	adds	r3, r7, r6
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
	struct bme280_uncomp_data uncomp_data = {0};
 8001090:	2510      	movs	r5, #16
 8001092:	197b      	adds	r3, r7, r5
 8001094:	0018      	movs	r0, r3
 8001096:	230c      	movs	r3, #12
 8001098:	001a      	movs	r2, r3
 800109a:	2100      	movs	r1, #0
 800109c:	f007 f807 	bl	80080ae <memset>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010a0:	2527      	movs	r5, #39	; 0x27
 80010a2:	197c      	adds	r4, r7, r5
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	0018      	movs	r0, r3
 80010a8:	f001 f96d 	bl	8002386 <null_ptr_check>
 80010ac:	0003      	movs	r3, r0
 80010ae:	7023      	strb	r3, [r4, #0]

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80010b0:	197b      	adds	r3, r7, r5
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d123      	bne.n	8001102 <bme280_get_sensor_data+0x8a>
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d020      	beq.n	8001102 <bme280_get_sensor_data+0x8a>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80010c0:	197c      	adds	r4, r7, r5
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	19b9      	adds	r1, r7, r6
 80010c6:	2208      	movs	r2, #8
 80010c8:	20f7      	movs	r0, #247	; 0xf7
 80010ca:	f7ff fded 	bl	8000ca8 <bme280_get_regs>
 80010ce:	0003      	movs	r3, r0
 80010d0:	7023      	strb	r3, [r4, #0]

		if (rslt == BME280_OK) {
 80010d2:	002c      	movs	r4, r5
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d115      	bne.n	800110a <bme280_get_sensor_data+0x92>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80010de:	2510      	movs	r5, #16
 80010e0:	197a      	adds	r2, r7, r5
 80010e2:	19bb      	adds	r3, r7, r6
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 f817 	bl	800111a <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3310      	adds	r3, #16
 80010f0:	193c      	adds	r4, r7, r4
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	1979      	adds	r1, r7, r5
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 f856 	bl	80011a8 <bme280_compensate_data>
 80010fc:	0003      	movs	r3, r0
 80010fe:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK) {
 8001100:	e003      	b.n	800110a <bme280_get_sensor_data+0x92>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001102:	2327      	movs	r3, #39	; 0x27
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800110a:	2327      	movs	r3, #39	; 0x27
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25b      	sxtb	r3, r3
}
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b00b      	add	sp, #44	; 0x2c
 8001118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800111a <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	031b      	lsls	r3, r3, #12
 800112a:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3301      	adds	r3, #1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3302      	adds	r3, #2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	b2db      	uxtb	r3, r3
 8001140:	60fb      	str	r3, [r7, #12]
	uncomp_data->intPress = data_msb | data_lsb | data_xlsb;
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	431a      	orrs	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	001a      	movs	r2, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3303      	adds	r3, #3
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	031b      	lsls	r3, r3, #12
 800115a:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3304      	adds	r3, #4
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3305      	adds	r3, #5
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60fb      	str	r3, [r7, #12]
	uncomp_data->intTemp = data_msb | data_lsb | data_xlsb;
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	431a      	orrs	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	001a      	movs	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3306      	adds	r3, #6
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3307      	adds	r3, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	617b      	str	r3, [r7, #20]
	uncomp_data->intHum = data_msb | data_lsb;
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	001a      	movs	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	609a      	str	r2, [r3, #8]
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b006      	add	sp, #24
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(int sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
	int8_t rslt = BME280_OK;
 80011b6:	2317      	movs	r3, #23
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d038      	beq.n	8001236 <bme280_compensate_data+0x8e>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d035      	beq.n	8001236 <bme280_compensate_data+0x8e>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d032      	beq.n	8001236 <bme280_compensate_data+0x8e>
		/* Initialize to zero */
		comp_data->intTemp = 0;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
		comp_data->intPress = 0;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
		comp_data->intHum = 0;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2207      	movs	r2, #7
 80011e6:	4013      	ands	r3, r2
 80011e8:	d008      	beq.n	80011fc <bme280_compensate_data+0x54>
			/* Compensate the temperature data */
			comp_data->intTemp = compensate_temperature(uncomp_data, calib_data);
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	0011      	movs	r1, r2
 80011f0:	0018      	movs	r0, r3
 80011f2:	f000 fa75 	bl	80016e0 <compensate_temperature>
 80011f6:	0002      	movs	r2, r0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2201      	movs	r2, #1
 8001200:	4013      	ands	r3, r2
 8001202:	d009      	beq.n	8001218 <bme280_compensate_data+0x70>
			/* Compensate the pressure data */
			comp_data->intPress = compensate_pressure(uncomp_data, calib_data);
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	0011      	movs	r1, r2
 800120a:	0018      	movs	r0, r3
 800120c:	f000 fad6 	bl	80017bc <compensate_pressure>
 8001210:	0003      	movs	r3, r0
 8001212:	001a      	movs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2204      	movs	r2, #4
 800121c:	4013      	ands	r3, r2
 800121e:	d00e      	beq.n	800123e <bme280_compensate_data+0x96>
			/* Compensate the humidity data */
			comp_data->intHum = compensate_humidity(uncomp_data, calib_data);
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f000 fe42 	bl	8001eb0 <compensate_humidity>
 800122c:	0003      	movs	r3, r0
 800122e:	001a      	movs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001234:	e003      	b.n	800123e <bme280_compensate_data+0x96>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001236:	2317      	movs	r3, #23
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	22ff      	movs	r2, #255	; 0xff
 800123c:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800123e:	2317      	movs	r3, #23
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b25b      	sxtb	r3, r3
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b006      	add	sp, #24
 800124c:	bd80      	pop	{r7, pc}

0800124e <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 800124e:	b590      	push	{r4, r7, lr}
 8001250:	b087      	sub	sp, #28
 8001252:	af00      	add	r7, sp, #0
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	210f      	movs	r1, #15
 800125a:	187b      	adds	r3, r7, r1
 800125c:	1c02      	adds	r2, r0, #0
 800125e:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001260:	2017      	movs	r0, #23
 8001262:	183b      	adds	r3, r7, r0
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001268:	187b      	adds	r3, r7, r1
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2204      	movs	r2, #4
 800126e:	4013      	ands	r3, r2
 8001270:	d008      	beq.n	8001284 <set_osr_settings+0x36>
		rslt = set_osr_humidity_settings(settings, dev);
 8001272:	183c      	adds	r4, r7, r0
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f81b 	bl	80012b6 <set_osr_humidity_settings>
 8001280:	0003      	movs	r3, r0
 8001282:	7023      	strb	r3, [r4, #0]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001284:	200f      	movs	r0, #15
 8001286:	183b      	adds	r3, r7, r0
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2203      	movs	r2, #3
 800128c:	4013      	ands	r3, r2
 800128e:	d00a      	beq.n	80012a6 <set_osr_settings+0x58>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001290:	2317      	movs	r3, #23
 8001292:	18fc      	adds	r4, r7, r3
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	183b      	adds	r3, r7, r0
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	0018      	movs	r0, r3
 800129e:	f000 f851 	bl	8001344 <set_osr_press_temp_settings>
 80012a2:	0003      	movs	r3, r0
 80012a4:	7023      	strb	r3, [r4, #0]

	return rslt;
 80012a6:	2317      	movs	r3, #23
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b25b      	sxtb	r3, r3
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b007      	add	sp, #28
 80012b4:	bd90      	pop	{r4, r7, pc}

080012b6 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80012b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80012c0:	250c      	movs	r5, #12
 80012c2:	197b      	adds	r3, r7, r5
 80012c4:	22f2      	movs	r2, #242	; 0xf2
 80012c6:	701a      	strb	r2, [r3, #0]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	2207      	movs	r2, #7
 80012ce:	4013      	ands	r3, r2
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	210e      	movs	r1, #14
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	701a      	strb	r2, [r3, #0]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80012d8:	260f      	movs	r6, #15
 80012da:	19bc      	adds	r4, r7, r6
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	1879      	adds	r1, r7, r1
 80012e0:	1978      	adds	r0, r7, r5
 80012e2:	2201      	movs	r2, #1
 80012e4:	f7ff fd28 	bl	8000d38 <bme280_set_regs>
 80012e8:	0003      	movs	r3, r0
 80012ea:	7023      	strb	r3, [r4, #0]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80012ec:	0031      	movs	r1, r6
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d11d      	bne.n	8001334 <set_osr_humidity_settings+0x7e>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80012f8:	197b      	adds	r3, r7, r5
 80012fa:	22f4      	movs	r2, #244	; 0xf4
 80012fc:	701a      	strb	r2, [r3, #0]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80012fe:	197b      	adds	r3, r7, r5
 8001300:	7818      	ldrb	r0, [r3, #0]
 8001302:	000e      	movs	r6, r1
 8001304:	187c      	adds	r4, r7, r1
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	220d      	movs	r2, #13
 800130a:	18b9      	adds	r1, r7, r2
 800130c:	2201      	movs	r2, #1
 800130e:	f7ff fccb 	bl	8000ca8 <bme280_get_regs>
 8001312:	0003      	movs	r3, r0
 8001314:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK)
 8001316:	19bb      	adds	r3, r7, r6
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d109      	bne.n	8001334 <set_osr_humidity_settings+0x7e>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001320:	19bc      	adds	r4, r7, r6
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	220d      	movs	r2, #13
 8001326:	18b9      	adds	r1, r7, r2
 8001328:	1978      	adds	r0, r7, r5
 800132a:	2201      	movs	r2, #1
 800132c:	f7ff fd04 	bl	8000d38 <bme280_set_regs>
 8001330:	0003      	movs	r3, r0
 8001332:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 8001334:	230f      	movs	r3, #15
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b25b      	sxtb	r3, r3
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b005      	add	sp, #20
 8001342:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001344 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	250f      	movs	r5, #15
 8001350:	197b      	adds	r3, r7, r5
 8001352:	1c02      	adds	r2, r0, #0
 8001354:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001356:	2116      	movs	r1, #22
 8001358:	187b      	adds	r3, r7, r1
 800135a:	22f4      	movs	r2, #244	; 0xf4
 800135c:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800135e:	187b      	adds	r3, r7, r1
 8001360:	7818      	ldrb	r0, [r3, #0]
 8001362:	2617      	movs	r6, #23
 8001364:	19bc      	adds	r4, r7, r6
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2215      	movs	r2, #21
 800136a:	18b9      	adds	r1, r7, r2
 800136c:	2201      	movs	r2, #1
 800136e:	f7ff fc9b 	bl	8000ca8 <bme280_get_regs>
 8001372:	0003      	movs	r3, r0
 8001374:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 8001376:	19bb      	adds	r3, r7, r6
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b25b      	sxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d124      	bne.n	80013ca <set_osr_press_temp_settings+0x86>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001380:	197b      	adds	r3, r7, r5
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	d006      	beq.n	8001398 <set_osr_press_temp_settings+0x54>
			fill_osr_press_settings(&reg_data, settings);
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	2315      	movs	r3, #21
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	0011      	movs	r1, r2
 8001392:	0018      	movs	r0, r3
 8001394:	f000 f89f 	bl	80014d6 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001398:	230f      	movs	r3, #15
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d006      	beq.n	80013b2 <set_osr_press_temp_settings+0x6e>
			fill_osr_temp_settings(&reg_data, settings);
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	2315      	movs	r3, #21
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	0011      	movs	r1, r2
 80013ac:	0018      	movs	r0, r3
 80013ae:	f000 f8ad 	bl	800150c <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80013b2:	2317      	movs	r3, #23
 80013b4:	18fc      	adds	r4, r7, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2215      	movs	r2, #21
 80013ba:	18b9      	adds	r1, r7, r2
 80013bc:	2216      	movs	r2, #22
 80013be:	18b8      	adds	r0, r7, r2
 80013c0:	2201      	movs	r2, #1
 80013c2:	f7ff fcb9 	bl	8000d38 <bme280_set_regs>
 80013c6:	0003      	movs	r3, r0
 80013c8:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 80013ca:	2317      	movs	r3, #23
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b25b      	sxtb	r3, r3
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b007      	add	sp, #28
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013da <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80013da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013dc:	b087      	sub	sp, #28
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	250f      	movs	r5, #15
 80013e6:	197b      	adds	r3, r7, r5
 80013e8:	1c02      	adds	r2, r0, #0
 80013ea:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80013ec:	2116      	movs	r1, #22
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	22f5      	movs	r2, #245	; 0xf5
 80013f2:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	7818      	ldrb	r0, [r3, #0]
 80013f8:	2617      	movs	r6, #23
 80013fa:	19bc      	adds	r4, r7, r6
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2215      	movs	r2, #21
 8001400:	18b9      	adds	r1, r7, r2
 8001402:	2201      	movs	r2, #1
 8001404:	f7ff fc50 	bl	8000ca8 <bme280_get_regs>
 8001408:	0003      	movs	r3, r0
 800140a:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 800140c:	19bb      	adds	r3, r7, r6
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d124      	bne.n	8001460 <set_filter_standby_settings+0x86>
		if (desired_settings & BME280_FILTER_SEL)
 8001416:	197b      	adds	r3, r7, r5
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2208      	movs	r2, #8
 800141c:	4013      	ands	r3, r2
 800141e:	d006      	beq.n	800142e <set_filter_standby_settings+0x54>
			fill_filter_settings(&reg_data, settings);
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	2315      	movs	r3, #21
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f000 f821 	bl	8001470 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800142e:	230f      	movs	r3, #15
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2210      	movs	r2, #16
 8001436:	4013      	ands	r3, r2
 8001438:	d006      	beq.n	8001448 <set_filter_standby_settings+0x6e>
			fill_standby_settings(&reg_data, settings);
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	2315      	movs	r3, #21
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f000 f82f 	bl	80014a6 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001448:	2317      	movs	r3, #23
 800144a:	18fc      	adds	r4, r7, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2215      	movs	r2, #21
 8001450:	18b9      	adds	r1, r7, r2
 8001452:	2216      	movs	r2, #22
 8001454:	18b8      	adds	r0, r7, r2
 8001456:	2201      	movs	r2, #1
 8001458:	f7ff fc6e 	bl	8000d38 <bme280_set_regs>
 800145c:	0003      	movs	r3, r0
 800145e:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 8001460:	2317      	movs	r3, #23
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b25b      	sxtb	r3, r3
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b007      	add	sp, #28
 800146e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001470 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b25b      	sxtb	r3, r3
 8001480:	221c      	movs	r2, #28
 8001482:	4393      	bics	r3, r2
 8001484:	b25a      	sxtb	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	78db      	ldrb	r3, [r3, #3]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	211c      	movs	r1, #28
 8001490:	400b      	ands	r3, r1
 8001492:	b25b      	sxtb	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b25b      	sxtb	r3, r3
 8001498:	b2da      	uxtb	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	221f      	movs	r2, #31
 80014b8:	4013      	ands	r3, r2
 80014ba:	b25a      	sxtb	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	015b      	lsls	r3, r3, #5
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	701a      	strb	r2, [r3, #0]
}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	221c      	movs	r2, #28
 80014e8:	4393      	bics	r3, r2
 80014ea:	b25a      	sxtb	r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	211c      	movs	r1, #28
 80014f6:	400b      	ands	r3, r1
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	701a      	strb	r2, [r3, #0]
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b25b      	sxtb	r3, r3
 800151c:	221f      	movs	r2, #31
 800151e:	4013      	ands	r3, r2
 8001520:	b25a      	sxtb	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	785b      	ldrb	r3, [r3, #1]
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	b25b      	sxtb	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b25b      	sxtb	r3, r3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	701a      	strb	r2, [r3, #0]
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}

0800153c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2207      	movs	r2, #7
 800154c:	4013      	ands	r3, r2
 800154e:	b2da      	uxtb	r2, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3302      	adds	r3, #2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	109b      	asrs	r3, r3, #2
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2207      	movs	r2, #7
 8001560:	4013      	ands	r3, r2
 8001562:	b2da      	uxtb	r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3302      	adds	r3, #2
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	b2da      	uxtb	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3303      	adds	r3, #3
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	109b      	asrs	r3, r3, #2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2207      	movs	r2, #7
 8001582:	4013      	ands	r3, r2
 8001584:	b2da      	uxtb	r2, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3303      	adds	r3, #3
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	b2da      	uxtb	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	711a      	strb	r2, [r3, #4]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	0002      	movs	r2, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80015ae:	260e      	movs	r6, #14
 80015b0:	19bb      	adds	r3, r7, r6
 80015b2:	22f4      	movs	r2, #244	; 0xf4
 80015b4:	701a      	strb	r2, [r3, #0]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80015b6:	19bb      	adds	r3, r7, r6
 80015b8:	7818      	ldrb	r0, [r3, #0]
 80015ba:	240f      	movs	r4, #15
 80015bc:	193c      	adds	r4, r7, r4
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	250d      	movs	r5, #13
 80015c2:	1979      	adds	r1, r7, r5
 80015c4:	2201      	movs	r2, #1
 80015c6:	f7ff fb6f 	bl	8000ca8 <bme280_get_regs>
 80015ca:	0003      	movs	r3, r0
 80015cc:	7023      	strb	r3, [r4, #0]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80015ce:	240f      	movs	r4, #15
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d11a      	bne.n	8001610 <write_power_mode+0x70>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80015da:	0028      	movs	r0, r5
 80015dc:	183b      	adds	r3, r7, r0
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	2203      	movs	r2, #3
 80015e4:	4393      	bics	r3, r2
 80015e6:	b25a      	sxtb	r2, r3
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	2103      	movs	r1, #3
 80015f0:	400b      	ands	r3, r1
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	183b      	adds	r3, r7, r0
 80015fc:	701a      	strb	r2, [r3, #0]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80015fe:	193c      	adds	r4, r7, r4
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	1839      	adds	r1, r7, r0
 8001604:	19b8      	adds	r0, r7, r6
 8001606:	2201      	movs	r2, #1
 8001608:	f7ff fb96 	bl	8000d38 <bme280_set_regs>
 800160c:	0003      	movs	r3, r0
 800160e:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b25b      	sxtb	r3, r3
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b005      	add	sp, #20
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001620 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001628:	2517      	movs	r5, #23
 800162a:	197c      	adds	r4, r7, r5
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2610      	movs	r6, #16
 8001630:	19b9      	adds	r1, r7, r6
 8001632:	2204      	movs	r2, #4
 8001634:	20f2      	movs	r0, #242	; 0xf2
 8001636:	f7ff fb37 	bl	8000ca8 <bme280_get_regs>
 800163a:	0003      	movs	r3, r0
 800163c:	7023      	strb	r3, [r4, #0]
	if (rslt == BME280_OK) {
 800163e:	002c      	movs	r4, r5
 8001640:	193b      	adds	r3, r7, r4
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d11d      	bne.n	8001686 <put_device_to_sleep+0x66>
		parse_device_settings(reg_data, &settings);
 800164a:	2308      	movs	r3, #8
 800164c:	18fa      	adds	r2, r7, r3
 800164e:	19bb      	adds	r3, r7, r6
 8001650:	0011      	movs	r1, r2
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff ff72 	bl	800153c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001658:	0025      	movs	r5, r4
 800165a:	193c      	adds	r4, r7, r4
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	0018      	movs	r0, r3
 8001660:	f7ff fcdb 	bl	800101a <bme280_soft_reset>
 8001664:	0003      	movs	r3, r0
 8001666:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK)
 8001668:	197b      	adds	r3, r7, r5
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b25b      	sxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <put_device_to_sleep+0x66>
			rslt = reload_device_settings(&settings, dev);
 8001672:	197c      	adds	r4, r7, r5
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	2308      	movs	r3, #8
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	0011      	movs	r1, r2
 800167c:	0018      	movs	r0, r3
 800167e:	f000 f80a 	bl	8001696 <reload_device_settings>
 8001682:	0003      	movs	r3, r0
 8001684:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
 8001686:	2317      	movs	r3, #23
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25b      	sxtb	r3, r3
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b007      	add	sp, #28
 8001694:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001696 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001696:	b5b0      	push	{r4, r5, r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80016a0:	250f      	movs	r5, #15
 80016a2:	197c      	adds	r4, r7, r5
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	0019      	movs	r1, r3
 80016aa:	201f      	movs	r0, #31
 80016ac:	f7ff fdcf 	bl	800124e <set_osr_settings>
 80016b0:	0003      	movs	r3, r0
 80016b2:	7023      	strb	r3, [r4, #0]
	if (rslt == BME280_OK)
 80016b4:	197b      	adds	r3, r7, r5
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d108      	bne.n	80016d0 <reload_device_settings+0x3a>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80016be:	197c      	adds	r4, r7, r5
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0019      	movs	r1, r3
 80016c6:	201f      	movs	r0, #31
 80016c8:	f7ff fe87 	bl	80013da <set_filter_standby_settings>
 80016cc:	0003      	movs	r3, r0
 80016ce:	7023      	strb	r3, [r4, #0]

	return rslt;
 80016d0:	230f      	movs	r3, #15
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b25b      	sxtb	r3, r3
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bdb0      	pop	{r4, r5, r7, pc}

080016e0 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int temperature;
	int32_t temperature_min = -4000;
 80016ea:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <compensate_temperature+0xc8>)
 80016ec:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80016ee:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <compensate_temperature+0xcc>)
 80016f0:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->intTemp / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da00      	bge.n	80016fc <compensate_temperature+0x1c>
 80016fa:	3307      	adds	r3, #7
 80016fc:	10db      	asrs	r3, r3, #3
 80016fe:	001a      	movs	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2202      	movs	r2, #2
 800170e:	5e9b      	ldrsh	r3, [r3, r2]
 8001710:	001a      	movs	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4353      	muls	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	da02      	bge.n	8001720 <compensate_temperature+0x40>
 800171a:	4a25      	ldr	r2, [pc, #148]	; (80017b0 <compensate_temperature+0xd0>)
 800171c:	4694      	mov	ip, r2
 800171e:	4463      	add	r3, ip
 8001720:	12db      	asrs	r3, r3, #11
 8001722:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->intTemp / 16) - ((int32_t)calib_data->dig_T1));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da00      	bge.n	800172e <compensate_temperature+0x4e>
 800172c:	330f      	adds	r3, #15
 800172e:	111b      	asrs	r3, r3, #4
 8001730:	001a      	movs	r2, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	435b      	muls	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	da02      	bge.n	8001748 <compensate_temperature+0x68>
 8001742:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <compensate_temperature+0xd4>)
 8001744:	4694      	mov	ip, r2
 8001746:	4463      	add	r3, ip
 8001748:	131b      	asrs	r3, r3, #12
 800174a:	001a      	movs	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2104      	movs	r1, #4
 8001750:	5e5b      	ldrsh	r3, [r3, r1]
 8001752:	4353      	muls	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	da02      	bge.n	800175e <compensate_temperature+0x7e>
 8001758:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <compensate_temperature+0xd8>)
 800175a:	4694      	mov	ip, r2
 800175c:	4463      	add	r3, ip
 800175e:	139b      	asrs	r3, r3, #14
 8001760:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	18d2      	adds	r2, r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001770:	0013      	movs	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	189b      	adds	r3, r3, r2
 8001776:	3380      	adds	r3, #128	; 0x80
 8001778:	2b00      	cmp	r3, #0
 800177a:	da00      	bge.n	800177e <compensate_temperature+0x9e>
 800177c:	33ff      	adds	r3, #255	; 0xff
 800177e:	121b      	asrs	r3, r3, #8
 8001780:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	429a      	cmp	r2, r3
 8001788:	da02      	bge.n	8001790 <compensate_temperature+0xb0>
		temperature = temperature_min;
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e005      	b.n	800179c <compensate_temperature+0xbc>
	else if (temperature > temperature_max)
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	dd01      	ble.n	800179c <compensate_temperature+0xbc>
		temperature = temperature_max;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	61fb      	str	r3, [r7, #28]

	return temperature;
 800179c:	69fb      	ldr	r3, [r7, #28]
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b008      	add	sp, #32
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	fffff060 	.word	0xfffff060
 80017ac:	00002134 	.word	0x00002134
 80017b0:	000007ff 	.word	0x000007ff
 80017b4:	00000fff 	.word	0x00000fff
 80017b8:	00003fff 	.word	0x00003fff

080017bc <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	46c6      	mov	lr, r8
 80017c0:	b500      	push	{lr}
 80017c2:	b0be      	sub	sp, #248	; 0xf8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	23bc      	movs	r3, #188	; 0xbc
 80017c8:	2208      	movs	r2, #8
 80017ca:	4694      	mov	ip, r2
 80017cc:	44bc      	add	ip, r7
 80017ce:	4463      	add	r3, ip
 80017d0:	6018      	str	r0, [r3, #0]
 80017d2:	22b8      	movs	r2, #184	; 0xb8
 80017d4:	2308      	movs	r3, #8
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	189b      	adds	r3, r3, r2
 80017da:	6019      	str	r1, [r3, #0]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	int pressure;
	uint32_t pressure_min = 3000000;
 80017dc:	4be6      	ldr	r3, [pc, #920]	; (8001b78 <compensate_pressure+0x3bc>)
 80017de:	21e8      	movs	r1, #232	; 0xe8
 80017e0:	2008      	movs	r0, #8
 80017e2:	4684      	mov	ip, r0
 80017e4:	44bc      	add	ip, r7
 80017e6:	4461      	add	r1, ip
 80017e8:	600b      	str	r3, [r1, #0]
	uint32_t pressure_max = 11000000;
 80017ea:	4be4      	ldr	r3, [pc, #912]	; (8001b7c <compensate_pressure+0x3c0>)
 80017ec:	21e4      	movs	r1, #228	; 0xe4
 80017ee:	2008      	movs	r0, #8
 80017f0:	4684      	mov	ip, r0
 80017f2:	44bc      	add	ip, r7
 80017f4:	4461      	add	r1, ip
 80017f6:	600b      	str	r3, [r1, #0]

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 80017f8:	2308      	movs	r3, #8
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	663b      	str	r3, [r7, #96]	; 0x60
 8001804:	17db      	asrs	r3, r3, #31
 8001806:	667b      	str	r3, [r7, #100]	; 0x64
 8001808:	4add      	ldr	r2, [pc, #884]	; (8001b80 <compensate_pressure+0x3c4>)
 800180a:	2301      	movs	r3, #1
 800180c:	425b      	negs	r3, r3
 800180e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001810:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001812:	1880      	adds	r0, r0, r2
 8001814:	4159      	adcs	r1, r3
 8001816:	0002      	movs	r2, r0
 8001818:	000b      	movs	r3, r1
 800181a:	26d8      	movs	r6, #216	; 0xd8
 800181c:	2108      	movs	r1, #8
 800181e:	1879      	adds	r1, r7, r1
 8001820:	1989      	adds	r1, r1, r6
 8001822:	600a      	str	r2, [r1, #0]
 8001824:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001826:	2308      	movs	r3, #8
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	199b      	adds	r3, r3, r6
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2108      	movs	r1, #8
 8001832:	1879      	adds	r1, r7, r1
 8001834:	1989      	adds	r1, r1, r6
 8001836:	6808      	ldr	r0, [r1, #0]
 8001838:	6849      	ldr	r1, [r1, #4]
 800183a:	f7fe fd27 	bl	800028c <__aeabi_lmul>
 800183e:	0002      	movs	r2, r0
 8001840:	000b      	movs	r3, r1
 8001842:	0010      	movs	r0, r2
 8001844:	0019      	movs	r1, r3
 8001846:	22b8      	movs	r2, #184	; 0xb8
 8001848:	2308      	movs	r3, #8
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	189b      	adds	r3, r3, r2
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2210      	movs	r2, #16
 8001852:	5e9b      	ldrsh	r3, [r3, r2]
 8001854:	65bb      	str	r3, [r7, #88]	; 0x58
 8001856:	17db      	asrs	r3, r3, #31
 8001858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800185a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800185c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185e:	f7fe fd15 	bl	800028c <__aeabi_lmul>
 8001862:	0002      	movs	r2, r0
 8001864:	000b      	movs	r3, r1
 8001866:	21d0      	movs	r1, #208	; 0xd0
 8001868:	2008      	movs	r0, #8
 800186a:	1838      	adds	r0, r7, r0
 800186c:	1840      	adds	r0, r0, r1
 800186e:	6002      	str	r2, [r0, #0]
 8001870:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001872:	22b8      	movs	r2, #184	; 0xb8
 8001874:	2308      	movs	r3, #8
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	189b      	adds	r3, r3, r2
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	220e      	movs	r2, #14
 800187e:	5e9b      	ldrsh	r3, [r3, r2]
 8001880:	653b      	str	r3, [r7, #80]	; 0x50
 8001882:	17db      	asrs	r3, r3, #31
 8001884:	657b      	str	r3, [r7, #84]	; 0x54
 8001886:	2308      	movs	r3, #8
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	199b      	adds	r3, r3, r6
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001892:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001894:	f7fe fcfa 	bl	800028c <__aeabi_lmul>
 8001898:	0002      	movs	r2, r0
 800189a:	000b      	movs	r3, r1
 800189c:	0bd1      	lsrs	r1, r2, #15
 800189e:	045d      	lsls	r5, r3, #17
 80018a0:	430d      	orrs	r5, r1
 80018a2:	0454      	lsls	r4, r2, #17
 80018a4:	21d0      	movs	r1, #208	; 0xd0
 80018a6:	2308      	movs	r3, #8
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	185b      	adds	r3, r3, r1
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	1912      	adds	r2, r2, r4
 80018b2:	416b      	adcs	r3, r5
 80018b4:	2008      	movs	r0, #8
 80018b6:	1838      	adds	r0, r7, r0
 80018b8:	1840      	adds	r0, r0, r1
 80018ba:	6002      	str	r2, [r0, #0]
 80018bc:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 80018be:	24b8      	movs	r4, #184	; 0xb8
 80018c0:	2308      	movs	r3, #8
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	191b      	adds	r3, r3, r4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	220c      	movs	r2, #12
 80018ca:	5e9b      	ldrsh	r3, [r3, r2]
 80018cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ce:	17db      	asrs	r3, r3, #31
 80018d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	647b      	str	r3, [r7, #68]	; 0x44
 80018d8:	2300      	movs	r3, #0
 80018da:	643b      	str	r3, [r7, #64]	; 0x40
 80018dc:	000d      	movs	r5, r1
 80018de:	2308      	movs	r3, #8
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	185b      	adds	r3, r3, r1
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80018ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80018ec:	1812      	adds	r2, r2, r0
 80018ee:	414b      	adcs	r3, r1
 80018f0:	2108      	movs	r1, #8
 80018f2:	1879      	adds	r1, r7, r1
 80018f4:	1949      	adds	r1, r1, r5
 80018f6:	600a      	str	r2, [r1, #0]
 80018f8:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 80018fa:	2308      	movs	r3, #8
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	199b      	adds	r3, r3, r6
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2108      	movs	r1, #8
 8001906:	1879      	adds	r1, r7, r1
 8001908:	1989      	adds	r1, r1, r6
 800190a:	6808      	ldr	r0, [r1, #0]
 800190c:	6849      	ldr	r1, [r1, #4]
 800190e:	f7fe fcbd 	bl	800028c <__aeabi_lmul>
 8001912:	0002      	movs	r2, r0
 8001914:	000b      	movs	r3, r1
 8001916:	0010      	movs	r0, r2
 8001918:	0019      	movs	r1, r3
 800191a:	2308      	movs	r3, #8
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	191b      	adds	r3, r3, r4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	220a      	movs	r2, #10
 8001924:	5e9b      	ldrsh	r3, [r3, r2]
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
 8001928:	17db      	asrs	r3, r3, #31
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800192c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800192e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001930:	f7fe fcac 	bl	800028c <__aeabi_lmul>
 8001934:	0002      	movs	r2, r0
 8001936:	000b      	movs	r3, r1
 8001938:	0010      	movs	r0, r2
 800193a:	0019      	movs	r1, r3
 800193c:	2900      	cmp	r1, #0
 800193e:	da03      	bge.n	8001948 <compensate_pressure+0x18c>
 8001940:	22ff      	movs	r2, #255	; 0xff
 8001942:	2300      	movs	r3, #0
 8001944:	1880      	adds	r0, r0, r2
 8001946:	4159      	adcs	r1, r3
 8001948:	060b      	lsls	r3, r1, #24
 800194a:	0a02      	lsrs	r2, r0, #8
 800194c:	2498      	movs	r4, #152	; 0x98
 800194e:	2508      	movs	r5, #8
 8001950:	197d      	adds	r5, r7, r5
 8001952:	192d      	adds	r5, r5, r4
 8001954:	602a      	str	r2, [r5, #0]
 8001956:	2208      	movs	r2, #8
 8001958:	18ba      	adds	r2, r7, r2
 800195a:	1912      	adds	r2, r2, r4
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	431a      	orrs	r2, r3
 8001960:	2308      	movs	r3, #8
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	191b      	adds	r3, r3, r4
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	120b      	asrs	r3, r1, #8
 800196a:	229c      	movs	r2, #156	; 0x9c
 800196c:	2108      	movs	r1, #8
 800196e:	468c      	mov	ip, r1
 8001970:	44bc      	add	ip, r7
 8001972:	4462      	add	r2, ip
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	2308      	movs	r3, #8
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	191b      	adds	r3, r3, r4
 800197c:	685c      	ldr	r4, [r3, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	607c      	str	r4, [r7, #4]
 8001984:	25b8      	movs	r5, #184	; 0xb8
 8001986:	2308      	movs	r3, #8
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	195b      	adds	r3, r3, r5
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2208      	movs	r2, #8
 8001990:	5e9b      	ldrsh	r3, [r3, r2]
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
 8001994:	17db      	asrs	r3, r3, #31
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
 8001998:	26d8      	movs	r6, #216	; 0xd8
 800199a:	2308      	movs	r3, #8
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	199b      	adds	r3, r3, r6
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019a8:	f7fe fc70 	bl	800028c <__aeabi_lmul>
 80019ac:	0002      	movs	r2, r0
 80019ae:	000b      	movs	r3, r1
 80019b0:	0d11      	lsrs	r1, r2, #20
 80019b2:	4688      	mov	r8, r1
 80019b4:	0318      	lsls	r0, r3, #12
 80019b6:	24b4      	movs	r4, #180	; 0xb4
 80019b8:	2108      	movs	r1, #8
 80019ba:	468c      	mov	ip, r1
 80019bc:	44bc      	add	ip, r7
 80019be:	4464      	add	r4, ip
 80019c0:	6020      	str	r0, [r4, #0]
 80019c2:	20b4      	movs	r0, #180	; 0xb4
 80019c4:	2108      	movs	r1, #8
 80019c6:	1879      	adds	r1, r7, r1
 80019c8:	180c      	adds	r4, r1, r0
 80019ca:	6820      	ldr	r0, [r4, #0]
 80019cc:	4641      	mov	r1, r8
 80019ce:	4308      	orrs	r0, r1
 80019d0:	21b4      	movs	r1, #180	; 0xb4
 80019d2:	2408      	movs	r4, #8
 80019d4:	46a4      	mov	ip, r4
 80019d6:	44bc      	add	ip, r7
 80019d8:	4461      	add	r1, ip
 80019da:	6008      	str	r0, [r1, #0]
 80019dc:	0313      	lsls	r3, r2, #12
 80019de:	22b0      	movs	r2, #176	; 0xb0
 80019e0:	2108      	movs	r1, #8
 80019e2:	1879      	adds	r1, r7, r1
 80019e4:	1889      	adds	r1, r1, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	2308      	movs	r3, #8
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	189b      	adds	r3, r3, r2
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	1812      	adds	r2, r2, r0
 80019f8:	414b      	adcs	r3, r1
 80019fa:	2108      	movs	r1, #8
 80019fc:	1879      	adds	r1, r7, r1
 80019fe:	1989      	adds	r1, r1, r6
 8001a00:	600a      	str	r2, [r1, #0]
 8001a02:	604b      	str	r3, [r1, #4]
	var3 = ((int64_t)1) * 140737488355328;
 8001a04:	2200      	movs	r2, #0
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	21c8      	movs	r1, #200	; 0xc8
 8001a0c:	2008      	movs	r0, #8
 8001a0e:	1838      	adds	r0, r7, r0
 8001a10:	1840      	adds	r0, r0, r1
 8001a12:	6002      	str	r2, [r0, #0]
 8001a14:	6043      	str	r3, [r0, #4]
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001a16:	2308      	movs	r3, #8
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	185b      	adds	r3, r3, r1
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	2308      	movs	r3, #8
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	199b      	adds	r3, r3, r6
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	1880      	adds	r0, r0, r2
 8001a2c:	4159      	adcs	r1, r3
 8001a2e:	2308      	movs	r3, #8
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	195b      	adds	r3, r3, r5
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	88db      	ldrh	r3, [r3, #6]
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a42:	f7fe fc23 	bl	800028c <__aeabi_lmul>
 8001a46:	0002      	movs	r2, r0
 8001a48:	000b      	movs	r3, r1
 8001a4a:	0010      	movs	r0, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	2900      	cmp	r1, #0
 8001a50:	da04      	bge.n	8001a5c <compensate_pressure+0x2a0>
 8001a52:	2201      	movs	r2, #1
 8001a54:	4252      	negs	r2, r2
 8001a56:	2301      	movs	r3, #1
 8001a58:	1880      	adds	r0, r0, r2
 8001a5a:	4159      	adcs	r1, r3
 8001a5c:	104b      	asrs	r3, r1, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	17cb      	asrs	r3, r1, #31
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	68fc      	ldr	r4, [r7, #12]
 8001a68:	25d8      	movs	r5, #216	; 0xd8
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	18ba      	adds	r2, r7, r2
 8001a6e:	1952      	adds	r2, r2, r5
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	6054      	str	r4, [r2, #4]

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001a74:	2308      	movs	r3, #8
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	195b      	adds	r3, r3, r5
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	23dc      	movs	r3, #220	; 0xdc
 8001a7e:	2108      	movs	r1, #8
 8001a80:	468c      	mov	ip, r1
 8001a82:	44bc      	add	ip, r7
 8001a84:	4463      	add	r3, ip
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	d100      	bne.n	8001a8e <compensate_pressure+0x2d2>
 8001a8c:	e1f2      	b.n	8001e74 <compensate_pressure+0x6b8>
		var4 = 1048576 - uncomp_data->intPress;
 8001a8e:	23bc      	movs	r3, #188	; 0xbc
 8001a90:	2208      	movs	r2, #8
 8001a92:	4694      	mov	ip, r2
 8001a94:	44bc      	add	ip, r7
 8001a96:	4463      	add	r3, ip
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	035b      	lsls	r3, r3, #13
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	24c0      	movs	r4, #192	; 0xc0
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	18ba      	adds	r2, r7, r2
 8001aa8:	1912      	adds	r2, r2, r4
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	17db      	asrs	r3, r3, #31
 8001aae:	21c4      	movs	r1, #196	; 0xc4
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	18ba      	adds	r2, r7, r2
 8001ab4:	1852      	adds	r2, r2, r1
 8001ab6:	6013      	str	r3, [r2, #0]
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	191b      	adds	r3, r3, r4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	085a      	lsrs	r2, r3, #1
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	185b      	adds	r3, r3, r1
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	07db      	lsls	r3, r3, #31
 8001acc:	21ac      	movs	r1, #172	; 0xac
 8001ace:	2008      	movs	r0, #8
 8001ad0:	1838      	adds	r0, r7, r0
 8001ad2:	1840      	adds	r0, r0, r1
 8001ad4:	6003      	str	r3, [r0, #0]
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	185b      	adds	r3, r3, r1
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	18ba      	adds	r2, r7, r2
 8001ae4:	1852      	adds	r2, r2, r1
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	2308      	movs	r3, #8
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	191b      	adds	r3, r3, r4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	07db      	lsls	r3, r3, #31
 8001af2:	21a8      	movs	r1, #168	; 0xa8
 8001af4:	2208      	movs	r2, #8
 8001af6:	18ba      	adds	r2, r7, r2
 8001af8:	1852      	adds	r2, r2, r1
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	23d0      	movs	r3, #208	; 0xd0
 8001afe:	2208      	movs	r2, #8
 8001b00:	4694      	mov	ip, r2
 8001b02:	44bc      	add	ip, r7
 8001b04:	4463      	add	r3, ip
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2008      	movs	r0, #8
 8001b0c:	4684      	mov	ip, r0
 8001b0e:	44bc      	add	ip, r7
 8001b10:	4461      	add	r1, ip
 8001b12:	6808      	ldr	r0, [r1, #0]
 8001b14:	6849      	ldr	r1, [r1, #4]
 8001b16:	1a80      	subs	r0, r0, r2
 8001b18:	4199      	sbcs	r1, r3
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <compensate_pressure+0x3c8>)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f7fe fbb5 	bl	800028c <__aeabi_lmul>
 8001b22:	0002      	movs	r2, r0
 8001b24:	000b      	movs	r3, r1
 8001b26:	0010      	movs	r0, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	195b      	adds	r3, r3, r5
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f7fe fb86 	bl	8000244 <__aeabi_ldivmod>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	000b      	movs	r3, r1
 8001b3c:	2108      	movs	r1, #8
 8001b3e:	1879      	adds	r1, r7, r1
 8001b40:	1909      	adds	r1, r1, r4
 8001b42:	600a      	str	r2, [r1, #0]
 8001b44:	604b      	str	r3, [r1, #4]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001b46:	23b8      	movs	r3, #184	; 0xb8
 8001b48:	2208      	movs	r2, #8
 8001b4a:	4694      	mov	ip, r2
 8001b4c:	44bc      	add	ip, r7
 8001b4e:	4463      	add	r3, ip
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2216      	movs	r2, #22
 8001b54:	5e9b      	ldrsh	r3, [r3, r2]
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	17db      	asrs	r3, r3, #31
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	191b      	adds	r3, r3, r4
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	0010      	movs	r0, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	2900      	cmp	r1, #0
 8001b6c:	da0e      	bge.n	8001b8c <compensate_pressure+0x3d0>
 8001b6e:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <compensate_pressure+0x3cc>)
 8001b70:	2300      	movs	r3, #0
 8001b72:	1880      	adds	r0, r0, r2
 8001b74:	4159      	adcs	r1, r3
 8001b76:	e009      	b.n	8001b8c <compensate_pressure+0x3d0>
 8001b78:	002dc6c0 	.word	0x002dc6c0
 8001b7c:	00a7d8c0 	.word	0x00a7d8c0
 8001b80:	fffe0c00 	.word	0xfffe0c00
 8001b84:	00000c35 	.word	0x00000c35
 8001b88:	00001fff 	.word	0x00001fff
 8001b8c:	04cb      	lsls	r3, r1, #19
 8001b8e:	0b42      	lsrs	r2, r0, #13
 8001b90:	2490      	movs	r4, #144	; 0x90
 8001b92:	2508      	movs	r5, #8
 8001b94:	197d      	adds	r5, r7, r5
 8001b96:	192d      	adds	r5, r5, r4
 8001b98:	602a      	str	r2, [r5, #0]
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	18ba      	adds	r2, r7, r2
 8001b9e:	1912      	adds	r2, r2, r4
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	191b      	adds	r3, r3, r4
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	134b      	asrs	r3, r1, #13
 8001bae:	2294      	movs	r2, #148	; 0x94
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	468c      	mov	ip, r1
 8001bb4:	44bc      	add	ip, r7
 8001bb6:	4462      	add	r2, ip
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	2308      	movs	r3, #8
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	191b      	adds	r3, r3, r4
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	6a38      	ldr	r0, [r7, #32]
 8001bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bc8:	f7fe fb60 	bl	800028c <__aeabi_lmul>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	000b      	movs	r3, r1
 8001bd0:	0014      	movs	r4, r2
 8001bd2:	001d      	movs	r5, r3
 8001bd4:	23c0      	movs	r3, #192	; 0xc0
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	4694      	mov	ip, r2
 8001bda:	44bc      	add	ip, r7
 8001bdc:	4463      	add	r3, ip
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	0010      	movs	r0, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	2900      	cmp	r1, #0
 8001be8:	da03      	bge.n	8001bf2 <compensate_pressure+0x436>
 8001bea:	4aae      	ldr	r2, [pc, #696]	; (8001ea4 <compensate_pressure+0x6e8>)
 8001bec:	2300      	movs	r3, #0
 8001bee:	1880      	adds	r0, r0, r2
 8001bf0:	4159      	adcs	r1, r3
 8001bf2:	04cb      	lsls	r3, r1, #19
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	0b42      	lsrs	r2, r0, #13
 8001bf8:	2688      	movs	r6, #136	; 0x88
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	199b      	adds	r3, r3, r6
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	2308      	movs	r3, #8
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	199a      	adds	r2, r3, r6
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	4663      	mov	r3, ip
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	2308      	movs	r3, #8
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	199b      	adds	r3, r3, r6
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	134b      	asrs	r3, r1, #13
 8001c18:	228c      	movs	r2, #140	; 0x8c
 8001c1a:	2108      	movs	r1, #8
 8001c1c:	468c      	mov	ip, r1
 8001c1e:	44bc      	add	ip, r7
 8001c20:	4462      	add	r2, ip
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	2308      	movs	r3, #8
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	199b      	adds	r3, r3, r6
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0020      	movs	r0, r4
 8001c30:	0029      	movs	r1, r5
 8001c32:	f7fe fb2b 	bl	800028c <__aeabi_lmul>
 8001c36:	0002      	movs	r2, r0
 8001c38:	000b      	movs	r3, r1
 8001c3a:	0010      	movs	r0, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	2900      	cmp	r1, #0
 8001c40:	da03      	bge.n	8001c4a <compensate_pressure+0x48e>
 8001c42:	4a99      	ldr	r2, [pc, #612]	; (8001ea8 <compensate_pressure+0x6ec>)
 8001c44:	2300      	movs	r3, #0
 8001c46:	1880      	adds	r0, r0, r2
 8001c48:	4159      	adcs	r1, r3
 8001c4a:	01cb      	lsls	r3, r1, #7
 8001c4c:	0e42      	lsrs	r2, r0, #25
 8001c4e:	2480      	movs	r4, #128	; 0x80
 8001c50:	2508      	movs	r5, #8
 8001c52:	197d      	adds	r5, r7, r5
 8001c54:	192d      	adds	r5, r5, r4
 8001c56:	602a      	str	r2, [r5, #0]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	18ba      	adds	r2, r7, r2
 8001c5c:	1912      	adds	r2, r2, r4
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	2308      	movs	r3, #8
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	191b      	adds	r3, r3, r4
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	164b      	asrs	r3, r1, #25
 8001c6c:	2284      	movs	r2, #132	; 0x84
 8001c6e:	2108      	movs	r1, #8
 8001c70:	468c      	mov	ip, r1
 8001c72:	44bc      	add	ip, r7
 8001c74:	4462      	add	r2, ip
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	2308      	movs	r3, #8
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	191b      	adds	r3, r3, r4
 8001c7e:	685c      	ldr	r4, [r3, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	22d8      	movs	r2, #216	; 0xd8
 8001c84:	2108      	movs	r1, #8
 8001c86:	468c      	mov	ip, r1
 8001c88:	44bc      	add	ip, r7
 8001c8a:	4462      	add	r2, ip
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	6054      	str	r4, [r2, #4]
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001c90:	23b8      	movs	r3, #184	; 0xb8
 8001c92:	2208      	movs	r2, #8
 8001c94:	4694      	mov	ip, r2
 8001c96:	44bc      	add	ip, r7
 8001c98:	4463      	add	r3, ip
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2214      	movs	r2, #20
 8001c9e:	5e9b      	ldrsh	r3, [r3, r2]
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	17db      	asrs	r3, r3, #31
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	23c0      	movs	r3, #192	; 0xc0
 8001ca8:	2208      	movs	r2, #8
 8001caa:	4694      	mov	ip, r2
 8001cac:	44bc      	add	ip, r7
 8001cae:	4463      	add	r3, ip
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	69b8      	ldr	r0, [r7, #24]
 8001cb6:	69f9      	ldr	r1, [r7, #28]
 8001cb8:	f7fe fae8 	bl	800028c <__aeabi_lmul>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	000b      	movs	r3, r1
 8001cc0:	0010      	movs	r0, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	2900      	cmp	r1, #0
 8001cc6:	da03      	bge.n	8001cd0 <compensate_pressure+0x514>
 8001cc8:	4a78      	ldr	r2, [pc, #480]	; (8001eac <compensate_pressure+0x6f0>)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	1880      	adds	r0, r0, r2
 8001cce:	4159      	adcs	r1, r3
 8001cd0:	034b      	lsls	r3, r1, #13
 8001cd2:	0cc2      	lsrs	r2, r0, #19
 8001cd4:	2480      	movs	r4, #128	; 0x80
 8001cd6:	193c      	adds	r4, r7, r4
 8001cd8:	6022      	str	r2, [r4, #0]
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	18ba      	adds	r2, r7, r2
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	14cb      	asrs	r3, r1, #19
 8001cea:	2284      	movs	r2, #132	; 0x84
 8001cec:	18ba      	adds	r2, r7, r2
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	685c      	ldr	r4, [r3, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	25d0      	movs	r5, #208	; 0xd0
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	18ba      	adds	r2, r7, r2
 8001cfe:	1952      	adds	r2, r2, r5
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	6054      	str	r4, [r2, #4]
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001d04:	23c0      	movs	r3, #192	; 0xc0
 8001d06:	2208      	movs	r2, #8
 8001d08:	4694      	mov	ip, r2
 8001d0a:	44bc      	add	ip, r7
 8001d0c:	4463      	add	r3, ip
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
 8001d12:	23d8      	movs	r3, #216	; 0xd8
 8001d14:	2208      	movs	r2, #8
 8001d16:	4694      	mov	ip, r2
 8001d18:	44bc      	add	ip, r7
 8001d1a:	4463      	add	r3, ip
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	1880      	adds	r0, r0, r2
 8001d22:	4159      	adcs	r1, r3
 8001d24:	2308      	movs	r3, #8
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	195b      	adds	r3, r3, r5
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	1812      	adds	r2, r2, r0
 8001d30:	414b      	adcs	r3, r1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da03      	bge.n	8001d3e <compensate_pressure+0x582>
 8001d36:	20ff      	movs	r0, #255	; 0xff
 8001d38:	2100      	movs	r1, #0
 8001d3a:	1812      	adds	r2, r2, r0
 8001d3c:	414b      	adcs	r3, r1
 8001d3e:	0619      	lsls	r1, r3, #24
 8001d40:	0a10      	lsrs	r0, r2, #8
 8001d42:	67b8      	str	r0, [r7, #120]	; 0x78
 8001d44:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d46:	4308      	orrs	r0, r1
 8001d48:	67b8      	str	r0, [r7, #120]	; 0x78
 8001d4a:	121b      	asrs	r3, r3, #8
 8001d4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d50:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	607c      	str	r4, [r7, #4]
 8001d56:	21b8      	movs	r1, #184	; 0xb8
 8001d58:	2308      	movs	r3, #8
 8001d5a:	469c      	mov	ip, r3
 8001d5c:	44bc      	add	ip, r7
 8001d5e:	4461      	add	r1, ip
 8001d60:	6809      	ldr	r1, [r1, #0]
 8001d62:	2012      	movs	r0, #18
 8001d64:	5e09      	ldrsh	r1, [r1, r0]
 8001d66:	6139      	str	r1, [r7, #16]
 8001d68:	17c9      	asrs	r1, r1, #31
 8001d6a:	6179      	str	r1, [r7, #20]
 8001d6c:	693c      	ldr	r4, [r7, #16]
 8001d6e:	697d      	ldr	r5, [r7, #20]
 8001d70:	0021      	movs	r1, r4
 8001d72:	0f09      	lsrs	r1, r1, #28
 8001d74:	0028      	movs	r0, r5
 8001d76:	0100      	lsls	r0, r0, #4
 8001d78:	26a4      	movs	r6, #164	; 0xa4
 8001d7a:	2308      	movs	r3, #8
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	199b      	adds	r3, r3, r6
 8001d80:	6018      	str	r0, [r3, #0]
 8001d82:	2308      	movs	r3, #8
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	1998      	adds	r0, r3, r6
 8001d88:	6800      	ldr	r0, [r0, #0]
 8001d8a:	4308      	orrs	r0, r1
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	1999      	adds	r1, r3, r6
 8001d92:	6008      	str	r0, [r1, #0]
 8001d94:	0021      	movs	r1, r4
 8001d96:	0109      	lsls	r1, r1, #4
 8001d98:	20a0      	movs	r0, #160	; 0xa0
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	181c      	adds	r4, r3, r0
 8001da0:	6021      	str	r1, [r4, #0]
 8001da2:	2308      	movs	r3, #8
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	1819      	adds	r1, r3, r0
 8001da8:	6808      	ldr	r0, [r1, #0]
 8001daa:	6849      	ldr	r1, [r1, #4]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1812      	adds	r2, r2, r0
 8001db2:	414b      	adcs	r3, r1
 8001db4:	21c0      	movs	r1, #192	; 0xc0
 8001db6:	2008      	movs	r0, #8
 8001db8:	1838      	adds	r0, r7, r0
 8001dba:	1840      	adds	r0, r0, r1
 8001dbc:	6002      	str	r2, [r0, #0]
 8001dbe:	6043      	str	r3, [r0, #4]
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	185b      	adds	r3, r3, r1
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da03      	bge.n	8001dd6 <compensate_pressure+0x61a>
 8001dce:	2001      	movs	r0, #1
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	1812      	adds	r2, r2, r0
 8001dd4:	414b      	adcs	r3, r1
 8001dd6:	07d9      	lsls	r1, r3, #31
 8001dd8:	0850      	lsrs	r0, r2, #1
 8001dda:	6738      	str	r0, [r7, #112]	; 0x70
 8001ddc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001dde:	4308      	orrs	r0, r1
 8001de0:	6738      	str	r0, [r7, #112]	; 0x70
 8001de2:	105b      	asrs	r3, r3, #1
 8001de4:	677b      	str	r3, [r7, #116]	; 0x74
 8001de6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001de8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001dea:	2264      	movs	r2, #100	; 0x64
 8001dec:	2300      	movs	r3, #0
 8001dee:	f7fe fa4d 	bl	800028c <__aeabi_lmul>
 8001df2:	0002      	movs	r2, r0
 8001df4:	000b      	movs	r3, r1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da03      	bge.n	8001e02 <compensate_pressure+0x646>
 8001dfa:	207f      	movs	r0, #127	; 0x7f
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	1812      	adds	r2, r2, r0
 8001e00:	414b      	adcs	r3, r1
 8001e02:	0659      	lsls	r1, r3, #25
 8001e04:	09d0      	lsrs	r0, r2, #7
 8001e06:	66b8      	str	r0, [r7, #104]	; 0x68
 8001e08:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001e0a:	4308      	orrs	r0, r1
 8001e0c:	66b8      	str	r0, [r7, #104]	; 0x68
 8001e0e:	11db      	asrs	r3, r3, #7
 8001e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e16:	0013      	movs	r3, r2
 8001e18:	21ec      	movs	r1, #236	; 0xec
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	18ba      	adds	r2, r7, r2
 8001e1e:	1852      	adds	r2, r2, r1
 8001e20:	6013      	str	r3, [r2, #0]

		if (pressure < pressure_min)
 8001e22:	2308      	movs	r3, #8
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	185b      	adds	r3, r3, r1
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	20e8      	movs	r0, #232	; 0xe8
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	18ba      	adds	r2, r7, r2
 8001e30:	1812      	adds	r2, r2, r0
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d908      	bls.n	8001e4a <compensate_pressure+0x68e>
			pressure = pressure_min;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	181b      	adds	r3, r3, r0
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2208      	movs	r2, #8
 8001e42:	18ba      	adds	r2, r7, r2
 8001e44:	1852      	adds	r2, r2, r1
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e020      	b.n	8001e8c <compensate_pressure+0x6d0>
		else if (pressure > pressure_max)
 8001e4a:	20ec      	movs	r0, #236	; 0xec
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	181b      	adds	r3, r3, r0
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	21e4      	movs	r1, #228	; 0xe4
 8001e56:	2208      	movs	r2, #8
 8001e58:	18ba      	adds	r2, r7, r2
 8001e5a:	1852      	adds	r2, r2, r1
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d214      	bcs.n	8001e8c <compensate_pressure+0x6d0>
			pressure = pressure_max;
 8001e62:	2308      	movs	r3, #8
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	185b      	adds	r3, r3, r1
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	18ba      	adds	r2, r7, r2
 8001e6e:	1812      	adds	r2, r2, r0
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e00b      	b.n	8001e8c <compensate_pressure+0x6d0>
	} else {
		pressure = pressure_min;
 8001e74:	23e8      	movs	r3, #232	; 0xe8
 8001e76:	2208      	movs	r2, #8
 8001e78:	4694      	mov	ip, r2
 8001e7a:	44bc      	add	ip, r7
 8001e7c:	4463      	add	r3, ip
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	22ec      	movs	r2, #236	; 0xec
 8001e82:	2108      	movs	r1, #8
 8001e84:	468c      	mov	ip, r1
 8001e86:	44bc      	add	ip, r7
 8001e88:	4462      	add	r2, ip
 8001e8a:	6013      	str	r3, [r2, #0]
	}

	return pressure;
 8001e8c:	23ec      	movs	r3, #236	; 0xec
 8001e8e:	2208      	movs	r2, #8
 8001e90:	4694      	mov	ip, r2
 8001e92:	44bc      	add	ip, r7
 8001e94:	4463      	add	r3, ip
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b03e      	add	sp, #248	; 0xf8
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	46b8      	mov	r8, r7
 8001ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea4:	00001fff 	.word	0x00001fff
 8001ea8:	01ffffff 	.word	0x01ffffff
 8001eac:	0007ffff 	.word	0x0007ffff

08001eb0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int humidity;
	uint32_t humidity_max = 102400;
 8001eba:	23c8      	movs	r3, #200	; 0xc8
 8001ebc:	025b      	lsls	r3, r3, #9
 8001ebe:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	4a53      	ldr	r2, [pc, #332]	; (8002014 <compensate_humidity+0x164>)
 8001ec6:	4694      	mov	ip, r2
 8001ec8:	4463      	add	r3, ip
 8001eca:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->intHum * 16384);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	039b      	lsls	r3, r3, #14
 8001ed2:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	221e      	movs	r2, #30
 8001ed8:	5e9b      	ldrsh	r3, [r3, r2]
 8001eda:	051b      	lsls	r3, r3, #20
 8001edc:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	5e9b      	ldrsh	r3, [r3, r2]
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	4353      	muls	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	01d2      	lsls	r2, r2, #7
 8001efa:	4694      	mov	ip, r2
 8001efc:	4463      	add	r3, ip
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	da02      	bge.n	8001f08 <compensate_humidity+0x58>
 8001f02:	4a45      	ldr	r2, [pc, #276]	; (8002018 <compensate_humidity+0x168>)
 8001f04:	4694      	mov	ip, r2
 8001f06:	4463      	add	r3, ip
 8001f08:	13db      	asrs	r3, r3, #15
 8001f0a:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2222      	movs	r2, #34	; 0x22
 8001f10:	569b      	ldrsb	r3, [r3, r2]
 8001f12:	001a      	movs	r2, r3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	4353      	muls	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da02      	bge.n	8001f22 <compensate_humidity+0x72>
 8001f1c:	4a3f      	ldr	r2, [pc, #252]	; (800201c <compensate_humidity+0x16c>)
 8001f1e:	4694      	mov	ip, r2
 8001f20:	4463      	add	r3, ip
 8001f22:	129b      	asrs	r3, r3, #10
 8001f24:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	7f1b      	ldrb	r3, [r3, #28]
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4353      	muls	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da02      	bge.n	8001f3a <compensate_humidity+0x8a>
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <compensate_humidity+0x170>)
 8001f36:	4694      	mov	ip, r2
 8001f38:	4463      	add	r3, ip
 8001f3a:	12db      	asrs	r3, r3, #11
 8001f3c:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	0212      	lsls	r2, r2, #8
 8001f44:	4694      	mov	ip, r2
 8001f46:	4463      	add	r3, ip
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4353      	muls	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da02      	bge.n	8001f56 <compensate_humidity+0xa6>
 8001f50:	4a32      	ldr	r2, [pc, #200]	; (800201c <compensate_humidity+0x16c>)
 8001f52:	4694      	mov	ip, r2
 8001f54:	4463      	add	r3, ip
 8001f56:	129b      	asrs	r3, r3, #10
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	0392      	lsls	r2, r2, #14
 8001f5c:	4694      	mov	ip, r2
 8001f5e:	4463      	add	r3, ip
 8001f60:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	221a      	movs	r2, #26
 8001f66:	5e9b      	ldrsh	r3, [r3, r2]
 8001f68:	001a      	movs	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4353      	muls	r3, r2
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	0192      	lsls	r2, r2, #6
 8001f72:	4694      	mov	ip, r2
 8001f74:	4463      	add	r3, ip
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da02      	bge.n	8001f80 <compensate_humidity+0xd0>
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <compensate_humidity+0x174>)
 8001f7c:	4694      	mov	ip, r2
 8001f7e:	4463      	add	r3, ip
 8001f80:	139b      	asrs	r3, r3, #14
 8001f82:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4353      	muls	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da02      	bge.n	8001f98 <compensate_humidity+0xe8>
 8001f92:	4a21      	ldr	r2, [pc, #132]	; (8002018 <compensate_humidity+0x168>)
 8001f94:	4694      	mov	ip, r2
 8001f96:	4463      	add	r3, ip
 8001f98:	13db      	asrs	r3, r3, #15
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da02      	bge.n	8001fa8 <compensate_humidity+0xf8>
 8001fa2:	491d      	ldr	r1, [pc, #116]	; (8002018 <compensate_humidity+0x168>)
 8001fa4:	468c      	mov	ip, r1
 8001fa6:	4463      	add	r3, ip
 8001fa8:	13db      	asrs	r3, r3, #15
 8001faa:	4353      	muls	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da00      	bge.n	8001fb2 <compensate_humidity+0x102>
 8001fb0:	337f      	adds	r3, #127	; 0x7f
 8001fb2:	11db      	asrs	r3, r3, #7
 8001fb4:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	7e1b      	ldrb	r3, [r3, #24]
 8001fba:	001a      	movs	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4353      	muls	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da00      	bge.n	8001fc6 <compensate_humidity+0x116>
 8001fc4:	330f      	adds	r3, #15
 8001fc6:	111b      	asrs	r3, r3, #4
 8001fc8:	425b      	negs	r3, r3
 8001fca:	001a      	movs	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	189b      	adds	r3, r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da00      	bge.n	8001fda <compensate_humidity+0x12a>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	22c8      	movs	r2, #200	; 0xc8
 8001fe0:	0552      	lsls	r2, r2, #21
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	dd01      	ble.n	8001fea <compensate_humidity+0x13a>
 8001fe6:	23c8      	movs	r3, #200	; 0xc8
 8001fe8:	055b      	lsls	r3, r3, #21
 8001fea:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da02      	bge.n	8001ff8 <compensate_humidity+0x148>
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <compensate_humidity+0x178>)
 8001ff4:	4694      	mov	ip, r2
 8001ff6:	4463      	add	r3, ip
 8001ff8:	131b      	asrs	r3, r3, #12
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	6a3a      	ldr	r2, [r7, #32]
 8002000:	429a      	cmp	r2, r3
 8002002:	d201      	bcs.n	8002008 <compensate_humidity+0x158>
		humidity = humidity_max;
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800200a:	0018      	movs	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	b00a      	add	sp, #40	; 0x28
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	fffed400 	.word	0xfffed400
 8002018:	00007fff 	.word	0x00007fff
 800201c:	000003ff 	.word	0x000003ff
 8002020:	000007ff 	.word	0x000007ff
 8002024:	00003fff 	.word	0x00003fff
 8002028:	00000fff 	.word	0x00000fff

0800202c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	b08b      	sub	sp, #44	; 0x2c
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002034:	2626      	movs	r6, #38	; 0x26
 8002036:	19bb      	adds	r3, r7, r6
 8002038:	2288      	movs	r2, #136	; 0x88
 800203a:	701a      	strb	r2, [r3, #0]
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800203c:	250c      	movs	r5, #12
 800203e:	197b      	adds	r3, r7, r5
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	3304      	adds	r3, #4
 8002046:	2216      	movs	r2, #22
 8002048:	2100      	movs	r1, #0
 800204a:	0018      	movs	r0, r3
 800204c:	f006 f82f 	bl	80080ae <memset>

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002050:	2427      	movs	r4, #39	; 0x27
 8002052:	193c      	adds	r4, r7, r4
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	1979      	adds	r1, r7, r5
 8002058:	19bb      	adds	r3, r7, r6
 800205a:	7818      	ldrb	r0, [r3, #0]
 800205c:	0013      	movs	r3, r2
 800205e:	221a      	movs	r2, #26
 8002060:	f7fe fe22 	bl	8000ca8 <bme280_get_regs>
 8002064:	0003      	movs	r3, r0
 8002066:	7023      	strb	r3, [r4, #0]

	if (rslt == BME280_OK) {
 8002068:	2427      	movs	r4, #39	; 0x27
 800206a:	193b      	adds	r3, r7, r4
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b25b      	sxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11f      	bne.n	80020b4 <get_calib_data+0x88>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	197b      	adds	r3, r7, r5
 8002078:	0011      	movs	r1, r2
 800207a:	0018      	movs	r0, r3
 800207c:	f000 f85a 	bl	8002134 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002080:	19bb      	adds	r3, r7, r6
 8002082:	22e1      	movs	r2, #225	; 0xe1
 8002084:	701a      	strb	r2, [r3, #0]
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002086:	193c      	adds	r4, r7, r4
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	1979      	adds	r1, r7, r5
 800208c:	19bb      	adds	r3, r7, r6
 800208e:	7818      	ldrb	r0, [r3, #0]
 8002090:	0013      	movs	r3, r2
 8002092:	2207      	movs	r2, #7
 8002094:	f7fe fe08 	bl	8000ca8 <bme280_get_regs>
 8002098:	0003      	movs	r3, r0
 800209a:	7023      	strb	r3, [r4, #0]
		if (rslt == BME280_OK) {
 800209c:	2427      	movs	r4, #39	; 0x27
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <get_calib_data+0x88>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	197b      	adds	r3, r7, r5
 80020ac:	0011      	movs	r1, r2
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 f8ed 	bl	800228e <parse_humidity_calib_data>
		}
	}

	return rslt;
 80020b4:	2327      	movs	r3, #39	; 0x27
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b25b      	sxtb	r3, r3
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b00b      	add	sp, #44	; 0x2c
 80020c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c4 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	001a      	movs	r2, r3
 80020d2:	1cfb      	adds	r3, r7, #3
 80020d4:	701a      	strb	r2, [r3, #0]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020d6:	2317      	movs	r3, #23
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	e01d      	b.n	800211c <interleave_reg_addr+0x58>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020e0:	2017      	movs	r0, #23
 80020e2:	183b      	adds	r3, r7, r0
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	18d2      	adds	r2, r2, r3
 80020ea:	183b      	adds	r3, r7, r0
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	18cb      	adds	r3, r1, r3
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020fa:	183b      	adds	r3, r7, r0
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	18d2      	adds	r2, r2, r3
 8002102:	183b      	adds	r3, r7, r0
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	0019      	movs	r1, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	185b      	adds	r3, r3, r1
 800210e:	7812      	ldrb	r2, [r2, #0]
 8002110:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002112:	183b      	adds	r3, r7, r0
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	183b      	adds	r3, r7, r0
 8002118:	3201      	adds	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	2317      	movs	r3, #23
 800211e:	18fa      	adds	r2, r7, r3
 8002120:	1cfb      	adds	r3, r7, #3
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d3da      	bcc.n	80020e0 <interleave_reg_addr+0x1c>
	}
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b006      	add	sp, #24
 8002132:	bd80      	pop	{r7, pc}

08002134 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	3310      	adds	r3, #16
 8002142:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3301      	adds	r3, #1
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21a      	sxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21b      	sxth	r3, r3
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3303      	adds	r3, #3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	b21a      	sxth	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3302      	adds	r3, #2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21a      	sxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3305      	adds	r3, #5
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3304      	adds	r3, #4
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b21b      	sxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b21a      	sxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3307      	adds	r3, #7
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b21a      	sxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3306      	adds	r3, #6
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3309      	adds	r3, #9
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3308      	adds	r3, #8
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	330b      	adds	r3, #11
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	330a      	adds	r3, #10
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21a      	sxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	330d      	adds	r3, #13
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	330c      	adds	r3, #12
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	330f      	adds	r3, #15
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21a      	sxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	330e      	adds	r3, #14
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b21b      	sxth	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	b21a      	sxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3311      	adds	r3, #17
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	b21a      	sxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3310      	adds	r3, #16
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21a      	sxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3313      	adds	r3, #19
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	b21a      	sxth	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3312      	adds	r3, #18
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b21b      	sxth	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b21a      	sxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3315      	adds	r3, #21
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	b21a      	sxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3314      	adds	r3, #20
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b21b      	sxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b21a      	sxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3317      	adds	r3, #23
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	b21a      	sxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3316      	adds	r3, #22
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b21b      	sxth	r3, r3
 8002276:	4313      	orrs	r3, r2
 8002278:	b21a      	sxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7e5a      	ldrb	r2, [r3, #25]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	761a      	strb	r2, [r3, #24]

}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b004      	add	sp, #16
 800228c:	bd80      	pop	{r7, pc}

0800228e <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800228e:	b590      	push	{r4, r7, lr}
 8002290:	b087      	sub	sp, #28
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	3310      	adds	r3, #16
 800229c:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3301      	adds	r3, #1
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	789a      	ldrb	r2, [r3, #2]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3303      	adds	r3, #3
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	2012      	movs	r0, #18
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	801a      	strh	r2, [r3, #0]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b21a      	sxth	r2, r3
 80022da:	2410      	movs	r4, #16
 80022dc:	193b      	adds	r3, r7, r4
 80022de:	210f      	movs	r1, #15
 80022e0:	400a      	ands	r2, r1
 80022e2:	801a      	strh	r2, [r3, #0]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022e4:	183a      	adds	r2, r7, r0
 80022e6:	193b      	adds	r3, r7, r4
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b21a      	sxth	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3305      	adds	r3, #5
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	b29a      	uxth	r2, r3
 8002302:	210e      	movs	r1, #14
 8002304:	187b      	adds	r3, r7, r1
 8002306:	801a      	strh	r2, [r3, #0]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	b2da      	uxtb	r2, r3
 8002312:	200c      	movs	r0, #12
 8002314:	183b      	adds	r3, r7, r0
 8002316:	801a      	strh	r2, [r3, #0]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002318:	187a      	adds	r2, r7, r1
 800231a:	183b      	adds	r3, r7, r0
 800231c:	8812      	ldrh	r2, [r2, #0]
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	b21a      	sxth	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3306      	adds	r3, #6
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b259      	sxtb	r1, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2222      	movs	r2, #34	; 0x22
 8002334:	5499      	strb	r1, [r3, r2]
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b007      	add	sp, #28
 800233c:	bd90      	pop	{r4, r7, pc}

0800233e <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	0002      	movs	r2, r0
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	1dbb      	adds	r3, r7, #6
 800234c:	1c0a      	adds	r2, r1, #0
 800234e:	701a      	strb	r2, [r3, #0]
	uint8_t settings_changed = FALSE;
 8002350:	210f      	movs	r1, #15
 8002352:	187b      	adds	r3, r7, r1
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]

	if (sub_settings & desired_settings) {
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	1dba      	adds	r2, r7, #6
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	7812      	ldrb	r2, [r2, #0]
 8002360:	4013      	ands	r3, r2
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <are_settings_changed+0x32>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002368:	187b      	adds	r3, r7, r1
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e003      	b.n	8002378 <are_settings_changed+0x3a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002370:	230f      	movs	r3, #15
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
	}

	return settings_changed;
 8002378:	230f      	movs	r3, #15
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	781b      	ldrb	r3, [r3, #0]
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bd80      	pop	{r7, pc}

08002386 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <null_ptr_check+0x26>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <null_ptr_check+0x26>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <null_ptr_check+0x26>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <null_ptr_check+0x30>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80023ac:	230f      	movs	r3, #15
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e003      	b.n	80023be <null_ptr_check+0x38>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80023b6:	230f      	movs	r3, #15
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80023be:	230f      	movs	r3, #15
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b25b      	sxtb	r3, r3
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b004      	add	sp, #16
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023d4:	f000 ff9a 	bl	800330c <HAL_Init>

  /* USER CODE BEGIN Init */
  //Reset sensor data.
  //memory allocation
  intTemp = (int*)calloc(10, sizeof(int));
 80023d8:	2104      	movs	r1, #4
 80023da:	200a      	movs	r0, #10
 80023dc:	f005 fe16 	bl	800800c <calloc>
 80023e0:	0003      	movs	r3, r0
 80023e2:	001a      	movs	r2, r3
 80023e4:	4b20      	ldr	r3, [pc, #128]	; (8002468 <main+0x98>)
 80023e6:	601a      	str	r2, [r3, #0]
  intHum = (int*)calloc(10, sizeof(int));
 80023e8:	2104      	movs	r1, #4
 80023ea:	200a      	movs	r0, #10
 80023ec:	f005 fe0e 	bl	800800c <calloc>
 80023f0:	0003      	movs	r3, r0
 80023f2:	001a      	movs	r2, r3
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <main+0x9c>)
 80023f6:	601a      	str	r2, [r3, #0]
  intPress = (int*)calloc(10, sizeof(int));
 80023f8:	2104      	movs	r1, #4
 80023fa:	200a      	movs	r0, #10
 80023fc:	f005 fe06 	bl	800800c <calloc>
 8002400:	0003      	movs	r3, r0
 8002402:	001a      	movs	r2, r3
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <main+0xa0>)
 8002406:	601a      	str	r2, [r3, #0]
  //senDT = calloc(10, sizeof(*senDT));
  intError = 0;
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <main+0xa4>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
   *
   */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800240e:	f000 f845 	bl	800249c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002412:	f000 f987 	bl	8002724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002416:	f000 f955 	bl	80026c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800241a:	f000 f8a3 	bl	8002564 <MX_I2C1_Init>
  MX_I2C2_Init();
 800241e:	f000 f8e1 	bl	80025e4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002422:	f000 f91f 	bl	8002664 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002426:	f003 fbd5 	bl	8005bd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendESPtask */
  sendESPtaskHandle = osThreadNew(sendESP, NULL, &sendESPtask_attributes);
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <main+0xa8>)
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <main+0xac>)
 800242e:	2100      	movs	r1, #0
 8002430:	0018      	movs	r0, r3
 8002432:	f003 fc29 	bl	8005c88 <osThreadNew>
 8002436:	0002      	movs	r2, r0
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <main+0xb0>)
 800243a:	601a      	str	r2, [r3, #0]

  /* creation of readDataTask */
  readDataTaskHandle = osThreadNew(readData, NULL, &readDataTask_attributes);
 800243c:	4a11      	ldr	r2, [pc, #68]	; (8002484 <main+0xb4>)
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <main+0xb8>)
 8002440:	2100      	movs	r1, #0
 8002442:	0018      	movs	r0, r3
 8002444:	f003 fc20 	bl	8005c88 <osThreadNew>
 8002448:	0002      	movs	r2, r0
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <main+0xbc>)
 800244c:	601a      	str	r2, [r3, #0]

  /* creation of getESPtimeTask */
  getESPtimeTaskHandle = osThreadNew(getESPtime, NULL, &getESPtimeTask_attributes);
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <main+0xc0>)
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <main+0xc4>)
 8002452:	2100      	movs	r1, #0
 8002454:	0018      	movs	r0, r3
 8002456:	f003 fc17 	bl	8005c88 <osThreadNew>
 800245a:	0002      	movs	r2, r0
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <main+0xc8>)
 800245e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002460:	f003 fbe4 	bl	8005c2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002464:	e7fe      	b.n	8002464 <main+0x94>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	200017f8 	.word	0x200017f8
 800246c:	20001738 	.word	0x20001738
 8002470:	20001604 	.word	0x20001604
 8002474:	20001734 	.word	0x20001734
 8002478:	08008bbc 	.word	0x08008bbc
 800247c:	080028f9 	.word	0x080028f9
 8002480:	200015c0 	.word	0x200015c0
 8002484:	08008be0 	.word	0x08008be0
 8002488:	08002c21 	.word	0x08002c21
 800248c:	20001760 	.word	0x20001760
 8002490:	08008c04 	.word	0x08008c04
 8002494:	08002d81 	.word	0x08002d81
 8002498:	2000175c 	.word	0x2000175c

0800249c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b095      	sub	sp, #84	; 0x54
 80024a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024a2:	2420      	movs	r4, #32
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	0018      	movs	r0, r3
 80024a8:	2330      	movs	r3, #48	; 0x30
 80024aa:	001a      	movs	r2, r3
 80024ac:	2100      	movs	r1, #0
 80024ae:	f005 fdfe 	bl	80080ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b2:	2310      	movs	r3, #16
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	0018      	movs	r0, r3
 80024b8:	2310      	movs	r3, #16
 80024ba:	001a      	movs	r2, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	f005 fdf6 	bl	80080ae <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c2:	003b      	movs	r3, r7
 80024c4:	0018      	movs	r0, r3
 80024c6:	2310      	movs	r3, #16
 80024c8:	001a      	movs	r2, r3
 80024ca:	2100      	movs	r1, #0
 80024cc:	f005 fdef 	bl	80080ae <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024d0:	0021      	movs	r1, r4
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2202      	movs	r2, #2
 80024d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	2201      	movs	r2, #1
 80024dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2210      	movs	r2, #16
 80024e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2202      	movs	r2, #2
 80024e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2200      	movs	r2, #0
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	22a0      	movs	r2, #160	; 0xa0
 80024f4:	0392      	lsls	r2, r2, #14
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2200      	movs	r2, #0
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	0018      	movs	r0, r3
 8002502:	f001 fec9 	bl	8004298 <HAL_RCC_OscConfig>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800250a:	f000 fce9 	bl	8002ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250e:	2110      	movs	r1, #16
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2207      	movs	r2, #7
 8002514:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2202      	movs	r2, #2
 800251a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2101      	movs	r1, #1
 800252c:	0018      	movs	r0, r3
 800252e:	f002 f9cd 	bl	80048cc <HAL_RCC_ClockConfig>
 8002532:	1e03      	subs	r3, r0, #0
 8002534:	d001      	beq.n	800253a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002536:	f000 fcd3 	bl	8002ee0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800253a:	003b      	movs	r3, r7
 800253c:	2221      	movs	r2, #33	; 0x21
 800253e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002540:	003b      	movs	r3, r7
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002546:	003b      	movs	r3, r7
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254c:	003b      	movs	r3, r7
 800254e:	0018      	movs	r0, r3
 8002550:	f002 fb38 	bl	8004bc4 <HAL_RCCEx_PeriphCLKConfig>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002558:	f000 fcc2 	bl	8002ee0 <Error_Handler>
  }
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b015      	add	sp, #84	; 0x54
 8002562:	bd90      	pop	{r4, r7, pc}

08002564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <MX_I2C1_Init+0x74>)
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <MX_I2C1_Init+0x78>)
 800256c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002570:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <MX_I2C1_Init+0x7c>)
 8002572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <MX_I2C1_Init+0x74>)
 800257c:	2201      	movs	r2, #1
 800257e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <MX_I2C1_Init+0x74>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <MX_I2C1_Init+0x74>)
 8002594:	2200      	movs	r2, #0
 8002596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <MX_I2C1_Init+0x74>)
 800259a:	2200      	movs	r2, #0
 800259c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <MX_I2C1_Init+0x74>)
 80025a0:	0018      	movs	r0, r3
 80025a2:	f001 f943 	bl	800382c <HAL_I2C_Init>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d001      	beq.n	80025ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025aa:	f000 fc99 	bl	8002ee0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <MX_I2C1_Init+0x74>)
 80025b0:	2100      	movs	r1, #0
 80025b2:	0018      	movs	r0, r3
 80025b4:	f001 fdd8 	bl	8004168 <HAL_I2CEx_ConfigAnalogFilter>
 80025b8:	1e03      	subs	r3, r0, #0
 80025ba:	d001      	beq.n	80025c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025bc:	f000 fc90 	bl	8002ee0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <MX_I2C1_Init+0x74>)
 80025c2:	2100      	movs	r1, #0
 80025c4:	0018      	movs	r0, r3
 80025c6:	f001 fe1b 	bl	8004200 <HAL_I2CEx_ConfigDigitalFilter>
 80025ca:	1e03      	subs	r3, r0, #0
 80025cc:	d001      	beq.n	80025d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025ce:	f000 fc87 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	2000160c 	.word	0x2000160c
 80025dc:	40005400 	.word	0x40005400
 80025e0:	2000090e 	.word	0x2000090e

080025e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <MX_I2C2_Init+0x74>)
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <MX_I2C2_Init+0x78>)
 80025ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <MX_I2C2_Init+0x74>)
 80025f0:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <MX_I2C2_Init+0x7c>)
 80025f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <MX_I2C2_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <MX_I2C2_Init+0x74>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <MX_I2C2_Init+0x74>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <MX_I2C2_Init+0x74>)
 8002608:	2200      	movs	r2, #0
 800260a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <MX_I2C2_Init+0x74>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002612:	4b11      	ldr	r3, [pc, #68]	; (8002658 <MX_I2C2_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <MX_I2C2_Init+0x74>)
 800261a:	2200      	movs	r2, #0
 800261c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MX_I2C2_Init+0x74>)
 8002620:	0018      	movs	r0, r3
 8002622:	f001 f903 	bl	800382c <HAL_I2C_Init>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d001      	beq.n	800262e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800262a:	f000 fc59 	bl	8002ee0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <MX_I2C2_Init+0x74>)
 8002630:	2100      	movs	r1, #0
 8002632:	0018      	movs	r0, r3
 8002634:	f001 fd98 	bl	8004168 <HAL_I2CEx_ConfigAnalogFilter>
 8002638:	1e03      	subs	r3, r0, #0
 800263a:	d001      	beq.n	8002640 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800263c:	f000 fc50 	bl	8002ee0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <MX_I2C2_Init+0x74>)
 8002642:	2100      	movs	r1, #0
 8002644:	0018      	movs	r0, r3
 8002646:	f001 fddb 	bl	8004200 <HAL_I2CEx_ConfigDigitalFilter>
 800264a:	1e03      	subs	r3, r0, #0
 800264c:	d001      	beq.n	8002652 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800264e:	f000 fc47 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20001664 	.word	0x20001664
 800265c:	40005800 	.word	0x40005800
 8002660:	20303e5d 	.word	0x20303e5d

08002664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <MX_USART1_UART_Init+0x58>)
 800266a:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <MX_USART1_UART_Init+0x5c>)
 800266c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <MX_USART1_UART_Init+0x58>)
 8002670:	22e1      	movs	r2, #225	; 0xe1
 8002672:	0252      	lsls	r2, r2, #9
 8002674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <MX_USART1_UART_Init+0x58>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <MX_USART1_UART_Init+0x58>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <MX_USART1_UART_Init+0x58>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <MX_USART1_UART_Init+0x58>)
 800268a:	220c      	movs	r2, #12
 800268c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <MX_USART1_UART_Init+0x58>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <MX_USART1_UART_Init+0x58>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <MX_USART1_UART_Init+0x58>)
 800269c:	2200      	movs	r2, #0
 800269e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <MX_USART1_UART_Init+0x58>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <MX_USART1_UART_Init+0x58>)
 80026a8:	0018      	movs	r0, r3
 80026aa:	f002 fdb9 	bl	8005220 <HAL_UART_Init>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d001      	beq.n	80026b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80026b2:	f000 fc15 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200016b0 	.word	0x200016b0
 80026c0:	40013800 	.word	0x40013800

080026c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <MX_USART2_UART_Init+0x58>)
 80026ca:	4a15      	ldr	r2, [pc, #84]	; (8002720 <MX_USART2_UART_Init+0x5c>)
 80026cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <MX_USART2_UART_Init+0x58>)
 80026d0:	22e1      	movs	r2, #225	; 0xe1
 80026d2:	0252      	lsls	r2, r2, #9
 80026d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <MX_USART2_UART_Init+0x58>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <MX_USART2_UART_Init+0x58>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <MX_USART2_UART_Init+0x58>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <MX_USART2_UART_Init+0x58>)
 80026ea:	220c      	movs	r2, #12
 80026ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <MX_USART2_UART_Init+0x58>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_USART2_UART_Init+0x58>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <MX_USART2_UART_Init+0x58>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <MX_USART2_UART_Init+0x58>)
 8002702:	2200      	movs	r2, #0
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <MX_USART2_UART_Init+0x58>)
 8002708:	0018      	movs	r0, r3
 800270a:	f002 fd89 	bl	8005220 <HAL_UART_Init>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d001      	beq.n	8002716 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002712:	f000 fbe5 	bl	8002ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20001774 	.word	0x20001774
 8002720:	40004400 	.word	0x40004400

08002724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b08b      	sub	sp, #44	; 0x2c
 8002728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272a:	2414      	movs	r4, #20
 800272c:	193b      	adds	r3, r7, r4
 800272e:	0018      	movs	r0, r3
 8002730:	2314      	movs	r3, #20
 8002732:	001a      	movs	r2, r3
 8002734:	2100      	movs	r1, #0
 8002736:	f005 fcba 	bl	80080ae <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <MX_GPIO_Init+0xe8>)
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	4b33      	ldr	r3, [pc, #204]	; (800280c <MX_GPIO_Init+0xe8>)
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	0309      	lsls	r1, r1, #12
 8002744:	430a      	orrs	r2, r1
 8002746:	615a      	str	r2, [r3, #20]
 8002748:	4b30      	ldr	r3, [pc, #192]	; (800280c <MX_GPIO_Init+0xe8>)
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	031b      	lsls	r3, r3, #12
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <MX_GPIO_Init+0xe8>)
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	4b2c      	ldr	r3, [pc, #176]	; (800280c <MX_GPIO_Init+0xe8>)
 800275c:	2180      	movs	r1, #128	; 0x80
 800275e:	03c9      	lsls	r1, r1, #15
 8002760:	430a      	orrs	r2, r1
 8002762:	615a      	str	r2, [r3, #20]
 8002764:	4b29      	ldr	r3, [pc, #164]	; (800280c <MX_GPIO_Init+0xe8>)
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	03db      	lsls	r3, r3, #15
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	4b26      	ldr	r3, [pc, #152]	; (800280c <MX_GPIO_Init+0xe8>)
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <MX_GPIO_Init+0xe8>)
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	0289      	lsls	r1, r1, #10
 800277c:	430a      	orrs	r2, r1
 800277e:	615a      	str	r2, [r3, #20]
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <MX_GPIO_Init+0xe8>)
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	029b      	lsls	r3, r3, #10
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <MX_GPIO_Init+0xe8>)
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <MX_GPIO_Init+0xe8>)
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	02c9      	lsls	r1, r1, #11
 8002798:	430a      	orrs	r2, r1
 800279a:	615a      	str	r2, [r3, #20]
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <MX_GPIO_Init+0xe8>)
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	02db      	lsls	r3, r3, #11
 80027a4:	4013      	ands	r3, r2
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80027aa:	2390      	movs	r3, #144	; 0x90
 80027ac:	05db      	lsls	r3, r3, #23
 80027ae:	2200      	movs	r2, #0
 80027b0:	2120      	movs	r1, #32
 80027b2:	0018      	movs	r0, r3
 80027b4:	f001 f81c 	bl	80037f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	0192      	lsls	r2, r2, #6
 80027be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027c0:	193b      	adds	r3, r7, r4
 80027c2:	2284      	movs	r2, #132	; 0x84
 80027c4:	0392      	lsls	r2, r2, #14
 80027c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	193b      	adds	r3, r7, r4
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <MX_GPIO_Init+0xec>)
 80027d2:	0019      	movs	r1, r3
 80027d4:	0010      	movs	r0, r2
 80027d6:	f000 fe9b 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027da:	0021      	movs	r1, r4
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2220      	movs	r2, #32
 80027e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2201      	movs	r2, #1
 80027e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80027f4:	187a      	adds	r2, r7, r1
 80027f6:	2390      	movs	r3, #144	; 0x90
 80027f8:	05db      	lsls	r3, r3, #23
 80027fa:	0011      	movs	r1, r2
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 fe87 	bl	8003510 <HAL_GPIO_Init>

}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	b00b      	add	sp, #44	; 0x2c
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40021000 	.word	0x40021000
 8002810:	48000800 	.word	0x48000800

08002814 <debugPrintln>:
/* USER CODE BEGIN 4 */
void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
}

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	0018      	movs	r0, r3
 8002822:	f7fd fc71 	bl	8000108 <strlen>
 8002826:	0003      	movs	r3, r0
 8002828:	b29a      	uxth	r2, r3
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	230a      	movs	r3, #10
 8002830:	f002 fd4a 	bl	80052c8 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8002834:	210c      	movs	r1, #12
 8002836:	187b      	adds	r3, r7, r1
 8002838:	4a05      	ldr	r2, [pc, #20]	; (8002850 <debugPrintln+0x3c>)
 800283a:	801a      	strh	r2, [r3, #0]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 800283c:	1879      	adds	r1, r7, r1
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	230a      	movs	r3, #10
 8002842:	2202      	movs	r2, #2
 8002844:	f002 fd40 	bl	80052c8 <HAL_UART_Transmit>
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}
 8002850:	00000a0d 	.word	0x00000a0d

08002854 <sendToESP>:

char *sendToESP(char *data)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b093      	sub	sp, #76	; 0x4c
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	char rxData[50]; //Containt data send from the ESP over UART1
	char *str = malloc(50);
 800285c:	2032      	movs	r0, #50	; 0x32
 800285e:	f005 fc09 	bl	8008074 <malloc>
 8002862:	0003      	movs	r3, r0
 8002864:	643b      	str	r3, [r7, #64]	; 0x40
	debugPrintln(&huart2, data); //Print end result AT-command for debugging
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <sendToESP+0x94>)
 800286a:	0011      	movs	r1, r2
 800286c:	0018      	movs	r0, r3
 800286e:	f7ff ffd1 	bl	8002814 <debugPrintln>
	HAL_UART_Transmit(&huart1, (uint8_t *) data, strlen(data), 100); //Send AT-command
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f7fd fc47 	bl	8000108 <strlen>
 800287a:	0003      	movs	r3, r0
 800287c:	b29a      	uxth	r2, r3
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	481a      	ldr	r0, [pc, #104]	; (80028ec <sendToESP+0x98>)
 8002882:	2364      	movs	r3, #100	; 0x64
 8002884:	f002 fd20 	bl	80052c8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t *)rxData, 8, 100); //Get response (like OK or ERROR)
 8002888:	240c      	movs	r4, #12
 800288a:	1939      	adds	r1, r7, r4
 800288c:	4817      	ldr	r0, [pc, #92]	; (80028ec <sendToESP+0x98>)
 800288e:	2364      	movs	r3, #100	; 0x64
 8002890:	2208      	movs	r2, #8
 8002892:	f002 fdc3 	bl	800541c <HAL_UART_Receive>
	//HAL_UART_Transmit(&huart2, (uint8_t*)rxData, strlen(rxData) , 100); //Print response for debugging
	debugPrintln(&huart2, "msg"); // Message for debugging
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <sendToESP+0x9c>)
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <sendToESP+0x94>)
 800289a:	0011      	movs	r1, r2
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff ffb9 	bl	8002814 <debugPrintln>
	debugPrintln(&huart2, rxData); // Message for debugging
 80028a2:	193a      	adds	r2, r7, r4
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <sendToESP+0x94>)
 80028a6:	0011      	movs	r1, r2
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff ffb3 	bl	8002814 <debugPrintln>
	debugPrintln(&huart2, "\n"); // Message for debugging
 80028ae:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <sendToESP+0xa0>)
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <sendToESP+0x94>)
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff ffad 	bl	8002814 <debugPrintln>
	for(int i = 0; i < 51; i++){
 80028ba:	2300      	movs	r3, #0
 80028bc:	647b      	str	r3, [r7, #68]	; 0x44
 80028be:	e00b      	b.n	80028d8 <sendToESP+0x84>
		str[i] = rxData[i];
 80028c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	220c      	movs	r2, #12
 80028c8:	18b9      	adds	r1, r7, r2
 80028ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028cc:	188a      	adds	r2, r1, r2
 80028ce:	7812      	ldrb	r2, [r2, #0]
 80028d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 51; i++){
 80028d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d4:	3301      	adds	r3, #1
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
 80028d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028da:	2b32      	cmp	r3, #50	; 0x32
 80028dc:	ddf0      	ble.n	80028c0 <sendToESP+0x6c>
	}
    return str;
 80028de:	6c3b      	ldr	r3, [r7, #64]	; 0x40

}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b013      	add	sp, #76	; 0x4c
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	20001774 	.word	0x20001774
 80028ec:	200016b0 	.word	0x200016b0
 80028f0:	08008994 	.word	0x08008994
 80028f4:	08008998 	.word	0x08008998

080028f8 <sendESP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendESP */
void sendESP(void *argument)
{
 80028f8:	b5b0      	push	{r4, r5, r7, lr}
 80028fa:	b0bc      	sub	sp, #240	; 0xf0
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	debugPrintln(&huart2, "sendESP FUNC \n"); // Message for debugging
 8002900:	4a72      	ldr	r2, [pc, #456]	; (8002acc <sendESP+0x1d4>)
 8002902:	4b73      	ldr	r3, [pc, #460]	; (8002ad0 <sendESP+0x1d8>)
 8002904:	0011      	movs	r1, r2
 8002906:	0018      	movs	r0, r3
 8002908:	f7ff ff84 	bl	8002814 <debugPrintln>
  /* Infinite loop */
	//Local var. declaration.
	char response[10]; //Containt data send from the ESP over UART1
	char initCon[] = "AT+CIPSTART=\"TCP\",\"server03.hammer-tech.eu\",80";
 800290c:	23a8      	movs	r3, #168	; 0xa8
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	4a70      	ldr	r2, [pc, #448]	; (8002ad4 <sendESP+0x1dc>)
 8002912:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002914:	c313      	stmia	r3!, {r0, r1, r4}
 8002916:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002918:	c313      	stmia	r3!, {r0, r1, r4}
 800291a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800291c:	c313      	stmia	r3!, {r0, r1, r4}
 800291e:	ca03      	ldmia	r2!, {r0, r1}
 8002920:	c303      	stmia	r3!, {r0, r1}
 8002922:	8811      	ldrh	r1, [r2, #0]
 8002924:	8019      	strh	r1, [r3, #0]
 8002926:	7892      	ldrb	r2, [r2, #2]
 8002928:	709a      	strb	r2, [r3, #2]
	char initSize[] = "AT+CIPSEND=177";
 800292a:	2398      	movs	r3, #152	; 0x98
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	4a6a      	ldr	r2, [pc, #424]	; (8002ad8 <sendESP+0x1e0>)
 8002930:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002932:	c313      	stmia	r3!, {r0, r1, r4}
 8002934:	8811      	ldrh	r1, [r2, #0]
 8002936:	8019      	strh	r1, [r3, #0]
 8002938:	7892      	ldrb	r2, [r2, #2]
 800293a:	709a      	strb	r2, [r3, #2]
	char data[] = "POST /weerstation/index.php HTTP/1.1r\nHost: server03.hammer-tech.eu\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 37\r\n\n";
 800293c:	230c      	movs	r3, #12
 800293e:	18fa      	adds	r2, r7, r3
 8002940:	4b66      	ldr	r3, [pc, #408]	; (8002adc <sendESP+0x1e4>)
 8002942:	0010      	movs	r0, r2
 8002944:	0019      	movs	r1, r3
 8002946:	238c      	movs	r3, #140	; 0x8c
 8002948:	001a      	movs	r2, r3
 800294a:	f005 fba7 	bl	800809c <memcpy>
	int i;
	for(i = 0;i != sizeof(intTemp);i++)
 800294e:	2300      	movs	r3, #0
 8002950:	22e4      	movs	r2, #228	; 0xe4
 8002952:	18ba      	adds	r2, r7, r2
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e0ab      	b.n	8002ab0 <sendESP+0x1b8>
	{
	if(intTemp[i] != 0 && intHum[i] != 0 && intPress[i] != 0 && time[i][0-15] != 0)
 8002958:	4b61      	ldr	r3, [pc, #388]	; (8002ae0 <sendESP+0x1e8>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	21e4      	movs	r1, #228	; 0xe4
 800295e:	187b      	adds	r3, r7, r1
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	18d3      	adds	r3, r2, r3
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d100      	bne.n	800296e <sendESP+0x76>
 800296c:	e09a      	b.n	8002aa4 <sendESP+0x1ac>
 800296e:	4b5d      	ldr	r3, [pc, #372]	; (8002ae4 <sendESP+0x1ec>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	187b      	adds	r3, r7, r1
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	18d3      	adds	r3, r2, r3
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d100      	bne.n	8002982 <sendESP+0x8a>
 8002980:	e090      	b.n	8002aa4 <sendESP+0x1ac>
 8002982:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <sendESP+0x1f0>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	187b      	adds	r3, r7, r1
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	18d3      	adds	r3, r2, r3
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d100      	bne.n	8002996 <sendESP+0x9e>
 8002994:	e086      	b.n	8002aa4 <sendESP+0x1ac>
 8002996:	4a55      	ldr	r2, [pc, #340]	; (8002aec <sendESP+0x1f4>)
 8002998:	187b      	adds	r3, r7, r1
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	18d3      	adds	r3, r2, r3
 80029a0:	3b0f      	subs	r3, #15
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d100      	bne.n	80029aa <sendESP+0xb2>
 80029a8:	e07c      	b.n	8002aa4 <sendESP+0x1ac>
	{
		sprintf(data, "temperatuur=%d&vochtigheid=%d&luchtdruk=%dtime=%d\r\n", intTemp[i], intHum[i], intPress[i], time[i][0-15]);
 80029aa:	4b4d      	ldr	r3, [pc, #308]	; (8002ae0 <sendESP+0x1e8>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	18d3      	adds	r3, r2, r3
 80029b6:	681c      	ldr	r4, [r3, #0]
 80029b8:	4b4a      	ldr	r3, [pc, #296]	; (8002ae4 <sendESP+0x1ec>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	18d3      	adds	r3, r2, r3
 80029c4:	681d      	ldr	r5, [r3, #0]
 80029c6:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <sendESP+0x1f0>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	0008      	movs	r0, r1
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	18d3      	adds	r3, r2, r3
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4945      	ldr	r1, [pc, #276]	; (8002aec <sendESP+0x1f4>)
 80029d8:	183a      	adds	r2, r7, r0
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	188a      	adds	r2, r1, r2
 80029e0:	3a0f      	subs	r2, #15
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	4942      	ldr	r1, [pc, #264]	; (8002af0 <sendESP+0x1f8>)
 80029e6:	200c      	movs	r0, #12
 80029e8:	1838      	adds	r0, r7, r0
 80029ea:	9201      	str	r2, [sp, #4]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	002b      	movs	r3, r5
 80029f0:	0022      	movs	r2, r4
 80029f2:	f005 fc2d 	bl	8008250 <siprintf>
		strcpy(response, sendToESP(initCon));
 80029f6:	23a8      	movs	r3, #168	; 0xa8
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7ff ff2a 	bl	8002854 <sendToESP>
 8002a00:	0002      	movs	r2, r0
 8002a02:	24d8      	movs	r4, #216	; 0xd8
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	0011      	movs	r1, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f005 fc41 	bl	8008290 <strcpy>
		//Check if there was an error
		if (strstr(response, "ERROR") != NULL)
 8002a0e:	4a39      	ldr	r2, [pc, #228]	; (8002af4 <sendESP+0x1fc>)
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	0011      	movs	r1, r2
 8002a14:	0018      	movs	r0, r3
 8002a16:	f005 fc43 	bl	80082a0 <strstr>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d008      	beq.n	8002a30 <sendESP+0x138>
		{
			intError = 1; //change error code to '1' for ESP related error
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <sendESP+0x200>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
			debugPrintln(&huart2, "ERROR1"); // Message for debugging
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <sendESP+0x204>)
 8002a26:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <sendESP+0x1d8>)
 8002a28:	0011      	movs	r1, r2
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff fef2 	bl	8002814 <debugPrintln>
		}
		strcpy(response, sendToESP(initSize));
 8002a30:	2398      	movs	r3, #152	; 0x98
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff ff0d 	bl	8002854 <sendToESP>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	24d8      	movs	r4, #216	; 0xd8
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	0011      	movs	r1, r2
 8002a42:	0018      	movs	r0, r3
 8002a44:	f005 fc24 	bl	8008290 <strcpy>
		//Check if there was an error
		if (strstr(response, "ERROR") != NULL)
 8002a48:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <sendESP+0x1fc>)
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	0011      	movs	r1, r2
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f005 fc26 	bl	80082a0 <strstr>
 8002a54:	1e03      	subs	r3, r0, #0
 8002a56:	d008      	beq.n	8002a6a <sendESP+0x172>
		{
			intError = 1; //change error code to '1' for ESP related error
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <sendESP+0x200>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
			debugPrintln(&huart2, "ERROR1"); // Message for debugging
 8002a5e:	4a27      	ldr	r2, [pc, #156]	; (8002afc <sendESP+0x204>)
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <sendESP+0x1d8>)
 8002a62:	0011      	movs	r1, r2
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7ff fed5 	bl	8002814 <debugPrintln>
		}
		strcpy(response, sendToESP(data));
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7ff fef0 	bl	8002854 <sendToESP>
 8002a74:	0002      	movs	r2, r0
 8002a76:	24d8      	movs	r4, #216	; 0xd8
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	0011      	movs	r1, r2
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f005 fc07 	bl	8008290 <strcpy>
		//Check if there was an error
		if (strstr(response, "ERROR") != NULL)
 8002a82:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <sendESP+0x1fc>)
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	0011      	movs	r1, r2
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f005 fc09 	bl	80082a0 <strstr>
 8002a8e:	1e03      	subs	r3, r0, #0
 8002a90:	d008      	beq.n	8002aa4 <sendESP+0x1ac>
		{
			intError = 1; //change error code to '1' for ESP related error
 8002a92:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <sendESP+0x200>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
			debugPrintln(&huart2, "ERROR1"); // Message for debugging
 8002a98:	4a18      	ldr	r2, [pc, #96]	; (8002afc <sendESP+0x204>)
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <sendESP+0x1d8>)
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7ff feb8 	bl	8002814 <debugPrintln>
	for(i = 0;i != sizeof(intTemp);i++)
 8002aa4:	22e4      	movs	r2, #228	; 0xe4
 8002aa6:	18bb      	adds	r3, r7, r2
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	18ba      	adds	r2, r7, r2
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	22e4      	movs	r2, #228	; 0xe4
 8002ab2:	18bb      	adds	r3, r7, r2
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d000      	beq.n	8002abc <sendESP+0x1c4>
 8002aba:	e74d      	b.n	8002958 <sendESP+0x60>
		}
	}
	//osDelay(6000); //Delay for sending #1min
	}
	i = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	18ba      	adds	r2, r7, r2
 8002ac0:	6013      	str	r3, [r2, #0]
  /* USER CODE END 5 */
}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b03a      	add	sp, #232	; 0xe8
 8002ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	0800899c 	.word	0x0800899c
 8002ad0:	20001774 	.word	0x20001774
 8002ad4:	080089f0 	.word	0x080089f0
 8002ad8:	08008a20 	.word	0x08008a20
 8002adc:	08008a30 	.word	0x08008a30
 8002ae0:	200017f8 	.word	0x200017f8
 8002ae4:	20001738 	.word	0x20001738
 8002ae8:	20001604 	.word	0x20001604
 8002aec:	2000008c 	.word	0x2000008c
 8002af0:	080089ac 	.word	0x080089ac
 8002af4:	080089e0 	.word	0x080089e0
 8002af8:	20001734 	.word	0x20001734
 8002afc:	080089e8 	.word	0x080089e8

08002b00 <user_i2c_read>:
char line1[16];
char line2[16];
char line3[16];

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	0004      	movs	r4, r0
 8002b08:	0008      	movs	r0, r1
 8002b0a:	603a      	str	r2, [r7, #0]
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	1c22      	adds	r2, r4, #0
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	1dbb      	adds	r3, r7, #6
 8002b16:	1c02      	adds	r2, r0, #0
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	1c0a      	adds	r2, r1, #0
 8002b1e:	801a      	strh	r2, [r3, #0]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	18db      	adds	r3, r3, r3
 8002b28:	b299      	uxth	r1, r3
 8002b2a:	1dba      	adds	r2, r7, #6
 8002b2c:	4812      	ldr	r0, [pc, #72]	; (8002b78 <user_i2c_read+0x78>)
 8002b2e:	230a      	movs	r3, #10
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2301      	movs	r3, #1
 8002b34:	f000 ff10 	bl	8003958 <HAL_I2C_Master_Transmit>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d002      	beq.n	8002b42 <user_i2c_read+0x42>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	425b      	negs	r3, r3
 8002b40:	e015      	b.n	8002b6e <user_i2c_read+0x6e>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002b42:	1dfb      	adds	r3, r7, #7
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	b299      	uxth	r1, r3
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4807      	ldr	r0, [pc, #28]	; (8002b78 <user_i2c_read+0x78>)
 8002b5a:	240a      	movs	r4, #10
 8002b5c:	9400      	str	r4, [sp, #0]
 8002b5e:	f001 f803 	bl	8003b68 <HAL_I2C_Master_Receive>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d002      	beq.n	8002b6c <user_i2c_read+0x6c>
 8002b66:	2301      	movs	r3, #1
 8002b68:	425b      	negs	r3, r3
 8002b6a:	e000      	b.n	8002b6e <user_i2c_read+0x6e>

  return 0;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b003      	add	sp, #12
 8002b74:	bd90      	pop	{r4, r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	2000160c 	.word	0x2000160c

08002b7c <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 fbf0 	bl	800336c <HAL_Delay>
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	0004      	movs	r4, r0
 8002b9c:	0008      	movs	r0, r1
 8002b9e:	603a      	str	r2, [r7, #0]
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	1dfb      	adds	r3, r7, #7
 8002ba4:	1c22      	adds	r2, r4, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	1dbb      	adds	r3, r7, #6
 8002baa:	1c02      	adds	r2, r0, #0
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	1c0a      	adds	r2, r1, #0
 8002bb2:	801a      	strh	r2, [r3, #0]
  int8_t *buf;
  buf = malloc(len +1);
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f005 fa5a 	bl	8008074 <malloc>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8002bc4:	1dbb      	adds	r3, r7, #6
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	569a      	ldrsb	r2, [r3, r2]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1c58      	adds	r0, r3, #1
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	0019      	movs	r1, r3
 8002bda:	f005 fa5f 	bl	800809c <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002bde:	1dfb      	adds	r3, r7, #7
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	18db      	adds	r3, r3, r3
 8002be6:	b299      	uxth	r1, r3
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	b29c      	uxth	r4, r3
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	480a      	ldr	r0, [pc, #40]	; (8002c1c <user_i2c_write+0x88>)
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	425b      	negs	r3, r3
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	0023      	movs	r3, r4
 8002bfc:	f000 feac 	bl	8003958 <HAL_I2C_Master_Transmit>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d002      	beq.n	8002c0a <user_i2c_write+0x76>
 8002c04:	2301      	movs	r3, #1
 8002c06:	425b      	negs	r3, r3
 8002c08:	e004      	b.n	8002c14 <user_i2c_write+0x80>

  free(buf);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f005 fa3b 	bl	8008088 <free>
  return 0;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b005      	add	sp, #20
 8002c1a:	bd90      	pop	{r4, r7, pc}
 8002c1c:	2000160c 	.word	0x2000160c

08002c20 <readData>:

/* USER CODE END Header_readData */
void readData(void *argument)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readData */
	debugPrintln(&huart2, "readData FUNC \n"); // Message for debugging
 8002c28:	4a47      	ldr	r2, [pc, #284]	; (8002d48 <readData+0x128>)
 8002c2a:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <readData+0x12c>)
 8002c2c:	0011      	movs	r1, r2
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7ff fdf0 	bl	8002814 <debugPrintln>
	/* BME280 초기화 */
	  dev.dev_id = BME280_I2C_ADDR_SEC;
 8002c34:	4b46      	ldr	r3, [pc, #280]	; (8002d50 <readData+0x130>)
 8002c36:	2277      	movs	r2, #119	; 0x77
 8002c38:	705a      	strb	r2, [r3, #1]
	  dev.intf = BME280_I2C_INTF;
 8002c3a:	4b45      	ldr	r3, [pc, #276]	; (8002d50 <readData+0x130>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	709a      	strb	r2, [r3, #2]
	  dev.read = user_i2c_read;
 8002c40:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <readData+0x130>)
 8002c42:	4a44      	ldr	r2, [pc, #272]	; (8002d54 <readData+0x134>)
 8002c44:	605a      	str	r2, [r3, #4]
	  dev.write = user_i2c_write;
 8002c46:	4b42      	ldr	r3, [pc, #264]	; (8002d50 <readData+0x130>)
 8002c48:	4a43      	ldr	r2, [pc, #268]	; (8002d58 <readData+0x138>)
 8002c4a:	609a      	str	r2, [r3, #8]
	  dev.delay_ms = user_delay_ms;
 8002c4c:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <readData+0x130>)
 8002c4e:	4a43      	ldr	r2, [pc, #268]	; (8002d5c <readData+0x13c>)
 8002c50:	60da      	str	r2, [r3, #12]

	  rslt = bme280_init(&dev);
 8002c52:	4b3f      	ldr	r3, [pc, #252]	; (8002d50 <readData+0x130>)
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fd ffbd 	bl	8000bd4 <bme280_init>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	4b40      	ldr	r3, [pc, #256]	; (8002d60 <readData+0x140>)
 8002c60:	701a      	strb	r2, [r3, #0]

	  /* BME280 설정 */
	  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <readData+0x130>)
 8002c64:	223a      	movs	r2, #58	; 0x3a
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]
	  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002c6a:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <readData+0x130>)
 8002c6c:	2238      	movs	r2, #56	; 0x38
 8002c6e:	2105      	movs	r1, #5
 8002c70:	5499      	strb	r1, [r3, r2]
	  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002c72:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <readData+0x130>)
 8002c74:	2239      	movs	r2, #57	; 0x39
 8002c76:	2102      	movs	r1, #2
 8002c78:	5499      	strb	r1, [r3, r2]
	  dev.settings.filter = BME280_FILTER_COEFF_16;
 8002c7a:	4b35      	ldr	r3, [pc, #212]	; (8002d50 <readData+0x130>)
 8002c7c:	223b      	movs	r2, #59	; 0x3b
 8002c7e:	2104      	movs	r1, #4
 8002c80:	5499      	strb	r1, [r3, r2]
	  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8002c82:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <readData+0x130>)
 8002c84:	0019      	movs	r1, r3
 8002c86:	200f      	movs	r0, #15
 8002c88:	f7fe f8eb 	bl	8000e62 <bme280_set_sensor_settings>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	001a      	movs	r2, r3
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <readData+0x140>)
 8002c92:	701a      	strb	r2, [r3, #0]

	  /* USER CODE BEGIN 3 */
	  /* FORCED 모드 설정, 측정 후 SLEEP 모드로 전환�?� */
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002c94:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <readData+0x130>)
 8002c96:	0019      	movs	r1, r3
 8002c98:	2001      	movs	r0, #1
 8002c9a:	f7fe f94d 	bl	8000f38 <bme280_set_sensor_mode>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	001a      	movs	r2, r3
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <readData+0x140>)
 8002ca4:	701a      	strb	r2, [r3, #0]
	  dev.delay_ms(40);
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <readData+0x130>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2028      	movs	r0, #40	; 0x28
 8002cac:	4798      	blx	r3
	  /* �?��?�터 취�? */
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002cae:	4a28      	ldr	r2, [pc, #160]	; (8002d50 <readData+0x130>)
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <readData+0x144>)
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	2007      	movs	r0, #7
 8002cb6:	f7fe f9df 	bl	8001078 <bme280_get_sensor_data>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <readData+0x140>)
 8002cc0:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 8002cc2:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <readData+0x140>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d138      	bne.n	8002d3e <readData+0x11e>
	  {
		*intTemp = comp_data.intTemp / 100.0;      /* °C  */
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <readData+0x144>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7fd fe3f 	bl	8000954 <__aeabi_i2d>
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <readData+0x148>)
 8002cda:	f7fd fb1d 	bl	8000318 <__aeabi_ddiv>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	000b      	movs	r3, r1
 8002ce2:	4922      	ldr	r1, [pc, #136]	; (8002d6c <readData+0x14c>)
 8002ce4:	680c      	ldr	r4, [r1, #0]
 8002ce6:	0010      	movs	r0, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	f7fd fdfd 	bl	80008e8 <__aeabi_d2iz>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	6023      	str	r3, [r4, #0]
		*intHum = comp_data.intHum / 1024.0;           /* %   */
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <readData+0x144>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7fd fe2c 	bl	8000954 <__aeabi_i2d>
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <readData+0x150>)
 8002d00:	f7fd fb0a 	bl	8000318 <__aeabi_ddiv>
 8002d04:	0002      	movs	r2, r0
 8002d06:	000b      	movs	r3, r1
 8002d08:	491a      	ldr	r1, [pc, #104]	; (8002d74 <readData+0x154>)
 8002d0a:	680c      	ldr	r4, [r1, #0]
 8002d0c:	0010      	movs	r0, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	f7fd fdea 	bl	80008e8 <__aeabi_d2iz>
 8002d14:	0003      	movs	r3, r0
 8002d16:	6023      	str	r3, [r4, #0]
		*intPress = comp_data.intPress / 10000.0;          /* hPa */
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <readData+0x144>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7fd fe19 	bl	8000954 <__aeabi_i2d>
 8002d22:	2200      	movs	r2, #0
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <readData+0x158>)
 8002d26:	f7fd faf7 	bl	8000318 <__aeabi_ddiv>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	000b      	movs	r3, r1
 8002d2e:	4913      	ldr	r1, [pc, #76]	; (8002d7c <readData+0x15c>)
 8002d30:	680c      	ldr	r4, [r1, #0]
 8002d32:	0010      	movs	r0, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	f7fd fdd7 	bl	80008e8 <__aeabi_d2iz>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	6023      	str	r3, [r4, #0]
	  }

  /* USER CODE END readData */
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b003      	add	sp, #12
 8002d44:	bd90      	pop	{r4, r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	08008abc 	.word	0x08008abc
 8002d4c:	20001774 	.word	0x20001774
 8002d50:	200015c4 	.word	0x200015c4
 8002d54:	08002b01 	.word	0x08002b01
 8002d58:	08002b95 	.word	0x08002b95
 8002d5c:	08002b7d 	.word	0x08002b7d
 8002d60:	20001608 	.word	0x20001608
 8002d64:	20001658 	.word	0x20001658
 8002d68:	40590000 	.word	0x40590000
 8002d6c:	200017f8 	.word	0x200017f8
 8002d70:	40900000 	.word	0x40900000
 8002d74:	20001738 	.word	0x20001738
 8002d78:	40c38800 	.word	0x40c38800
 8002d7c:	20001604 	.word	0x20001604

08002d80 <getESPtime>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getESPtime */
void getESPtime(void *argument)
{
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	b09c      	sub	sp, #112	; 0x70
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getESPtime */
 debugPrintln(&huart2, "getESPtime FUNC \n"); // Message for debugging
 8002d88:	4a42      	ldr	r2, [pc, #264]	; (8002e94 <getESPtime+0x114>)
 8002d8a:	4b43      	ldr	r3, [pc, #268]	; (8002e98 <getESPtime+0x118>)
 8002d8c:	0011      	movs	r1, r2
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7ff fd40 	bl	8002814 <debugPrintln>
  /* Infinite loop */
	//NTPdateTime

//Local var.
char response[10]; //Containt data send from the ESP over UART1
char setNTP[] = "AT+CIPSNTPCFG=1,2,\"0.nl.pool.ntp.org\",\"1.nl.pool.ntp.org\"";
 8002d94:	2424      	movs	r4, #36	; 0x24
 8002d96:	193a      	adds	r2, r7, r4
 8002d98:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <getESPtime+0x11c>)
 8002d9a:	0010      	movs	r0, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	233a      	movs	r3, #58	; 0x3a
 8002da0:	001a      	movs	r2, r3
 8002da2:	f005 f97b 	bl	800809c <memcpy>
char getDT[] = "AT+CIPSNTPTIME?";
 8002da6:	2314      	movs	r3, #20
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	4a3d      	ldr	r2, [pc, #244]	; (8002ea0 <getESPtime+0x120>)
 8002dac:	ca23      	ldmia	r2!, {r0, r1, r5}
 8002dae:	c323      	stmia	r3!, {r0, r1, r5}
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	601a      	str	r2, [r3, #0]
char disableEcho[] = "ATE0";
 8002db4:	250c      	movs	r5, #12
 8002db6:	197b      	adds	r3, r7, r5
 8002db8:	4a3a      	ldr	r2, [pc, #232]	; (8002ea4 <getESPtime+0x124>)
 8002dba:	6811      	ldr	r1, [r2, #0]
 8002dbc:	6019      	str	r1, [r3, #0]
 8002dbe:	7912      	ldrb	r2, [r2, #4]
 8002dc0:	711a      	strb	r2, [r3, #4]

debugPrintln(&huart2, "Echo disabled: "); // Message for debugging
 8002dc2:	4a39      	ldr	r2, [pc, #228]	; (8002ea8 <getESPtime+0x128>)
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <getESPtime+0x118>)
 8002dc6:	0011      	movs	r1, r2
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff fd23 	bl	8002814 <debugPrintln>
debugPrintln(&huart2, sendToESP(disableEcho)); // Message for debugging (disable echo from ESP)
 8002dce:	197b      	adds	r3, r7, r5
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff fd3f 	bl	8002854 <sendToESP>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <getESPtime+0x118>)
 8002dda:	0011      	movs	r1, r2
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7ff fd19 	bl	8002814 <debugPrintln>
debugPrintln(&huart2, "\n"); // Message for debugging
 8002de2:	4a32      	ldr	r2, [pc, #200]	; (8002eac <getESPtime+0x12c>)
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <getESPtime+0x118>)
 8002de6:	0011      	movs	r1, r2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff fd13 	bl	8002814 <debugPrintln>
//Check if there was an error
strcpy(response, sendToESP(setNTP));
 8002dee:	193b      	adds	r3, r7, r4
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7ff fd2f 	bl	8002854 <sendToESP>
 8002df6:	0002      	movs	r2, r0
 8002df8:	2460      	movs	r4, #96	; 0x60
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	0011      	movs	r1, r2
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f005 fa46 	bl	8008290 <strcpy>
if (strstr(response, "ERROR") != NULL)
 8002e04:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <getESPtime+0x130>)
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	0011      	movs	r1, r2
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f005 fa48 	bl	80082a0 <strstr>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d008      	beq.n	8002e26 <getESPtime+0xa6>
{
	intError = 1; //change error code to '1' for ESP related error
 8002e14:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <getESPtime+0x134>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
	debugPrintln(&huart2, "ERROR1"); // Message for debugging
 8002e1a:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <getESPtime+0x138>)
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <getESPtime+0x118>)
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7ff fcf7 	bl	8002814 <debugPrintln>
}
osDelay(100);
 8002e26:	2064      	movs	r0, #100	; 0x64
 8002e28:	f002 ffd6 	bl	8005dd8 <osDelay>
//Check if there was an error
strcpy(response, sendToESP(getDT));
 8002e2c:	2314      	movs	r3, #20
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fd0f 	bl	8002854 <sendToESP>
 8002e36:	0002      	movs	r2, r0
 8002e38:	2460      	movs	r4, #96	; 0x60
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f005 fa26 	bl	8008290 <strcpy>
if (strstr(response, "ERROR") != NULL)
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <getESPtime+0x130>)
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f005 fa28 	bl	80082a0 <strstr>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d009      	beq.n	8002e68 <getESPtime+0xe8>
{
	intError = 1; //change error code to '1' for ESP related error
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <getESPtime+0x134>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
	debugPrintln(&huart2, "ERROR1"); // Message for debugging
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <getESPtime+0x138>)
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <getESPtime+0x118>)
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7ff fcd7 	bl	8002814 <debugPrintln>
	tmp += 10;
	debugPrintln(&huart2, tmp); // Message for debugging
}
//osDelay(10000); //Delay for sending #1min
  /* USER CODE END getESPtime */
}
 8002e66:	e011      	b.n	8002e8c <getESPtime+0x10c>
	debugPrintln(&huart2, response); // Message for debugging
 8002e68:	2460      	movs	r4, #96	; 0x60
 8002e6a:	193a      	adds	r2, r7, r4
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <getESPtime+0x118>)
 8002e6e:	0011      	movs	r1, r2
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff fccf 	bl	8002814 <debugPrintln>
	char *tmp = response;
 8002e76:	193b      	adds	r3, r7, r4
 8002e78:	66fb      	str	r3, [r7, #108]	; 0x6c
	tmp += 10;
 8002e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7c:	330a      	adds	r3, #10
 8002e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
	debugPrintln(&huart2, tmp); // Message for debugging
 8002e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <getESPtime+0x118>)
 8002e84:	0011      	movs	r1, r2
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff fcc4 	bl	8002814 <debugPrintln>
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b01c      	add	sp, #112	; 0x70
 8002e92:	bdb0      	pop	{r4, r5, r7, pc}
 8002e94:	08008acc 	.word	0x08008acc
 8002e98:	20001774 	.word	0x20001774
 8002e9c:	08008af0 	.word	0x08008af0
 8002ea0:	08008b2c 	.word	0x08008b2c
 8002ea4:	08008b3c 	.word	0x08008b3c
 8002ea8:	08008ae0 	.word	0x08008ae0
 8002eac:	08008998 	.word	0x08008998
 8002eb0:	080089e0 	.word	0x080089e0
 8002eb4:	20001734 	.word	0x20001734
 8002eb8:	080089e8 	.word	0x080089e8

08002ebc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ece:	f000 fa31 	bl	8003334 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b002      	add	sp, #8
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40014800 	.word	0x40014800

08002ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee4:	b672      	cpsid	i
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <Error_Handler+0x8>
	...

08002eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_MspInit+0x50>)
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <HAL_MspInit+0x50>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	619a      	str	r2, [r3, #24]
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_MspInit+0x50>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_MspInit+0x50>)
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_MspInit+0x50>)
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	0549      	lsls	r1, r1, #21
 8002f14:	430a      	orrs	r2, r1
 8002f16:	61da      	str	r2, [r3, #28]
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_MspInit+0x50>)
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	055b      	lsls	r3, r3, #21
 8002f20:	4013      	ands	r3, r2
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002f26:	2302      	movs	r3, #2
 8002f28:	425b      	negs	r3, r3
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2103      	movs	r1, #3
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 fac8 	bl	80034c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000

08002f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b08d      	sub	sp, #52	; 0x34
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	241c      	movs	r4, #28
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	2314      	movs	r3, #20
 8002f50:	001a      	movs	r2, r3
 8002f52:	2100      	movs	r1, #0
 8002f54:	f005 f8ab 	bl	80080ae <memset>
  if(hi2c->Instance==I2C1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a38      	ldr	r2, [pc, #224]	; (8003040 <HAL_I2C_MspInit+0x100>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d132      	bne.n	8002fc8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	4b38      	ldr	r3, [pc, #224]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	02c9      	lsls	r1, r1, #11
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	615a      	str	r2, [r3, #20]
 8002f70:	4b34      	ldr	r3, [pc, #208]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	02db      	lsls	r3, r3, #11
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f7e:	0021      	movs	r1, r4
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	22c0      	movs	r2, #192	; 0xc0
 8002f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	2212      	movs	r2, #18
 8002f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f92:	187b      	adds	r3, r7, r1
 8002f94:	2203      	movs	r2, #3
 8002f96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_I2C_MspInit+0x108>)
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	0010      	movs	r0, r2
 8002fa6:	f000 fab3 	bl	8003510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8002fac:	69da      	ldr	r2, [r3, #28]
 8002fae:	4b25      	ldr	r3, [pc, #148]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0389      	lsls	r1, r1, #14
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	61da      	str	r2, [r3, #28]
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	039b      	lsls	r3, r3, #14
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002fc6:	e037      	b.n	8003038 <HAL_I2C_MspInit+0xf8>
  else if(hi2c->Instance==I2C2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1f      	ldr	r2, [pc, #124]	; (800304c <HAL_I2C_MspInit+0x10c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d132      	bne.n	8003038 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	02c9      	lsls	r1, r1, #11
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	615a      	str	r2, [r3, #20]
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	02db      	lsls	r3, r3, #11
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fee:	211c      	movs	r1, #28
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	22c0      	movs	r2, #192	; 0xc0
 8002ff4:	0112      	lsls	r2, r2, #4
 8002ff6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	2212      	movs	r2, #18
 8002ffc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	187b      	adds	r3, r7, r1
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003004:	187b      	adds	r3, r7, r1
 8003006:	2203      	movs	r2, #3
 8003008:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800300a:	187b      	adds	r3, r7, r1
 800300c:	2201      	movs	r2, #1
 800300e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003010:	187b      	adds	r3, r7, r1
 8003012:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <HAL_I2C_MspInit+0x108>)
 8003014:	0019      	movs	r1, r3
 8003016:	0010      	movs	r0, r2
 8003018:	f000 fa7a 	bl	8003510 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_I2C_MspInit+0x104>)
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_I2C_MspInit+0x104>)
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	03c9      	lsls	r1, r1, #15
 8003026:	430a      	orrs	r2, r1
 8003028:	61da      	str	r2, [r3, #28]
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_I2C_MspInit+0x104>)
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	03db      	lsls	r3, r3, #15
 8003032:	4013      	ands	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b00d      	add	sp, #52	; 0x34
 800303e:	bd90      	pop	{r4, r7, pc}
 8003040:	40005400 	.word	0x40005400
 8003044:	40021000 	.word	0x40021000
 8003048:	48000400 	.word	0x48000400
 800304c:	40005800 	.word	0x40005800

08003050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b08d      	sub	sp, #52	; 0x34
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	241c      	movs	r4, #28
 800305a:	193b      	adds	r3, r7, r4
 800305c:	0018      	movs	r0, r3
 800305e:	2314      	movs	r3, #20
 8003060:	001a      	movs	r2, r3
 8003062:	2100      	movs	r1, #0
 8003064:	f005 f823 	bl	80080ae <memset>
  if(huart->Instance==USART1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a39      	ldr	r2, [pc, #228]	; (8003154 <HAL_UART_MspInit+0x104>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d134      	bne.n	80030dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003072:	4b39      	ldr	r3, [pc, #228]	; (8003158 <HAL_UART_MspInit+0x108>)
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_UART_MspInit+0x108>)
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	01c9      	lsls	r1, r1, #7
 800307c:	430a      	orrs	r2, r1
 800307e:	619a      	str	r2, [r3, #24]
 8003080:	4b35      	ldr	r3, [pc, #212]	; (8003158 <HAL_UART_MspInit+0x108>)
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	01db      	lsls	r3, r3, #7
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b32      	ldr	r3, [pc, #200]	; (8003158 <HAL_UART_MspInit+0x108>)
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	4b31      	ldr	r3, [pc, #196]	; (8003158 <HAL_UART_MspInit+0x108>)
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	0289      	lsls	r1, r1, #10
 8003098:	430a      	orrs	r2, r1
 800309a:	615a      	str	r2, [r3, #20]
 800309c:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_UART_MspInit+0x108>)
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	4013      	ands	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030aa:	193b      	adds	r3, r7, r4
 80030ac:	22c0      	movs	r2, #192	; 0xc0
 80030ae:	00d2      	lsls	r2, r2, #3
 80030b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	0021      	movs	r1, r4
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2202      	movs	r2, #2
 80030b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2203      	movs	r2, #3
 80030c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	2201      	movs	r2, #1
 80030ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	187a      	adds	r2, r7, r1
 80030ce:	2390      	movs	r3, #144	; 0x90
 80030d0:	05db      	lsls	r3, r3, #23
 80030d2:	0011      	movs	r1, r2
 80030d4:	0018      	movs	r0, r3
 80030d6:	f000 fa1b 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030da:	e037      	b.n	800314c <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_UART_MspInit+0x10c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d132      	bne.n	800314c <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030e6:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_UART_MspInit+0x108>)
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_UART_MspInit+0x108>)
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	0289      	lsls	r1, r1, #10
 80030f0:	430a      	orrs	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
 80030f4:	4b18      	ldr	r3, [pc, #96]	; (8003158 <HAL_UART_MspInit+0x108>)
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	029b      	lsls	r3, r3, #10
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	4b15      	ldr	r3, [pc, #84]	; (8003158 <HAL_UART_MspInit+0x108>)
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <HAL_UART_MspInit+0x108>)
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0289      	lsls	r1, r1, #10
 800310c:	430a      	orrs	r2, r1
 800310e:	615a      	str	r2, [r3, #20]
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <HAL_UART_MspInit+0x108>)
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	029b      	lsls	r3, r3, #10
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800311e:	211c      	movs	r1, #28
 8003120:	187b      	adds	r3, r7, r1
 8003122:	220c      	movs	r2, #12
 8003124:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	187b      	adds	r3, r7, r1
 8003128:	2202      	movs	r2, #2
 800312a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	187b      	adds	r3, r7, r1
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	187b      	adds	r3, r7, r1
 8003134:	2200      	movs	r2, #0
 8003136:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003138:	187b      	adds	r3, r7, r1
 800313a:	2201      	movs	r2, #1
 800313c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313e:	187a      	adds	r2, r7, r1
 8003140:	2390      	movs	r3, #144	; 0x90
 8003142:	05db      	lsls	r3, r3, #23
 8003144:	0011      	movs	r1, r2
 8003146:	0018      	movs	r0, r3
 8003148:	f000 f9e2 	bl	8003510 <HAL_GPIO_Init>
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b00d      	add	sp, #52	; 0x34
 8003152:	bd90      	pop	{r4, r7, pc}
 8003154:	40013800 	.word	0x40013800
 8003158:	40021000 	.word	0x40021000
 800315c:	40004400 	.word	0x40004400

08003160 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	0019      	movs	r1, r3
 8003176:	2016      	movs	r0, #22
 8003178:	f000 f9a4 	bl	80034c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800317c:	2016      	movs	r0, #22
 800317e:	f000 f9b6 	bl	80034ee <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_InitTick+0xa8>)
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <HAL_InitTick+0xa8>)
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	02c9      	lsls	r1, r1, #11
 800318c:	430a      	orrs	r2, r1
 800318e:	619a      	str	r2, [r3, #24]
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_InitTick+0xa8>)
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	02db      	lsls	r3, r3, #11
 8003198:	4013      	ands	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800319e:	230c      	movs	r3, #12
 80031a0:	18fa      	adds	r2, r7, r3
 80031a2:	2310      	movs	r3, #16
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	0011      	movs	r1, r2
 80031a8:	0018      	movs	r0, r3
 80031aa:	f001 fce1 	bl	8004b70 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80031ae:	f001 fcc9 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 80031b2:	0003      	movs	r3, r0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	4914      	ldr	r1, [pc, #80]	; (800320c <HAL_InitTick+0xac>)
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7fc ffb6 	bl	800012c <__udivsi3>
 80031c0:	0003      	movs	r3, r0
 80031c2:	3b01      	subs	r3, #1
 80031c4:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_InitTick+0xb0>)
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <HAL_InitTick+0xb4>)
 80031ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_InitTick+0xb0>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <HAL_InitTick+0xb8>)
 80031d0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_InitTick+0xb0>)
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_InitTick+0xb0>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_InitTick+0xb0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_InitTick+0xb0>)
 80031e6:	0018      	movs	r0, r3
 80031e8:	f001 fdba 	bl	8004d60 <HAL_TIM_Base_Init>
 80031ec:	1e03      	subs	r3, r0, #0
 80031ee:	d105      	bne.n	80031fc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80031f0:	4b07      	ldr	r3, [pc, #28]	; (8003210 <HAL_InitTick+0xb0>)
 80031f2:	0018      	movs	r0, r3
 80031f4:	f001 fe0c 	bl	8004e10 <HAL_TIM_Base_Start_IT>
 80031f8:	0003      	movs	r3, r0
 80031fa:	e000      	b.n	80031fe <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b00a      	add	sp, #40	; 0x28
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	40021000 	.word	0x40021000
 800320c:	000f4240 	.word	0x000f4240
 8003210:	200017fc 	.word	0x200017fc
 8003214:	40014800 	.word	0x40014800
 8003218:	000003e7 	.word	0x000003e7

0800321c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <NMI_Handler+0x4>

08003222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003226:	e7fe      	b.n	8003226 <HardFault_Handler+0x4>

08003228 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <TIM17_IRQHandler+0x14>)
 800322e:	0018      	movs	r0, r3
 8003230:	f001 fe3a 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	200017fc 	.word	0x200017fc

08003240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <_sbrk+0x5c>)
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <_sbrk+0x60>)
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <_sbrk+0x64>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <_sbrk+0x64>)
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <_sbrk+0x68>)
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <_sbrk+0x64>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d207      	bcs.n	8003280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003270:	f004 fed6 	bl	8008020 <__errno>
 8003274:	0003      	movs	r3, r0
 8003276:	220c      	movs	r2, #12
 8003278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800327a:	2301      	movs	r3, #1
 800327c:	425b      	negs	r3, r3
 800327e:	e009      	b.n	8003294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <_sbrk+0x64>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	18d2      	adds	r2, r2, r3
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <_sbrk+0x64>)
 8003290:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b006      	add	sp, #24
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20002000 	.word	0x20002000
 80032a0:	00000400 	.word	0x00000400
 80032a4:	2000012c 	.word	0x2000012c
 80032a8:	20001898 	.word	0x20001898

080032ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032b8:	480d      	ldr	r0, [pc, #52]	; (80032f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032bc:	480d      	ldr	r0, [pc, #52]	; (80032f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80032be:	490e      	ldr	r1, [pc, #56]	; (80032f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032c0:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <LoopForever+0xe>)
  movs r3, #0
 80032c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c4:	e002      	b.n	80032cc <LoopCopyDataInit>

080032c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ca:	3304      	adds	r3, #4

080032cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d0:	d3f9      	bcc.n	80032c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032d2:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032d4:	4c0b      	ldr	r4, [pc, #44]	; (8003304 <LoopForever+0x16>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d8:	e001      	b.n	80032de <LoopFillZerobss>

080032da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032dc:	3204      	adds	r2, #4

080032de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e0:	d3fb      	bcc.n	80032da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032e2:	f7ff ffe3 	bl	80032ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80032e6:	f004 fea1 	bl	800802c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032ea:	f7ff f871 	bl	80023d0 <main>

080032ee <LoopForever>:

LoopForever:
    b LoopForever
 80032ee:	e7fe      	b.n	80032ee <LoopForever>
  ldr   r0, =_estack
 80032f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80032fc:	08008cac 	.word	0x08008cac
  ldr r2, =_sbss
 8003300:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003304:	20001898 	.word	0x20001898

08003308 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003308:	e7fe      	b.n	8003308 <ADC1_IRQHandler>
	...

0800330c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_Init+0x24>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_Init+0x24>)
 8003316:	2110      	movs	r1, #16
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800331c:	2003      	movs	r0, #3
 800331e:	f7ff ff1f 	bl	8003160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003322:	f7ff fde3 	bl	8002eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	40022000 	.word	0x40022000

08003334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_IncTick+0x1c>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	001a      	movs	r2, r3
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_IncTick+0x20>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	18d2      	adds	r2, r2, r3
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_IncTick+0x20>)
 8003346:	601a      	str	r2, [r3, #0]
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	20000004 	.word	0x20000004
 8003354:	20001844 	.word	0x20001844

08003358 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  return uwTick;
 800335c:	4b02      	ldr	r3, [pc, #8]	; (8003368 <HAL_GetTick+0x10>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	20001844 	.word	0x20001844

0800336c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003374:	f7ff fff0 	bl	8003358 <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	d005      	beq.n	8003392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_Delay+0x44>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	001a      	movs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	189b      	adds	r3, r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	f7ff ffe0 	bl	8003358 <HAL_GetTick>
 8003398:	0002      	movs	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d8f7      	bhi.n	8003394 <HAL_Delay+0x28>
  {
  }
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	20000004 	.word	0x20000004

080033b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	0002      	movs	r2, r0
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b7f      	cmp	r3, #127	; 0x7f
 80033c6:	d809      	bhi.n	80033dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	001a      	movs	r2, r3
 80033ce:	231f      	movs	r3, #31
 80033d0:	401a      	ands	r2, r3
 80033d2:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_EnableIRQ+0x30>)
 80033d4:	2101      	movs	r1, #1
 80033d6:	4091      	lsls	r1, r2
 80033d8:	000a      	movs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
  }
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	0002      	movs	r2, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b7f      	cmp	r3, #127	; 0x7f
 80033fc:	d828      	bhi.n	8003450 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033fe:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <__NVIC_SetPriority+0xd4>)
 8003400:	1dfb      	adds	r3, r7, #7
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b25b      	sxtb	r3, r3
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	33c0      	adds	r3, #192	; 0xc0
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	589b      	ldr	r3, [r3, r2]
 800340e:	1dfa      	adds	r2, r7, #7
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	0011      	movs	r1, r2
 8003414:	2203      	movs	r2, #3
 8003416:	400a      	ands	r2, r1
 8003418:	00d2      	lsls	r2, r2, #3
 800341a:	21ff      	movs	r1, #255	; 0xff
 800341c:	4091      	lsls	r1, r2
 800341e:	000a      	movs	r2, r1
 8003420:	43d2      	mvns	r2, r2
 8003422:	401a      	ands	r2, r3
 8003424:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	019b      	lsls	r3, r3, #6
 800342a:	22ff      	movs	r2, #255	; 0xff
 800342c:	401a      	ands	r2, r3
 800342e:	1dfb      	adds	r3, r7, #7
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	0018      	movs	r0, r3
 8003434:	2303      	movs	r3, #3
 8003436:	4003      	ands	r3, r0
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800343c:	481f      	ldr	r0, [pc, #124]	; (80034bc <__NVIC_SetPriority+0xd4>)
 800343e:	1dfb      	adds	r3, r7, #7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b25b      	sxtb	r3, r3
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	430a      	orrs	r2, r1
 8003448:	33c0      	adds	r3, #192	; 0xc0
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800344e:	e031      	b.n	80034b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <__NVIC_SetPriority+0xd8>)
 8003452:	1dfb      	adds	r3, r7, #7
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	0019      	movs	r1, r3
 8003458:	230f      	movs	r3, #15
 800345a:	400b      	ands	r3, r1
 800345c:	3b08      	subs	r3, #8
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	3306      	adds	r3, #6
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	18d3      	adds	r3, r2, r3
 8003466:	3304      	adds	r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1dfa      	adds	r2, r7, #7
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	0011      	movs	r1, r2
 8003470:	2203      	movs	r2, #3
 8003472:	400a      	ands	r2, r1
 8003474:	00d2      	lsls	r2, r2, #3
 8003476:	21ff      	movs	r1, #255	; 0xff
 8003478:	4091      	lsls	r1, r2
 800347a:	000a      	movs	r2, r1
 800347c:	43d2      	mvns	r2, r2
 800347e:	401a      	ands	r2, r3
 8003480:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	22ff      	movs	r2, #255	; 0xff
 8003488:	401a      	ands	r2, r3
 800348a:	1dfb      	adds	r3, r7, #7
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	0018      	movs	r0, r3
 8003490:	2303      	movs	r3, #3
 8003492:	4003      	ands	r3, r0
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003498:	4809      	ldr	r0, [pc, #36]	; (80034c0 <__NVIC_SetPriority+0xd8>)
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	001c      	movs	r4, r3
 80034a0:	230f      	movs	r3, #15
 80034a2:	4023      	ands	r3, r4
 80034a4:	3b08      	subs	r3, #8
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	430a      	orrs	r2, r1
 80034aa:	3306      	adds	r3, #6
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	18c3      	adds	r3, r0, r3
 80034b0:	3304      	adds	r3, #4
 80034b2:	601a      	str	r2, [r3, #0]
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b003      	add	sp, #12
 80034ba:	bd90      	pop	{r4, r7, pc}
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	210f      	movs	r1, #15
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	1c02      	adds	r2, r0, #0
 80034d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	0011      	movs	r1, r2
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7ff ff81 	bl	80033e8 <__NVIC_SetPriority>
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b004      	add	sp, #16
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	0002      	movs	r2, r0
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b25b      	sxtb	r3, r3
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff ff57 	bl	80033b4 <__NVIC_EnableIRQ>
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351e:	e14f      	b.n	80037c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2101      	movs	r1, #1
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4091      	lsls	r1, r2
 800352a:	000a      	movs	r2, r1
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d100      	bne.n	8003538 <HAL_GPIO_Init+0x28>
 8003536:	e140      	b.n	80037ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2203      	movs	r2, #3
 800353e:	4013      	ands	r3, r2
 8003540:	2b01      	cmp	r3, #1
 8003542:	d005      	beq.n	8003550 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2203      	movs	r2, #3
 800354a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800354c:	2b02      	cmp	r3, #2
 800354e:	d130      	bne.n	80035b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	2203      	movs	r2, #3
 800355c:	409a      	lsls	r2, r3
 800355e:	0013      	movs	r3, r2
 8003560:	43da      	mvns	r2, r3
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	409a      	lsls	r2, r3
 8003572:	0013      	movs	r3, r2
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003586:	2201      	movs	r2, #1
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
 800358c:	0013      	movs	r3, r2
 800358e:	43da      	mvns	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	2201      	movs	r2, #1
 800359e:	401a      	ands	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	409a      	lsls	r2, r3
 80035a4:	0013      	movs	r3, r2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2203      	movs	r2, #3
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d017      	beq.n	80035ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	409a      	lsls	r2, r3
 80035cc:	0013      	movs	r3, r2
 80035ce:	43da      	mvns	r2, r3
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	409a      	lsls	r2, r3
 80035e0:	0013      	movs	r3, r2
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2203      	movs	r2, #3
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d123      	bne.n	8003642 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	08da      	lsrs	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3208      	adds	r2, #8
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	58d3      	ldr	r3, [r2, r3]
 8003606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2207      	movs	r2, #7
 800360c:	4013      	ands	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	220f      	movs	r2, #15
 8003612:	409a      	lsls	r2, r3
 8003614:	0013      	movs	r3, r2
 8003616:	43da      	mvns	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2107      	movs	r1, #7
 8003626:	400b      	ands	r3, r1
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	409a      	lsls	r2, r3
 800362c:	0013      	movs	r3, r2
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	08da      	lsrs	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	0092      	lsls	r2, r2, #2
 800363e:	6939      	ldr	r1, [r7, #16]
 8003640:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	409a      	lsls	r2, r3
 8003650:	0013      	movs	r3, r2
 8003652:	43da      	mvns	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2203      	movs	r2, #3
 8003660:	401a      	ands	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	409a      	lsls	r2, r3
 8003668:	0013      	movs	r3, r2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	23c0      	movs	r3, #192	; 0xc0
 800367c:	029b      	lsls	r3, r3, #10
 800367e:	4013      	ands	r3, r2
 8003680:	d100      	bne.n	8003684 <HAL_GPIO_Init+0x174>
 8003682:	e09a      	b.n	80037ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003684:	4b54      	ldr	r3, [pc, #336]	; (80037d8 <HAL_GPIO_Init+0x2c8>)
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <HAL_GPIO_Init+0x2c8>)
 800368a:	2101      	movs	r1, #1
 800368c:	430a      	orrs	r2, r1
 800368e:	619a      	str	r2, [r3, #24]
 8003690:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <HAL_GPIO_Init+0x2c8>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800369c:	4a4f      	ldr	r2, [pc, #316]	; (80037dc <HAL_GPIO_Init+0x2cc>)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	3302      	adds	r3, #2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	589b      	ldr	r3, [r3, r2]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2203      	movs	r2, #3
 80036ae:	4013      	ands	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	220f      	movs	r2, #15
 80036b4:	409a      	lsls	r2, r3
 80036b6:	0013      	movs	r3, r2
 80036b8:	43da      	mvns	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	2390      	movs	r3, #144	; 0x90
 80036c4:	05db      	lsls	r3, r3, #23
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d013      	beq.n	80036f2 <HAL_GPIO_Init+0x1e2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a44      	ldr	r2, [pc, #272]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00d      	beq.n	80036ee <HAL_GPIO_Init+0x1de>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a43      	ldr	r2, [pc, #268]	; (80037e4 <HAL_GPIO_Init+0x2d4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <HAL_GPIO_Init+0x1da>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a42      	ldr	r2, [pc, #264]	; (80037e8 <HAL_GPIO_Init+0x2d8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_GPIO_Init+0x1d6>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e006      	b.n	80036f4 <HAL_GPIO_Init+0x1e4>
 80036e6:	2305      	movs	r3, #5
 80036e8:	e004      	b.n	80036f4 <HAL_GPIO_Init+0x1e4>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e002      	b.n	80036f4 <HAL_GPIO_Init+0x1e4>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_GPIO_Init+0x1e4>
 80036f2:	2300      	movs	r3, #0
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	2103      	movs	r1, #3
 80036f8:	400a      	ands	r2, r1
 80036fa:	0092      	lsls	r2, r2, #2
 80036fc:	4093      	lsls	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003704:	4935      	ldr	r1, [pc, #212]	; (80037dc <HAL_GPIO_Init+0x2cc>)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	3302      	adds	r3, #2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <HAL_GPIO_Init+0x2dc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43da      	mvns	r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	025b      	lsls	r3, r3, #9
 800372a:	4013      	ands	r3, r2
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003736:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_GPIO_Init+0x2dc>)
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800373c:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <HAL_GPIO_Init+0x2dc>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	43da      	mvns	r2, r3
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	029b      	lsls	r3, r3, #10
 8003754:	4013      	ands	r3, r2
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_GPIO_Init+0x2dc>)
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003766:	4b21      	ldr	r3, [pc, #132]	; (80037ec <HAL_GPIO_Init+0x2dc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	43da      	mvns	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	035b      	lsls	r3, r3, #13
 800377e:	4013      	ands	r3, r2
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <HAL_GPIO_Init+0x2dc>)
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <HAL_GPIO_Init+0x2dc>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	43da      	mvns	r2, r3
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	039b      	lsls	r3, r3, #14
 80037a8:	4013      	ands	r3, r2
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_GPIO_Init+0x2dc>)
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3301      	adds	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	40da      	lsrs	r2, r3
 80037c8:	1e13      	subs	r3, r2, #0
 80037ca:	d000      	beq.n	80037ce <HAL_GPIO_Init+0x2be>
 80037cc:	e6a8      	b.n	8003520 <HAL_GPIO_Init+0x10>
  } 
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b006      	add	sp, #24
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40010000 	.word	0x40010000
 80037e0:	48000400 	.word	0x48000400
 80037e4:	48000800 	.word	0x48000800
 80037e8:	48000c00 	.word	0x48000c00
 80037ec:	40010400 	.word	0x40010400

080037f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	0008      	movs	r0, r1
 80037fa:	0011      	movs	r1, r2
 80037fc:	1cbb      	adds	r3, r7, #2
 80037fe:	1c02      	adds	r2, r0, #0
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	1c7b      	adds	r3, r7, #1
 8003804:	1c0a      	adds	r2, r1, #0
 8003806:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003808:	1c7b      	adds	r3, r7, #1
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003810:	1cbb      	adds	r3, r7, #2
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003818:	e003      	b.n	8003822 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800381a:	1cbb      	adds	r3, r7, #2
 800381c:	881a      	ldrh	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b002      	add	sp, #8
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e082      	b.n	8003944 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2241      	movs	r2, #65	; 0x41
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff fb73 	bl	8002f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2241      	movs	r2, #65	; 0x41
 800385e:	2124      	movs	r1, #36	; 0x24
 8003860:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2101      	movs	r1, #1
 800386e:	438a      	bics	r2, r1
 8003870:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4934      	ldr	r1, [pc, #208]	; (800394c <HAL_I2C_Init+0x120>)
 800387c:	400a      	ands	r2, r1
 800387e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4931      	ldr	r1, [pc, #196]	; (8003950 <HAL_I2C_Init+0x124>)
 800388c:	400a      	ands	r2, r1
 800388e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d108      	bne.n	80038aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2180      	movs	r1, #128	; 0x80
 80038a2:	0209      	lsls	r1, r1, #8
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	e007      	b.n	80038ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2184      	movs	r1, #132	; 0x84
 80038b4:	0209      	lsls	r1, r1, #8
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d104      	bne.n	80038cc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	491f      	ldr	r1, [pc, #124]	; (8003954 <HAL_I2C_Init+0x128>)
 80038d8:	430a      	orrs	r2, r1
 80038da:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	491a      	ldr	r1, [pc, #104]	; (8003950 <HAL_I2C_Init+0x124>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69d9      	ldr	r1, [r3, #28]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1a      	ldr	r2, [r3, #32]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2101      	movs	r1, #1
 8003922:	430a      	orrs	r2, r1
 8003924:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2241      	movs	r2, #65	; 0x41
 8003930:	2120      	movs	r1, #32
 8003932:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2242      	movs	r2, #66	; 0x42
 800393e:	2100      	movs	r1, #0
 8003940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b002      	add	sp, #8
 800394a:	bd80      	pop	{r7, pc}
 800394c:	f0ffffff 	.word	0xf0ffffff
 8003950:	ffff7fff 	.word	0xffff7fff
 8003954:	02008000 	.word	0x02008000

08003958 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	0008      	movs	r0, r1
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	0019      	movs	r1, r3
 8003966:	230a      	movs	r3, #10
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	1c02      	adds	r2, r0, #0
 800396c:	801a      	strh	r2, [r3, #0]
 800396e:	2308      	movs	r3, #8
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	1c0a      	adds	r2, r1, #0
 8003974:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2241      	movs	r2, #65	; 0x41
 800397a:	5c9b      	ldrb	r3, [r3, r2]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	d000      	beq.n	8003984 <HAL_I2C_Master_Transmit+0x2c>
 8003982:	e0e7      	b.n	8003b54 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2240      	movs	r2, #64	; 0x40
 8003988:	5c9b      	ldrb	r3, [r3, r2]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_I2C_Master_Transmit+0x3a>
 800398e:	2302      	movs	r3, #2
 8003990:	e0e1      	b.n	8003b56 <HAL_I2C_Master_Transmit+0x1fe>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	2101      	movs	r1, #1
 8003998:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800399a:	f7ff fcdd 	bl	8003358 <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	0219      	lsls	r1, r3, #8
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2319      	movs	r3, #25
 80039ae:	2201      	movs	r2, #1
 80039b0:	f000 fa04 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0cc      	b.n	8003b56 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2241      	movs	r2, #65	; 0x41
 80039c0:	2121      	movs	r1, #33	; 0x21
 80039c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2242      	movs	r2, #66	; 0x42
 80039c8:	2110      	movs	r1, #16
 80039ca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2208      	movs	r2, #8
 80039dc:	18ba      	adds	r2, r7, r2
 80039de:	8812      	ldrh	r2, [r2, #0]
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2bff      	cmp	r3, #255	; 0xff
 80039f0:	d911      	bls.n	8003a16 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	22ff      	movs	r2, #255	; 0xff
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	045c      	lsls	r4, r3, #17
 8003a02:	230a      	movs	r3, #10
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	8819      	ldrh	r1, [r3, #0]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	4b55      	ldr	r3, [pc, #340]	; (8003b60 <HAL_I2C_Master_Transmit+0x208>)
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	0023      	movs	r3, r4
 8003a10:	f000 fb74 	bl	80040fc <I2C_TransferConfig>
 8003a14:	e075      	b.n	8003b02 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	049c      	lsls	r4, r3, #18
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	8819      	ldrh	r1, [r3, #0]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	4b4b      	ldr	r3, [pc, #300]	; (8003b60 <HAL_I2C_Master_Transmit+0x208>)
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	0023      	movs	r3, r4
 8003a38:	f000 fb60 	bl	80040fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a3c:	e061      	b.n	8003b02 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f9f8 	bl	8003e3a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e081      	b.n	8003b56 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d03a      	beq.n	8003b02 <HAL_I2C_Master_Transmit+0x1aa>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d136      	bne.n	8003b02 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	f000 f98b 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003aa6:	1e03      	subs	r3, r0, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e053      	b.n	8003b56 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2bff      	cmp	r3, #255	; 0xff
 8003ab6:	d911      	bls.n	8003adc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	22ff      	movs	r2, #255	; 0xff
 8003abc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	045c      	lsls	r4, r3, #17
 8003ac8:	230a      	movs	r3, #10
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	8819      	ldrh	r1, [r3, #0]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	0023      	movs	r3, r4
 8003ad6:	f000 fb11 	bl	80040fc <I2C_TransferConfig>
 8003ada:	e012      	b.n	8003b02 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	049c      	lsls	r4, r3, #18
 8003af0:	230a      	movs	r3, #10
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	8819      	ldrh	r1, [r3, #0]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	2300      	movs	r3, #0
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	0023      	movs	r3, r4
 8003afe:	f000 fafd 	bl	80040fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d198      	bne.n	8003a3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 f9d0 	bl	8003eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e01a      	b.n	8003b56 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2220      	movs	r2, #32
 8003b26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	490c      	ldr	r1, [pc, #48]	; (8003b64 <HAL_I2C_Master_Transmit+0x20c>)
 8003b34:	400a      	ands	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2241      	movs	r2, #65	; 0x41
 8003b3c:	2120      	movs	r1, #32
 8003b3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2242      	movs	r2, #66	; 0x42
 8003b44:	2100      	movs	r1, #0
 8003b46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2240      	movs	r2, #64	; 0x40
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b007      	add	sp, #28
 8003b5c:	bd90      	pop	{r4, r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	80002000 	.word	0x80002000
 8003b64:	fe00e800 	.word	0xfe00e800

08003b68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b089      	sub	sp, #36	; 0x24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	0008      	movs	r0, r1
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	0019      	movs	r1, r3
 8003b76:	230a      	movs	r3, #10
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	1c02      	adds	r2, r0, #0
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	2308      	movs	r3, #8
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	1c0a      	adds	r2, r1, #0
 8003b84:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2241      	movs	r2, #65	; 0x41
 8003b8a:	5c9b      	ldrb	r3, [r3, r2]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d000      	beq.n	8003b94 <HAL_I2C_Master_Receive+0x2c>
 8003b92:	e0e8      	b.n	8003d66 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	5c9b      	ldrb	r3, [r3, r2]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_I2C_Master_Receive+0x3a>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e0e2      	b.n	8003d68 <HAL_I2C_Master_Receive+0x200>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2240      	movs	r2, #64	; 0x40
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003baa:	f7ff fbd5 	bl	8003358 <HAL_GetTick>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	0219      	lsls	r1, r3, #8
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2319      	movs	r3, #25
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f000 f8fc 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003bc4:	1e03      	subs	r3, r0, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0cd      	b.n	8003d68 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2241      	movs	r2, #65	; 0x41
 8003bd0:	2122      	movs	r1, #34	; 0x22
 8003bd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2242      	movs	r2, #66	; 0x42
 8003bd8:	2110      	movs	r1, #16
 8003bda:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2208      	movs	r2, #8
 8003bec:	18ba      	adds	r2, r7, r2
 8003bee:	8812      	ldrh	r2, [r2, #0]
 8003bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2bff      	cmp	r3, #255	; 0xff
 8003c00:	d911      	bls.n	8003c26 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	22ff      	movs	r2, #255	; 0xff
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	045c      	lsls	r4, r3, #17
 8003c12:	230a      	movs	r3, #10
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	8819      	ldrh	r1, [r3, #0]
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <HAL_I2C_Master_Receive+0x208>)
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	0023      	movs	r3, r4
 8003c20:	f000 fa6c 	bl	80040fc <I2C_TransferConfig>
 8003c24:	e076      	b.n	8003d14 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	049c      	lsls	r4, r3, #18
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	8819      	ldrh	r1, [r3, #0]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	4b4b      	ldr	r3, [pc, #300]	; (8003d70 <HAL_I2C_Master_Receive+0x208>)
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	0023      	movs	r3, r4
 8003c48:	f000 fa58 	bl	80040fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003c4c:	e062      	b.n	8003d14 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f96b 	bl	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c5a:	1e03      	subs	r3, r0, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e082      	b.n	8003d68 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d03a      	beq.n	8003d14 <HAL_I2C_Master_Receive+0x1ac>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d136      	bne.n	8003d14 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	0013      	movs	r3, r2
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2180      	movs	r1, #128	; 0x80
 8003cb4:	f000 f882 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e053      	b.n	8003d68 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2bff      	cmp	r3, #255	; 0xff
 8003cc8:	d911      	bls.n	8003cee <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	045c      	lsls	r4, r3, #17
 8003cda:	230a      	movs	r3, #10
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	8819      	ldrh	r1, [r3, #0]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	0023      	movs	r3, r4
 8003ce8:	f000 fa08 	bl	80040fc <I2C_TransferConfig>
 8003cec:	e012      	b.n	8003d14 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	049c      	lsls	r4, r3, #18
 8003d02:	230a      	movs	r3, #10
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	8819      	ldrh	r1, [r3, #0]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	0023      	movs	r3, r4
 8003d10:	f000 f9f4 	bl	80040fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d197      	bne.n	8003c4e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 f8c7 	bl	8003eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d2a:	1e03      	subs	r3, r0, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e01a      	b.n	8003d68 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2220      	movs	r2, #32
 8003d38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	490b      	ldr	r1, [pc, #44]	; (8003d74 <HAL_I2C_Master_Receive+0x20c>)
 8003d46:	400a      	ands	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2241      	movs	r2, #65	; 0x41
 8003d4e:	2120      	movs	r1, #32
 8003d50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2242      	movs	r2, #66	; 0x42
 8003d56:	2100      	movs	r1, #0
 8003d58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2240      	movs	r2, #64	; 0x40
 8003d5e:	2100      	movs	r1, #0
 8003d60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
  }
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b007      	add	sp, #28
 8003d6e:	bd90      	pop	{r4, r7, pc}
 8003d70:	80002400 	.word	0x80002400
 8003d74:	fe00e800 	.word	0xfe00e800

08003d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2202      	movs	r2, #2
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d103      	bne.n	8003d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d007      	beq.n	8003db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	430a      	orrs	r2, r1
 8003db2:	619a      	str	r2, [r3, #24]
  }
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b002      	add	sp, #8
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	1dfb      	adds	r3, r7, #7
 8003dca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dcc:	e021      	b.n	8003e12 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	d01e      	beq.n	8003e12 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd4:	f7ff fac0 	bl	8003358 <HAL_GetTick>
 8003dd8:	0002      	movs	r2, r0
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d113      	bne.n	8003e12 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	2220      	movs	r2, #32
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2241      	movs	r2, #65	; 0x41
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2242      	movs	r2, #66	; 0x42
 8003e02:	2100      	movs	r1, #0
 8003e04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2240      	movs	r2, #64	; 0x40
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00f      	b.n	8003e32 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	425a      	negs	r2, r3
 8003e22:	4153      	adcs	r3, r2
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	001a      	movs	r2, r3
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d0ce      	beq.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	0018      	movs	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b004      	add	sp, #16
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e46:	e02b      	b.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f000 f8da 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003e54:	1e03      	subs	r3, r0, #0
 8003e56:	d001      	beq.n	8003e5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e029      	b.n	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	d01e      	beq.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e62:	f7ff fa79 	bl	8003358 <HAL_GetTick>
 8003e66:	0002      	movs	r2, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d113      	bne.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2241      	movs	r2, #65	; 0x41
 8003e88:	2120      	movs	r1, #32
 8003e8a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2242      	movs	r2, #66	; 0x42
 8003e90:	2100      	movs	r1, #0
 8003e92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2240      	movs	r2, #64	; 0x40
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d1cc      	bne.n	8003e48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b004      	add	sp, #16
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec4:	e028      	b.n	8003f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f89b 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003ed2:	1e03      	subs	r3, r0, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e026      	b.n	8003f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7ff fa3d 	bl	8003358 <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d113      	bne.n	8003f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2241      	movs	r2, #65	; 0x41
 8003f00:	2120      	movs	r1, #32
 8003f02:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2242      	movs	r2, #66	; 0x42
 8003f08:	2100      	movs	r1, #0
 8003f0a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	2100      	movs	r1, #0
 8003f12:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e007      	b.n	8003f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d1cf      	bne.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b004      	add	sp, #16
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f3c:	e055      	b.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f000 f85f 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e053      	b.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d129      	bne.n	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2204      	movs	r2, #4
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d105      	bne.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e03f      	b.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	491d      	ldr	r1, [pc, #116]	; (8004004 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2241      	movs	r2, #65	; 0x41
 8003f9c:	2120      	movs	r1, #32
 8003f9e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2242      	movs	r2, #66	; 0x42
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2240      	movs	r2, #64	; 0x40
 8003fac:	2100      	movs	r1, #0
 8003fae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e022      	b.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb4:	f7ff f9d0 	bl	8003358 <HAL_GetTick>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d302      	bcc.n	8003fca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	2220      	movs	r2, #32
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2241      	movs	r2, #65	; 0x41
 8003fda:	2120      	movs	r1, #32
 8003fdc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2240      	movs	r2, #64	; 0x40
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e007      	b.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d1a2      	bne.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b004      	add	sp, #16
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	fe00e800 	.word	0xfe00e800

08004008 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2210      	movs	r2, #16
 800401c:	4013      	ands	r3, r2
 800401e:	2b10      	cmp	r3, #16
 8004020:	d164      	bne.n	80040ec <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	049b      	lsls	r3, r3, #18
 800402c:	401a      	ands	r2, r3
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	049b      	lsls	r3, r3, #18
 8004032:	429a      	cmp	r2, r3
 8004034:	d02b      	beq.n	800408e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2180      	movs	r1, #128	; 0x80
 8004042:	01c9      	lsls	r1, r1, #7
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004048:	e021      	b.n	800408e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3301      	adds	r3, #1
 800404e:	d01e      	beq.n	800408e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004050:	f7ff f982 	bl	8003358 <HAL_GetTick>
 8004054:	0002      	movs	r2, r0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	d302      	bcc.n	8004066 <I2C_IsAcknowledgeFailed+0x5e>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d113      	bne.n	800408e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	2220      	movs	r2, #32
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2241      	movs	r2, #65	; 0x41
 8004076:	2120      	movs	r1, #32
 8004078:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2242      	movs	r2, #66	; 0x42
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2240      	movs	r2, #64	; 0x40
 8004086:	2100      	movs	r1, #0
 8004088:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e02f      	b.n	80040ee <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2220      	movs	r2, #32
 8004096:	4013      	ands	r3, r2
 8004098:	2b20      	cmp	r3, #32
 800409a:	d1d6      	bne.n	800404a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2210      	movs	r2, #16
 80040a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2220      	movs	r2, #32
 80040aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7ff fe62 	bl	8003d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	490e      	ldr	r1, [pc, #56]	; (80040f8 <I2C_IsAcknowledgeFailed+0xf0>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c8:	2204      	movs	r2, #4
 80040ca:	431a      	orrs	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2241      	movs	r2, #65	; 0x41
 80040d4:	2120      	movs	r1, #32
 80040d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2242      	movs	r2, #66	; 0x42
 80040dc:	2100      	movs	r1, #0
 80040de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	2100      	movs	r1, #0
 80040e6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	fe00e800 	.word	0xfe00e800

080040fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040fc:	b590      	push	{r4, r7, lr}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	0008      	movs	r0, r1
 8004106:	0011      	movs	r1, r2
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	240a      	movs	r4, #10
 800410c:	193b      	adds	r3, r7, r4
 800410e:	1c02      	adds	r2, r0, #0
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	2009      	movs	r0, #9
 8004114:	183b      	adds	r3, r7, r0
 8004116:	1c0a      	adds	r2, r1, #0
 8004118:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	6a3a      	ldr	r2, [r7, #32]
 8004122:	0d51      	lsrs	r1, r2, #21
 8004124:	2280      	movs	r2, #128	; 0x80
 8004126:	00d2      	lsls	r2, r2, #3
 8004128:	400a      	ands	r2, r1
 800412a:	490e      	ldr	r1, [pc, #56]	; (8004164 <I2C_TransferConfig+0x68>)
 800412c:	430a      	orrs	r2, r1
 800412e:	43d2      	mvns	r2, r2
 8004130:	401a      	ands	r2, r3
 8004132:	0011      	movs	r1, r2
 8004134:	193b      	adds	r3, r7, r4
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	059b      	lsls	r3, r3, #22
 800413a:	0d9a      	lsrs	r2, r3, #22
 800413c:	183b      	adds	r3, r7, r0
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	0418      	lsls	r0, r3, #16
 8004142:	23ff      	movs	r3, #255	; 0xff
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	4003      	ands	r3, r0
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	431a      	orrs	r2, r3
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	46bd      	mov	sp, r7
 800415e:	b005      	add	sp, #20
 8004160:	bd90      	pop	{r4, r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	03ff63ff 	.word	0x03ff63ff

08004168 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2241      	movs	r2, #65	; 0x41
 8004176:	5c9b      	ldrb	r3, [r3, r2]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b20      	cmp	r3, #32
 800417c:	d138      	bne.n	80041f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2240      	movs	r2, #64	; 0x40
 8004182:	5c9b      	ldrb	r3, [r3, r2]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004188:	2302      	movs	r3, #2
 800418a:	e032      	b.n	80041f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	2101      	movs	r1, #1
 8004192:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2241      	movs	r2, #65	; 0x41
 8004198:	2124      	movs	r1, #36	; 0x24
 800419a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2101      	movs	r1, #1
 80041a8:	438a      	bics	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4911      	ldr	r1, [pc, #68]	; (80041fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6819      	ldr	r1, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2101      	movs	r1, #1
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2241      	movs	r2, #65	; 0x41
 80041e0:	2120      	movs	r1, #32
 80041e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2240      	movs	r2, #64	; 0x40
 80041e8:	2100      	movs	r1, #0
 80041ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	ffffefff 	.word	0xffffefff

08004200 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2241      	movs	r2, #65	; 0x41
 800420e:	5c9b      	ldrb	r3, [r3, r2]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b20      	cmp	r3, #32
 8004214:	d139      	bne.n	800428a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2240      	movs	r2, #64	; 0x40
 800421a:	5c9b      	ldrb	r3, [r3, r2]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004220:	2302      	movs	r3, #2
 8004222:	e033      	b.n	800428c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2240      	movs	r2, #64	; 0x40
 8004228:	2101      	movs	r1, #1
 800422a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2241      	movs	r2, #65	; 0x41
 8004230:	2124      	movs	r1, #36	; 0x24
 8004232:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2101      	movs	r1, #1
 8004240:	438a      	bics	r2, r1
 8004242:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a11      	ldr	r2, [pc, #68]	; (8004294 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004250:	4013      	ands	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2101      	movs	r1, #1
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2241      	movs	r2, #65	; 0x41
 800427a:	2120      	movs	r1, #32
 800427c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2240      	movs	r2, #64	; 0x40
 8004282:	2100      	movs	r1, #0
 8004284:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e000      	b.n	800428c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
  }
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b004      	add	sp, #16
 8004292:	bd80      	pop	{r7, pc}
 8004294:	fffff0ff 	.word	0xfffff0ff

08004298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e301      	b.n	80048ae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2201      	movs	r2, #1
 80042b0:	4013      	ands	r3, r2
 80042b2:	d100      	bne.n	80042b6 <HAL_RCC_OscConfig+0x1e>
 80042b4:	e08d      	b.n	80043d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80042b6:	4bc3      	ldr	r3, [pc, #780]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	220c      	movs	r2, #12
 80042bc:	4013      	ands	r3, r2
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00e      	beq.n	80042e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042c2:	4bc0      	ldr	r3, [pc, #768]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	220c      	movs	r2, #12
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d116      	bne.n	80042fc <HAL_RCC_OscConfig+0x64>
 80042ce:	4bbd      	ldr	r3, [pc, #756]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	025b      	lsls	r3, r3, #9
 80042d6:	401a      	ands	r2, r3
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	025b      	lsls	r3, r3, #9
 80042dc:	429a      	cmp	r2, r3
 80042de:	d10d      	bne.n	80042fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	4bb8      	ldr	r3, [pc, #736]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	029b      	lsls	r3, r3, #10
 80042e8:	4013      	ands	r3, r2
 80042ea:	d100      	bne.n	80042ee <HAL_RCC_OscConfig+0x56>
 80042ec:	e070      	b.n	80043d0 <HAL_RCC_OscConfig+0x138>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d000      	beq.n	80042f8 <HAL_RCC_OscConfig+0x60>
 80042f6:	e06b      	b.n	80043d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e2d8      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d107      	bne.n	8004314 <HAL_RCC_OscConfig+0x7c>
 8004304:	4baf      	ldr	r3, [pc, #700]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4bae      	ldr	r3, [pc, #696]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800430a:	2180      	movs	r1, #128	; 0x80
 800430c:	0249      	lsls	r1, r1, #9
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e02f      	b.n	8004374 <HAL_RCC_OscConfig+0xdc>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10c      	bne.n	8004336 <HAL_RCC_OscConfig+0x9e>
 800431c:	4ba9      	ldr	r3, [pc, #676]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4ba8      	ldr	r3, [pc, #672]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004322:	49a9      	ldr	r1, [pc, #676]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004324:	400a      	ands	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	4ba6      	ldr	r3, [pc, #664]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4ba5      	ldr	r3, [pc, #660]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800432e:	49a7      	ldr	r1, [pc, #668]	; (80045cc <HAL_RCC_OscConfig+0x334>)
 8004330:	400a      	ands	r2, r1
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e01e      	b.n	8004374 <HAL_RCC_OscConfig+0xdc>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b05      	cmp	r3, #5
 800433c:	d10e      	bne.n	800435c <HAL_RCC_OscConfig+0xc4>
 800433e:	4ba1      	ldr	r3, [pc, #644]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4ba0      	ldr	r3, [pc, #640]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004344:	2180      	movs	r1, #128	; 0x80
 8004346:	02c9      	lsls	r1, r1, #11
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	4b9d      	ldr	r3, [pc, #628]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b9c      	ldr	r3, [pc, #624]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004352:	2180      	movs	r1, #128	; 0x80
 8004354:	0249      	lsls	r1, r1, #9
 8004356:	430a      	orrs	r2, r1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xdc>
 800435c:	4b99      	ldr	r3, [pc, #612]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b98      	ldr	r3, [pc, #608]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004362:	4999      	ldr	r1, [pc, #612]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 8004364:	400a      	ands	r2, r1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	4b96      	ldr	r3, [pc, #600]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b95      	ldr	r3, [pc, #596]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800436e:	4997      	ldr	r1, [pc, #604]	; (80045cc <HAL_RCC_OscConfig+0x334>)
 8004370:	400a      	ands	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d014      	beq.n	80043a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fe ffec 	bl	8003358 <HAL_GetTick>
 8004380:	0003      	movs	r3, r0
 8004382:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004386:	f7fe ffe7 	bl	8003358 <HAL_GetTick>
 800438a:	0002      	movs	r2, r0
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b64      	cmp	r3, #100	; 0x64
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e28a      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004398:	4b8a      	ldr	r3, [pc, #552]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	029b      	lsls	r3, r3, #10
 80043a0:	4013      	ands	r3, r2
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0xee>
 80043a4:	e015      	b.n	80043d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a6:	f7fe ffd7 	bl	8003358 <HAL_GetTick>
 80043aa:	0003      	movs	r3, r0
 80043ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fe ffd2 	bl	8003358 <HAL_GetTick>
 80043b4:	0002      	movs	r2, r0
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	; 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e275      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	4b80      	ldr	r3, [pc, #512]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	4013      	ands	r3, r2
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x118>
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2202      	movs	r2, #2
 80043d8:	4013      	ands	r3, r2
 80043da:	d100      	bne.n	80043de <HAL_RCC_OscConfig+0x146>
 80043dc:	e069      	b.n	80044b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043de:	4b79      	ldr	r3, [pc, #484]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	220c      	movs	r2, #12
 80043e4:	4013      	ands	r3, r2
 80043e6:	d00b      	beq.n	8004400 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80043e8:	4b76      	ldr	r3, [pc, #472]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	220c      	movs	r2, #12
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d11c      	bne.n	800442e <HAL_RCC_OscConfig+0x196>
 80043f4:	4b73      	ldr	r3, [pc, #460]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	4013      	ands	r3, r2
 80043fe:	d116      	bne.n	800442e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004400:	4b70      	ldr	r3, [pc, #448]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2202      	movs	r2, #2
 8004406:	4013      	ands	r3, r2
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x17e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e24b      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b6b      	ldr	r3, [pc, #428]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	22f8      	movs	r2, #248	; 0xf8
 800441c:	4393      	bics	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	00da      	lsls	r2, r3, #3
 8004426:	4b67      	ldr	r3, [pc, #412]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442c:	e041      	b.n	80044b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d024      	beq.n	8004480 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004436:	4b63      	ldr	r3, [pc, #396]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b62      	ldr	r3, [pc, #392]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800443c:	2101      	movs	r1, #1
 800443e:	430a      	orrs	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fe ff89 	bl	8003358 <HAL_GetTick>
 8004446:	0003      	movs	r3, r0
 8004448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800444c:	f7fe ff84 	bl	8003358 <HAL_GetTick>
 8004450:	0002      	movs	r2, r0
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e227      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	4b59      	ldr	r3, [pc, #356]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2202      	movs	r2, #2
 8004464:	4013      	ands	r3, r2
 8004466:	d0f1      	beq.n	800444c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004468:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	22f8      	movs	r2, #248	; 0xf8
 800446e:	4393      	bics	r3, r2
 8004470:	0019      	movs	r1, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00da      	lsls	r2, r3, #3
 8004478:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800447a:	430a      	orrs	r2, r1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e018      	b.n	80044b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4b4f      	ldr	r3, [pc, #316]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004486:	2101      	movs	r1, #1
 8004488:	438a      	bics	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fe ff64 	bl	8003358 <HAL_GetTick>
 8004490:	0003      	movs	r3, r0
 8004492:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004496:	f7fe ff5f 	bl	8003358 <HAL_GetTick>
 800449a:	0002      	movs	r2, r0
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e202      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a8:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2202      	movs	r2, #2
 80044ae:	4013      	ands	r3, r2
 80044b0:	d1f1      	bne.n	8004496 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2208      	movs	r2, #8
 80044b8:	4013      	ands	r3, r2
 80044ba:	d036      	beq.n	800452a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d019      	beq.n	80044f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c4:	4b3f      	ldr	r3, [pc, #252]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80044c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c8:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80044ca:	2101      	movs	r1, #1
 80044cc:	430a      	orrs	r2, r1
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d0:	f7fe ff42 	bl	8003358 <HAL_GetTick>
 80044d4:	0003      	movs	r3, r0
 80044d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044da:	f7fe ff3d 	bl	8003358 <HAL_GetTick>
 80044de:	0002      	movs	r2, r0
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1e0      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ec:	4b35      	ldr	r3, [pc, #212]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2202      	movs	r2, #2
 80044f2:	4013      	ands	r3, r2
 80044f4:	d0f1      	beq.n	80044da <HAL_RCC_OscConfig+0x242>
 80044f6:	e018      	b.n	800452a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f8:	4b32      	ldr	r3, [pc, #200]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80044fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044fc:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80044fe:	2101      	movs	r1, #1
 8004500:	438a      	bics	r2, r1
 8004502:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004504:	f7fe ff28 	bl	8003358 <HAL_GetTick>
 8004508:	0003      	movs	r3, r0
 800450a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450e:	f7fe ff23 	bl	8003358 <HAL_GetTick>
 8004512:	0002      	movs	r2, r0
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e1c6      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2202      	movs	r2, #2
 8004526:	4013      	ands	r3, r2
 8004528:	d1f1      	bne.n	800450e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2204      	movs	r2, #4
 8004530:	4013      	ands	r3, r2
 8004532:	d100      	bne.n	8004536 <HAL_RCC_OscConfig+0x29e>
 8004534:	e0b4      	b.n	80046a0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004536:	201f      	movs	r0, #31
 8004538:	183b      	adds	r3, r7, r0
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453e:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004540:	69da      	ldr	r2, [r3, #28]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	055b      	lsls	r3, r3, #21
 8004546:	4013      	ands	r3, r2
 8004548:	d110      	bne.n	800456c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454a:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	0549      	lsls	r1, r1, #21
 8004554:	430a      	orrs	r2, r1
 8004556:	61da      	str	r2, [r3, #28]
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	055b      	lsls	r3, r3, #21
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004566:	183b      	adds	r3, r7, r0
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <HAL_RCC_OscConfig+0x338>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4013      	ands	r3, r2
 8004576:	d11a      	bne.n	80045ae <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004578:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_RCC_OscConfig+0x338>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <HAL_RCC_OscConfig+0x338>)
 800457e:	2180      	movs	r1, #128	; 0x80
 8004580:	0049      	lsls	r1, r1, #1
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004586:	f7fe fee7 	bl	8003358 <HAL_GetTick>
 800458a:	0003      	movs	r3, r0
 800458c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004590:	f7fe fee2 	bl	8003358 <HAL_GetTick>
 8004594:	0002      	movs	r2, r0
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e185      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a2:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_OscConfig+0x338>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4013      	ands	r3, r2
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d10e      	bne.n	80045d4 <HAL_RCC_OscConfig+0x33c>
 80045b6:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80045b8:	6a1a      	ldr	r2, [r3, #32]
 80045ba:	4b02      	ldr	r3, [pc, #8]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 80045bc:	2101      	movs	r1, #1
 80045be:	430a      	orrs	r2, r1
 80045c0:	621a      	str	r2, [r3, #32]
 80045c2:	e035      	b.n	8004630 <HAL_RCC_OscConfig+0x398>
 80045c4:	40021000 	.word	0x40021000
 80045c8:	fffeffff 	.word	0xfffeffff
 80045cc:	fffbffff 	.word	0xfffbffff
 80045d0:	40007000 	.word	0x40007000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x35e>
 80045dc:	4bb6      	ldr	r3, [pc, #728]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	4bb5      	ldr	r3, [pc, #724]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80045e2:	2101      	movs	r1, #1
 80045e4:	438a      	bics	r2, r1
 80045e6:	621a      	str	r2, [r3, #32]
 80045e8:	4bb3      	ldr	r3, [pc, #716]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80045ea:	6a1a      	ldr	r2, [r3, #32]
 80045ec:	4bb2      	ldr	r3, [pc, #712]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80045ee:	2104      	movs	r1, #4
 80045f0:	438a      	bics	r2, r1
 80045f2:	621a      	str	r2, [r3, #32]
 80045f4:	e01c      	b.n	8004630 <HAL_RCC_OscConfig+0x398>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x380>
 80045fe:	4bae      	ldr	r3, [pc, #696]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004600:	6a1a      	ldr	r2, [r3, #32]
 8004602:	4bad      	ldr	r3, [pc, #692]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004604:	2104      	movs	r1, #4
 8004606:	430a      	orrs	r2, r1
 8004608:	621a      	str	r2, [r3, #32]
 800460a:	4bab      	ldr	r3, [pc, #684]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800460c:	6a1a      	ldr	r2, [r3, #32]
 800460e:	4baa      	ldr	r3, [pc, #680]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004610:	2101      	movs	r1, #1
 8004612:	430a      	orrs	r2, r1
 8004614:	621a      	str	r2, [r3, #32]
 8004616:	e00b      	b.n	8004630 <HAL_RCC_OscConfig+0x398>
 8004618:	4ba7      	ldr	r3, [pc, #668]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	4ba6      	ldr	r3, [pc, #664]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800461e:	2101      	movs	r1, #1
 8004620:	438a      	bics	r2, r1
 8004622:	621a      	str	r2, [r3, #32]
 8004624:	4ba4      	ldr	r3, [pc, #656]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	4ba3      	ldr	r3, [pc, #652]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800462a:	2104      	movs	r1, #4
 800462c:	438a      	bics	r2, r1
 800462e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d014      	beq.n	8004662 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004638:	f7fe fe8e 	bl	8003358 <HAL_GetTick>
 800463c:	0003      	movs	r3, r0
 800463e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004640:	e009      	b.n	8004656 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe fe89 	bl	8003358 <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	4a9b      	ldr	r2, [pc, #620]	; (80048bc <HAL_RCC_OscConfig+0x624>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e12b      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004656:	4b98      	ldr	r3, [pc, #608]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	2202      	movs	r2, #2
 800465c:	4013      	ands	r3, r2
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x3aa>
 8004660:	e013      	b.n	800468a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004662:	f7fe fe79 	bl	8003358 <HAL_GetTick>
 8004666:	0003      	movs	r3, r0
 8004668:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466a:	e009      	b.n	8004680 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fe fe74 	bl	8003358 <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	4a91      	ldr	r2, [pc, #580]	; (80048bc <HAL_RCC_OscConfig+0x624>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e116      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004680:	4b8d      	ldr	r3, [pc, #564]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	2202      	movs	r2, #2
 8004686:	4013      	ands	r3, r2
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800468a:	231f      	movs	r3, #31
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004694:	4b88      	ldr	r3, [pc, #544]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	4b87      	ldr	r3, [pc, #540]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800469a:	4989      	ldr	r1, [pc, #548]	; (80048c0 <HAL_RCC_OscConfig+0x628>)
 800469c:	400a      	ands	r2, r1
 800469e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2210      	movs	r2, #16
 80046a6:	4013      	ands	r3, r2
 80046a8:	d063      	beq.n	8004772 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d12a      	bne.n	8004708 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80046b2:	4b81      	ldr	r3, [pc, #516]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80046b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b6:	4b80      	ldr	r3, [pc, #512]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80046b8:	2104      	movs	r1, #4
 80046ba:	430a      	orrs	r2, r1
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80046be:	4b7e      	ldr	r3, [pc, #504]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80046c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c2:	4b7d      	ldr	r3, [pc, #500]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80046c4:	2101      	movs	r1, #1
 80046c6:	430a      	orrs	r2, r1
 80046c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ca:	f7fe fe45 	bl	8003358 <HAL_GetTick>
 80046ce:	0003      	movs	r3, r0
 80046d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80046d4:	f7fe fe40 	bl	8003358 <HAL_GetTick>
 80046d8:	0002      	movs	r2, r0
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0e3      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80046e6:	4b74      	ldr	r3, [pc, #464]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	2202      	movs	r2, #2
 80046ec:	4013      	ands	r3, r2
 80046ee:	d0f1      	beq.n	80046d4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80046f0:	4b71      	ldr	r3, [pc, #452]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	22f8      	movs	r2, #248	; 0xf8
 80046f6:	4393      	bics	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	00da      	lsls	r2, r3, #3
 8004700:	4b6d      	ldr	r3, [pc, #436]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004702:	430a      	orrs	r2, r1
 8004704:	635a      	str	r2, [r3, #52]	; 0x34
 8004706:	e034      	b.n	8004772 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	3305      	adds	r3, #5
 800470e:	d111      	bne.n	8004734 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004710:	4b69      	ldr	r3, [pc, #420]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004714:	4b68      	ldr	r3, [pc, #416]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004716:	2104      	movs	r1, #4
 8004718:	438a      	bics	r2, r1
 800471a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800471c:	4b66      	ldr	r3, [pc, #408]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	22f8      	movs	r2, #248	; 0xf8
 8004722:	4393      	bics	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	4b62      	ldr	r3, [pc, #392]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800472e:	430a      	orrs	r2, r1
 8004730:	635a      	str	r2, [r3, #52]	; 0x34
 8004732:	e01e      	b.n	8004772 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004734:	4b60      	ldr	r3, [pc, #384]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004738:	4b5f      	ldr	r3, [pc, #380]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800473a:	2104      	movs	r1, #4
 800473c:	430a      	orrs	r2, r1
 800473e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004740:	4b5d      	ldr	r3, [pc, #372]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004744:	4b5c      	ldr	r3, [pc, #368]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004746:	2101      	movs	r1, #1
 8004748:	438a      	bics	r2, r1
 800474a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474c:	f7fe fe04 	bl	8003358 <HAL_GetTick>
 8004750:	0003      	movs	r3, r0
 8004752:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004756:	f7fe fdff 	bl	8003358 <HAL_GetTick>
 800475a:	0002      	movs	r2, r0
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e0a2      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004768:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476c:	2202      	movs	r2, #2
 800476e:	4013      	ands	r3, r2
 8004770:	d1f1      	bne.n	8004756 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d100      	bne.n	800477c <HAL_RCC_OscConfig+0x4e4>
 800477a:	e097      	b.n	80048ac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800477c:	4b4e      	ldr	r3, [pc, #312]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	220c      	movs	r2, #12
 8004782:	4013      	ands	r3, r2
 8004784:	2b08      	cmp	r3, #8
 8004786:	d100      	bne.n	800478a <HAL_RCC_OscConfig+0x4f2>
 8004788:	e06b      	b.n	8004862 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d14c      	bne.n	800482c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b49      	ldr	r3, [pc, #292]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4b48      	ldr	r3, [pc, #288]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004798:	494a      	ldr	r1, [pc, #296]	; (80048c4 <HAL_RCC_OscConfig+0x62c>)
 800479a:	400a      	ands	r2, r1
 800479c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479e:	f7fe fddb 	bl	8003358 <HAL_GetTick>
 80047a2:	0003      	movs	r3, r0
 80047a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fe fdd6 	bl	8003358 <HAL_GetTick>
 80047ac:	0002      	movs	r2, r0
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e079      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ba:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	049b      	lsls	r3, r3, #18
 80047c2:	4013      	ands	r3, r2
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c6:	4b3c      	ldr	r3, [pc, #240]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	220f      	movs	r2, #15
 80047cc:	4393      	bics	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	4b38      	ldr	r3, [pc, #224]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80047d6:	430a      	orrs	r2, r1
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80047da:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4a3a      	ldr	r2, [pc, #232]	; (80048c8 <HAL_RCC_OscConfig+0x630>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	431a      	orrs	r2, r3
 80047ee:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f4:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 80047fa:	2180      	movs	r1, #128	; 0x80
 80047fc:	0449      	lsls	r1, r1, #17
 80047fe:	430a      	orrs	r2, r1
 8004800:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fe fda9 	bl	8003358 <HAL_GetTick>
 8004806:	0003      	movs	r3, r0
 8004808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480c:	f7fe fda4 	bl	8003358 <HAL_GetTick>
 8004810:	0002      	movs	r2, r0
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e047      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800481e:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	049b      	lsls	r3, r3, #18
 8004826:	4013      	ands	r3, r2
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x574>
 800482a:	e03f      	b.n	80048ac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482c:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004832:	4924      	ldr	r1, [pc, #144]	; (80048c4 <HAL_RCC_OscConfig+0x62c>)
 8004834:	400a      	ands	r2, r1
 8004836:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fe fd8e 	bl	8003358 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004842:	f7fe fd89 	bl	8003358 <HAL_GetTick>
 8004846:	0002      	movs	r2, r0
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e02c      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004854:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	049b      	lsls	r3, r3, #18
 800485c:	4013      	ands	r3, r2
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x5aa>
 8004860:	e024      	b.n	80048ac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e01f      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004874:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <HAL_RCC_OscConfig+0x620>)
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	025b      	lsls	r3, r3, #9
 8004880:	401a      	ands	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	429a      	cmp	r2, r3
 8004888:	d10e      	bne.n	80048a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	220f      	movs	r2, #15
 800488e:	401a      	ands	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	23f0      	movs	r3, #240	; 0xf0
 800489c:	039b      	lsls	r3, r3, #14
 800489e:	401a      	ands	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b008      	add	sp, #32
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	40021000 	.word	0x40021000
 80048bc:	00001388 	.word	0x00001388
 80048c0:	efffffff 	.word	0xefffffff
 80048c4:	feffffff 	.word	0xfeffffff
 80048c8:	ffc2ffff 	.word	0xffc2ffff

080048cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0b3      	b.n	8004a48 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e0:	4b5b      	ldr	r3, [pc, #364]	; (8004a50 <HAL_RCC_ClockConfig+0x184>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2201      	movs	r2, #1
 80048e6:	4013      	ands	r3, r2
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d911      	bls.n	8004912 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b58      	ldr	r3, [pc, #352]	; (8004a50 <HAL_RCC_ClockConfig+0x184>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	4393      	bics	r3, r2
 80048f6:	0019      	movs	r1, r3
 80048f8:	4b55      	ldr	r3, [pc, #340]	; (8004a50 <HAL_RCC_ClockConfig+0x184>)
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_ClockConfig+0x184>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	4013      	ands	r3, r2
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d001      	beq.n	8004912 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e09a      	b.n	8004a48 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2202      	movs	r2, #2
 8004918:	4013      	ands	r3, r2
 800491a:	d015      	beq.n	8004948 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2204      	movs	r2, #4
 8004922:	4013      	ands	r3, r2
 8004924:	d006      	beq.n	8004934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004926:	4b4b      	ldr	r3, [pc, #300]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	4b4a      	ldr	r3, [pc, #296]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 800492c:	21e0      	movs	r1, #224	; 0xe0
 800492e:	00c9      	lsls	r1, r1, #3
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	22f0      	movs	r2, #240	; 0xf0
 800493a:	4393      	bics	r3, r2
 800493c:	0019      	movs	r1, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	4b44      	ldr	r3, [pc, #272]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2201      	movs	r2, #1
 800494e:	4013      	ands	r3, r2
 8004950:	d040      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	029b      	lsls	r3, r3, #10
 8004962:	4013      	ands	r3, r2
 8004964:	d114      	bne.n	8004990 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e06e      	b.n	8004a48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	049b      	lsls	r3, r3, #18
 800497a:	4013      	ands	r3, r2
 800497c:	d108      	bne.n	8004990 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e062      	b.n	8004a48 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004982:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2202      	movs	r2, #2
 8004988:	4013      	ands	r3, r2
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e05b      	b.n	8004a48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004990:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2203      	movs	r2, #3
 8004996:	4393      	bics	r3, r2
 8004998:	0019      	movs	r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049a4:	f7fe fcd8 	bl	8003358 <HAL_GetTick>
 80049a8:	0003      	movs	r3, r0
 80049aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ac:	e009      	b.n	80049c2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ae:	f7fe fcd3 	bl	8003358 <HAL_GetTick>
 80049b2:	0002      	movs	r2, r0
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <HAL_RCC_ClockConfig+0x18c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e042      	b.n	8004a48 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	220c      	movs	r2, #12
 80049c8:	401a      	ands	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d1ec      	bne.n	80049ae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049d4:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <HAL_RCC_ClockConfig+0x184>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2201      	movs	r2, #1
 80049da:	4013      	ands	r3, r2
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d211      	bcs.n	8004a06 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <HAL_RCC_ClockConfig+0x184>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2201      	movs	r2, #1
 80049e8:	4393      	bics	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <HAL_RCC_ClockConfig+0x184>)
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <HAL_RCC_ClockConfig+0x184>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2201      	movs	r2, #1
 80049fa:	4013      	ands	r3, r2
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e020      	b.n	8004a48 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d009      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <HAL_RCC_ClockConfig+0x190>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a24:	f000 f820 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8004a28:	0001      	movs	r1, r0
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x188>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	220f      	movs	r2, #15
 8004a32:	4013      	ands	r3, r2
 8004a34:	4a0a      	ldr	r2, [pc, #40]	; (8004a60 <HAL_RCC_ClockConfig+0x194>)
 8004a36:	5cd3      	ldrb	r3, [r2, r3]
 8004a38:	000a      	movs	r2, r1
 8004a3a:	40da      	lsrs	r2, r3
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_RCC_ClockConfig+0x198>)
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a40:	2003      	movs	r0, #3
 8004a42:	f7fe fb8d 	bl	8003160 <HAL_InitTick>
  
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b004      	add	sp, #16
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40021000 	.word	0x40021000
 8004a58:	00001388 	.word	0x00001388
 8004a5c:	fffff8ff 	.word	0xfffff8ff
 8004a60:	08008c28 	.word	0x08008c28
 8004a64:	20000000 	.word	0x20000000

08004a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b08f      	sub	sp, #60	; 0x3c
 8004a6c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004a6e:	2314      	movs	r3, #20
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a76:	c313      	stmia	r3!, {r0, r1, r4}
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004a7c:	1d3b      	adds	r3, r7, #4
 8004a7e:	4a29      	ldr	r2, [pc, #164]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a82:	c313      	stmia	r3!, {r0, r1, r4}
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a90:	2300      	movs	r3, #0
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004a9c:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	220c      	movs	r2, #12
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d002      	beq.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x4a>
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d003      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x50>
 8004ab0:	e02d      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ab6:	e02d      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	0c9b      	lsrs	r3, r3, #18
 8004abc:	220f      	movs	r2, #15
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2214      	movs	r2, #20
 8004ac2:	18ba      	adds	r2, r7, r2
 8004ac4:	5cd3      	ldrb	r3, [r2, r3]
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	220f      	movs	r2, #15
 8004ace:	4013      	ands	r3, r2
 8004ad0:	1d3a      	adds	r2, r7, #4
 8004ad2:	5cd3      	ldrb	r3, [r2, r3]
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	025b      	lsls	r3, r3, #9
 8004adc:	4013      	ands	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae2:	4812      	ldr	r0, [pc, #72]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ae4:	f7fb fb22 	bl	800012c <__udivsi3>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	001a      	movs	r2, r3
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	4353      	muls	r3, r2
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
 8004af2:	e009      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004af6:	000a      	movs	r2, r1
 8004af8:	0152      	lsls	r2, r2, #5
 8004afa:	1a52      	subs	r2, r2, r1
 8004afc:	0193      	lsls	r3, r2, #6
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	185b      	adds	r3, r3, r1
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b0c:	e002      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b10:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b12:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b00f      	add	sp, #60	; 0x3c
 8004b1c:	bd90      	pop	{r4, r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	08008b44 	.word	0x08008b44
 8004b24:	08008b54 	.word	0x08008b54
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	007a1200 	.word	0x007a1200

08004b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b34:	4b02      	ldr	r3, [pc, #8]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	20000000 	.word	0x20000000

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004b48:	f7ff fff2 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b4c:	0001      	movs	r1, r0
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	2207      	movs	r2, #7
 8004b56:	4013      	ands	r3, r2
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b5a:	5cd3      	ldrb	r3, [r2, r3]
 8004b5c:	40d9      	lsrs	r1, r3
 8004b5e:	000b      	movs	r3, r1
}    
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	08008c38 	.word	0x08008c38

08004b70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b80:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <HAL_RCC_GetClockConfig+0x4c>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2203      	movs	r2, #3
 8004b86:	401a      	ands	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCC_GetClockConfig+0x4c>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	22f0      	movs	r2, #240	; 0xf0
 8004b92:	401a      	ands	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004b98:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <HAL_RCC_GetClockConfig+0x4c>)
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	23e0      	movs	r3, #224	; 0xe0
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	401a      	ands	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <HAL_RCC_GetClockConfig+0x50>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2201      	movs	r2, #1
 8004bac:	401a      	ands	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b002      	add	sp, #8
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	40022000 	.word	0x40022000

08004bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	025b      	lsls	r3, r3, #9
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d100      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004be0:	e08e      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004be2:	2017      	movs	r0, #23
 8004be4:	183b      	adds	r3, r7, r0
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bea:	4b57      	ldr	r3, [pc, #348]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	055b      	lsls	r3, r3, #21
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d110      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bf6:	4b54      	ldr	r3, [pc, #336]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004bfc:	2180      	movs	r1, #128	; 0x80
 8004bfe:	0549      	lsls	r1, r1, #21
 8004c00:	430a      	orrs	r2, r1
 8004c02:	61da      	str	r2, [r3, #28]
 8004c04:	4b50      	ldr	r3, [pc, #320]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	055b      	lsls	r3, r3, #21
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c12:	183b      	adds	r3, r7, r0
 8004c14:	2201      	movs	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c18:	4b4c      	ldr	r3, [pc, #304]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	4013      	ands	r3, r2
 8004c22:	d11a      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c24:	4b49      	ldr	r3, [pc, #292]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b48      	ldr	r3, [pc, #288]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004c2a:	2180      	movs	r1, #128	; 0x80
 8004c2c:	0049      	lsls	r1, r1, #1
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c32:	f7fe fb91 	bl	8003358 <HAL_GetTick>
 8004c36:	0003      	movs	r3, r0
 8004c38:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3a:	e008      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3c:	f7fe fb8c 	bl	8003358 <HAL_GetTick>
 8004c40:	0002      	movs	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	; 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e077      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4013      	ands	r3, r2
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c5c:	6a1a      	ldr	r2, [r3, #32]
 8004c5e:	23c0      	movs	r3, #192	; 0xc0
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4013      	ands	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d034      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	23c0      	movs	r3, #192	; 0xc0
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4013      	ands	r3, r2
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d02c      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c7c:	4b32      	ldr	r3, [pc, #200]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	4a33      	ldr	r2, [pc, #204]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c86:	4b30      	ldr	r3, [pc, #192]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	4b2f      	ldr	r3, [pc, #188]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	0249      	lsls	r1, r1, #9
 8004c90:	430a      	orrs	r2, r1
 8004c92:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c94:	4b2c      	ldr	r3, [pc, #176]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c96:	6a1a      	ldr	r2, [r3, #32]
 8004c98:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c9a:	492e      	ldr	r1, [pc, #184]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004c9c:	400a      	ands	r2, r1
 8004c9e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ca0:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	4013      	ands	r3, r2
 8004cac:	d013      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7fe fb53 	bl	8003358 <HAL_GetTick>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb6:	e009      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fe fb4e 	bl	8003358 <HAL_GetTick>
 8004cbc:	0002      	movs	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e038      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ccc:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd6:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	0019      	movs	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	4b18      	ldr	r3, [pc, #96]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cea:	2317      	movs	r3, #23
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf4:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cfa:	4918      	ldr	r1, [pc, #96]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2201      	movs	r2, #1
 8004d06:	4013      	ands	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	2203      	movs	r2, #3
 8004d10:	4393      	bics	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2220      	movs	r2, #32
 8004d24:	4013      	ands	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	4393      	bics	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b006      	add	sp, #24
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40007000 	.word	0x40007000
 8004d50:	fffffcff 	.word	0xfffffcff
 8004d54:	fffeffff 	.word	0xfffeffff
 8004d58:	00001388 	.word	0x00001388
 8004d5c:	efffffff 	.word	0xefffffff

08004d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e042      	b.n	8004df8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	223d      	movs	r2, #61	; 0x3d
 8004d76:	5c9b      	ldrb	r3, [r3, r2]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d107      	bne.n	8004d8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	223c      	movs	r2, #60	; 0x3c
 8004d82:	2100      	movs	r1, #0
 8004d84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f000 f839 	bl	8004e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223d      	movs	r2, #61	; 0x3d
 8004d92:	2102      	movs	r1, #2
 8004d94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	0019      	movs	r1, r3
 8004da0:	0010      	movs	r0, r2
 8004da2:	f000 f9b7 	bl	8005114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2246      	movs	r2, #70	; 0x46
 8004daa:	2101      	movs	r1, #1
 8004dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	223e      	movs	r2, #62	; 0x3e
 8004db2:	2101      	movs	r1, #1
 8004db4:	5499      	strb	r1, [r3, r2]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	223f      	movs	r2, #63	; 0x3f
 8004dba:	2101      	movs	r1, #1
 8004dbc:	5499      	strb	r1, [r3, r2]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2240      	movs	r2, #64	; 0x40
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	5499      	strb	r1, [r3, r2]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2241      	movs	r2, #65	; 0x41
 8004dca:	2101      	movs	r1, #1
 8004dcc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2242      	movs	r2, #66	; 0x42
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	5499      	strb	r1, [r3, r2]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2243      	movs	r2, #67	; 0x43
 8004dda:	2101      	movs	r1, #1
 8004ddc:	5499      	strb	r1, [r3, r2]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2244      	movs	r2, #68	; 0x44
 8004de2:	2101      	movs	r1, #1
 8004de4:	5499      	strb	r1, [r3, r2]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2245      	movs	r2, #69	; 0x45
 8004dea:	2101      	movs	r1, #1
 8004dec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	223d      	movs	r2, #61	; 0x3d
 8004df2:	2101      	movs	r1, #1
 8004df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e08:	46c0      	nop			; (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	223d      	movs	r2, #61	; 0x3d
 8004e1c:	5c9b      	ldrb	r3, [r3, r2]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d001      	beq.n	8004e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e035      	b.n	8004e94 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	223d      	movs	r2, #61	; 0x3d
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <HAL_TIM_Base_Start_IT+0x8c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0x4e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <HAL_TIM_Base_Start_IT+0x90>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0x4e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a12      	ldr	r2, [pc, #72]	; (8004ea4 <HAL_TIM_Base_Start_IT+0x94>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d111      	bne.n	8004e82 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2207      	movs	r2, #7
 8004e66:	4013      	ands	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d010      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	e007      	b.n	8004e92 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b004      	add	sp, #16
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40014000 	.word	0x40014000

08004ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d124      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d11d      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	4252      	negs	r2, r2
 8004ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 f8fa 	bl	80050e4 <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e007      	b.n	8004f02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 f8ed 	bl	80050d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 f8f9 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2204      	movs	r2, #4
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d125      	bne.n	8004f62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d11e      	bne.n	8004f62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2205      	movs	r2, #5
 8004f2a:	4252      	negs	r2, r2
 8004f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	23c0      	movs	r3, #192	; 0xc0
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0018      	movs	r0, r3
 8004f46:	f000 f8cd 	bl	80050e4 <HAL_TIM_IC_CaptureCallback>
 8004f4a:	e007      	b.n	8004f5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 f8c0 	bl	80050d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	0018      	movs	r0, r3
 8004f58:	f000 f8cc 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d124      	bne.n	8004fba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2208      	movs	r2, #8
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d11d      	bne.n	8004fba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2209      	movs	r2, #9
 8004f84:	4252      	negs	r2, r2
 8004f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	2203      	movs	r2, #3
 8004f96:	4013      	ands	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f000 f8a1 	bl	80050e4 <HAL_TIM_IC_CaptureCallback>
 8004fa2:	e007      	b.n	8004fb4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 f894 	bl	80050d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f000 f8a0 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d125      	bne.n	8005014 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2210      	movs	r2, #16
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d11e      	bne.n	8005014 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2211      	movs	r2, #17
 8004fdc:	4252      	negs	r2, r2
 8004fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	23c0      	movs	r3, #192	; 0xc0
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 f874 	bl	80050e4 <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e007      	b.n	800500e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0018      	movs	r0, r3
 8005002:	f000 f867 	bl	80050d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	0018      	movs	r0, r3
 800500a:	f000 f873 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2201      	movs	r2, #1
 800501c:	4013      	ands	r3, r2
 800501e:	2b01      	cmp	r3, #1
 8005020:	d10f      	bne.n	8005042 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	4013      	ands	r3, r2
 800502c:	2b01      	cmp	r3, #1
 800502e:	d108      	bne.n	8005042 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2202      	movs	r2, #2
 8005036:	4252      	negs	r2, r2
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f7fd ff3d 	bl	8002ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2280      	movs	r2, #128	; 0x80
 800504a:	4013      	ands	r3, r2
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d10f      	bne.n	8005070 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2280      	movs	r2, #128	; 0x80
 8005058:	4013      	ands	r3, r2
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d108      	bne.n	8005070 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2281      	movs	r2, #129	; 0x81
 8005064:	4252      	negs	r2, r2
 8005066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	0018      	movs	r0, r3
 800506c:	f000 f8d0 	bl	8005210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2240      	movs	r2, #64	; 0x40
 8005078:	4013      	ands	r3, r2
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d10f      	bne.n	800509e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2240      	movs	r2, #64	; 0x40
 8005086:	4013      	ands	r3, r2
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d108      	bne.n	800509e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2241      	movs	r2, #65	; 0x41
 8005092:	4252      	negs	r2, r2
 8005094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	0018      	movs	r0, r3
 800509a:	f000 f833 	bl	8005104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2220      	movs	r2, #32
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d10f      	bne.n	80050cc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d108      	bne.n	80050cc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2221      	movs	r2, #33	; 0x21
 80050c0:	4252      	negs	r2, r2
 80050c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	0018      	movs	r0, r3
 80050c8:	f000 f89a 	bl	8005200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b002      	add	sp, #8
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	46bd      	mov	sp, r7
 80050e0:	b002      	add	sp, #8
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b002      	add	sp, #8
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	b002      	add	sp, #8
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	46bd      	mov	sp, r7
 8005110:	b002      	add	sp, #8
 8005112:	bd80      	pop	{r7, pc}

08005114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a2f      	ldr	r2, [pc, #188]	; (80051e4 <TIM_Base_SetConfig+0xd0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_Base_SetConfig+0x20>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a2e      	ldr	r2, [pc, #184]	; (80051e8 <TIM_Base_SetConfig+0xd4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d108      	bne.n	8005146 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2270      	movs	r2, #112	; 0x70
 8005138:	4393      	bics	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a26      	ldr	r2, [pc, #152]	; (80051e4 <TIM_Base_SetConfig+0xd0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <TIM_Base_SetConfig+0x62>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a25      	ldr	r2, [pc, #148]	; (80051e8 <TIM_Base_SetConfig+0xd4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00f      	beq.n	8005176 <TIM_Base_SetConfig+0x62>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a24      	ldr	r2, [pc, #144]	; (80051ec <TIM_Base_SetConfig+0xd8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_Base_SetConfig+0x62>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a23      	ldr	r2, [pc, #140]	; (80051f0 <TIM_Base_SetConfig+0xdc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <TIM_Base_SetConfig+0x62>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a22      	ldr	r2, [pc, #136]	; (80051f4 <TIM_Base_SetConfig+0xe0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_Base_SetConfig+0x62>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a21      	ldr	r2, [pc, #132]	; (80051f8 <TIM_Base_SetConfig+0xe4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d108      	bne.n	8005188 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a20      	ldr	r2, [pc, #128]	; (80051fc <TIM_Base_SetConfig+0xe8>)
 800517a:	4013      	ands	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	4393      	bics	r3, r2
 800518e:	001a      	movs	r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a0c      	ldr	r2, [pc, #48]	; (80051e4 <TIM_Base_SetConfig+0xd0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00b      	beq.n	80051ce <TIM_Base_SetConfig+0xba>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a0d      	ldr	r2, [pc, #52]	; (80051f0 <TIM_Base_SetConfig+0xdc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d007      	beq.n	80051ce <TIM_Base_SetConfig+0xba>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a0c      	ldr	r2, [pc, #48]	; (80051f4 <TIM_Base_SetConfig+0xe0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_Base_SetConfig+0xba>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a0b      	ldr	r2, [pc, #44]	; (80051f8 <TIM_Base_SetConfig+0xe4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d103      	bne.n	80051d6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	615a      	str	r2, [r3, #20]
}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	b004      	add	sp, #16
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40002000 	.word	0x40002000
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400
 80051f8:	40014800 	.word	0x40014800
 80051fc:	fffffcff 	.word	0xfffffcff

08005200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	b002      	add	sp, #8
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e044      	b.n	80052bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005236:	2b00      	cmp	r3, #0
 8005238:	d107      	bne.n	800524a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2274      	movs	r2, #116	; 0x74
 800523e:	2100      	movs	r1, #0
 8005240:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	0018      	movs	r0, r3
 8005246:	f7fd ff03 	bl	8003050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2101      	movs	r1, #1
 800525c:	438a      	bics	r2, r1
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	0018      	movs	r0, r3
 8005264:	f000 f9b6 	bl	80055d4 <UART_SetConfig>
 8005268:	0003      	movs	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e024      	b.n	80052bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	0018      	movs	r0, r3
 800527e:	f000 fae9 	bl	8005854 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	490d      	ldr	r1, [pc, #52]	; (80052c4 <HAL_UART_Init+0xa4>)
 800528e:	400a      	ands	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2108      	movs	r1, #8
 800529e:	438a      	bics	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2101      	movs	r1, #1
 80052ae:	430a      	orrs	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	0018      	movs	r0, r3
 80052b6:	f000 fb81 	bl	80059bc <UART_CheckIdleState>
 80052ba:	0003      	movs	r3, r0
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b002      	add	sp, #8
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	fffff7ff 	.word	0xfffff7ff

080052c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	1dbb      	adds	r3, r7, #6
 80052d6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d000      	beq.n	80052e2 <HAL_UART_Transmit+0x1a>
 80052e0:	e096      	b.n	8005410 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_UART_Transmit+0x28>
 80052e8:	1dbb      	adds	r3, r7, #6
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e08e      	b.n	8005412 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	015b      	lsls	r3, r3, #5
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d109      	bne.n	8005314 <HAL_UART_Transmit+0x4c>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2201      	movs	r2, #1
 800530c:	4013      	ands	r3, r2
 800530e:	d001      	beq.n	8005314 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e07e      	b.n	8005412 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2274      	movs	r2, #116	; 0x74
 8005318:	5c9b      	ldrb	r3, [r3, r2]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_UART_Transmit+0x5a>
 800531e:	2302      	movs	r3, #2
 8005320:	e077      	b.n	8005412 <HAL_UART_Transmit+0x14a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2274      	movs	r2, #116	; 0x74
 8005326:	2101      	movs	r1, #1
 8005328:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2280      	movs	r2, #128	; 0x80
 800532e:	2100      	movs	r1, #0
 8005330:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2221      	movs	r2, #33	; 0x21
 8005336:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005338:	f7fe f80e 	bl	8003358 <HAL_GetTick>
 800533c:	0003      	movs	r3, r0
 800533e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1dba      	adds	r2, r7, #6
 8005344:	2150      	movs	r1, #80	; 0x50
 8005346:	8812      	ldrh	r2, [r2, #0]
 8005348:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1dba      	adds	r2, r7, #6
 800534e:	2152      	movs	r1, #82	; 0x52
 8005350:	8812      	ldrh	r2, [r2, #0]
 8005352:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	015b      	lsls	r3, r3, #5
 800535c:	429a      	cmp	r2, r3
 800535e:	d108      	bne.n	8005372 <HAL_UART_Transmit+0xaa>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	e003      	b.n	800537a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005376:	2300      	movs	r3, #0
 8005378:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2274      	movs	r2, #116	; 0x74
 800537e:	2100      	movs	r1, #0
 8005380:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005382:	e02d      	b.n	80053e0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	0013      	movs	r3, r2
 800538e:	2200      	movs	r2, #0
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	f000 fb5b 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 8005396:	1e03      	subs	r3, r0, #0
 8005398:	d001      	beq.n	800539e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e039      	b.n	8005412 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	881a      	ldrh	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	05d2      	lsls	r2, r2, #23
 80053ae:	0dd2      	lsrs	r2, r2, #23
 80053b0:	b292      	uxth	r2, r2
 80053b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	3302      	adds	r3, #2
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	e008      	b.n	80053ce <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	b292      	uxth	r2, r2
 80053c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2252      	movs	r2, #82	; 0x52
 80053d2:	5a9b      	ldrh	r3, [r3, r2]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b299      	uxth	r1, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2252      	movs	r2, #82	; 0x52
 80053de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2252      	movs	r2, #82	; 0x52
 80053e4:	5a9b      	ldrh	r3, [r3, r2]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1cb      	bne.n	8005384 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	0013      	movs	r3, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	2140      	movs	r1, #64	; 0x40
 80053fa:	f000 fb27 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 80053fe:	1e03      	subs	r3, r0, #0
 8005400:	d001      	beq.n	8005406 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e005      	b.n	8005412 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	0018      	movs	r0, r3
 8005414:	46bd      	mov	sp, r7
 8005416:	b008      	add	sp, #32
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	1dbb      	adds	r3, r7, #6
 800542a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005430:	2b20      	cmp	r3, #32
 8005432:	d000      	beq.n	8005436 <HAL_UART_Receive+0x1a>
 8005434:	e0c6      	b.n	80055c4 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <HAL_UART_Receive+0x28>
 800543c:	1dbb      	adds	r3, r7, #6
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0be      	b.n	80055c6 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	015b      	lsls	r3, r3, #5
 8005450:	429a      	cmp	r2, r3
 8005452:	d109      	bne.n	8005468 <HAL_UART_Receive+0x4c>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2201      	movs	r2, #1
 8005460:	4013      	ands	r3, r2
 8005462:	d001      	beq.n	8005468 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0ae      	b.n	80055c6 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2274      	movs	r2, #116	; 0x74
 800546c:	5c9b      	ldrb	r3, [r3, r2]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_UART_Receive+0x5a>
 8005472:	2302      	movs	r3, #2
 8005474:	e0a7      	b.n	80055c6 <HAL_UART_Receive+0x1aa>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2274      	movs	r2, #116	; 0x74
 800547a:	2101      	movs	r1, #1
 800547c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2280      	movs	r2, #128	; 0x80
 8005482:	2100      	movs	r1, #0
 8005484:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2222      	movs	r2, #34	; 0x22
 800548a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005492:	f7fd ff61 	bl	8003358 <HAL_GetTick>
 8005496:	0003      	movs	r3, r0
 8005498:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1dba      	adds	r2, r7, #6
 800549e:	2158      	movs	r1, #88	; 0x58
 80054a0:	8812      	ldrh	r2, [r2, #0]
 80054a2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1dba      	adds	r2, r7, #6
 80054a8:	215a      	movs	r1, #90	; 0x5a
 80054aa:	8812      	ldrh	r2, [r2, #0]
 80054ac:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	015b      	lsls	r3, r3, #5
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d10d      	bne.n	80054d6 <HAL_UART_Receive+0xba>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <HAL_UART_Receive+0xb0>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	225c      	movs	r2, #92	; 0x5c
 80054c6:	4942      	ldr	r1, [pc, #264]	; (80055d0 <HAL_UART_Receive+0x1b4>)
 80054c8:	5299      	strh	r1, [r3, r2]
 80054ca:	e01a      	b.n	8005502 <HAL_UART_Receive+0xe6>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	225c      	movs	r2, #92	; 0x5c
 80054d0:	21ff      	movs	r1, #255	; 0xff
 80054d2:	5299      	strh	r1, [r3, r2]
 80054d4:	e015      	b.n	8005502 <HAL_UART_Receive+0xe6>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10d      	bne.n	80054fa <HAL_UART_Receive+0xde>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <HAL_UART_Receive+0xd4>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	225c      	movs	r2, #92	; 0x5c
 80054ea:	21ff      	movs	r1, #255	; 0xff
 80054ec:	5299      	strh	r1, [r3, r2]
 80054ee:	e008      	b.n	8005502 <HAL_UART_Receive+0xe6>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	225c      	movs	r2, #92	; 0x5c
 80054f4:	217f      	movs	r1, #127	; 0x7f
 80054f6:	5299      	strh	r1, [r3, r2]
 80054f8:	e003      	b.n	8005502 <HAL_UART_Receive+0xe6>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	225c      	movs	r2, #92	; 0x5c
 80054fe:	2100      	movs	r1, #0
 8005500:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005502:	2312      	movs	r3, #18
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	215c      	movs	r1, #92	; 0x5c
 800550a:	5a52      	ldrh	r2, [r2, r1]
 800550c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	015b      	lsls	r3, r3, #5
 8005516:	429a      	cmp	r2, r3
 8005518:	d108      	bne.n	800552c <HAL_UART_Receive+0x110>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	e003      	b.n	8005534 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2274      	movs	r2, #116	; 0x74
 8005538:	2100      	movs	r1, #0
 800553a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800553c:	e037      	b.n	80055ae <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	0013      	movs	r3, r2
 8005548:	2200      	movs	r2, #0
 800554a:	2120      	movs	r1, #32
 800554c:	f000 fa7e 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 8005550:	1e03      	subs	r3, r0, #0
 8005552:	d001      	beq.n	8005558 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e036      	b.n	80055c6 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10e      	bne.n	800557c <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005564:	b29b      	uxth	r3, r3
 8005566:	2212      	movs	r2, #18
 8005568:	18ba      	adds	r2, r7, r2
 800556a:	8812      	ldrh	r2, [r2, #0]
 800556c:	4013      	ands	r3, r2
 800556e:	b29a      	uxth	r2, r3
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	3302      	adds	r3, #2
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e00f      	b.n	800559c <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005582:	b29b      	uxth	r3, r3
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2212      	movs	r2, #18
 8005588:	18ba      	adds	r2, r7, r2
 800558a:	8812      	ldrh	r2, [r2, #0]
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	4013      	ands	r3, r2
 8005590:	b2da      	uxtb	r2, r3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	3301      	adds	r3, #1
 800559a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	225a      	movs	r2, #90	; 0x5a
 80055a0:	5a9b      	ldrh	r3, [r3, r2]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b299      	uxth	r1, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	225a      	movs	r2, #90	; 0x5a
 80055ac:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	225a      	movs	r2, #90	; 0x5a
 80055b2:	5a9b      	ldrh	r3, [r3, r2]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1c1      	bne.n	800553e <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e000      	b.n	80055c6 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
  }
}
 80055c6:	0018      	movs	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b008      	add	sp, #32
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	000001ff 	.word	0x000001ff

080055d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055dc:	231e      	movs	r3, #30
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a8d      	ldr	r2, [pc, #564]	; (8005838 <UART_SetConfig+0x264>)
 8005604:	4013      	ands	r3, r2
 8005606:	0019      	movs	r1, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	430a      	orrs	r2, r1
 8005610:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4a88      	ldr	r2, [pc, #544]	; (800583c <UART_SetConfig+0x268>)
 800561a:	4013      	ands	r3, r2
 800561c:	0019      	movs	r1, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4a7f      	ldr	r2, [pc, #508]	; (8005840 <UART_SetConfig+0x26c>)
 8005642:	4013      	ands	r3, r2
 8005644:	0019      	movs	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	430a      	orrs	r2, r1
 800564e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a7b      	ldr	r2, [pc, #492]	; (8005844 <UART_SetConfig+0x270>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d127      	bne.n	80056aa <UART_SetConfig+0xd6>
 800565a:	4b7b      	ldr	r3, [pc, #492]	; (8005848 <UART_SetConfig+0x274>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	2203      	movs	r2, #3
 8005660:	4013      	ands	r3, r2
 8005662:	2b03      	cmp	r3, #3
 8005664:	d00d      	beq.n	8005682 <UART_SetConfig+0xae>
 8005666:	d81b      	bhi.n	80056a0 <UART_SetConfig+0xcc>
 8005668:	2b02      	cmp	r3, #2
 800566a:	d014      	beq.n	8005696 <UART_SetConfig+0xc2>
 800566c:	d818      	bhi.n	80056a0 <UART_SetConfig+0xcc>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <UART_SetConfig+0xa4>
 8005672:	2b01      	cmp	r3, #1
 8005674:	d00a      	beq.n	800568c <UART_SetConfig+0xb8>
 8005676:	e013      	b.n	80056a0 <UART_SetConfig+0xcc>
 8005678:	231f      	movs	r3, #31
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e021      	b.n	80056c6 <UART_SetConfig+0xf2>
 8005682:	231f      	movs	r3, #31
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	2202      	movs	r2, #2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	e01c      	b.n	80056c6 <UART_SetConfig+0xf2>
 800568c:	231f      	movs	r3, #31
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	2204      	movs	r2, #4
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e017      	b.n	80056c6 <UART_SetConfig+0xf2>
 8005696:	231f      	movs	r3, #31
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	2208      	movs	r2, #8
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e012      	b.n	80056c6 <UART_SetConfig+0xf2>
 80056a0:	231f      	movs	r3, #31
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	2210      	movs	r2, #16
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	e00d      	b.n	80056c6 <UART_SetConfig+0xf2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a67      	ldr	r2, [pc, #412]	; (800584c <UART_SetConfig+0x278>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d104      	bne.n	80056be <UART_SetConfig+0xea>
 80056b4:	231f      	movs	r3, #31
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	e003      	b.n	80056c6 <UART_SetConfig+0xf2>
 80056be:	231f      	movs	r3, #31
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	2210      	movs	r2, #16
 80056c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	2380      	movs	r3, #128	; 0x80
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d15d      	bne.n	800578e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80056d2:	231f      	movs	r3, #31
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d015      	beq.n	8005708 <UART_SetConfig+0x134>
 80056dc:	dc18      	bgt.n	8005710 <UART_SetConfig+0x13c>
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d00d      	beq.n	80056fe <UART_SetConfig+0x12a>
 80056e2:	dc15      	bgt.n	8005710 <UART_SetConfig+0x13c>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <UART_SetConfig+0x11a>
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d005      	beq.n	80056f8 <UART_SetConfig+0x124>
 80056ec:	e010      	b.n	8005710 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ee:	f7ff fa29 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 80056f2:	0003      	movs	r3, r0
 80056f4:	61bb      	str	r3, [r7, #24]
        break;
 80056f6:	e012      	b.n	800571e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b55      	ldr	r3, [pc, #340]	; (8005850 <UART_SetConfig+0x27c>)
 80056fa:	61bb      	str	r3, [r7, #24]
        break;
 80056fc:	e00f      	b.n	800571e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7ff f9b3 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8005702:	0003      	movs	r3, r0
 8005704:	61bb      	str	r3, [r7, #24]
        break;
 8005706:	e00a      	b.n	800571e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	61bb      	str	r3, [r7, #24]
        break;
 800570e:	e006      	b.n	800571e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005714:	231e      	movs	r3, #30
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
        break;
 800571c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d100      	bne.n	8005726 <UART_SetConfig+0x152>
 8005724:	e07b      	b.n	800581e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	005a      	lsls	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	18d2      	adds	r2, r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	0019      	movs	r1, r3
 8005738:	0010      	movs	r0, r2
 800573a:	f7fa fcf7 	bl	800012c <__udivsi3>
 800573e:	0003      	movs	r3, r0
 8005740:	b29b      	uxth	r3, r3
 8005742:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d91c      	bls.n	8005784 <UART_SetConfig+0x1b0>
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	025b      	lsls	r3, r3, #9
 8005750:	429a      	cmp	r2, r3
 8005752:	d217      	bcs.n	8005784 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	b29a      	uxth	r2, r3
 8005758:	200e      	movs	r0, #14
 800575a:	183b      	adds	r3, r7, r0
 800575c:	210f      	movs	r1, #15
 800575e:	438a      	bics	r2, r1
 8005760:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	b29b      	uxth	r3, r3
 8005768:	2207      	movs	r2, #7
 800576a:	4013      	ands	r3, r2
 800576c:	b299      	uxth	r1, r3
 800576e:	183b      	adds	r3, r7, r0
 8005770:	183a      	adds	r2, r7, r0
 8005772:	8812      	ldrh	r2, [r2, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	183a      	adds	r2, r7, r0
 800577e:	8812      	ldrh	r2, [r2, #0]
 8005780:	60da      	str	r2, [r3, #12]
 8005782:	e04c      	b.n	800581e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005784:	231e      	movs	r3, #30
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	2201      	movs	r2, #1
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	e047      	b.n	800581e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800578e:	231f      	movs	r3, #31
 8005790:	18fb      	adds	r3, r7, r3
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d015      	beq.n	80057c4 <UART_SetConfig+0x1f0>
 8005798:	dc18      	bgt.n	80057cc <UART_SetConfig+0x1f8>
 800579a:	2b04      	cmp	r3, #4
 800579c:	d00d      	beq.n	80057ba <UART_SetConfig+0x1e6>
 800579e:	dc15      	bgt.n	80057cc <UART_SetConfig+0x1f8>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <UART_SetConfig+0x1d6>
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d005      	beq.n	80057b4 <UART_SetConfig+0x1e0>
 80057a8:	e010      	b.n	80057cc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057aa:	f7ff f9cb 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 80057ae:	0003      	movs	r3, r0
 80057b0:	61bb      	str	r3, [r7, #24]
        break;
 80057b2:	e012      	b.n	80057da <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b4:	4b26      	ldr	r3, [pc, #152]	; (8005850 <UART_SetConfig+0x27c>)
 80057b6:	61bb      	str	r3, [r7, #24]
        break;
 80057b8:	e00f      	b.n	80057da <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ba:	f7ff f955 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 80057be:	0003      	movs	r3, r0
 80057c0:	61bb      	str	r3, [r7, #24]
        break;
 80057c2:	e00a      	b.n	80057da <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	61bb      	str	r3, [r7, #24]
        break;
 80057ca:	e006      	b.n	80057da <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057d0:	231e      	movs	r3, #30
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	2201      	movs	r2, #1
 80057d6:	701a      	strb	r2, [r3, #0]
        break;
 80057d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01e      	beq.n	800581e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	085a      	lsrs	r2, r3, #1
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	18d2      	adds	r2, r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	0019      	movs	r1, r3
 80057f0:	0010      	movs	r0, r2
 80057f2:	f7fa fc9b 	bl	800012c <__udivsi3>
 80057f6:	0003      	movs	r3, r0
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b0f      	cmp	r3, #15
 8005800:	d909      	bls.n	8005816 <UART_SetConfig+0x242>
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	2380      	movs	r3, #128	; 0x80
 8005806:	025b      	lsls	r3, r3, #9
 8005808:	429a      	cmp	r2, r3
 800580a:	d204      	bcs.n	8005816 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	e003      	b.n	800581e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005816:	231e      	movs	r3, #30
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800582a:	231e      	movs	r3, #30
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	781b      	ldrb	r3, [r3, #0]
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b008      	add	sp, #32
 8005836:	bd80      	pop	{r7, pc}
 8005838:	ffff69f3 	.word	0xffff69f3
 800583c:	ffffcfff 	.word	0xffffcfff
 8005840:	fffff4ff 	.word	0xfffff4ff
 8005844:	40013800 	.word	0x40013800
 8005848:	40021000 	.word	0x40021000
 800584c:	40004400 	.word	0x40004400
 8005850:	007a1200 	.word	0x007a1200

08005854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	2201      	movs	r2, #1
 8005862:	4013      	ands	r3, r2
 8005864:	d00b      	beq.n	800587e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a4a      	ldr	r2, [pc, #296]	; (8005998 <UART_AdvFeatureConfig+0x144>)
 800586e:	4013      	ands	r3, r2
 8005870:	0019      	movs	r1, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2202      	movs	r2, #2
 8005884:	4013      	ands	r3, r2
 8005886:	d00b      	beq.n	80058a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	4a43      	ldr	r2, [pc, #268]	; (800599c <UART_AdvFeatureConfig+0x148>)
 8005890:	4013      	ands	r3, r2
 8005892:	0019      	movs	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2204      	movs	r2, #4
 80058a6:	4013      	ands	r3, r2
 80058a8:	d00b      	beq.n	80058c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a3b      	ldr	r2, [pc, #236]	; (80059a0 <UART_AdvFeatureConfig+0x14c>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	0019      	movs	r1, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2208      	movs	r2, #8
 80058c8:	4013      	ands	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4a34      	ldr	r2, [pc, #208]	; (80059a4 <UART_AdvFeatureConfig+0x150>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	0019      	movs	r1, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	2210      	movs	r2, #16
 80058ea:	4013      	ands	r3, r2
 80058ec:	d00b      	beq.n	8005906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4a2c      	ldr	r2, [pc, #176]	; (80059a8 <UART_AdvFeatureConfig+0x154>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	0019      	movs	r1, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	2220      	movs	r2, #32
 800590c:	4013      	ands	r3, r2
 800590e:	d00b      	beq.n	8005928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	4a25      	ldr	r2, [pc, #148]	; (80059ac <UART_AdvFeatureConfig+0x158>)
 8005918:	4013      	ands	r3, r2
 800591a:	0019      	movs	r1, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2240      	movs	r2, #64	; 0x40
 800592e:	4013      	ands	r3, r2
 8005930:	d01d      	beq.n	800596e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <UART_AdvFeatureConfig+0x15c>)
 800593a:	4013      	ands	r3, r2
 800593c:	0019      	movs	r1, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	035b      	lsls	r3, r3, #13
 8005952:	429a      	cmp	r2, r3
 8005954:	d10b      	bne.n	800596e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <UART_AdvFeatureConfig+0x160>)
 800595e:	4013      	ands	r3, r2
 8005960:	0019      	movs	r1, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2280      	movs	r2, #128	; 0x80
 8005974:	4013      	ands	r3, r2
 8005976:	d00b      	beq.n	8005990 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4a0e      	ldr	r2, [pc, #56]	; (80059b8 <UART_AdvFeatureConfig+0x164>)
 8005980:	4013      	ands	r3, r2
 8005982:	0019      	movs	r1, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  }
}
 8005990:	46c0      	nop			; (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	b002      	add	sp, #8
 8005996:	bd80      	pop	{r7, pc}
 8005998:	fffdffff 	.word	0xfffdffff
 800599c:	fffeffff 	.word	0xfffeffff
 80059a0:	fffbffff 	.word	0xfffbffff
 80059a4:	ffff7fff 	.word	0xffff7fff
 80059a8:	ffffefff 	.word	0xffffefff
 80059ac:	ffffdfff 	.word	0xffffdfff
 80059b0:	ffefffff 	.word	0xffefffff
 80059b4:	ff9fffff 	.word	0xff9fffff
 80059b8:	fff7ffff 	.word	0xfff7ffff

080059bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2280      	movs	r2, #128	; 0x80
 80059c8:	2100      	movs	r1, #0
 80059ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059cc:	f7fd fcc4 	bl	8003358 <HAL_GetTick>
 80059d0:	0003      	movs	r3, r0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2208      	movs	r2, #8
 80059dc:	4013      	ands	r3, r2
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d10c      	bne.n	80059fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2280      	movs	r2, #128	; 0x80
 80059e6:	0391      	lsls	r1, r2, #14
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <UART_CheckIdleState+0x8c>)
 80059ec:	9200      	str	r2, [sp, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f000 f82c 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 80059f4:	1e03      	subs	r3, r0, #0
 80059f6:	d001      	beq.n	80059fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e021      	b.n	8005a40 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2204      	movs	r2, #4
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d10c      	bne.n	8005a24 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2280      	movs	r2, #128	; 0x80
 8005a0e:	03d1      	lsls	r1, r2, #15
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4a0d      	ldr	r2, [pc, #52]	; (8005a48 <UART_CheckIdleState+0x8c>)
 8005a14:	9200      	str	r2, [sp, #0]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f000 f818 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 8005a1c:	1e03      	subs	r3, r0, #0
 8005a1e:	d001      	beq.n	8005a24 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e00d      	b.n	8005a40 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2274      	movs	r2, #116	; 0x74
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	0018      	movs	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	b004      	add	sp, #16
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	01ffffff 	.word	0x01ffffff

08005a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b094      	sub	sp, #80	; 0x50
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	1dfb      	adds	r3, r7, #7
 8005a5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5c:	e0a3      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a60:	3301      	adds	r3, #1
 8005a62:	d100      	bne.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005a64:	e09f      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7fd fc77 	bl	8003358 <HAL_GetTick>
 8005a6a:	0002      	movs	r2, r0
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d13d      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a84:	647b      	str	r3, [r7, #68]	; 0x44
 8005a86:	2301      	movs	r3, #1
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	f383 8810 	msr	PRIMASK, r3
}
 8005a90:	46c0      	nop			; (mov r8, r8)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	494c      	ldr	r1, [pc, #304]	; (8005bd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005a9e:	400a      	ands	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aae:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab8:	2301      	movs	r3, #1
 8005aba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	f383 8810 	msr	PRIMASK, r3
}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2101      	movs	r1, #1
 8005ad0:	438a      	bics	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ada:	f383 8810 	msr	PRIMASK, r3
}
 8005ade:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2274      	movs	r2, #116	; 0x74
 8005af0:	2100      	movs	r1, #0
 8005af2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e067      	b.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2204      	movs	r2, #4
 8005b00:	4013      	ands	r3, r2
 8005b02:	d050      	beq.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	2380      	movs	r3, #128	; 0x80
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	401a      	ands	r2, r3
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d146      	bne.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	0112      	lsls	r2, r2, #4
 8005b20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b22:	f3ef 8310 	mrs	r3, PRIMASK
 8005b26:	613b      	str	r3, [r7, #16]
  return(result);
 8005b28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f383 8810 	msr	PRIMASK, r3
}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4923      	ldr	r1, [pc, #140]	; (8005bd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005b44:	400a      	ands	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f383 8810 	msr	PRIMASK, r3
}
 8005b52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b54:	f3ef 8310 	mrs	r3, PRIMASK
 8005b58:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b5e:	2301      	movs	r3, #1
 8005b60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f383 8810 	msr	PRIMASK, r3
}
 8005b68:	46c0      	nop			; (mov r8, r8)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2101      	movs	r1, #1
 8005b76:	438a      	bics	r2, r1
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	f383 8810 	msr	PRIMASK, r3
}
 8005b84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2280      	movs	r2, #128	; 0x80
 8005b96:	2120      	movs	r1, #32
 8005b98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2274      	movs	r2, #116	; 0x74
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e010      	b.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	425a      	negs	r2, r3
 8005bb6:	4153      	adcs	r3, r2
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	001a      	movs	r2, r3
 8005bbc:	1dfb      	adds	r3, r7, #7
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d100      	bne.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005bc4:	e74b      	b.n	8005a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b014      	add	sp, #80	; 0x50
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	fffffe5f 	.word	0xfffffe5f

08005bd4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bda:	f3ef 8305 	mrs	r3, IPSR
 8005bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8005be0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bea:	607b      	str	r3, [r7, #4]
  return(result);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <osKernelInitialize+0x2e>
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <osKernelInitialize+0x54>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d103      	bne.n	8005c02 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005bfa:	2306      	movs	r3, #6
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e00c      	b.n	8005c1c <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <osKernelInitialize+0x54>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d105      	bne.n	8005c16 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005c0a:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <osKernelInitialize+0x54>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e002      	b.n	8005c1c <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8005c16:	2301      	movs	r3, #1
 8005c18:	425b      	negs	r3, r3
 8005c1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
}
 8005c1e:	0018      	movs	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b004      	add	sp, #16
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	20000130 	.word	0x20000130

08005c2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c32:	f3ef 8305 	mrs	r3, IPSR
 8005c36:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c42:	607b      	str	r3, [r7, #4]
  return(result);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <osKernelStart+0x2e>
 8005c4a:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <osKernelStart+0x58>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d103      	bne.n	8005c5a <osKernelStart+0x2e>
    stat = osErrorISR;
 8005c52:	2306      	movs	r3, #6
 8005c54:	425b      	negs	r3, r3
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e00e      	b.n	8005c78 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <osKernelStart+0x58>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d107      	bne.n	8005c72 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005c62:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <osKernelStart+0x58>)
 8005c64:	2202      	movs	r2, #2
 8005c66:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005c68:	f000 ff7e 	bl	8006b68 <vTaskStartScheduler>
      stat = osOK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e002      	b.n	8005c78 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8005c72:	2301      	movs	r3, #1
 8005c74:	425b      	negs	r3, r3
 8005c76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c78:	68fb      	ldr	r3, [r7, #12]
}
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b004      	add	sp, #16
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	20000130 	.word	0x20000130

08005c88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c88:	b5b0      	push	{r4, r5, r7, lr}
 8005c8a:	b090      	sub	sp, #64	; 0x40
 8005c8c:	af04      	add	r7, sp, #16
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c98:	f3ef 8305 	mrs	r3, IPSR
 8005c9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c9e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d000      	beq.n	8005ca6 <osThreadNew+0x1e>
 8005ca4:	e090      	b.n	8005dc8 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8005caa:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <osThreadNew+0x34>
 8005cb2:	4b48      	ldr	r3, [pc, #288]	; (8005dd4 <osThreadNew+0x14c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d100      	bne.n	8005cbc <osThreadNew+0x34>
 8005cba:	e085      	b.n	8005dc8 <osThreadNew+0x140>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d100      	bne.n	8005cc4 <osThreadNew+0x3c>
 8005cc2:	e081      	b.n	8005dc8 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005cc8:	2318      	movs	r3, #24
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8005ccc:	2117      	movs	r1, #23
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005cd4:	187b      	adds	r3, r7, r1
 8005cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	425b      	negs	r3, r3
 8005cdc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d044      	beq.n	8005d6e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <osThreadNew+0x6a>
        name = attr->name;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <osThreadNew+0x8e>
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	2b38      	cmp	r3, #56	; 0x38
 8005d0a:	d804      	bhi.n	8005d16 <osThreadNew+0x8e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	4013      	ands	r3, r2
 8005d14:	d001      	beq.n	8005d1a <osThreadNew+0x92>
        return (NULL);
 8005d16:	2300      	movs	r3, #0
 8005d18:	e057      	b.n	8005dca <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00e      	beq.n	8005d50 <osThreadNew+0xc8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b5b      	cmp	r3, #91	; 0x5b
 8005d38:	d90a      	bls.n	8005d50 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d006      	beq.n	8005d50 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <osThreadNew+0xc8>
        mem = 1;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	e010      	b.n	8005d72 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10c      	bne.n	8005d72 <osThreadNew+0xea>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d108      	bne.n	8005d72 <osThreadNew+0xea>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <osThreadNew+0xea>
          mem = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	623b      	str	r3, [r7, #32]
 8005d6c:	e001      	b.n	8005d72 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d112      	bne.n	8005d9e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d80:	68bd      	ldr	r5, [r7, #8]
 8005d82:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	9302      	str	r3, [sp, #8]
 8005d8a:	9201      	str	r2, [sp, #4]
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	002b      	movs	r3, r5
 8005d92:	0022      	movs	r2, r4
 8005d94:	f000 fd49 	bl	800682a <xTaskCreateStatic>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	e014      	b.n	8005dc8 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d111      	bne.n	8005dc8 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68bc      	ldr	r4, [r7, #8]
 8005daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	2310      	movs	r3, #16
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	9301      	str	r3, [sp, #4]
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	0023      	movs	r3, r4
 8005dba:	f000 fd79 	bl	80068b0 <xTaskCreate>
 8005dbe:	0003      	movs	r3, r0
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d001      	beq.n	8005dc8 <osThreadNew+0x140>
          hTask = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dc8:	693b      	ldr	r3, [r7, #16]
}
 8005dca:	0018      	movs	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b00c      	add	sp, #48	; 0x30
 8005dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	20000130 	.word	0x20000130

08005dd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de0:	f3ef 8305 	mrs	r3, IPSR
 8005de4:	613b      	str	r3, [r7, #16]
  return(result);
 8005de6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dec:	f3ef 8310 	mrs	r3, PRIMASK
 8005df0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <osDelay+0x30>
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <osDelay+0x4c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d103      	bne.n	8005e08 <osDelay+0x30>
    stat = osErrorISR;
 8005e00:	2306      	movs	r3, #6
 8005e02:	425b      	negs	r3, r3
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e008      	b.n	8005e1a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <osDelay+0x42>
      vTaskDelay(ticks);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f000 fe81 	bl	8006b1c <vTaskDelay>
    }
  }

  return (stat);
 8005e1a:	697b      	ldr	r3, [r7, #20]
}
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b006      	add	sp, #24
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000130 	.word	0x20000130

08005e28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a06      	ldr	r2, [pc, #24]	; (8005e50 <vApplicationGetIdleTaskMemory+0x28>)
 8005e38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4a05      	ldr	r2, [pc, #20]	; (8005e54 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2240      	movs	r2, #64	; 0x40
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b004      	add	sp, #16
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	20000134 	.word	0x20000134
 8005e54:	20000190 	.word	0x20000190

08005e58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <vApplicationGetTimerTaskMemory+0x28>)
 8005e68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4a05      	ldr	r2, [pc, #20]	; (8005e84 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	601a      	str	r2, [r3, #0]
}
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b004      	add	sp, #16
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	20000290 	.word	0x20000290
 8005e84:	200002ec 	.word	0x200002ec

08005e88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3308      	adds	r3, #8
 8005e94:	001a      	movs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4252      	negs	r2, r2
 8005ea0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ebc:	46c0      	nop			; (mov r8, r8)
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b002      	add	sp, #8
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b002      	add	sp, #8
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b004      	add	sp, #16
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	3301      	adds	r3, #1
 8005f32:	d103      	bne.n	8005f3c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e00c      	b.n	8005f56 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e002      	b.n	8005f4a <vListInsert+0x2c>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d2f6      	bcs.n	8005f44 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b004      	add	sp, #16
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6892      	ldr	r2, [r2, #8]
 8005fa0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6852      	ldr	r2, [r2, #4]
 8005faa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d103      	bne.n	8005fbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	1e5a      	subs	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
}
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b004      	add	sp, #16
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <xQueueGenericReset+0x18>
 8005fee:	b672      	cpsid	i
 8005ff0:	e7fe      	b.n	8005ff0 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005ff2:	f001 fdcd 	bl	8007b90 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	434b      	muls	r3, r1
 8006004:	18d2      	adds	r2, r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006020:	1e59      	subs	r1, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	434b      	muls	r3, r1
 8006028:	18d2      	adds	r2, r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2244      	movs	r2, #68	; 0x44
 8006032:	21ff      	movs	r1, #255	; 0xff
 8006034:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2245      	movs	r2, #69	; 0x45
 800603a:	21ff      	movs	r1, #255	; 0xff
 800603c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10d      	bne.n	8006060 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d013      	beq.n	8006074 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3310      	adds	r3, #16
 8006050:	0018      	movs	r0, r3
 8006052:	f000 ffcd 	bl	8006ff0 <xTaskRemoveFromEventList>
 8006056:	1e03      	subs	r3, r0, #0
 8006058:	d00c      	beq.n	8006074 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800605a:	f001 fd89 	bl	8007b70 <vPortYield>
 800605e:	e009      	b.n	8006074 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3310      	adds	r3, #16
 8006064:	0018      	movs	r0, r3
 8006066:	f7ff ff0f 	bl	8005e88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3324      	adds	r3, #36	; 0x24
 800606e:	0018      	movs	r0, r3
 8006070:	f7ff ff0a 	bl	8005e88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006074:	f001 fd9e 	bl	8007bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006078:	2301      	movs	r3, #1
}
 800607a:	0018      	movs	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	b004      	add	sp, #16
 8006080:	bd80      	pop	{r7, pc}

08006082 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006082:	b590      	push	{r4, r7, lr}
 8006084:	b089      	sub	sp, #36	; 0x24
 8006086:	af02      	add	r7, sp, #8
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <xQueueGenericCreateStatic+0x18>
 8006096:	b672      	cpsid	i
 8006098:	e7fe      	b.n	8006098 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <xQueueGenericCreateStatic+0x22>
 80060a0:	b672      	cpsid	i
 80060a2:	e7fe      	b.n	80060a2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <xQueueGenericCreateStatic+0x2e>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <xQueueGenericCreateStatic+0x32>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <xQueueGenericCreateStatic+0x34>
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <xQueueGenericCreateStatic+0x3c>
 80060ba:	b672      	cpsid	i
 80060bc:	e7fe      	b.n	80060bc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <xQueueGenericCreateStatic+0x48>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <xQueueGenericCreateStatic+0x4c>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <xQueueGenericCreateStatic+0x4e>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <xQueueGenericCreateStatic+0x56>
 80060d4:	b672      	cpsid	i
 80060d6:	e7fe      	b.n	80060d6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060d8:	2350      	movs	r3, #80	; 0x50
 80060da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b50      	cmp	r3, #80	; 0x50
 80060e0:	d001      	beq.n	80060e6 <xQueueGenericCreateStatic+0x64>
 80060e2:	b672      	cpsid	i
 80060e4:	e7fe      	b.n	80060e4 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00e      	beq.n	800610e <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2246      	movs	r2, #70	; 0x46
 80060f4:	2101      	movs	r1, #1
 80060f6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060f8:	2328      	movs	r3, #40	; 0x28
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	781c      	ldrb	r4, [r3, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	0023      	movs	r3, r4
 800610a:	f000 f805 	bl	8006118 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800610e:	697b      	ldr	r3, [r7, #20]
	}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b007      	add	sp, #28
 8006116:	bd90      	pop	{r4, r7, pc}

08006118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	001a      	movs	r2, r3
 8006126:	1cfb      	adds	r3, r7, #3
 8006128:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e002      	b.n	800613e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2101      	movs	r1, #1
 800614e:	0018      	movs	r0, r3
 8006150:	f7ff ff43 	bl	8005fda <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	1cfa      	adds	r2, r7, #3
 8006158:	214c      	movs	r1, #76	; 0x4c
 800615a:	7812      	ldrb	r2, [r2, #0]
 800615c:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	46bd      	mov	sp, r7
 8006162:	b004      	add	sp, #16
 8006164:	bd80      	pop	{r7, pc}

08006166 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b08a      	sub	sp, #40	; 0x28
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006174:	2300      	movs	r3, #0
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <xQueueGenericSend+0x20>
 8006182:	b672      	cpsid	i
 8006184:	e7fe      	b.n	8006184 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <xQueueGenericSend+0x2e>
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <xQueueGenericSend+0x32>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <xQueueGenericSend+0x34>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <xQueueGenericSend+0x3c>
 800619e:	b672      	cpsid	i
 80061a0:	e7fe      	b.n	80061a0 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d103      	bne.n	80061b0 <xQueueGenericSend+0x4a>
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <xQueueGenericSend+0x4e>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <xQueueGenericSend+0x50>
 80061b4:	2300      	movs	r3, #0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <xQueueGenericSend+0x58>
 80061ba:	b672      	cpsid	i
 80061bc:	e7fe      	b.n	80061bc <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061be:	f001 f8af 	bl	8007320 <xTaskGetSchedulerState>
 80061c2:	1e03      	subs	r3, r0, #0
 80061c4:	d102      	bne.n	80061cc <xQueueGenericSend+0x66>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <xQueueGenericSend+0x6a>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <xQueueGenericSend+0x6c>
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <xQueueGenericSend+0x74>
 80061d6:	b672      	cpsid	i
 80061d8:	e7fe      	b.n	80061d8 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061da:	f001 fcd9 	bl	8007b90 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d302      	bcc.n	80061f0 <xQueueGenericSend+0x8a>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d11e      	bne.n	800622e <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	0018      	movs	r0, r3
 80061f8:	f000 f99f 	bl	800653a <prvCopyDataToQueue>
 80061fc:	0003      	movs	r3, r0
 80061fe:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d009      	beq.n	800621c <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	3324      	adds	r3, #36	; 0x24
 800620c:	0018      	movs	r0, r3
 800620e:	f000 feef 	bl	8006ff0 <xTaskRemoveFromEventList>
 8006212:	1e03      	subs	r3, r0, #0
 8006214:	d007      	beq.n	8006226 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006216:	f001 fcab 	bl	8007b70 <vPortYield>
 800621a:	e004      	b.n	8006226 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006222:	f001 fca5 	bl	8007b70 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006226:	f001 fcc5 	bl	8007bb4 <vPortExitCritical>
				return pdPASS;
 800622a:	2301      	movs	r3, #1
 800622c:	e05b      	b.n	80062e6 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006234:	f001 fcbe 	bl	8007bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006238:	2300      	movs	r3, #0
 800623a:	e054      	b.n	80062e6 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006242:	2314      	movs	r3, #20
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	0018      	movs	r0, r3
 8006248:	f000 ff2e 	bl	80070a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006250:	f001 fcb0 	bl	8007bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006254:	f000 fcdc 	bl	8006c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006258:	f001 fc9a 	bl	8007b90 <vPortEnterCritical>
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	2244      	movs	r2, #68	; 0x44
 8006260:	5c9b      	ldrb	r3, [r3, r2]
 8006262:	b25b      	sxtb	r3, r3
 8006264:	3301      	adds	r3, #1
 8006266:	d103      	bne.n	8006270 <xQueueGenericSend+0x10a>
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2244      	movs	r2, #68	; 0x44
 800626c:	2100      	movs	r1, #0
 800626e:	5499      	strb	r1, [r3, r2]
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	2245      	movs	r2, #69	; 0x45
 8006274:	5c9b      	ldrb	r3, [r3, r2]
 8006276:	b25b      	sxtb	r3, r3
 8006278:	3301      	adds	r3, #1
 800627a:	d103      	bne.n	8006284 <xQueueGenericSend+0x11e>
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	2245      	movs	r2, #69	; 0x45
 8006280:	2100      	movs	r1, #0
 8006282:	5499      	strb	r1, [r3, r2]
 8006284:	f001 fc96 	bl	8007bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006288:	1d3a      	adds	r2, r7, #4
 800628a:	2314      	movs	r3, #20
 800628c:	18fb      	adds	r3, r7, r3
 800628e:	0011      	movs	r1, r2
 8006290:	0018      	movs	r0, r3
 8006292:	f000 ff1d 	bl	80070d0 <xTaskCheckForTimeOut>
 8006296:	1e03      	subs	r3, r0, #0
 8006298:	d11e      	bne.n	80062d8 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	0018      	movs	r0, r3
 800629e:	f000 fa51 	bl	8006744 <prvIsQueueFull>
 80062a2:	1e03      	subs	r3, r0, #0
 80062a4:	d011      	beq.n	80062ca <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	3310      	adds	r3, #16
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 fe5a 	bl	8006f68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 f9d0 	bl	800665c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062bc:	f000 fcb4 	bl	8006c28 <xTaskResumeAll>
 80062c0:	1e03      	subs	r3, r0, #0
 80062c2:	d18a      	bne.n	80061da <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80062c4:	f001 fc54 	bl	8007b70 <vPortYield>
 80062c8:	e787      	b.n	80061da <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 f9c5 	bl	800665c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062d2:	f000 fca9 	bl	8006c28 <xTaskResumeAll>
 80062d6:	e780      	b.n	80061da <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 f9be 	bl	800665c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062e0:	f000 fca2 	bl	8006c28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062e4:	2300      	movs	r3, #0
		}
	}
}
 80062e6:	0018      	movs	r0, r3
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b00a      	add	sp, #40	; 0x28
 80062ec:	bd80      	pop	{r7, pc}

080062ee <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062ee:	b590      	push	{r4, r7, lr}
 80062f0:	b089      	sub	sp, #36	; 0x24
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
 80062fa:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <xQueueGenericSendFromISR+0x1c>
 8006306:	b672      	cpsid	i
 8006308:	e7fe      	b.n	8006308 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d103      	bne.n	8006318 <xQueueGenericSendFromISR+0x2a>
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <xQueueGenericSendFromISR+0x2e>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <xQueueGenericSendFromISR+0x30>
 800631c:	2300      	movs	r3, #0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <xQueueGenericSendFromISR+0x38>
 8006322:	b672      	cpsid	i
 8006324:	e7fe      	b.n	8006324 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d103      	bne.n	8006334 <xQueueGenericSendFromISR+0x46>
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <xQueueGenericSendFromISR+0x4a>
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <xQueueGenericSendFromISR+0x4c>
 8006338:	2300      	movs	r3, #0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <xQueueGenericSendFromISR+0x54>
 800633e:	b672      	cpsid	i
 8006340:	e7fe      	b.n	8006340 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006342:	f001 fc4f 	bl	8007be4 <ulSetInterruptMaskFromISR>
 8006346:	0003      	movs	r3, r0
 8006348:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006352:	429a      	cmp	r2, r3
 8006354:	d302      	bcc.n	800635c <xQueueGenericSendFromISR+0x6e>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d12e      	bne.n	80063ba <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800635c:	2413      	movs	r4, #19
 800635e:	193b      	adds	r3, r7, r4
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	2145      	movs	r1, #69	; 0x45
 8006364:	5c52      	ldrb	r2, [r2, r1]
 8006366:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	0018      	movs	r0, r3
 8006370:	f000 f8e3 	bl	800653a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006374:	193b      	adds	r3, r7, r4
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	b25b      	sxtb	r3, r3
 800637a:	3301      	adds	r3, #1
 800637c:	d111      	bne.n	80063a2 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	d016      	beq.n	80063b4 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	0018      	movs	r0, r3
 800638c:	f000 fe30 	bl	8006ff0 <xTaskRemoveFromEventList>
 8006390:	1e03      	subs	r3, r0, #0
 8006392:	d00f      	beq.n	80063b4 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00c      	beq.n	80063b4 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	e008      	b.n	80063b4 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063a2:	2313      	movs	r3, #19
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	b259      	sxtb	r1, r3
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2245      	movs	r2, #69	; 0x45
 80063b2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80063b4:	2301      	movs	r3, #1
 80063b6:	61fb      	str	r3, [r7, #28]
		{
 80063b8:	e001      	b.n	80063be <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	0018      	movs	r0, r3
 80063c2:	f001 fc15 	bl	8007bf0 <vClearInterruptMaskFromISR>

	return xReturn;
 80063c6:	69fb      	ldr	r3, [r7, #28]
}
 80063c8:	0018      	movs	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b009      	add	sp, #36	; 0x24
 80063ce:	bd90      	pop	{r4, r7, pc}

080063d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063dc:	2300      	movs	r3, #0
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <xQueueReceive+0x1e>
 80063ea:	b672      	cpsid	i
 80063ec:	e7fe      	b.n	80063ec <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d103      	bne.n	80063fc <xQueueReceive+0x2c>
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <xQueueReceive+0x30>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <xQueueReceive+0x32>
 8006400:	2300      	movs	r3, #0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <xQueueReceive+0x3a>
 8006406:	b672      	cpsid	i
 8006408:	e7fe      	b.n	8006408 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800640a:	f000 ff89 	bl	8007320 <xTaskGetSchedulerState>
 800640e:	1e03      	subs	r3, r0, #0
 8006410:	d102      	bne.n	8006418 <xQueueReceive+0x48>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <xQueueReceive+0x4c>
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <xQueueReceive+0x4e>
 800641c:	2300      	movs	r3, #0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <xQueueReceive+0x56>
 8006422:	b672      	cpsid	i
 8006424:	e7fe      	b.n	8006424 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006426:	f001 fbb3 	bl	8007b90 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d01a      	beq.n	800646c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	0011      	movs	r1, r2
 800643c:	0018      	movs	r0, r3
 800643e:	f000 f8e7 	bl	8006610 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	1e5a      	subs	r2, r3, #1
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	3310      	adds	r3, #16
 8006456:	0018      	movs	r0, r3
 8006458:	f000 fdca 	bl	8006ff0 <xTaskRemoveFromEventList>
 800645c:	1e03      	subs	r3, r0, #0
 800645e:	d001      	beq.n	8006464 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006460:	f001 fb86 	bl	8007b70 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006464:	f001 fba6 	bl	8007bb4 <vPortExitCritical>
				return pdPASS;
 8006468:	2301      	movs	r3, #1
 800646a:	e062      	b.n	8006532 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006472:	f001 fb9f 	bl	8007bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006476:	2300      	movs	r3, #0
 8006478:	e05b      	b.n	8006532 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006480:	2314      	movs	r3, #20
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	0018      	movs	r0, r3
 8006486:	f000 fe0f 	bl	80070a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800648a:	2301      	movs	r3, #1
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800648e:	f001 fb91 	bl	8007bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006492:	f000 fbbd 	bl	8006c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006496:	f001 fb7b 	bl	8007b90 <vPortEnterCritical>
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2244      	movs	r2, #68	; 0x44
 800649e:	5c9b      	ldrb	r3, [r3, r2]
 80064a0:	b25b      	sxtb	r3, r3
 80064a2:	3301      	adds	r3, #1
 80064a4:	d103      	bne.n	80064ae <xQueueReceive+0xde>
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	2244      	movs	r2, #68	; 0x44
 80064aa:	2100      	movs	r1, #0
 80064ac:	5499      	strb	r1, [r3, r2]
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	2245      	movs	r2, #69	; 0x45
 80064b2:	5c9b      	ldrb	r3, [r3, r2]
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	3301      	adds	r3, #1
 80064b8:	d103      	bne.n	80064c2 <xQueueReceive+0xf2>
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	2245      	movs	r2, #69	; 0x45
 80064be:	2100      	movs	r1, #0
 80064c0:	5499      	strb	r1, [r3, r2]
 80064c2:	f001 fb77 	bl	8007bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064c6:	1d3a      	adds	r2, r7, #4
 80064c8:	2314      	movs	r3, #20
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	0011      	movs	r1, r2
 80064ce:	0018      	movs	r0, r3
 80064d0:	f000 fdfe 	bl	80070d0 <xTaskCheckForTimeOut>
 80064d4:	1e03      	subs	r3, r0, #0
 80064d6:	d11e      	bne.n	8006516 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	0018      	movs	r0, r3
 80064dc:	f000 f91c 	bl	8006718 <prvIsQueueEmpty>
 80064e0:	1e03      	subs	r3, r0, #0
 80064e2:	d011      	beq.n	8006508 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	3324      	adds	r3, #36	; 0x24
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	0011      	movs	r1, r2
 80064ec:	0018      	movs	r0, r3
 80064ee:	f000 fd3b 	bl	8006f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	0018      	movs	r0, r3
 80064f6:	f000 f8b1 	bl	800665c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064fa:	f000 fb95 	bl	8006c28 <xTaskResumeAll>
 80064fe:	1e03      	subs	r3, r0, #0
 8006500:	d191      	bne.n	8006426 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8006502:	f001 fb35 	bl	8007b70 <vPortYield>
 8006506:	e78e      	b.n	8006426 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	0018      	movs	r0, r3
 800650c:	f000 f8a6 	bl	800665c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006510:	f000 fb8a 	bl	8006c28 <xTaskResumeAll>
 8006514:	e787      	b.n	8006426 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	0018      	movs	r0, r3
 800651a:	f000 f89f 	bl	800665c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800651e:	f000 fb83 	bl	8006c28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	0018      	movs	r0, r3
 8006526:	f000 f8f7 	bl	8006718 <prvIsQueueEmpty>
 800652a:	1e03      	subs	r3, r0, #0
 800652c:	d100      	bne.n	8006530 <xQueueReceive+0x160>
 800652e:	e77a      	b.n	8006426 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006530:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006532:	0018      	movs	r0, r3
 8006534:	46bd      	mov	sp, r7
 8006536:	b00a      	add	sp, #40	; 0x28
 8006538:	bd80      	pop	{r7, pc}

0800653a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b086      	sub	sp, #24
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10e      	bne.n	8006576 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d14e      	bne.n	80065fe <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	0018      	movs	r0, r3
 8006566:	f000 fef7 	bl	8007358 <xTaskPriorityDisinherit>
 800656a:	0003      	movs	r3, r0
 800656c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	605a      	str	r2, [r3, #4]
 8006574:	e043      	b.n	80065fe <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d119      	bne.n	80065b0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6898      	ldr	r0, [r3, #8]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	0019      	movs	r1, r3
 8006588:	f001 fd88 	bl	800809c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	18d2      	adds	r2, r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d32b      	bcc.n	80065fe <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	609a      	str	r2, [r3, #8]
 80065ae:	e026      	b.n	80065fe <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68d8      	ldr	r0, [r3, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	0019      	movs	r1, r3
 80065bc:	f001 fd6e 	bl	800809c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	425b      	negs	r3, r3
 80065ca:	18d2      	adds	r2, r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d207      	bcs.n	80065ec <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	425b      	negs	r3, r3
 80065e6:	18d2      	adds	r2, r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d105      	bne.n	80065fe <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006606:	697b      	ldr	r3, [r7, #20]
}
 8006608:	0018      	movs	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	b006      	add	sp, #24
 800660e:	bd80      	pop	{r7, pc}

08006610 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d018      	beq.n	8006654 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	18d2      	adds	r2, r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d303      	bcc.n	8006644 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68d9      	ldr	r1, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	0018      	movs	r0, r3
 8006650:	f001 fd24 	bl	800809c <memcpy>
	}
}
 8006654:	46c0      	nop			; (mov r8, r8)
 8006656:	46bd      	mov	sp, r7
 8006658:	b002      	add	sp, #8
 800665a:	bd80      	pop	{r7, pc}

0800665c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006664:	f001 fa94 	bl	8007b90 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006668:	230f      	movs	r3, #15
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	2145      	movs	r1, #69	; 0x45
 8006670:	5c52      	ldrb	r2, [r2, r1]
 8006672:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006674:	e013      	b.n	800669e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d016      	beq.n	80066ac <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3324      	adds	r3, #36	; 0x24
 8006682:	0018      	movs	r0, r3
 8006684:	f000 fcb4 	bl	8006ff0 <xTaskRemoveFromEventList>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d001      	beq.n	8006690 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800668c:	f000 fd70 	bl	8007170 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006690:	210f      	movs	r1, #15
 8006692:	187b      	adds	r3, r7, r1
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	3b01      	subs	r3, #1
 8006698:	b2da      	uxtb	r2, r3
 800669a:	187b      	adds	r3, r7, r1
 800669c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800669e:	230f      	movs	r3, #15
 80066a0:	18fb      	adds	r3, r7, r3
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b25b      	sxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dce5      	bgt.n	8006676 <prvUnlockQueue+0x1a>
 80066aa:	e000      	b.n	80066ae <prvUnlockQueue+0x52>
					break;
 80066ac:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2245      	movs	r2, #69	; 0x45
 80066b2:	21ff      	movs	r1, #255	; 0xff
 80066b4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80066b6:	f001 fa7d 	bl	8007bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066ba:	f001 fa69 	bl	8007b90 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066be:	230e      	movs	r3, #14
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	2144      	movs	r1, #68	; 0x44
 80066c6:	5c52      	ldrb	r2, [r2, r1]
 80066c8:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066ca:	e013      	b.n	80066f4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d016      	beq.n	8006702 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3310      	adds	r3, #16
 80066d8:	0018      	movs	r0, r3
 80066da:	f000 fc89 	bl	8006ff0 <xTaskRemoveFromEventList>
 80066de:	1e03      	subs	r3, r0, #0
 80066e0:	d001      	beq.n	80066e6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80066e2:	f000 fd45 	bl	8007170 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066e6:	210e      	movs	r1, #14
 80066e8:	187b      	adds	r3, r7, r1
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	187b      	adds	r3, r7, r1
 80066f2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066f4:	230e      	movs	r3, #14
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	b25b      	sxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dce5      	bgt.n	80066cc <prvUnlockQueue+0x70>
 8006700:	e000      	b.n	8006704 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006702:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2244      	movs	r2, #68	; 0x44
 8006708:	21ff      	movs	r1, #255	; 0xff
 800670a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800670c:	f001 fa52 	bl	8007bb4 <vPortExitCritical>
}
 8006710:	46c0      	nop			; (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	b004      	add	sp, #16
 8006716:	bd80      	pop	{r7, pc}

08006718 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006720:	f001 fa36 	bl	8007b90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800672c:	2301      	movs	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e001      	b.n	8006736 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006736:	f001 fa3d 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 800673a:	68fb      	ldr	r3, [r7, #12]
}
 800673c:	0018      	movs	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	b004      	add	sp, #16
 8006742:	bd80      	pop	{r7, pc}

08006744 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800674c:	f001 fa20 	bl	8007b90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	429a      	cmp	r2, r3
 800675a:	d102      	bne.n	8006762 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800675c:	2301      	movs	r3, #1
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	e001      	b.n	8006766 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006766:	f001 fa25 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 800676a:	68fb      	ldr	r3, [r7, #12]
}
 800676c:	0018      	movs	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	b004      	add	sp, #16
 8006772:	bd80      	pop	{r7, pc}

08006774 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	e015      	b.n	80067b0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006784:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <vQueueAddToRegistry+0x4c>)
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	00d2      	lsls	r2, r2, #3
 800678a:	58d3      	ldr	r3, [r2, r3]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10c      	bne.n	80067aa <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <vQueueAddToRegistry+0x4c>)
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	00d2      	lsls	r2, r2, #3
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800679a:	4a09      	ldr	r2, [pc, #36]	; (80067c0 <vQueueAddToRegistry+0x4c>)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	18d3      	adds	r3, r2, r3
 80067a2:	3304      	adds	r3, #4
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067a8:	e006      	b.n	80067b8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b07      	cmp	r3, #7
 80067b4:	d9e6      	bls.n	8006784 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	46c0      	nop			; (mov r8, r8)
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b004      	add	sp, #16
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20001848 	.word	0x20001848

080067c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067d4:	f001 f9dc 	bl	8007b90 <vPortEnterCritical>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2244      	movs	r2, #68	; 0x44
 80067dc:	5c9b      	ldrb	r3, [r3, r2]
 80067de:	b25b      	sxtb	r3, r3
 80067e0:	3301      	adds	r3, #1
 80067e2:	d103      	bne.n	80067ec <vQueueWaitForMessageRestricted+0x28>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2244      	movs	r2, #68	; 0x44
 80067e8:	2100      	movs	r1, #0
 80067ea:	5499      	strb	r1, [r3, r2]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2245      	movs	r2, #69	; 0x45
 80067f0:	5c9b      	ldrb	r3, [r3, r2]
 80067f2:	b25b      	sxtb	r3, r3
 80067f4:	3301      	adds	r3, #1
 80067f6:	d103      	bne.n	8006800 <vQueueWaitForMessageRestricted+0x3c>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2245      	movs	r2, #69	; 0x45
 80067fc:	2100      	movs	r1, #0
 80067fe:	5499      	strb	r1, [r3, r2]
 8006800:	f001 f9d8 	bl	8007bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	3324      	adds	r3, #36	; 0x24
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	0018      	movs	r0, r3
 8006816:	f000 fbc5 	bl	8006fa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	0018      	movs	r0, r3
 800681e:	f7ff ff1d 	bl	800665c <prvUnlockQueue>
	}
 8006822:	46c0      	nop			; (mov r8, r8)
 8006824:	46bd      	mov	sp, r7
 8006826:	b006      	add	sp, #24
 8006828:	bd80      	pop	{r7, pc}

0800682a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800682a:	b590      	push	{r4, r7, lr}
 800682c:	b08d      	sub	sp, #52	; 0x34
 800682e:	af04      	add	r7, sp, #16
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <xTaskCreateStatic+0x18>
 800683e:	b672      	cpsid	i
 8006840:	e7fe      	b.n	8006840 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <xTaskCreateStatic+0x22>
 8006848:	b672      	cpsid	i
 800684a:	e7fe      	b.n	800684a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800684c:	235c      	movs	r3, #92	; 0x5c
 800684e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b5c      	cmp	r3, #92	; 0x5c
 8006854:	d001      	beq.n	800685a <xTaskCreateStatic+0x30>
 8006856:	b672      	cpsid	i
 8006858:	e7fe      	b.n	8006858 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	2b00      	cmp	r3, #0
 800685e:	d020      	beq.n	80068a2 <xTaskCreateStatic+0x78>
 8006860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01d      	beq.n	80068a2 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800686e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2259      	movs	r2, #89	; 0x59
 8006874:	2102      	movs	r1, #2
 8006876:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006878:	683c      	ldr	r4, [r7, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	2300      	movs	r3, #0
 8006882:	9303      	str	r3, [sp, #12]
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	9302      	str	r3, [sp, #8]
 8006888:	2318      	movs	r3, #24
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	0023      	movs	r3, r4
 8006894:	f000 f858 	bl	8006948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	0018      	movs	r0, r3
 800689c:	f000 f8d6 	bl	8006a4c <prvAddNewTaskToReadyList>
 80068a0:	e001      	b.n	80068a6 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068a6:	69bb      	ldr	r3, [r7, #24]
	}
 80068a8:	0018      	movs	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b009      	add	sp, #36	; 0x24
 80068ae:	bd90      	pop	{r4, r7, pc}

080068b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068b0:	b590      	push	{r4, r7, lr}
 80068b2:	b08d      	sub	sp, #52	; 0x34
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	1dbb      	adds	r3, r7, #6
 80068be:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c0:	1dbb      	adds	r3, r7, #6
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	0018      	movs	r0, r3
 80068c8:	f001 f9fa 	bl	8007cc0 <pvPortMalloc>
 80068cc:	0003      	movs	r3, r0
 80068ce:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d010      	beq.n	80068f8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80068d6:	205c      	movs	r0, #92	; 0x5c
 80068d8:	f001 f9f2 	bl	8007cc0 <pvPortMalloc>
 80068dc:	0003      	movs	r3, r0
 80068de:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
 80068ec:	e006      	b.n	80068fc <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	0018      	movs	r0, r3
 80068f2:	f001 fa8b 	bl	8007e0c <vPortFree>
 80068f6:	e001      	b.n	80068fc <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01a      	beq.n	8006938 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	2259      	movs	r2, #89	; 0x59
 8006906:	2100      	movs	r1, #0
 8006908:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800690a:	1dbb      	adds	r3, r7, #6
 800690c:	881a      	ldrh	r2, [r3, #0]
 800690e:	683c      	ldr	r4, [r7, #0]
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	2300      	movs	r3, #0
 8006916:	9303      	str	r3, [sp, #12]
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	9302      	str	r3, [sp, #8]
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	0023      	movs	r3, r4
 8006926:	f000 f80f 	bl	8006948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	0018      	movs	r0, r3
 800692e:	f000 f88d 	bl	8006a4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006932:	2301      	movs	r3, #1
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	e002      	b.n	800693e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006938:	2301      	movs	r3, #1
 800693a:	425b      	negs	r3, r3
 800693c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800693e:	69bb      	ldr	r3, [r7, #24]
	}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	b009      	add	sp, #36	; 0x24
 8006946:	bd90      	pop	{r4, r7, pc}

08006948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	001a      	movs	r2, r3
 8006960:	21a5      	movs	r1, #165	; 0xa5
 8006962:	f001 fba4 	bl	80080ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4936      	ldr	r1, [pc, #216]	; (8006a48 <prvInitialiseNewTask+0x100>)
 800696e:	468c      	mov	ip, r1
 8006970:	4463      	add	r3, ip
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	18d3      	adds	r3, r2, r3
 8006976:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2207      	movs	r2, #7
 800697c:	4393      	bics	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2207      	movs	r2, #7
 8006984:	4013      	ands	r3, r2
 8006986:	d001      	beq.n	800698c <prvInitialiseNewTask+0x44>
 8006988:	b672      	cpsid	i
 800698a:	e7fe      	b.n	800698a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800698c:	2300      	movs	r3, #0
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e013      	b.n	80069ba <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	18d3      	adds	r3, r2, r3
 8006998:	7818      	ldrb	r0, [r3, #0]
 800699a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800699c:	2134      	movs	r1, #52	; 0x34
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	18d3      	adds	r3, r2, r3
 80069a2:	185b      	adds	r3, r3, r1
 80069a4:	1c02      	adds	r2, r0, #0
 80069a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	18d3      	adds	r3, r2, r3
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d006      	beq.n	80069c2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	3301      	adds	r3, #1
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b0f      	cmp	r3, #15
 80069be:	d9e8      	bls.n	8006992 <prvInitialiseNewTask+0x4a>
 80069c0:	e000      	b.n	80069c4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80069c2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	2243      	movs	r2, #67	; 0x43
 80069c8:	2100      	movs	r1, #0
 80069ca:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2b37      	cmp	r3, #55	; 0x37
 80069d0:	d901      	bls.n	80069d6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069d2:	2337      	movs	r3, #55	; 0x37
 80069d4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	6a3a      	ldr	r2, [r7, #32]
 80069e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	2200      	movs	r2, #0
 80069e6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	3304      	adds	r3, #4
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7ff fa69 	bl	8005ec4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	3318      	adds	r3, #24
 80069f6:	0018      	movs	r0, r3
 80069f8:	f7ff fa64 	bl	8005ec4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	2238      	movs	r2, #56	; 0x38
 8006a06:	1ad2      	subs	r2, r2, r3
 8006a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	2200      	movs	r2, #0
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	2258      	movs	r2, #88	; 0x58
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	0018      	movs	r0, r3
 8006a28:	f001 f816 	bl	8007a58 <pxPortInitialiseStack>
 8006a2c:	0002      	movs	r2, r0
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b006      	add	sp, #24
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	3fffffff 	.word	0x3fffffff

08006a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a54:	f001 f89c 	bl	8007b90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a58:	4b2a      	ldr	r3, [pc, #168]	; (8006b04 <prvAddNewTaskToReadyList+0xb8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	4b29      	ldr	r3, [pc, #164]	; (8006b04 <prvAddNewTaskToReadyList+0xb8>)
 8006a60:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006a62:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a6a:	4b27      	ldr	r3, [pc, #156]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a70:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <prvAddNewTaskToReadyList+0xb8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d110      	bne.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a78:	f000 fb94 	bl	80071a4 <prvInitialiseTaskLists>
 8006a7c:	e00d      	b.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a7e:	4b23      	ldr	r3, [pc, #140]	; (8006b0c <prvAddNewTaskToReadyList+0xc0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d802      	bhi.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a94:	4b1c      	ldr	r3, [pc, #112]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <prvAddNewTaskToReadyList+0xc4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <prvAddNewTaskToReadyList+0xc4>)
 8006aa2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006aa4:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <prvAddNewTaskToReadyList+0xc4>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <prvAddNewTaskToReadyList+0xc8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d903      	bls.n	8006ac0 <prvAddNewTaskToReadyList+0x74>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <prvAddNewTaskToReadyList+0xc8>)
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	0013      	movs	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a12      	ldr	r2, [pc, #72]	; (8006b18 <prvAddNewTaskToReadyList+0xcc>)
 8006ace:	189a      	adds	r2, r3, r2
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	0019      	movs	r1, r3
 8006ad6:	0010      	movs	r0, r2
 8006ad8:	f7ff f9ff 	bl	8005eda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006adc:	f001 f86a 	bl	8007bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <prvAddNewTaskToReadyList+0xc0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d008      	beq.n	8006afa <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ae8:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d201      	bcs.n	8006afa <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006af6:	f001 f83b 	bl	8007b70 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b002      	add	sp, #8
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	200009c0 	.word	0x200009c0
 8006b08:	200004ec 	.word	0x200004ec
 8006b0c:	200009cc 	.word	0x200009cc
 8006b10:	200009dc 	.word	0x200009dc
 8006b14:	200009c8 	.word	0x200009c8
 8006b18:	200004f0 	.word	0x200004f0

08006b1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d010      	beq.n	8006b50 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <vTaskDelay+0x48>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <vTaskDelay+0x1e>
 8006b36:	b672      	cpsid	i
 8006b38:	e7fe      	b.n	8006b38 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006b3a:	f000 f869 	bl	8006c10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2100      	movs	r1, #0
 8006b42:	0018      	movs	r0, r3
 8006b44:	f000 fc64 	bl	8007410 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b48:	f000 f86e 	bl	8006c28 <xTaskResumeAll>
 8006b4c:	0003      	movs	r3, r0
 8006b4e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006b56:	f001 f80b 	bl	8007b70 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	b004      	add	sp, #16
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	46c0      	nop			; (mov r8, r8)
 8006b64:	200009e8 	.word	0x200009e8

08006b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b68:	b590      	push	{r4, r7, lr}
 8006b6a:	b089      	sub	sp, #36	; 0x24
 8006b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b76:	003a      	movs	r2, r7
 8006b78:	1d39      	adds	r1, r7, #4
 8006b7a:	2308      	movs	r3, #8
 8006b7c:	18fb      	adds	r3, r7, r3
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f7ff f952 	bl	8005e28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b84:	683c      	ldr	r4, [r7, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	491b      	ldr	r1, [pc, #108]	; (8006bf8 <vTaskStartScheduler+0x90>)
 8006b8c:	481b      	ldr	r0, [pc, #108]	; (8006bfc <vTaskStartScheduler+0x94>)
 8006b8e:	9202      	str	r2, [sp, #8]
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	2300      	movs	r3, #0
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	2300      	movs	r3, #0
 8006b98:	0022      	movs	r2, r4
 8006b9a:	f7ff fe46 	bl	800682a <xTaskCreateStatic>
 8006b9e:	0002      	movs	r2, r0
 8006ba0:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <vTaskStartScheduler+0x98>)
 8006ba2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ba4:	4b16      	ldr	r3, [pc, #88]	; (8006c00 <vTaskStartScheduler+0x98>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bac:	2301      	movs	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e001      	b.n	8006bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d103      	bne.n	8006bc4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006bbc:	f000 fc7c 	bl	80074b8 <xTimerCreateTimerTask>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d10d      	bne.n	8006be6 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006bca:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <vTaskStartScheduler+0x9c>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	4252      	negs	r2, r2
 8006bd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <vTaskStartScheduler+0xa0>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006bda:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <vTaskStartScheduler+0xa4>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006be0:	f000 ffa2 	bl	8007b28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006be4:	e004      	b.n	8006bf0 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <vTaskStartScheduler+0x88>
 8006bec:	b672      	cpsid	i
 8006bee:	e7fe      	b.n	8006bee <vTaskStartScheduler+0x86>
}
 8006bf0:	46c0      	nop			; (mov r8, r8)
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b005      	add	sp, #20
 8006bf6:	bd90      	pop	{r4, r7, pc}
 8006bf8:	08008b64 	.word	0x08008b64
 8006bfc:	08007185 	.word	0x08007185
 8006c00:	200009e4 	.word	0x200009e4
 8006c04:	200009e0 	.word	0x200009e0
 8006c08:	200009cc 	.word	0x200009cc
 8006c0c:	200009c4 	.word	0x200009c4

08006c10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c14:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <vTaskSuspendAll+0x14>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <vTaskSuspendAll+0x14>)
 8006c1c:	601a      	str	r2, [r3, #0]
}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	200009e8 	.word	0x200009e8

08006c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c36:	4b3a      	ldr	r3, [pc, #232]	; (8006d20 <xTaskResumeAll+0xf8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <xTaskResumeAll+0x1a>
 8006c3e:	b672      	cpsid	i
 8006c40:	e7fe      	b.n	8006c40 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c42:	f000 ffa5 	bl	8007b90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <xTaskResumeAll+0xf8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	1e5a      	subs	r2, r3, #1
 8006c4c:	4b34      	ldr	r3, [pc, #208]	; (8006d20 <xTaskResumeAll+0xf8>)
 8006c4e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c50:	4b33      	ldr	r3, [pc, #204]	; (8006d20 <xTaskResumeAll+0xf8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d15b      	bne.n	8006d10 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c58:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <xTaskResumeAll+0xfc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d057      	beq.n	8006d10 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c60:	e02f      	b.n	8006cc2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006c62:	4b31      	ldr	r3, [pc, #196]	; (8006d28 <xTaskResumeAll+0x100>)
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3318      	adds	r3, #24
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7ff f98b 	bl	8005f8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3304      	adds	r3, #4
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f7ff f986 	bl	8005f8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c82:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <xTaskResumeAll+0x104>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d903      	bls.n	8006c92 <xTaskResumeAll+0x6a>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	4b27      	ldr	r3, [pc, #156]	; (8006d2c <xTaskResumeAll+0x104>)
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	0013      	movs	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4a24      	ldr	r2, [pc, #144]	; (8006d30 <xTaskResumeAll+0x108>)
 8006ca0:	189a      	adds	r2, r3, r2
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	0019      	movs	r1, r3
 8006ca8:	0010      	movs	r0, r2
 8006caa:	f7ff f916 	bl	8005eda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb2:	4b20      	ldr	r3, [pc, #128]	; (8006d34 <xTaskResumeAll+0x10c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d302      	bcc.n	8006cc2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006cbc:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <xTaskResumeAll+0x110>)
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cc2:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <xTaskResumeAll+0x100>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1cb      	bne.n	8006c62 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cd0:	f000 fb02 	bl	80072d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006cd4:	4b19      	ldr	r3, [pc, #100]	; (8006d3c <xTaskResumeAll+0x114>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00f      	beq.n	8006d00 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ce0:	f000 f83c 	bl	8006d5c <xTaskIncrementTick>
 8006ce4:	1e03      	subs	r3, r0, #0
 8006ce6:	d002      	beq.n	8006cee <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006ce8:	4b13      	ldr	r3, [pc, #76]	; (8006d38 <xTaskResumeAll+0x110>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f2      	bne.n	8006ce0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8006cfa:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <xTaskResumeAll+0x114>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d00:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <xTaskResumeAll+0x110>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d0c:	f000 ff30 	bl	8007b70 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d10:	f000 ff50 	bl	8007bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8006d14:	68bb      	ldr	r3, [r7, #8]
}
 8006d16:	0018      	movs	r0, r3
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b004      	add	sp, #16
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	200009e8 	.word	0x200009e8
 8006d24:	200009c0 	.word	0x200009c0
 8006d28:	20000980 	.word	0x20000980
 8006d2c:	200009c8 	.word	0x200009c8
 8006d30:	200004f0 	.word	0x200004f0
 8006d34:	200004ec 	.word	0x200004ec
 8006d38:	200009d4 	.word	0x200009d4
 8006d3c:	200009d0 	.word	0x200009d0

08006d40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d46:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <xTaskGetTickCount+0x18>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d4c:	687b      	ldr	r3, [r7, #4]
}
 8006d4e:	0018      	movs	r0, r3
 8006d50:	46bd      	mov	sp, r7
 8006d52:	b002      	add	sp, #8
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	200009c4 	.word	0x200009c4

08006d5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d66:	4b4c      	ldr	r3, [pc, #304]	; (8006e98 <xTaskIncrementTick+0x13c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d000      	beq.n	8006d70 <xTaskIncrementTick+0x14>
 8006d6e:	e083      	b.n	8006e78 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d70:	4b4a      	ldr	r3, [pc, #296]	; (8006e9c <xTaskIncrementTick+0x140>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d78:	4b48      	ldr	r3, [pc, #288]	; (8006e9c <xTaskIncrementTick+0x140>)
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d117      	bne.n	8006db4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d84:	4b46      	ldr	r3, [pc, #280]	; (8006ea0 <xTaskIncrementTick+0x144>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <xTaskIncrementTick+0x36>
 8006d8e:	b672      	cpsid	i
 8006d90:	e7fe      	b.n	8006d90 <xTaskIncrementTick+0x34>
 8006d92:	4b43      	ldr	r3, [pc, #268]	; (8006ea0 <xTaskIncrementTick+0x144>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	4b42      	ldr	r3, [pc, #264]	; (8006ea4 <xTaskIncrementTick+0x148>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	4b40      	ldr	r3, [pc, #256]	; (8006ea0 <xTaskIncrementTick+0x144>)
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	4b40      	ldr	r3, [pc, #256]	; (8006ea4 <xTaskIncrementTick+0x148>)
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	4b40      	ldr	r3, [pc, #256]	; (8006ea8 <xTaskIncrementTick+0x14c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	4b3e      	ldr	r3, [pc, #248]	; (8006ea8 <xTaskIncrementTick+0x14c>)
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f000 fa92 	bl	80072d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006db4:	4b3d      	ldr	r3, [pc, #244]	; (8006eac <xTaskIncrementTick+0x150>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d34e      	bcc.n	8006e5c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dbe:	4b38      	ldr	r3, [pc, #224]	; (8006ea0 <xTaskIncrementTick+0x144>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <xTaskIncrementTick+0x70>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e000      	b.n	8006dce <xTaskIncrementTick+0x72>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd2:	4b36      	ldr	r3, [pc, #216]	; (8006eac <xTaskIncrementTick+0x150>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4252      	negs	r2, r2
 8006dd8:	601a      	str	r2, [r3, #0]
					break;
 8006dda:	e03f      	b.n	8006e5c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ddc:	4b30      	ldr	r3, [pc, #192]	; (8006ea0 <xTaskIncrementTick+0x144>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d203      	bcs.n	8006dfc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006df4:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <xTaskIncrementTick+0x150>)
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
						break;
 8006dfa:	e02f      	b.n	8006e5c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7ff f8c2 	bl	8005f8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	3318      	adds	r3, #24
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7ff f8b9 	bl	8005f8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <xTaskIncrementTick+0x154>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d903      	bls.n	8006e2c <xTaskIncrementTick+0xd0>
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e28:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <xTaskIncrementTick+0x154>)
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	0013      	movs	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	189b      	adds	r3, r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4a1e      	ldr	r2, [pc, #120]	; (8006eb4 <xTaskIncrementTick+0x158>)
 8006e3a:	189a      	adds	r2, r3, r2
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	0019      	movs	r1, r3
 8006e42:	0010      	movs	r0, r2
 8006e44:	f7ff f849 	bl	8005eda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <xTaskIncrementTick+0x15c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d3b3      	bcc.n	8006dbe <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006e56:	2301      	movs	r3, #1
 8006e58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e5a:	e7b0      	b.n	8006dbe <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e5c:	4b16      	ldr	r3, [pc, #88]	; (8006eb8 <xTaskIncrementTick+0x15c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	4914      	ldr	r1, [pc, #80]	; (8006eb4 <xTaskIncrementTick+0x158>)
 8006e64:	0013      	movs	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	189b      	adds	r3, r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	585b      	ldr	r3, [r3, r1]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d907      	bls.n	8006e82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006e72:	2301      	movs	r3, #1
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	e004      	b.n	8006e82 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e78:	4b10      	ldr	r3, [pc, #64]	; (8006ebc <xTaskIncrementTick+0x160>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <xTaskIncrementTick+0x160>)
 8006e80:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e82:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <xTaskIncrementTick+0x164>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e8e:	697b      	ldr	r3, [r7, #20]
}
 8006e90:	0018      	movs	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	b006      	add	sp, #24
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	200009e8 	.word	0x200009e8
 8006e9c:	200009c4 	.word	0x200009c4
 8006ea0:	20000978 	.word	0x20000978
 8006ea4:	2000097c 	.word	0x2000097c
 8006ea8:	200009d8 	.word	0x200009d8
 8006eac:	200009e0 	.word	0x200009e0
 8006eb0:	200009c8 	.word	0x200009c8
 8006eb4:	200004f0 	.word	0x200004f0
 8006eb8:	200004ec 	.word	0x200004ec
 8006ebc:	200009d0 	.word	0x200009d0
 8006ec0:	200009d4 	.word	0x200009d4

08006ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006eca:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <vTaskSwitchContext+0x90>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ed2:	4b21      	ldr	r3, [pc, #132]	; (8006f58 <vTaskSwitchContext+0x94>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ed8:	e037      	b.n	8006f4a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8006eda:	4b1f      	ldr	r3, [pc, #124]	; (8006f58 <vTaskSwitchContext+0x94>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <vTaskSwitchContext+0x98>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	e007      	b.n	8006ef8 <vTaskSwitchContext+0x34>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <vTaskSwitchContext+0x2e>
 8006eee:	b672      	cpsid	i
 8006ef0:	e7fe      	b.n	8006ef0 <vTaskSwitchContext+0x2c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	607b      	str	r3, [r7, #4]
 8006ef8:	4919      	ldr	r1, [pc, #100]	; (8006f60 <vTaskSwitchContext+0x9c>)
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	0013      	movs	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	189b      	adds	r3, r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	585b      	ldr	r3, [r3, r1]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0ee      	beq.n	8006ee8 <vTaskSwitchContext+0x24>
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	0013      	movs	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	189b      	adds	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4a12      	ldr	r2, [pc, #72]	; (8006f60 <vTaskSwitchContext+0x9c>)
 8006f16:	189b      	adds	r3, r3, r2
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	605a      	str	r2, [r3, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d104      	bne.n	8006f3a <vTaskSwitchContext+0x76>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <vTaskSwitchContext+0xa0>)
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <vTaskSwitchContext+0x98>)
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	b002      	add	sp, #8
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	200009e8 	.word	0x200009e8
 8006f58:	200009d4 	.word	0x200009d4
 8006f5c:	200009c8 	.word	0x200009c8
 8006f60:	200004f0 	.word	0x200004f0
 8006f64:	200004ec 	.word	0x200004ec

08006f68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <vTaskPlaceOnEventList+0x14>
 8006f78:	b672      	cpsid	i
 8006f7a:	e7fe      	b.n	8006f7a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f7c:	4b08      	ldr	r3, [pc, #32]	; (8006fa0 <vTaskPlaceOnEventList+0x38>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3318      	adds	r3, #24
 8006f82:	001a      	movs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	0011      	movs	r1, r2
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7fe ffc8 	bl	8005f1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2101      	movs	r1, #1
 8006f92:	0018      	movs	r0, r3
 8006f94:	f000 fa3c 	bl	8007410 <prvAddCurrentTaskToDelayedList>
}
 8006f98:	46c0      	nop			; (mov r8, r8)
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b002      	add	sp, #8
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	200004ec 	.word	0x200004ec

08006fa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <vTaskPlaceOnEventListRestricted+0x16>
 8006fb6:	b672      	cpsid	i
 8006fb8:	e7fe      	b.n	8006fb8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <vTaskPlaceOnEventListRestricted+0x48>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3318      	adds	r3, #24
 8006fc0:	001a      	movs	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	0011      	movs	r1, r2
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f7fe ff87 	bl	8005eda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	425b      	negs	r3, r3
 8006fd6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	0011      	movs	r1, r2
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f000 fa16 	bl	8007410 <prvAddCurrentTaskToDelayedList>
	}
 8006fe4:	46c0      	nop			; (mov r8, r8)
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b004      	add	sp, #16
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	200004ec 	.word	0x200004ec

08006ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <xTaskRemoveFromEventList+0x1a>
 8007006:	b672      	cpsid	i
 8007008:	e7fe      	b.n	8007008 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	3318      	adds	r3, #24
 800700e:	0018      	movs	r0, r3
 8007010:	f7fe ffbb 	bl	8005f8a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007014:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <xTaskRemoveFromEventList+0xa0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d11d      	bne.n	8007058 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	3304      	adds	r3, #4
 8007020:	0018      	movs	r0, r3
 8007022:	f7fe ffb2 	bl	8005f8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <xTaskRemoveFromEventList+0xa4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d903      	bls.n	800703a <xTaskRemoveFromEventList+0x4a>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007036:	4b17      	ldr	r3, [pc, #92]	; (8007094 <xTaskRemoveFromEventList+0xa4>)
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703e:	0013      	movs	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	189b      	adds	r3, r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4a14      	ldr	r2, [pc, #80]	; (8007098 <xTaskRemoveFromEventList+0xa8>)
 8007048:	189a      	adds	r2, r3, r2
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	3304      	adds	r3, #4
 800704e:	0019      	movs	r1, r3
 8007050:	0010      	movs	r0, r2
 8007052:	f7fe ff42 	bl	8005eda <vListInsertEnd>
 8007056:	e007      	b.n	8007068 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	3318      	adds	r3, #24
 800705c:	001a      	movs	r2, r3
 800705e:	4b0f      	ldr	r3, [pc, #60]	; (800709c <xTaskRemoveFromEventList+0xac>)
 8007060:	0011      	movs	r1, r2
 8007062:	0018      	movs	r0, r3
 8007064:	f7fe ff39 	bl	8005eda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706c:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <xTaskRemoveFromEventList+0xb0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	429a      	cmp	r2, r3
 8007074:	d905      	bls.n	8007082 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007076:	2301      	movs	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800707a:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <xTaskRemoveFromEventList+0xb4>)
 800707c:	2201      	movs	r2, #1
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	e001      	b.n	8007086 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007086:	68fb      	ldr	r3, [r7, #12]
}
 8007088:	0018      	movs	r0, r3
 800708a:	46bd      	mov	sp, r7
 800708c:	b004      	add	sp, #16
 800708e:	bd80      	pop	{r7, pc}
 8007090:	200009e8 	.word	0x200009e8
 8007094:	200009c8 	.word	0x200009c8
 8007098:	200004f0 	.word	0x200004f0
 800709c:	20000980 	.word	0x20000980
 80070a0:	200004ec 	.word	0x200004ec
 80070a4:	200009d4 	.word	0x200009d4

080070a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <vTaskInternalSetTimeOutState+0x20>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <vTaskInternalSetTimeOutState+0x24>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	605a      	str	r2, [r3, #4]
}
 80070c0:	46c0      	nop			; (mov r8, r8)
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b002      	add	sp, #8
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200009d8 	.word	0x200009d8
 80070cc:	200009c4 	.word	0x200009c4

080070d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <xTaskCheckForTimeOut+0x14>
 80070e0:	b672      	cpsid	i
 80070e2:	e7fe      	b.n	80070e2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <xTaskCheckForTimeOut+0x1e>
 80070ea:	b672      	cpsid	i
 80070ec:	e7fe      	b.n	80070ec <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80070ee:	f000 fd4f 	bl	8007b90 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070f2:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <xTaskCheckForTimeOut+0x98>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	d102      	bne.n	8007110 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	e024      	b.n	800715a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b15      	ldr	r3, [pc, #84]	; (800716c <xTaskCheckForTimeOut+0x9c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	429a      	cmp	r2, r3
 800711a:	d007      	beq.n	800712c <xTaskCheckForTimeOut+0x5c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	429a      	cmp	r2, r3
 8007124:	d302      	bcc.n	800712c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007126:	2301      	movs	r3, #1
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	e016      	b.n	800715a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	429a      	cmp	r2, r3
 8007134:	d20c      	bcs.n	8007150 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad2      	subs	r2, r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	0018      	movs	r0, r3
 8007146:	f7ff ffaf 	bl	80070a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800714a:	2300      	movs	r3, #0
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	e004      	b.n	800715a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007156:	2301      	movs	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800715a:	f000 fd2b 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 800715e:	697b      	ldr	r3, [r7, #20]
}
 8007160:	0018      	movs	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	b006      	add	sp, #24
 8007166:	bd80      	pop	{r7, pc}
 8007168:	200009c4 	.word	0x200009c4
 800716c:	200009d8 	.word	0x200009d8

08007170 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <vTaskMissedYield+0x10>)
 8007176:	2201      	movs	r2, #1
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	200009d4 	.word	0x200009d4

08007184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800718c:	f000 f84e 	bl	800722c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007190:	4b03      	ldr	r3, [pc, #12]	; (80071a0 <prvIdleTask+0x1c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d9f9      	bls.n	800718c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007198:	f000 fcea 	bl	8007b70 <vPortYield>
		prvCheckTasksWaitingTermination();
 800719c:	e7f6      	b.n	800718c <prvIdleTask+0x8>
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	200004f0 	.word	0x200004f0

080071a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071aa:	2300      	movs	r3, #0
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	e00c      	b.n	80071ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	0013      	movs	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	189b      	adds	r3, r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4a14      	ldr	r2, [pc, #80]	; (800720c <prvInitialiseTaskLists+0x68>)
 80071bc:	189b      	adds	r3, r3, r2
 80071be:	0018      	movs	r0, r3
 80071c0:	f7fe fe62 	bl	8005e88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3301      	adds	r3, #1
 80071c8:	607b      	str	r3, [r7, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b37      	cmp	r3, #55	; 0x37
 80071ce:	d9ef      	bls.n	80071b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071d0:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <prvInitialiseTaskLists+0x6c>)
 80071d2:	0018      	movs	r0, r3
 80071d4:	f7fe fe58 	bl	8005e88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071d8:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <prvInitialiseTaskLists+0x70>)
 80071da:	0018      	movs	r0, r3
 80071dc:	f7fe fe54 	bl	8005e88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071e0:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <prvInitialiseTaskLists+0x74>)
 80071e2:	0018      	movs	r0, r3
 80071e4:	f7fe fe50 	bl	8005e88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071e8:	4b0c      	ldr	r3, [pc, #48]	; (800721c <prvInitialiseTaskLists+0x78>)
 80071ea:	0018      	movs	r0, r3
 80071ec:	f7fe fe4c 	bl	8005e88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <prvInitialiseTaskLists+0x7c>)
 80071f2:	0018      	movs	r0, r3
 80071f4:	f7fe fe48 	bl	8005e88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <prvInitialiseTaskLists+0x80>)
 80071fa:	4a05      	ldr	r2, [pc, #20]	; (8007210 <prvInitialiseTaskLists+0x6c>)
 80071fc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071fe:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <prvInitialiseTaskLists+0x84>)
 8007200:	4a04      	ldr	r2, [pc, #16]	; (8007214 <prvInitialiseTaskLists+0x70>)
 8007202:	601a      	str	r2, [r3, #0]
}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	b002      	add	sp, #8
 800720a:	bd80      	pop	{r7, pc}
 800720c:	200004f0 	.word	0x200004f0
 8007210:	20000950 	.word	0x20000950
 8007214:	20000964 	.word	0x20000964
 8007218:	20000980 	.word	0x20000980
 800721c:	20000994 	.word	0x20000994
 8007220:	200009ac 	.word	0x200009ac
 8007224:	20000978 	.word	0x20000978
 8007228:	2000097c 	.word	0x2000097c

0800722c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007232:	e01a      	b.n	800726a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007234:	f000 fcac 	bl	8007b90 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007238:	4b10      	ldr	r3, [pc, #64]	; (800727c <prvCheckTasksWaitingTermination+0x50>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3304      	adds	r3, #4
 8007244:	0018      	movs	r0, r3
 8007246:	f7fe fea0 	bl	8005f8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800724a:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <prvCheckTasksWaitingTermination+0x54>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	1e5a      	subs	r2, r3, #1
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <prvCheckTasksWaitingTermination+0x54>)
 8007252:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <prvCheckTasksWaitingTermination+0x58>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	1e5a      	subs	r2, r3, #1
 800725a:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <prvCheckTasksWaitingTermination+0x58>)
 800725c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800725e:	f000 fca9 	bl	8007bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	0018      	movs	r0, r3
 8007266:	f000 f80f 	bl	8007288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800726a:	4b06      	ldr	r3, [pc, #24]	; (8007284 <prvCheckTasksWaitingTermination+0x58>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e0      	bne.n	8007234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	46c0      	nop			; (mov r8, r8)
 8007276:	46bd      	mov	sp, r7
 8007278:	b002      	add	sp, #8
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000994 	.word	0x20000994
 8007280:	200009c0 	.word	0x200009c0
 8007284:	200009a8 	.word	0x200009a8

08007288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2259      	movs	r2, #89	; 0x59
 8007294:	5c9b      	ldrb	r3, [r3, r2]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	0018      	movs	r0, r3
 80072a0:	f000 fdb4 	bl	8007e0c <vPortFree>
				vPortFree( pxTCB );
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 fdb0 	bl	8007e0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072ac:	e010      	b.n	80072d0 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2259      	movs	r2, #89	; 0x59
 80072b2:	5c9b      	ldrb	r3, [r3, r2]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d104      	bne.n	80072c2 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	0018      	movs	r0, r3
 80072bc:	f000 fda6 	bl	8007e0c <vPortFree>
	}
 80072c0:	e006      	b.n	80072d0 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2259      	movs	r2, #89	; 0x59
 80072c6:	5c9b      	ldrb	r3, [r3, r2]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d001      	beq.n	80072d0 <prvDeleteTCB+0x48>
 80072cc:	b672      	cpsid	i
 80072ce:	e7fe      	b.n	80072ce <prvDeleteTCB+0x46>
	}
 80072d0:	46c0      	nop			; (mov r8, r8)
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b002      	add	sp, #8
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072de:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <prvResetNextTaskUnblockTime+0x40>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <prvResetNextTaskUnblockTime+0x14>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e000      	b.n	80072ee <prvResetNextTaskUnblockTime+0x16>
 80072ec:	2300      	movs	r3, #0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072f2:	4b0a      	ldr	r3, [pc, #40]	; (800731c <prvResetNextTaskUnblockTime+0x44>)
 80072f4:	2201      	movs	r2, #1
 80072f6:	4252      	negs	r2, r2
 80072f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072fa:	e008      	b.n	800730e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072fc:	4b06      	ldr	r3, [pc, #24]	; (8007318 <prvResetNextTaskUnblockTime+0x40>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	4b04      	ldr	r3, [pc, #16]	; (800731c <prvResetNextTaskUnblockTime+0x44>)
 800730c:	601a      	str	r2, [r3, #0]
}
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	46bd      	mov	sp, r7
 8007312:	b002      	add	sp, #8
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	20000978 	.word	0x20000978
 800731c:	200009e0 	.word	0x200009e0

08007320 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007326:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <xTaskGetSchedulerState+0x30>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800732e:	2301      	movs	r3, #1
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	e008      	b.n	8007346 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007334:	4b07      	ldr	r3, [pc, #28]	; (8007354 <xTaskGetSchedulerState+0x34>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800733c:	2302      	movs	r3, #2
 800733e:	607b      	str	r3, [r7, #4]
 8007340:	e001      	b.n	8007346 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007342:	2300      	movs	r3, #0
 8007344:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007346:	687b      	ldr	r3, [r7, #4]
	}
 8007348:	0018      	movs	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	b002      	add	sp, #8
 800734e:	bd80      	pop	{r7, pc}
 8007350:	200009cc 	.word	0x200009cc
 8007354:	200009e8 	.word	0x200009e8

08007358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d044      	beq.n	80073f8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800736e:	4b25      	ldr	r3, [pc, #148]	; (8007404 <xTaskPriorityDisinherit+0xac>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <xTaskPriorityDisinherit+0x24>
 8007378:	b672      	cpsid	i
 800737a:	e7fe      	b.n	800737a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <xTaskPriorityDisinherit+0x30>
 8007384:	b672      	cpsid	i
 8007386:	e7fe      	b.n	8007386 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738c:	1e5a      	subs	r2, r3, #1
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800739a:	429a      	cmp	r2, r3
 800739c:	d02c      	beq.n	80073f8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d128      	bne.n	80073f8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	3304      	adds	r3, #4
 80073aa:	0018      	movs	r0, r3
 80073ac:	f7fe fded 	bl	8005f8a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	2238      	movs	r2, #56	; 0x38
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <xTaskPriorityDisinherit+0xb0>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d903      	bls.n	80073d8 <xTaskPriorityDisinherit+0x80>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <xTaskPriorityDisinherit+0xb0>)
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073dc:	0013      	movs	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	189b      	adds	r3, r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4a09      	ldr	r2, [pc, #36]	; (800740c <xTaskPriorityDisinherit+0xb4>)
 80073e6:	189a      	adds	r2, r3, r2
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	3304      	adds	r3, #4
 80073ec:	0019      	movs	r1, r3
 80073ee:	0010      	movs	r0, r2
 80073f0:	f7fe fd73 	bl	8005eda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073f4:	2301      	movs	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073f8:	68fb      	ldr	r3, [r7, #12]
	}
 80073fa:	0018      	movs	r0, r3
 80073fc:	46bd      	mov	sp, r7
 80073fe:	b004      	add	sp, #16
 8007400:	bd80      	pop	{r7, pc}
 8007402:	46c0      	nop			; (mov r8, r8)
 8007404:	200004ec 	.word	0x200004ec
 8007408:	200009c8 	.word	0x200009c8
 800740c:	200004f0 	.word	0x200004f0

08007410 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800741a:	4b21      	ldr	r3, [pc, #132]	; (80074a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007420:	4b20      	ldr	r3, [pc, #128]	; (80074a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3304      	adds	r3, #4
 8007426:	0018      	movs	r0, r3
 8007428:	f7fe fdaf 	bl	8005f8a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3301      	adds	r3, #1
 8007430:	d10b      	bne.n	800744a <prvAddCurrentTaskToDelayedList+0x3a>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007438:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	1d1a      	adds	r2, r3, #4
 800743e:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007440:	0011      	movs	r1, r2
 8007442:	0018      	movs	r0, r3
 8007444:	f7fe fd49 	bl	8005eda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007448:	e026      	b.n	8007498 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	18d3      	adds	r3, r2, r3
 8007450:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007452:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	429a      	cmp	r2, r3
 8007460:	d209      	bcs.n	8007476 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007462:	4b12      	ldr	r3, [pc, #72]	; (80074ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3304      	adds	r3, #4
 800746c:	0019      	movs	r1, r3
 800746e:	0010      	movs	r0, r2
 8007470:	f7fe fd55 	bl	8005f1e <vListInsert>
}
 8007474:	e010      	b.n	8007498 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007476:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3304      	adds	r3, #4
 8007480:	0019      	movs	r1, r3
 8007482:	0010      	movs	r0, r2
 8007484:	f7fe fd4b 	bl	8005f1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007488:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	429a      	cmp	r2, r3
 8007490:	d202      	bcs.n	8007498 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007492:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	601a      	str	r2, [r3, #0]
}
 8007498:	46c0      	nop			; (mov r8, r8)
 800749a:	46bd      	mov	sp, r7
 800749c:	b004      	add	sp, #16
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	200009c4 	.word	0x200009c4
 80074a4:	200004ec 	.word	0x200004ec
 80074a8:	200009ac 	.word	0x200009ac
 80074ac:	2000097c 	.word	0x2000097c
 80074b0:	20000978 	.word	0x20000978
 80074b4:	200009e0 	.word	0x200009e0

080074b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074b8:	b590      	push	{r4, r7, lr}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074c2:	f000 fa87 	bl	80079d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074c6:	4b17      	ldr	r3, [pc, #92]	; (8007524 <xTimerCreateTimerTask+0x6c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d020      	beq.n	8007510 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074d6:	003a      	movs	r2, r7
 80074d8:	1d39      	adds	r1, r7, #4
 80074da:	2308      	movs	r3, #8
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	0018      	movs	r0, r3
 80074e0:	f7fe fcba 	bl	8005e58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074e4:	683c      	ldr	r4, [r7, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	490f      	ldr	r1, [pc, #60]	; (8007528 <xTimerCreateTimerTask+0x70>)
 80074ec:	480f      	ldr	r0, [pc, #60]	; (800752c <xTimerCreateTimerTask+0x74>)
 80074ee:	9202      	str	r2, [sp, #8]
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	2302      	movs	r3, #2
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	2300      	movs	r3, #0
 80074f8:	0022      	movs	r2, r4
 80074fa:	f7ff f996 	bl	800682a <xTaskCreateStatic>
 80074fe:	0002      	movs	r2, r0
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <xTimerCreateTimerTask+0x78>)
 8007502:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <xTimerCreateTimerTask+0x78>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800750c:	2301      	movs	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <xTimerCreateTimerTask+0x62>
 8007516:	b672      	cpsid	i
 8007518:	e7fe      	b.n	8007518 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800751a:	68fb      	ldr	r3, [r7, #12]
}
 800751c:	0018      	movs	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	b005      	add	sp, #20
 8007522:	bd90      	pop	{r4, r7, pc}
 8007524:	20000a1c 	.word	0x20000a1c
 8007528:	08008b6c 	.word	0x08008b6c
 800752c:	08007639 	.word	0x08007639
 8007530:	20000a20 	.word	0x20000a20

08007534 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007534:	b590      	push	{r4, r7, lr}
 8007536:	b08b      	sub	sp, #44	; 0x2c
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007542:	2300      	movs	r3, #0
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <xTimerGenericCommand+0x1c>
 800754c:	b672      	cpsid	i
 800754e:	e7fe      	b.n	800754e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007550:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <xTimerGenericCommand+0x90>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d030      	beq.n	80075ba <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007558:	2414      	movs	r4, #20
 800755a:	193b      	adds	r3, r7, r4
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007560:	193b      	adds	r3, r7, r4
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007566:	193b      	adds	r3, r7, r4
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b05      	cmp	r3, #5
 8007570:	dc19      	bgt.n	80075a6 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007572:	f7ff fed5 	bl	8007320 <xTaskGetSchedulerState>
 8007576:	0003      	movs	r3, r0
 8007578:	2b02      	cmp	r3, #2
 800757a:	d109      	bne.n	8007590 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <xTimerGenericCommand+0x90>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007582:	1939      	adds	r1, r7, r4
 8007584:	2300      	movs	r3, #0
 8007586:	f7fe fdee 	bl	8006166 <xQueueGenericSend>
 800758a:	0003      	movs	r3, r0
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
 800758e:	e014      	b.n	80075ba <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007590:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <xTimerGenericCommand+0x90>)
 8007592:	6818      	ldr	r0, [r3, #0]
 8007594:	2314      	movs	r3, #20
 8007596:	18f9      	adds	r1, r7, r3
 8007598:	2300      	movs	r3, #0
 800759a:	2200      	movs	r2, #0
 800759c:	f7fe fde3 	bl	8006166 <xQueueGenericSend>
 80075a0:	0003      	movs	r3, r0
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
 80075a4:	e009      	b.n	80075ba <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075a6:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <xTimerGenericCommand+0x90>)
 80075a8:	6818      	ldr	r0, [r3, #0]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	2314      	movs	r3, #20
 80075ae:	18f9      	adds	r1, r7, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	f7fe fe9c 	bl	80062ee <xQueueGenericSendFromISR>
 80075b6:	0003      	movs	r3, r0
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075bc:	0018      	movs	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	b00b      	add	sp, #44	; 0x2c
 80075c2:	bd90      	pop	{r4, r7, pc}
 80075c4:	20000a1c 	.word	0x20000a1c

080075c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075d2:	4b18      	ldr	r3, [pc, #96]	; (8007634 <prvProcessExpiredTimer+0x6c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3304      	adds	r3, #4
 80075e0:	0018      	movs	r0, r3
 80075e2:	f7fe fcd2 	bl	8005f8a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d119      	bne.n	8007622 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	18d1      	adds	r1, r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 f8b6 	bl	800776c <prvInsertTimerInActiveList>
 8007600:	1e03      	subs	r3, r0, #0
 8007602:	d00e      	beq.n	8007622 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	2300      	movs	r3, #0
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2300      	movs	r3, #0
 800760e:	2100      	movs	r1, #0
 8007610:	f7ff ff90 	bl	8007534 <xTimerGenericCommand>
 8007614:	0003      	movs	r3, r0
 8007616:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <prvProcessExpiredTimer+0x5a>
 800761e:	b672      	cpsid	i
 8007620:	e7fe      	b.n	8007620 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	0010      	movs	r0, r2
 800762a:	4798      	blx	r3
}
 800762c:	46c0      	nop			; (mov r8, r8)
 800762e:	46bd      	mov	sp, r7
 8007630:	b004      	add	sp, #16
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000a14 	.word	0x20000a14

08007638 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007640:	2308      	movs	r3, #8
 8007642:	18fb      	adds	r3, r7, r3
 8007644:	0018      	movs	r0, r3
 8007646:	f000 f851 	bl	80076ec <prvGetNextExpireTime>
 800764a:	0003      	movs	r3, r0
 800764c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	0011      	movs	r1, r2
 8007654:	0018      	movs	r0, r3
 8007656:	f000 f803 	bl	8007660 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800765a:	f000 f8c9 	bl	80077f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800765e:	e7ef      	b.n	8007640 <prvTimerTask+0x8>

08007660 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800766a:	f7ff fad1 	bl	8006c10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800766e:	2308      	movs	r3, #8
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	0018      	movs	r0, r3
 8007674:	f000 f85a 	bl	800772c <prvSampleTimeNow>
 8007678:	0003      	movs	r3, r0
 800767a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d129      	bne.n	80076d6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10c      	bne.n	80076a2 <prvProcessTimerOrBlockTask+0x42>
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	429a      	cmp	r2, r3
 800768e:	d808      	bhi.n	80076a2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007690:	f7ff faca 	bl	8006c28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	0011      	movs	r1, r2
 800769a:	0018      	movs	r0, r3
 800769c:	f7ff ff94 	bl	80075c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076a0:	e01b      	b.n	80076da <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d006      	beq.n	80076b6 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076a8:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <prvProcessTimerOrBlockTask+0x84>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	425a      	negs	r2, r3
 80076b0:	4153      	adcs	r3, r2
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <prvProcessTimerOrBlockTask+0x88>)
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	0019      	movs	r1, r3
 80076c4:	f7ff f87e 	bl	80067c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076c8:	f7ff faae 	bl	8006c28 <xTaskResumeAll>
 80076cc:	1e03      	subs	r3, r0, #0
 80076ce:	d104      	bne.n	80076da <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80076d0:	f000 fa4e 	bl	8007b70 <vPortYield>
}
 80076d4:	e001      	b.n	80076da <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80076d6:	f7ff faa7 	bl	8006c28 <xTaskResumeAll>
}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	46bd      	mov	sp, r7
 80076de:	b004      	add	sp, #16
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	46c0      	nop			; (mov r8, r8)
 80076e4:	20000a18 	.word	0x20000a18
 80076e8:	20000a1c 	.word	0x20000a1c

080076ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076f4:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <prvGetNextExpireTime+0x3c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	425a      	negs	r2, r3
 80076fc:	4153      	adcs	r3, r2
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	001a      	movs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d105      	bne.n	800771a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <prvGetNextExpireTime+0x3c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	e001      	b.n	800771e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	0018      	movs	r0, r3
 8007722:	46bd      	mov	sp, r7
 8007724:	b004      	add	sp, #16
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000a14 	.word	0x20000a14

0800772c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007734:	f7ff fb04 	bl	8006d40 <xTaskGetTickCount>
 8007738:	0003      	movs	r3, r0
 800773a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <prvSampleTimeNow+0x3c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	429a      	cmp	r2, r3
 8007744:	d205      	bcs.n	8007752 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8007746:	f000 f8eb 	bl	8007920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	e002      	b.n	8007758 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007758:	4b03      	ldr	r3, [pc, #12]	; (8007768 <prvSampleTimeNow+0x3c>)
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800775e:	68fb      	ldr	r3, [r7, #12]
}
 8007760:	0018      	movs	r0, r3
 8007762:	46bd      	mov	sp, r7
 8007764:	b004      	add	sp, #16
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20000a24 	.word	0x20000a24

0800776c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	429a      	cmp	r2, r3
 8007790:	d812      	bhi.n	80077b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	d302      	bcc.n	80077a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077a0:	2301      	movs	r3, #1
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e01b      	b.n	80077de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077a6:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <prvInsertTimerInActiveList+0x7c>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3304      	adds	r3, #4
 80077ae:	0019      	movs	r1, r3
 80077b0:	0010      	movs	r0, r2
 80077b2:	f7fe fbb4 	bl	8005f1e <vListInsert>
 80077b6:	e012      	b.n	80077de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d206      	bcs.n	80077ce <prvInsertTimerInActiveList+0x62>
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d302      	bcc.n	80077ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077c8:	2301      	movs	r3, #1
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e007      	b.n	80077de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077ce:	4b07      	ldr	r3, [pc, #28]	; (80077ec <prvInsertTimerInActiveList+0x80>)
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3304      	adds	r3, #4
 80077d6:	0019      	movs	r1, r3
 80077d8:	0010      	movs	r0, r2
 80077da:	f7fe fba0 	bl	8005f1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077de:	697b      	ldr	r3, [r7, #20]
}
 80077e0:	0018      	movs	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b006      	add	sp, #24
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000a18 	.word	0x20000a18
 80077ec:	20000a14 	.word	0x20000a14

080077f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077f0:	b590      	push	{r4, r7, lr}
 80077f2:	b08d      	sub	sp, #52	; 0x34
 80077f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077f6:	e07f      	b.n	80078f8 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077f8:	2208      	movs	r2, #8
 80077fa:	18bb      	adds	r3, r7, r2
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da0f      	bge.n	8007822 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007802:	18bb      	adds	r3, r7, r2
 8007804:	3304      	adds	r3, #4
 8007806:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <prvProcessReceivedCommands+0x22>
 800780e:	b672      	cpsid	i
 8007810:	e7fe      	b.n	8007810 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	6858      	ldr	r0, [r3, #4]
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	0019      	movs	r1, r3
 8007820:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007822:	2208      	movs	r2, #8
 8007824:	18bb      	adds	r3, r7, r2
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	db64      	blt.n	80078f6 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800782c:	18bb      	adds	r3, r7, r2
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	3304      	adds	r3, #4
 800783e:	0018      	movs	r0, r3
 8007840:	f7fe fba3 	bl	8005f8a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007844:	1d3b      	adds	r3, r7, #4
 8007846:	0018      	movs	r0, r3
 8007848:	f7ff ff70 	bl	800772c <prvSampleTimeNow>
 800784c:	0003      	movs	r3, r0
 800784e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8007850:	2308      	movs	r3, #8
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b09      	cmp	r3, #9
 8007858:	d84e      	bhi.n	80078f8 <prvProcessReceivedCommands+0x108>
 800785a:	009a      	lsls	r2, r3, #2
 800785c:	4b2e      	ldr	r3, [pc, #184]	; (8007918 <prvProcessReceivedCommands+0x128>)
 800785e:	18d3      	adds	r3, r2, r3
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007864:	2408      	movs	r4, #8
 8007866:	193b      	adds	r3, r7, r4
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	18d1      	adds	r1, r2, r3
 8007870:	193b      	adds	r3, r7, r4
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	6a38      	ldr	r0, [r7, #32]
 8007878:	f7ff ff78 	bl	800776c <prvInsertTimerInActiveList>
 800787c:	1e03      	subs	r3, r0, #0
 800787e:	d03b      	beq.n	80078f8 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	6a3a      	ldr	r2, [r7, #32]
 8007886:	0010      	movs	r0, r2
 8007888:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d132      	bne.n	80078f8 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007892:	193b      	adds	r3, r7, r4
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	18d2      	adds	r2, r2, r3
 800789c:	6a38      	ldr	r0, [r7, #32]
 800789e:	2300      	movs	r3, #0
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	2300      	movs	r3, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	f7ff fe45 	bl	8007534 <xTimerGenericCommand>
 80078aa:	0003      	movs	r3, r0
 80078ac:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d121      	bne.n	80078f8 <prvProcessReceivedCommands+0x108>
 80078b4:	b672      	cpsid	i
 80078b6:	e7fe      	b.n	80078b6 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078b8:	2308      	movs	r3, #8
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <prvProcessReceivedCommands+0xde>
 80078ca:	b672      	cpsid	i
 80078cc:	e7fe      	b.n	80078cc <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	18d1      	adds	r1, r2, r3
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	69fa      	ldr	r2, [r7, #28]
 80078da:	6a38      	ldr	r0, [r7, #32]
 80078dc:	f7ff ff46 	bl	800776c <prvInsertTimerInActiveList>
					break;
 80078e0:	e00a      	b.n	80078f8 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	222c      	movs	r2, #44	; 0x2c
 80078e6:	5c9b      	ldrb	r3, [r3, r2]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d105      	bne.n	80078f8 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	0018      	movs	r0, r3
 80078f0:	f000 fa8c 	bl	8007e0c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078f4:	e000      	b.n	80078f8 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80078f6:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078f8:	4b08      	ldr	r3, [pc, #32]	; (800791c <prvProcessReceivedCommands+0x12c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2208      	movs	r2, #8
 80078fe:	18b9      	adds	r1, r7, r2
 8007900:	2200      	movs	r2, #0
 8007902:	0018      	movs	r0, r3
 8007904:	f7fe fd64 	bl	80063d0 <xQueueReceive>
 8007908:	1e03      	subs	r3, r0, #0
 800790a:	d000      	beq.n	800790e <prvProcessReceivedCommands+0x11e>
 800790c:	e774      	b.n	80077f8 <prvProcessReceivedCommands+0x8>
	}
}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	46c0      	nop			; (mov r8, r8)
 8007912:	46bd      	mov	sp, r7
 8007914:	b00b      	add	sp, #44	; 0x2c
 8007916:	bd90      	pop	{r4, r7, pc}
 8007918:	08008c40 	.word	0x08008c40
 800791c:	20000a1c 	.word	0x20000a1c

08007920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007926:	e03e      	b.n	80079a6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007928:	4b28      	ldr	r3, [pc, #160]	; (80079cc <prvSwitchTimerLists+0xac>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007932:	4b26      	ldr	r3, [pc, #152]	; (80079cc <prvSwitchTimerLists+0xac>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3304      	adds	r3, #4
 8007940:	0018      	movs	r0, r3
 8007942:	f7fe fb22 	bl	8005f8a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	0010      	movs	r0, r2
 800794e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d126      	bne.n	80079a6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	18d3      	adds	r3, r2, r3
 8007960:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	429a      	cmp	r2, r3
 8007968:	d90e      	bls.n	8007988 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007976:	4b15      	ldr	r3, [pc, #84]	; (80079cc <prvSwitchTimerLists+0xac>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3304      	adds	r3, #4
 800797e:	0019      	movs	r1, r3
 8007980:	0010      	movs	r0, r2
 8007982:	f7fe facc 	bl	8005f1e <vListInsert>
 8007986:	e00e      	b.n	80079a6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	2300      	movs	r3, #0
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	2300      	movs	r3, #0
 8007992:	2100      	movs	r1, #0
 8007994:	f7ff fdce 	bl	8007534 <xTimerGenericCommand>
 8007998:	0003      	movs	r3, r0
 800799a:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <prvSwitchTimerLists+0x86>
 80079a2:	b672      	cpsid	i
 80079a4:	e7fe      	b.n	80079a4 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <prvSwitchTimerLists+0xac>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1bb      	bne.n	8007928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079b0:	4b06      	ldr	r3, [pc, #24]	; (80079cc <prvSwitchTimerLists+0xac>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079b6:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <prvSwitchTimerLists+0xb0>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4b04      	ldr	r3, [pc, #16]	; (80079cc <prvSwitchTimerLists+0xac>)
 80079bc:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <prvSwitchTimerLists+0xb0>)
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	601a      	str	r2, [r3, #0]
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b006      	add	sp, #24
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000a14 	.word	0x20000a14
 80079d0:	20000a18 	.word	0x20000a18

080079d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079da:	f000 f8d9 	bl	8007b90 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079de:	4b16      	ldr	r3, [pc, #88]	; (8007a38 <prvCheckForValidListAndQueue+0x64>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d123      	bne.n	8007a2e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80079e6:	4b15      	ldr	r3, [pc, #84]	; (8007a3c <prvCheckForValidListAndQueue+0x68>)
 80079e8:	0018      	movs	r0, r3
 80079ea:	f7fe fa4d 	bl	8005e88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079ee:	4b14      	ldr	r3, [pc, #80]	; (8007a40 <prvCheckForValidListAndQueue+0x6c>)
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7fe fa49 	bl	8005e88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <prvCheckForValidListAndQueue+0x70>)
 80079f8:	4a10      	ldr	r2, [pc, #64]	; (8007a3c <prvCheckForValidListAndQueue+0x68>)
 80079fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079fc:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <prvCheckForValidListAndQueue+0x74>)
 80079fe:	4a10      	ldr	r2, [pc, #64]	; (8007a40 <prvCheckForValidListAndQueue+0x6c>)
 8007a00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a02:	4b12      	ldr	r3, [pc, #72]	; (8007a4c <prvCheckForValidListAndQueue+0x78>)
 8007a04:	4a12      	ldr	r2, [pc, #72]	; (8007a50 <prvCheckForValidListAndQueue+0x7c>)
 8007a06:	2100      	movs	r1, #0
 8007a08:	9100      	str	r1, [sp, #0]
 8007a0a:	2110      	movs	r1, #16
 8007a0c:	200a      	movs	r0, #10
 8007a0e:	f7fe fb38 	bl	8006082 <xQueueGenericCreateStatic>
 8007a12:	0002      	movs	r2, r0
 8007a14:	4b08      	ldr	r3, [pc, #32]	; (8007a38 <prvCheckForValidListAndQueue+0x64>)
 8007a16:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <prvCheckForValidListAndQueue+0x64>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a20:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <prvCheckForValidListAndQueue+0x64>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a0b      	ldr	r2, [pc, #44]	; (8007a54 <prvCheckForValidListAndQueue+0x80>)
 8007a26:	0011      	movs	r1, r2
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f7fe fea3 	bl	8006774 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a2e:	f000 f8c1 	bl	8007bb4 <vPortExitCritical>
}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000a1c 	.word	0x20000a1c
 8007a3c:	200009ec 	.word	0x200009ec
 8007a40:	20000a00 	.word	0x20000a00
 8007a44:	20000a14 	.word	0x20000a14
 8007a48:	20000a18 	.word	0x20000a18
 8007a4c:	20000ac8 	.word	0x20000ac8
 8007a50:	20000a28 	.word	0x20000a28
 8007a54:	08008b74 	.word	0x08008b74

08007a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3b04      	subs	r3, #4
 8007a68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2280      	movs	r2, #128	; 0x80
 8007a6e:	0452      	lsls	r2, r2, #17
 8007a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3b04      	subs	r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3b04      	subs	r3, #4
 8007a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a84:	4a08      	ldr	r2, [pc, #32]	; (8007aa8 <pxPortInitialiseStack+0x50>)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3b14      	subs	r3, #20
 8007a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3b20      	subs	r3, #32
 8007a9a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
}
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	b004      	add	sp, #16
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	46c0      	nop			; (mov r8, r8)
 8007aa8:	08007aad 	.word	0x08007aad

08007aac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ab6:	4b08      	ldr	r3, [pc, #32]	; (8007ad8 <prvTaskExitError+0x2c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	d001      	beq.n	8007ac2 <prvTaskExitError+0x16>
 8007abe:	b672      	cpsid	i
 8007ac0:	e7fe      	b.n	8007ac0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007ac2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007ac4:	46c0      	nop			; (mov r8, r8)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0fc      	beq.n	8007ac6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007acc:	46c0      	nop			; (mov r8, r8)
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	b002      	add	sp, #8
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	20000008 	.word	0x20000008

08007adc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007ae0:	46c0      	nop			; (mov r8, r8)
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007af0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007af0:	4a0b      	ldr	r2, [pc, #44]	; (8007b20 <pxCurrentTCBConst2>)
 8007af2:	6813      	ldr	r3, [r2, #0]
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	3020      	adds	r0, #32
 8007af8:	f380 8809 	msr	PSP, r0
 8007afc:	2002      	movs	r0, #2
 8007afe:	f380 8814 	msr	CONTROL, r0
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007b08:	46ae      	mov	lr, r5
 8007b0a:	bc08      	pop	{r3}
 8007b0c:	bc04      	pop	{r2}
 8007b0e:	b662      	cpsie	i
 8007b10:	4718      	bx	r3
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	46c0      	nop			; (mov r8, r8)
 8007b16:	46c0      	nop			; (mov r8, r8)
 8007b18:	46c0      	nop			; (mov r8, r8)
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	46c0      	nop			; (mov r8, r8)
 8007b1e:	46c0      	nop			; (mov r8, r8)

08007b20 <pxCurrentTCBConst2>:
 8007b20:	200004ec 	.word	0x200004ec
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007b24:	46c0      	nop			; (mov r8, r8)
 8007b26:	46c0      	nop			; (mov r8, r8)

08007b28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8007b2c:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <xPortStartScheduler+0x40>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	4b0d      	ldr	r3, [pc, #52]	; (8007b68 <xPortStartScheduler+0x40>)
 8007b32:	21ff      	movs	r1, #255	; 0xff
 8007b34:	0409      	lsls	r1, r1, #16
 8007b36:	430a      	orrs	r2, r1
 8007b38:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <xPortStartScheduler+0x40>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <xPortStartScheduler+0x40>)
 8007b40:	21ff      	movs	r1, #255	; 0xff
 8007b42:	0609      	lsls	r1, r1, #24
 8007b44:	430a      	orrs	r2, r1
 8007b46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007b48:	f000 f898 	bl	8007c7c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b4c:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <xPortStartScheduler+0x44>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007b52:	f7ff ffcd 	bl	8007af0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b56:	f7ff f9b5 	bl	8006ec4 <vTaskSwitchContext>
	prvTaskExitError();
 8007b5a:	f7ff ffa7 	bl	8007aac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	e000ed20 	.word	0xe000ed20
 8007b6c:	20000008 	.word	0x20000008

08007b70 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <vPortYield+0x1c>)
 8007b76:	2280      	movs	r2, #128	; 0x80
 8007b78:	0552      	lsls	r2, r2, #21
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007b7c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007b80:	f3bf 8f6f 	isb	sy
}
 8007b84:	46c0      	nop			; (mov r8, r8)
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007b94:	b672      	cpsid	i
    uxCriticalNesting++;
 8007b96:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <vPortEnterCritical+0x20>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	4b04      	ldr	r3, [pc, #16]	; (8007bb0 <vPortEnterCritical+0x20>)
 8007b9e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007ba0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007ba4:	f3bf 8f6f 	isb	sy
}
 8007ba8:	46c0      	nop			; (mov r8, r8)
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	46c0      	nop			; (mov r8, r8)
 8007bb0:	20000008 	.word	0x20000008

08007bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bb8:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <vPortExitCritical+0x2c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <vPortExitCritical+0x10>
 8007bc0:	b672      	cpsid	i
 8007bc2:	e7fe      	b.n	8007bc2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007bc4:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <vPortExitCritical+0x2c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	1e5a      	subs	r2, r3, #1
 8007bca:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <vPortExitCritical+0x2c>)
 8007bcc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8007bce:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <vPortExitCritical+0x2c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d100      	bne.n	8007bd8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007bd6:	b662      	cpsie	i
    }
}
 8007bd8:	46c0      	nop			; (mov r8, r8)
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	20000008 	.word	0x20000008

08007be4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007be4:	f3ef 8010 	mrs	r0, PRIMASK
 8007be8:	b672      	cpsid	i
 8007bea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8007bec:	46c0      	nop			; (mov r8, r8)
 8007bee:	0018      	movs	r0, r3

08007bf0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007bf0:	f380 8810 	msr	PRIMASK, r0
 8007bf4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007bf6:	46c0      	nop			; (mov r8, r8)
	...

08007c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c00:	f3ef 8009 	mrs	r0, PSP
 8007c04:	4b0e      	ldr	r3, [pc, #56]	; (8007c40 <pxCurrentTCBConst>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	3820      	subs	r0, #32
 8007c0a:	6010      	str	r0, [r2, #0]
 8007c0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007c0e:	4644      	mov	r4, r8
 8007c10:	464d      	mov	r5, r9
 8007c12:	4656      	mov	r6, sl
 8007c14:	465f      	mov	r7, fp
 8007c16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007c18:	b508      	push	{r3, lr}
 8007c1a:	b672      	cpsid	i
 8007c1c:	f7ff f952 	bl	8006ec4 <vTaskSwitchContext>
 8007c20:	b662      	cpsie	i
 8007c22:	bc0c      	pop	{r2, r3}
 8007c24:	6811      	ldr	r1, [r2, #0]
 8007c26:	6808      	ldr	r0, [r1, #0]
 8007c28:	3010      	adds	r0, #16
 8007c2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007c2c:	46a0      	mov	r8, r4
 8007c2e:	46a9      	mov	r9, r5
 8007c30:	46b2      	mov	sl, r6
 8007c32:	46bb      	mov	fp, r7
 8007c34:	f380 8809 	msr	PSP, r0
 8007c38:	3820      	subs	r0, #32
 8007c3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007c3c:	4718      	bx	r3
 8007c3e:	46c0      	nop			; (mov r8, r8)

08007c40 <pxCurrentTCBConst>:
 8007c40:	200004ec 	.word	0x200004ec
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007c44:	46c0      	nop			; (mov r8, r8)
 8007c46:	46c0      	nop			; (mov r8, r8)

08007c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c4e:	f7ff ffc9 	bl	8007be4 <ulSetInterruptMaskFromISR>
 8007c52:	0003      	movs	r3, r0
 8007c54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c56:	f7ff f881 	bl	8006d5c <xTaskIncrementTick>
 8007c5a:	1e03      	subs	r3, r0, #0
 8007c5c:	d003      	beq.n	8007c66 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8007c5e:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <SysTick_Handler+0x30>)
 8007c60:	2280      	movs	r2, #128	; 0x80
 8007c62:	0552      	lsls	r2, r2, #21
 8007c64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f7ff ffc1 	bl	8007bf0 <vClearInterruptMaskFromISR>
}
 8007c6e:	46c0      	nop			; (mov r8, r8)
 8007c70:	46bd      	mov	sp, r7
 8007c72:	b002      	add	sp, #8
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007c80:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <prvSetupTimerInterrupt+0x34>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007c86:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <prvSetupTimerInterrupt+0x38>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <prvSetupTimerInterrupt+0x3c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	22fa      	movs	r2, #250	; 0xfa
 8007c92:	0091      	lsls	r1, r2, #2
 8007c94:	0018      	movs	r0, r3
 8007c96:	f7f8 fa49 	bl	800012c <__udivsi3>
 8007c9a:	0003      	movs	r3, r0
 8007c9c:	001a      	movs	r2, r3
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <prvSetupTimerInterrupt+0x40>)
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007ca4:	4b02      	ldr	r3, [pc, #8]	; (8007cb0 <prvSetupTimerInterrupt+0x34>)
 8007ca6:	2207      	movs	r2, #7
 8007ca8:	601a      	str	r2, [r3, #0]
}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	e000e010 	.word	0xe000e010
 8007cb4:	e000e018 	.word	0xe000e018
 8007cb8:	20000000 	.word	0x20000000
 8007cbc:	e000e014 	.word	0xe000e014

08007cc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007ccc:	f7fe ffa0 	bl	8006c10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cd0:	4b49      	ldr	r3, [pc, #292]	; (8007df8 <pvPortMalloc+0x138>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cd8:	f000 f8e0 	bl	8007e9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cdc:	4b47      	ldr	r3, [pc, #284]	; (8007dfc <pvPortMalloc+0x13c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	d000      	beq.n	8007ce8 <pvPortMalloc+0x28>
 8007ce6:	e079      	b.n	8007ddc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d012      	beq.n	8007d14 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007cee:	2208      	movs	r2, #8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2207      	movs	r2, #7
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	d00a      	beq.n	8007d14 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2207      	movs	r2, #7
 8007d02:	4393      	bics	r3, r2
 8007d04:	3308      	adds	r3, #8
 8007d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2207      	movs	r2, #7
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	d001      	beq.n	8007d14 <pvPortMalloc+0x54>
 8007d10:	b672      	cpsid	i
 8007d12:	e7fe      	b.n	8007d12 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d060      	beq.n	8007ddc <pvPortMalloc+0x11c>
 8007d1a:	4b39      	ldr	r3, [pc, #228]	; (8007e00 <pvPortMalloc+0x140>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d85b      	bhi.n	8007ddc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d24:	4b37      	ldr	r3, [pc, #220]	; (8007e04 <pvPortMalloc+0x144>)
 8007d26:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007d28:	4b36      	ldr	r3, [pc, #216]	; (8007e04 <pvPortMalloc+0x144>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d2e:	e004      	b.n	8007d3a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d903      	bls.n	8007d4c <pvPortMalloc+0x8c>
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f1      	bne.n	8007d30 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d4c:	4b2a      	ldr	r3, [pc, #168]	; (8007df8 <pvPortMalloc+0x138>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d042      	beq.n	8007ddc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2208      	movs	r2, #8
 8007d5c:	189b      	adds	r3, r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	2308      	movs	r3, #8
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d916      	bls.n	8007da6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	18d3      	adds	r3, r2, r3
 8007d7e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2207      	movs	r2, #7
 8007d84:	4013      	ands	r3, r2
 8007d86:	d001      	beq.n	8007d8c <pvPortMalloc+0xcc>
 8007d88:	b672      	cpsid	i
 8007d8a:	e7fe      	b.n	8007d8a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	1ad2      	subs	r2, r2, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	0018      	movs	r0, r3
 8007da2:	f000 f8db 	bl	8007f5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007da6:	4b16      	ldr	r3, [pc, #88]	; (8007e00 <pvPortMalloc+0x140>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <pvPortMalloc+0x140>)
 8007db2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007db4:	4b12      	ldr	r3, [pc, #72]	; (8007e00 <pvPortMalloc+0x140>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <pvPortMalloc+0x148>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d203      	bcs.n	8007dc8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <pvPortMalloc+0x140>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <pvPortMalloc+0x148>)
 8007dc6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <pvPortMalloc+0x13c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ddc:	f7fe ff24 	bl	8006c28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2207      	movs	r2, #7
 8007de4:	4013      	ands	r3, r2
 8007de6:	d001      	beq.n	8007dec <pvPortMalloc+0x12c>
 8007de8:	b672      	cpsid	i
 8007dea:	e7fe      	b.n	8007dea <pvPortMalloc+0x12a>
	return pvReturn;
 8007dec:	68fb      	ldr	r3, [r7, #12]
}
 8007dee:	0018      	movs	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b006      	add	sp, #24
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	46c0      	nop			; (mov r8, r8)
 8007df8:	200015a8 	.word	0x200015a8
 8007dfc:	200015b4 	.word	0x200015b4
 8007e00:	200015ac 	.word	0x200015ac
 8007e04:	200015a0 	.word	0x200015a0
 8007e08:	200015b0 	.word	0x200015b0

08007e0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d035      	beq.n	8007e8a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e1e:	2308      	movs	r3, #8
 8007e20:	425b      	negs	r3, r3
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	18d3      	adds	r3, r2, r3
 8007e26:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	4b18      	ldr	r3, [pc, #96]	; (8007e94 <vPortFree+0x88>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4013      	ands	r3, r2
 8007e36:	d101      	bne.n	8007e3c <vPortFree+0x30>
 8007e38:	b672      	cpsid	i
 8007e3a:	e7fe      	b.n	8007e3a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <vPortFree+0x3c>
 8007e44:	b672      	cpsid	i
 8007e46:	e7fe      	b.n	8007e46 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <vPortFree+0x88>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4013      	ands	r3, r2
 8007e52:	d01a      	beq.n	8007e8a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d116      	bne.n	8007e8a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <vPortFree+0x88>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	401a      	ands	r2, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e6c:	f7fe fed0 	bl	8006c10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <vPortFree+0x8c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	18d2      	adds	r2, r2, r3
 8007e7a:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <vPortFree+0x8c>)
 8007e7c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	0018      	movs	r0, r3
 8007e82:	f000 f86b 	bl	8007f5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e86:	f7fe fecf 	bl	8006c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	b004      	add	sp, #16
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	200015b4 	.word	0x200015b4
 8007e98:	200015ac 	.word	0x200015ac

08007e9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ea2:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <prvHeapInit+0xa4>)
 8007ea4:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ea6:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <prvHeapInit+0xa8>)
 8007ea8:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2207      	movs	r2, #7
 8007eae:	4013      	ands	r3, r2
 8007eb0:	d00c      	beq.n	8007ecc <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3307      	adds	r3, #7
 8007eb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2207      	movs	r2, #7
 8007ebc:	4393      	bics	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	1ad2      	subs	r2, r2, r3
 8007ec6:	4b1f      	ldr	r3, [pc, #124]	; (8007f44 <prvHeapInit+0xa8>)
 8007ec8:	18d3      	adds	r3, r2, r3
 8007eca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <prvHeapInit+0xac>)
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ed6:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <prvHeapInit+0xac>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	18d3      	adds	r3, r2, r3
 8007ee2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ee4:	2208      	movs	r2, #8
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2207      	movs	r2, #7
 8007ef0:	4393      	bics	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4b15      	ldr	r3, [pc, #84]	; (8007f4c <prvHeapInit+0xb0>)
 8007ef8:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007efa:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <prvHeapInit+0xb0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2200      	movs	r2, #0
 8007f00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <prvHeapInit+0xb0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <prvHeapInit+0xb0>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <prvHeapInit+0xb4>)
 8007f26:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <prvHeapInit+0xb8>)
 8007f2e:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f30:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <prvHeapInit+0xbc>)
 8007f32:	2280      	movs	r2, #128	; 0x80
 8007f34:	0612      	lsls	r2, r2, #24
 8007f36:	601a      	str	r2, [r3, #0]
}
 8007f38:	46c0      	nop			; (mov r8, r8)
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	b004      	add	sp, #16
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	00000a86 	.word	0x00000a86
 8007f44:	20000b18 	.word	0x20000b18
 8007f48:	200015a0 	.word	0x200015a0
 8007f4c:	200015a8 	.word	0x200015a8
 8007f50:	200015b0 	.word	0x200015b0
 8007f54:	200015ac 	.word	0x200015ac
 8007f58:	200015b4 	.word	0x200015b4

08007f5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f64:	4b27      	ldr	r3, [pc, #156]	; (8008004 <prvInsertBlockIntoFreeList+0xa8>)
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	e002      	b.n	8007f70 <prvInsertBlockIntoFreeList+0x14>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d8f7      	bhi.n	8007f6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	18d3      	adds	r3, r2, r3
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d108      	bne.n	8007f9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	18d2      	adds	r2, r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	18d2      	adds	r2, r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d118      	bne.n	8007fe4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <prvInsertBlockIntoFreeList+0xac>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d00d      	beq.n	8007fda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	18d2      	adds	r2, r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e008      	b.n	8007fec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fda:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <prvInsertBlockIntoFreeList+0xac>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e003      	b.n	8007fec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d002      	beq.n	8007ffa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ffa:	46c0      	nop			; (mov r8, r8)
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	b004      	add	sp, #16
 8008000:	bd80      	pop	{r7, pc}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	200015a0 	.word	0x200015a0
 8008008:	200015a8 	.word	0x200015a8

0800800c <calloc>:
 800800c:	b510      	push	{r4, lr}
 800800e:	4b03      	ldr	r3, [pc, #12]	; (800801c <calloc+0x10>)
 8008010:	000a      	movs	r2, r1
 8008012:	0001      	movs	r1, r0
 8008014:	6818      	ldr	r0, [r3, #0]
 8008016:	f000 f852 	bl	80080be <_calloc_r>
 800801a:	bd10      	pop	{r4, pc}
 800801c:	2000000c 	.word	0x2000000c

08008020 <__errno>:
 8008020:	4b01      	ldr	r3, [pc, #4]	; (8008028 <__errno+0x8>)
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	4770      	bx	lr
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	2000000c 	.word	0x2000000c

0800802c <__libc_init_array>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	2600      	movs	r6, #0
 8008030:	4d0c      	ldr	r5, [pc, #48]	; (8008064 <__libc_init_array+0x38>)
 8008032:	4c0d      	ldr	r4, [pc, #52]	; (8008068 <__libc_init_array+0x3c>)
 8008034:	1b64      	subs	r4, r4, r5
 8008036:	10a4      	asrs	r4, r4, #2
 8008038:	42a6      	cmp	r6, r4
 800803a:	d109      	bne.n	8008050 <__libc_init_array+0x24>
 800803c:	2600      	movs	r6, #0
 800803e:	f000 fc87 	bl	8008950 <_init>
 8008042:	4d0a      	ldr	r5, [pc, #40]	; (800806c <__libc_init_array+0x40>)
 8008044:	4c0a      	ldr	r4, [pc, #40]	; (8008070 <__libc_init_array+0x44>)
 8008046:	1b64      	subs	r4, r4, r5
 8008048:	10a4      	asrs	r4, r4, #2
 800804a:	42a6      	cmp	r6, r4
 800804c:	d105      	bne.n	800805a <__libc_init_array+0x2e>
 800804e:	bd70      	pop	{r4, r5, r6, pc}
 8008050:	00b3      	lsls	r3, r6, #2
 8008052:	58eb      	ldr	r3, [r5, r3]
 8008054:	4798      	blx	r3
 8008056:	3601      	adds	r6, #1
 8008058:	e7ee      	b.n	8008038 <__libc_init_array+0xc>
 800805a:	00b3      	lsls	r3, r6, #2
 800805c:	58eb      	ldr	r3, [r5, r3]
 800805e:	4798      	blx	r3
 8008060:	3601      	adds	r6, #1
 8008062:	e7f2      	b.n	800804a <__libc_init_array+0x1e>
 8008064:	08008ca4 	.word	0x08008ca4
 8008068:	08008ca4 	.word	0x08008ca4
 800806c:	08008ca4 	.word	0x08008ca4
 8008070:	08008ca8 	.word	0x08008ca8

08008074 <malloc>:
 8008074:	b510      	push	{r4, lr}
 8008076:	4b03      	ldr	r3, [pc, #12]	; (8008084 <malloc+0x10>)
 8008078:	0001      	movs	r1, r0
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	f000 f878 	bl	8008170 <_malloc_r>
 8008080:	bd10      	pop	{r4, pc}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	2000000c 	.word	0x2000000c

08008088 <free>:
 8008088:	b510      	push	{r4, lr}
 800808a:	4b03      	ldr	r3, [pc, #12]	; (8008098 <free+0x10>)
 800808c:	0001      	movs	r1, r0
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	f000 f824 	bl	80080dc <_free_r>
 8008094:	bd10      	pop	{r4, pc}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	2000000c 	.word	0x2000000c

0800809c <memcpy>:
 800809c:	2300      	movs	r3, #0
 800809e:	b510      	push	{r4, lr}
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d100      	bne.n	80080a6 <memcpy+0xa>
 80080a4:	bd10      	pop	{r4, pc}
 80080a6:	5ccc      	ldrb	r4, [r1, r3]
 80080a8:	54c4      	strb	r4, [r0, r3]
 80080aa:	3301      	adds	r3, #1
 80080ac:	e7f8      	b.n	80080a0 <memcpy+0x4>

080080ae <memset>:
 80080ae:	0003      	movs	r3, r0
 80080b0:	1882      	adds	r2, r0, r2
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d100      	bne.n	80080b8 <memset+0xa>
 80080b6:	4770      	bx	lr
 80080b8:	7019      	strb	r1, [r3, #0]
 80080ba:	3301      	adds	r3, #1
 80080bc:	e7f9      	b.n	80080b2 <memset+0x4>

080080be <_calloc_r>:
 80080be:	434a      	muls	r2, r1
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	0011      	movs	r1, r2
 80080c4:	0015      	movs	r5, r2
 80080c6:	f000 f853 	bl	8008170 <_malloc_r>
 80080ca:	1e04      	subs	r4, r0, #0
 80080cc:	d003      	beq.n	80080d6 <_calloc_r+0x18>
 80080ce:	002a      	movs	r2, r5
 80080d0:	2100      	movs	r1, #0
 80080d2:	f7ff ffec 	bl	80080ae <memset>
 80080d6:	0020      	movs	r0, r4
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080080dc <_free_r>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	0005      	movs	r5, r0
 80080e0:	2900      	cmp	r1, #0
 80080e2:	d010      	beq.n	8008106 <_free_r+0x2a>
 80080e4:	1f0c      	subs	r4, r1, #4
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da00      	bge.n	80080ee <_free_r+0x12>
 80080ec:	18e4      	adds	r4, r4, r3
 80080ee:	0028      	movs	r0, r5
 80080f0:	f000 f8ec 	bl	80082cc <__malloc_lock>
 80080f4:	4a1d      	ldr	r2, [pc, #116]	; (800816c <_free_r+0x90>)
 80080f6:	6813      	ldr	r3, [r2, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <_free_r+0x2c>
 80080fc:	6063      	str	r3, [r4, #4]
 80080fe:	6014      	str	r4, [r2, #0]
 8008100:	0028      	movs	r0, r5
 8008102:	f000 f8eb 	bl	80082dc <__malloc_unlock>
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	42a3      	cmp	r3, r4
 800810a:	d908      	bls.n	800811e <_free_r+0x42>
 800810c:	6821      	ldr	r1, [r4, #0]
 800810e:	1860      	adds	r0, r4, r1
 8008110:	4283      	cmp	r3, r0
 8008112:	d1f3      	bne.n	80080fc <_free_r+0x20>
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	1841      	adds	r1, r0, r1
 800811a:	6021      	str	r1, [r4, #0]
 800811c:	e7ee      	b.n	80080fc <_free_r+0x20>
 800811e:	001a      	movs	r2, r3
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <_free_r+0x4e>
 8008126:	42a3      	cmp	r3, r4
 8008128:	d9f9      	bls.n	800811e <_free_r+0x42>
 800812a:	6811      	ldr	r1, [r2, #0]
 800812c:	1850      	adds	r0, r2, r1
 800812e:	42a0      	cmp	r0, r4
 8008130:	d10b      	bne.n	800814a <_free_r+0x6e>
 8008132:	6820      	ldr	r0, [r4, #0]
 8008134:	1809      	adds	r1, r1, r0
 8008136:	1850      	adds	r0, r2, r1
 8008138:	6011      	str	r1, [r2, #0]
 800813a:	4283      	cmp	r3, r0
 800813c:	d1e0      	bne.n	8008100 <_free_r+0x24>
 800813e:	6818      	ldr	r0, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	1841      	adds	r1, r0, r1
 8008144:	6011      	str	r1, [r2, #0]
 8008146:	6053      	str	r3, [r2, #4]
 8008148:	e7da      	b.n	8008100 <_free_r+0x24>
 800814a:	42a0      	cmp	r0, r4
 800814c:	d902      	bls.n	8008154 <_free_r+0x78>
 800814e:	230c      	movs	r3, #12
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	e7d5      	b.n	8008100 <_free_r+0x24>
 8008154:	6821      	ldr	r1, [r4, #0]
 8008156:	1860      	adds	r0, r4, r1
 8008158:	4283      	cmp	r3, r0
 800815a:	d103      	bne.n	8008164 <_free_r+0x88>
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	1841      	adds	r1, r0, r1
 8008162:	6021      	str	r1, [r4, #0]
 8008164:	6063      	str	r3, [r4, #4]
 8008166:	6054      	str	r4, [r2, #4]
 8008168:	e7ca      	b.n	8008100 <_free_r+0x24>
 800816a:	46c0      	nop			; (mov r8, r8)
 800816c:	200015b8 	.word	0x200015b8

08008170 <_malloc_r>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	2303      	movs	r3, #3
 8008174:	1ccd      	adds	r5, r1, #3
 8008176:	439d      	bics	r5, r3
 8008178:	3508      	adds	r5, #8
 800817a:	0006      	movs	r6, r0
 800817c:	2d0c      	cmp	r5, #12
 800817e:	d21f      	bcs.n	80081c0 <_malloc_r+0x50>
 8008180:	250c      	movs	r5, #12
 8008182:	42a9      	cmp	r1, r5
 8008184:	d81e      	bhi.n	80081c4 <_malloc_r+0x54>
 8008186:	0030      	movs	r0, r6
 8008188:	f000 f8a0 	bl	80082cc <__malloc_lock>
 800818c:	4925      	ldr	r1, [pc, #148]	; (8008224 <_malloc_r+0xb4>)
 800818e:	680a      	ldr	r2, [r1, #0]
 8008190:	0014      	movs	r4, r2
 8008192:	2c00      	cmp	r4, #0
 8008194:	d11a      	bne.n	80081cc <_malloc_r+0x5c>
 8008196:	4f24      	ldr	r7, [pc, #144]	; (8008228 <_malloc_r+0xb8>)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d104      	bne.n	80081a8 <_malloc_r+0x38>
 800819e:	0021      	movs	r1, r4
 80081a0:	0030      	movs	r0, r6
 80081a2:	f000 f843 	bl	800822c <_sbrk_r>
 80081a6:	6038      	str	r0, [r7, #0]
 80081a8:	0029      	movs	r1, r5
 80081aa:	0030      	movs	r0, r6
 80081ac:	f000 f83e 	bl	800822c <_sbrk_r>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d12b      	bne.n	800820c <_malloc_r+0x9c>
 80081b4:	230c      	movs	r3, #12
 80081b6:	0030      	movs	r0, r6
 80081b8:	6033      	str	r3, [r6, #0]
 80081ba:	f000 f88f 	bl	80082dc <__malloc_unlock>
 80081be:	e003      	b.n	80081c8 <_malloc_r+0x58>
 80081c0:	2d00      	cmp	r5, #0
 80081c2:	dade      	bge.n	8008182 <_malloc_r+0x12>
 80081c4:	230c      	movs	r3, #12
 80081c6:	6033      	str	r3, [r6, #0]
 80081c8:	2000      	movs	r0, #0
 80081ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	1b5b      	subs	r3, r3, r5
 80081d0:	d419      	bmi.n	8008206 <_malloc_r+0x96>
 80081d2:	2b0b      	cmp	r3, #11
 80081d4:	d903      	bls.n	80081de <_malloc_r+0x6e>
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	18e4      	adds	r4, r4, r3
 80081da:	6025      	str	r5, [r4, #0]
 80081dc:	e003      	b.n	80081e6 <_malloc_r+0x76>
 80081de:	6863      	ldr	r3, [r4, #4]
 80081e0:	42a2      	cmp	r2, r4
 80081e2:	d10e      	bne.n	8008202 <_malloc_r+0x92>
 80081e4:	600b      	str	r3, [r1, #0]
 80081e6:	0030      	movs	r0, r6
 80081e8:	f000 f878 	bl	80082dc <__malloc_unlock>
 80081ec:	0020      	movs	r0, r4
 80081ee:	2207      	movs	r2, #7
 80081f0:	300b      	adds	r0, #11
 80081f2:	1d23      	adds	r3, r4, #4
 80081f4:	4390      	bics	r0, r2
 80081f6:	1ac2      	subs	r2, r0, r3
 80081f8:	4298      	cmp	r0, r3
 80081fa:	d0e6      	beq.n	80081ca <_malloc_r+0x5a>
 80081fc:	1a1b      	subs	r3, r3, r0
 80081fe:	50a3      	str	r3, [r4, r2]
 8008200:	e7e3      	b.n	80081ca <_malloc_r+0x5a>
 8008202:	6053      	str	r3, [r2, #4]
 8008204:	e7ef      	b.n	80081e6 <_malloc_r+0x76>
 8008206:	0022      	movs	r2, r4
 8008208:	6864      	ldr	r4, [r4, #4]
 800820a:	e7c2      	b.n	8008192 <_malloc_r+0x22>
 800820c:	2303      	movs	r3, #3
 800820e:	1cc4      	adds	r4, r0, #3
 8008210:	439c      	bics	r4, r3
 8008212:	42a0      	cmp	r0, r4
 8008214:	d0e1      	beq.n	80081da <_malloc_r+0x6a>
 8008216:	1a21      	subs	r1, r4, r0
 8008218:	0030      	movs	r0, r6
 800821a:	f000 f807 	bl	800822c <_sbrk_r>
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d1db      	bne.n	80081da <_malloc_r+0x6a>
 8008222:	e7c7      	b.n	80081b4 <_malloc_r+0x44>
 8008224:	200015b8 	.word	0x200015b8
 8008228:	200015bc 	.word	0x200015bc

0800822c <_sbrk_r>:
 800822c:	2300      	movs	r3, #0
 800822e:	b570      	push	{r4, r5, r6, lr}
 8008230:	4d06      	ldr	r5, [pc, #24]	; (800824c <_sbrk_r+0x20>)
 8008232:	0004      	movs	r4, r0
 8008234:	0008      	movs	r0, r1
 8008236:	602b      	str	r3, [r5, #0]
 8008238:	f7fb f802 	bl	8003240 <_sbrk>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d103      	bne.n	8008248 <_sbrk_r+0x1c>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d000      	beq.n	8008248 <_sbrk_r+0x1c>
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	bd70      	pop	{r4, r5, r6, pc}
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	20001888 	.word	0x20001888

08008250 <siprintf>:
 8008250:	b40e      	push	{r1, r2, r3}
 8008252:	b500      	push	{lr}
 8008254:	490b      	ldr	r1, [pc, #44]	; (8008284 <siprintf+0x34>)
 8008256:	b09c      	sub	sp, #112	; 0x70
 8008258:	ab1d      	add	r3, sp, #116	; 0x74
 800825a:	9002      	str	r0, [sp, #8]
 800825c:	9006      	str	r0, [sp, #24]
 800825e:	9107      	str	r1, [sp, #28]
 8008260:	9104      	str	r1, [sp, #16]
 8008262:	4809      	ldr	r0, [pc, #36]	; (8008288 <siprintf+0x38>)
 8008264:	4909      	ldr	r1, [pc, #36]	; (800828c <siprintf+0x3c>)
 8008266:	cb04      	ldmia	r3!, {r2}
 8008268:	9105      	str	r1, [sp, #20]
 800826a:	6800      	ldr	r0, [r0, #0]
 800826c:	a902      	add	r1, sp, #8
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	f000 f89e 	bl	80083b0 <_svfiprintf_r>
 8008274:	2300      	movs	r3, #0
 8008276:	9a02      	ldr	r2, [sp, #8]
 8008278:	7013      	strb	r3, [r2, #0]
 800827a:	b01c      	add	sp, #112	; 0x70
 800827c:	bc08      	pop	{r3}
 800827e:	b003      	add	sp, #12
 8008280:	4718      	bx	r3
 8008282:	46c0      	nop			; (mov r8, r8)
 8008284:	7fffffff 	.word	0x7fffffff
 8008288:	2000000c 	.word	0x2000000c
 800828c:	ffff0208 	.word	0xffff0208

08008290 <strcpy>:
 8008290:	0003      	movs	r3, r0
 8008292:	780a      	ldrb	r2, [r1, #0]
 8008294:	3101      	adds	r1, #1
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	3301      	adds	r3, #1
 800829a:	2a00      	cmp	r2, #0
 800829c:	d1f9      	bne.n	8008292 <strcpy+0x2>
 800829e:	4770      	bx	lr

080082a0 <strstr>:
 80082a0:	780a      	ldrb	r2, [r1, #0]
 80082a2:	b530      	push	{r4, r5, lr}
 80082a4:	2a00      	cmp	r2, #0
 80082a6:	d10c      	bne.n	80082c2 <strstr+0x22>
 80082a8:	bd30      	pop	{r4, r5, pc}
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d108      	bne.n	80082c0 <strstr+0x20>
 80082ae:	2301      	movs	r3, #1
 80082b0:	5ccc      	ldrb	r4, [r1, r3]
 80082b2:	2c00      	cmp	r4, #0
 80082b4:	d0f8      	beq.n	80082a8 <strstr+0x8>
 80082b6:	5cc5      	ldrb	r5, [r0, r3]
 80082b8:	42a5      	cmp	r5, r4
 80082ba:	d101      	bne.n	80082c0 <strstr+0x20>
 80082bc:	3301      	adds	r3, #1
 80082be:	e7f7      	b.n	80082b0 <strstr+0x10>
 80082c0:	3001      	adds	r0, #1
 80082c2:	7803      	ldrb	r3, [r0, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1f0      	bne.n	80082aa <strstr+0xa>
 80082c8:	0018      	movs	r0, r3
 80082ca:	e7ed      	b.n	80082a8 <strstr+0x8>

080082cc <__malloc_lock>:
 80082cc:	b510      	push	{r4, lr}
 80082ce:	4802      	ldr	r0, [pc, #8]	; (80082d8 <__malloc_lock+0xc>)
 80082d0:	f000 faf0 	bl	80088b4 <__retarget_lock_acquire_recursive>
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	20001890 	.word	0x20001890

080082dc <__malloc_unlock>:
 80082dc:	b510      	push	{r4, lr}
 80082de:	4802      	ldr	r0, [pc, #8]	; (80082e8 <__malloc_unlock+0xc>)
 80082e0:	f000 fae9 	bl	80088b6 <__retarget_lock_release_recursive>
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	20001890 	.word	0x20001890

080082ec <__ssputs_r>:
 80082ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ee:	688e      	ldr	r6, [r1, #8]
 80082f0:	b085      	sub	sp, #20
 80082f2:	0007      	movs	r7, r0
 80082f4:	000c      	movs	r4, r1
 80082f6:	9203      	str	r2, [sp, #12]
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	429e      	cmp	r6, r3
 80082fc:	d83c      	bhi.n	8008378 <__ssputs_r+0x8c>
 80082fe:	2390      	movs	r3, #144	; 0x90
 8008300:	898a      	ldrh	r2, [r1, #12]
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	421a      	tst	r2, r3
 8008306:	d034      	beq.n	8008372 <__ssputs_r+0x86>
 8008308:	2503      	movs	r5, #3
 800830a:	6909      	ldr	r1, [r1, #16]
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	1a5b      	subs	r3, r3, r1
 8008310:	9302      	str	r3, [sp, #8]
 8008312:	6963      	ldr	r3, [r4, #20]
 8008314:	9802      	ldr	r0, [sp, #8]
 8008316:	435d      	muls	r5, r3
 8008318:	0feb      	lsrs	r3, r5, #31
 800831a:	195d      	adds	r5, r3, r5
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	106d      	asrs	r5, r5, #1
 8008320:	3301      	adds	r3, #1
 8008322:	181b      	adds	r3, r3, r0
 8008324:	42ab      	cmp	r3, r5
 8008326:	d900      	bls.n	800832a <__ssputs_r+0x3e>
 8008328:	001d      	movs	r5, r3
 800832a:	0553      	lsls	r3, r2, #21
 800832c:	d532      	bpl.n	8008394 <__ssputs_r+0xa8>
 800832e:	0029      	movs	r1, r5
 8008330:	0038      	movs	r0, r7
 8008332:	f7ff ff1d 	bl	8008170 <_malloc_r>
 8008336:	1e06      	subs	r6, r0, #0
 8008338:	d109      	bne.n	800834e <__ssputs_r+0x62>
 800833a:	230c      	movs	r3, #12
 800833c:	603b      	str	r3, [r7, #0]
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	2001      	movs	r0, #1
 8008342:	89a2      	ldrh	r2, [r4, #12]
 8008344:	4240      	negs	r0, r0
 8008346:	4313      	orrs	r3, r2
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	b005      	add	sp, #20
 800834c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800834e:	9a02      	ldr	r2, [sp, #8]
 8008350:	6921      	ldr	r1, [r4, #16]
 8008352:	f7ff fea3 	bl	800809c <memcpy>
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	4a14      	ldr	r2, [pc, #80]	; (80083ac <__ssputs_r+0xc0>)
 800835a:	401a      	ands	r2, r3
 800835c:	2380      	movs	r3, #128	; 0x80
 800835e:	4313      	orrs	r3, r2
 8008360:	81a3      	strh	r3, [r4, #12]
 8008362:	9b02      	ldr	r3, [sp, #8]
 8008364:	6126      	str	r6, [r4, #16]
 8008366:	18f6      	adds	r6, r6, r3
 8008368:	6026      	str	r6, [r4, #0]
 800836a:	6165      	str	r5, [r4, #20]
 800836c:	9e01      	ldr	r6, [sp, #4]
 800836e:	1aed      	subs	r5, r5, r3
 8008370:	60a5      	str	r5, [r4, #8]
 8008372:	9b01      	ldr	r3, [sp, #4]
 8008374:	429e      	cmp	r6, r3
 8008376:	d900      	bls.n	800837a <__ssputs_r+0x8e>
 8008378:	9e01      	ldr	r6, [sp, #4]
 800837a:	0032      	movs	r2, r6
 800837c:	9903      	ldr	r1, [sp, #12]
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	f000 faa5 	bl	80088ce <memmove>
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	2000      	movs	r0, #0
 8008388:	1b9b      	subs	r3, r3, r6
 800838a:	60a3      	str	r3, [r4, #8]
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	199e      	adds	r6, r3, r6
 8008390:	6026      	str	r6, [r4, #0]
 8008392:	e7da      	b.n	800834a <__ssputs_r+0x5e>
 8008394:	002a      	movs	r2, r5
 8008396:	0038      	movs	r0, r7
 8008398:	f000 faac 	bl	80088f4 <_realloc_r>
 800839c:	1e06      	subs	r6, r0, #0
 800839e:	d1e0      	bne.n	8008362 <__ssputs_r+0x76>
 80083a0:	0038      	movs	r0, r7
 80083a2:	6921      	ldr	r1, [r4, #16]
 80083a4:	f7ff fe9a 	bl	80080dc <_free_r>
 80083a8:	e7c7      	b.n	800833a <__ssputs_r+0x4e>
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	fffffb7f 	.word	0xfffffb7f

080083b0 <_svfiprintf_r>:
 80083b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b2:	b0a1      	sub	sp, #132	; 0x84
 80083b4:	9003      	str	r0, [sp, #12]
 80083b6:	001d      	movs	r5, r3
 80083b8:	898b      	ldrh	r3, [r1, #12]
 80083ba:	000f      	movs	r7, r1
 80083bc:	0016      	movs	r6, r2
 80083be:	061b      	lsls	r3, r3, #24
 80083c0:	d511      	bpl.n	80083e6 <_svfiprintf_r+0x36>
 80083c2:	690b      	ldr	r3, [r1, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10e      	bne.n	80083e6 <_svfiprintf_r+0x36>
 80083c8:	2140      	movs	r1, #64	; 0x40
 80083ca:	f7ff fed1 	bl	8008170 <_malloc_r>
 80083ce:	6038      	str	r0, [r7, #0]
 80083d0:	6138      	str	r0, [r7, #16]
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d105      	bne.n	80083e2 <_svfiprintf_r+0x32>
 80083d6:	230c      	movs	r3, #12
 80083d8:	9a03      	ldr	r2, [sp, #12]
 80083da:	3801      	subs	r0, #1
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	b021      	add	sp, #132	; 0x84
 80083e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e2:	2340      	movs	r3, #64	; 0x40
 80083e4:	617b      	str	r3, [r7, #20]
 80083e6:	2300      	movs	r3, #0
 80083e8:	ac08      	add	r4, sp, #32
 80083ea:	6163      	str	r3, [r4, #20]
 80083ec:	3320      	adds	r3, #32
 80083ee:	7663      	strb	r3, [r4, #25]
 80083f0:	3310      	adds	r3, #16
 80083f2:	76a3      	strb	r3, [r4, #26]
 80083f4:	9507      	str	r5, [sp, #28]
 80083f6:	0035      	movs	r5, r6
 80083f8:	782b      	ldrb	r3, [r5, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <_svfiprintf_r+0x52>
 80083fe:	2b25      	cmp	r3, #37	; 0x25
 8008400:	d147      	bne.n	8008492 <_svfiprintf_r+0xe2>
 8008402:	1bab      	subs	r3, r5, r6
 8008404:	9305      	str	r3, [sp, #20]
 8008406:	42b5      	cmp	r5, r6
 8008408:	d00c      	beq.n	8008424 <_svfiprintf_r+0x74>
 800840a:	0032      	movs	r2, r6
 800840c:	0039      	movs	r1, r7
 800840e:	9803      	ldr	r0, [sp, #12]
 8008410:	f7ff ff6c 	bl	80082ec <__ssputs_r>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	d100      	bne.n	800841a <_svfiprintf_r+0x6a>
 8008418:	e0ae      	b.n	8008578 <_svfiprintf_r+0x1c8>
 800841a:	6962      	ldr	r2, [r4, #20]
 800841c:	9b05      	ldr	r3, [sp, #20]
 800841e:	4694      	mov	ip, r2
 8008420:	4463      	add	r3, ip
 8008422:	6163      	str	r3, [r4, #20]
 8008424:	782b      	ldrb	r3, [r5, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d100      	bne.n	800842c <_svfiprintf_r+0x7c>
 800842a:	e0a5      	b.n	8008578 <_svfiprintf_r+0x1c8>
 800842c:	2201      	movs	r2, #1
 800842e:	2300      	movs	r3, #0
 8008430:	4252      	negs	r2, r2
 8008432:	6062      	str	r2, [r4, #4]
 8008434:	a904      	add	r1, sp, #16
 8008436:	3254      	adds	r2, #84	; 0x54
 8008438:	1852      	adds	r2, r2, r1
 800843a:	1c6e      	adds	r6, r5, #1
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	60e3      	str	r3, [r4, #12]
 8008440:	60a3      	str	r3, [r4, #8]
 8008442:	7013      	strb	r3, [r2, #0]
 8008444:	65a3      	str	r3, [r4, #88]	; 0x58
 8008446:	2205      	movs	r2, #5
 8008448:	7831      	ldrb	r1, [r6, #0]
 800844a:	4854      	ldr	r0, [pc, #336]	; (800859c <_svfiprintf_r+0x1ec>)
 800844c:	f000 fa34 	bl	80088b8 <memchr>
 8008450:	1c75      	adds	r5, r6, #1
 8008452:	2800      	cmp	r0, #0
 8008454:	d11f      	bne.n	8008496 <_svfiprintf_r+0xe6>
 8008456:	6822      	ldr	r2, [r4, #0]
 8008458:	06d3      	lsls	r3, r2, #27
 800845a:	d504      	bpl.n	8008466 <_svfiprintf_r+0xb6>
 800845c:	2353      	movs	r3, #83	; 0x53
 800845e:	a904      	add	r1, sp, #16
 8008460:	185b      	adds	r3, r3, r1
 8008462:	2120      	movs	r1, #32
 8008464:	7019      	strb	r1, [r3, #0]
 8008466:	0713      	lsls	r3, r2, #28
 8008468:	d504      	bpl.n	8008474 <_svfiprintf_r+0xc4>
 800846a:	2353      	movs	r3, #83	; 0x53
 800846c:	a904      	add	r1, sp, #16
 800846e:	185b      	adds	r3, r3, r1
 8008470:	212b      	movs	r1, #43	; 0x2b
 8008472:	7019      	strb	r1, [r3, #0]
 8008474:	7833      	ldrb	r3, [r6, #0]
 8008476:	2b2a      	cmp	r3, #42	; 0x2a
 8008478:	d016      	beq.n	80084a8 <_svfiprintf_r+0xf8>
 800847a:	0035      	movs	r5, r6
 800847c:	2100      	movs	r1, #0
 800847e:	200a      	movs	r0, #10
 8008480:	68e3      	ldr	r3, [r4, #12]
 8008482:	782a      	ldrb	r2, [r5, #0]
 8008484:	1c6e      	adds	r6, r5, #1
 8008486:	3a30      	subs	r2, #48	; 0x30
 8008488:	2a09      	cmp	r2, #9
 800848a:	d94e      	bls.n	800852a <_svfiprintf_r+0x17a>
 800848c:	2900      	cmp	r1, #0
 800848e:	d111      	bne.n	80084b4 <_svfiprintf_r+0x104>
 8008490:	e017      	b.n	80084c2 <_svfiprintf_r+0x112>
 8008492:	3501      	adds	r5, #1
 8008494:	e7b0      	b.n	80083f8 <_svfiprintf_r+0x48>
 8008496:	4b41      	ldr	r3, [pc, #260]	; (800859c <_svfiprintf_r+0x1ec>)
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	1ac0      	subs	r0, r0, r3
 800849c:	2301      	movs	r3, #1
 800849e:	4083      	lsls	r3, r0
 80084a0:	4313      	orrs	r3, r2
 80084a2:	002e      	movs	r6, r5
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	e7ce      	b.n	8008446 <_svfiprintf_r+0x96>
 80084a8:	9b07      	ldr	r3, [sp, #28]
 80084aa:	1d19      	adds	r1, r3, #4
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	9107      	str	r1, [sp, #28]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	db01      	blt.n	80084b8 <_svfiprintf_r+0x108>
 80084b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b6:	e004      	b.n	80084c2 <_svfiprintf_r+0x112>
 80084b8:	425b      	negs	r3, r3
 80084ba:	60e3      	str	r3, [r4, #12]
 80084bc:	2302      	movs	r3, #2
 80084be:	4313      	orrs	r3, r2
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	782b      	ldrb	r3, [r5, #0]
 80084c4:	2b2e      	cmp	r3, #46	; 0x2e
 80084c6:	d10a      	bne.n	80084de <_svfiprintf_r+0x12e>
 80084c8:	786b      	ldrb	r3, [r5, #1]
 80084ca:	2b2a      	cmp	r3, #42	; 0x2a
 80084cc:	d135      	bne.n	800853a <_svfiprintf_r+0x18a>
 80084ce:	9b07      	ldr	r3, [sp, #28]
 80084d0:	3502      	adds	r5, #2
 80084d2:	1d1a      	adds	r2, r3, #4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	9207      	str	r2, [sp, #28]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	db2b      	blt.n	8008534 <_svfiprintf_r+0x184>
 80084dc:	9309      	str	r3, [sp, #36]	; 0x24
 80084de:	4e30      	ldr	r6, [pc, #192]	; (80085a0 <_svfiprintf_r+0x1f0>)
 80084e0:	2203      	movs	r2, #3
 80084e2:	0030      	movs	r0, r6
 80084e4:	7829      	ldrb	r1, [r5, #0]
 80084e6:	f000 f9e7 	bl	80088b8 <memchr>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d006      	beq.n	80084fc <_svfiprintf_r+0x14c>
 80084ee:	2340      	movs	r3, #64	; 0x40
 80084f0:	1b80      	subs	r0, r0, r6
 80084f2:	4083      	lsls	r3, r0
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	3501      	adds	r5, #1
 80084f8:	4313      	orrs	r3, r2
 80084fa:	6023      	str	r3, [r4, #0]
 80084fc:	7829      	ldrb	r1, [r5, #0]
 80084fe:	2206      	movs	r2, #6
 8008500:	4828      	ldr	r0, [pc, #160]	; (80085a4 <_svfiprintf_r+0x1f4>)
 8008502:	1c6e      	adds	r6, r5, #1
 8008504:	7621      	strb	r1, [r4, #24]
 8008506:	f000 f9d7 	bl	80088b8 <memchr>
 800850a:	2800      	cmp	r0, #0
 800850c:	d03c      	beq.n	8008588 <_svfiprintf_r+0x1d8>
 800850e:	4b26      	ldr	r3, [pc, #152]	; (80085a8 <_svfiprintf_r+0x1f8>)
 8008510:	2b00      	cmp	r3, #0
 8008512:	d125      	bne.n	8008560 <_svfiprintf_r+0x1b0>
 8008514:	2207      	movs	r2, #7
 8008516:	9b07      	ldr	r3, [sp, #28]
 8008518:	3307      	adds	r3, #7
 800851a:	4393      	bics	r3, r2
 800851c:	3308      	adds	r3, #8
 800851e:	9307      	str	r3, [sp, #28]
 8008520:	6963      	ldr	r3, [r4, #20]
 8008522:	9a04      	ldr	r2, [sp, #16]
 8008524:	189b      	adds	r3, r3, r2
 8008526:	6163      	str	r3, [r4, #20]
 8008528:	e765      	b.n	80083f6 <_svfiprintf_r+0x46>
 800852a:	4343      	muls	r3, r0
 800852c:	0035      	movs	r5, r6
 800852e:	2101      	movs	r1, #1
 8008530:	189b      	adds	r3, r3, r2
 8008532:	e7a6      	b.n	8008482 <_svfiprintf_r+0xd2>
 8008534:	2301      	movs	r3, #1
 8008536:	425b      	negs	r3, r3
 8008538:	e7d0      	b.n	80084dc <_svfiprintf_r+0x12c>
 800853a:	2300      	movs	r3, #0
 800853c:	200a      	movs	r0, #10
 800853e:	001a      	movs	r2, r3
 8008540:	3501      	adds	r5, #1
 8008542:	6063      	str	r3, [r4, #4]
 8008544:	7829      	ldrb	r1, [r5, #0]
 8008546:	1c6e      	adds	r6, r5, #1
 8008548:	3930      	subs	r1, #48	; 0x30
 800854a:	2909      	cmp	r1, #9
 800854c:	d903      	bls.n	8008556 <_svfiprintf_r+0x1a6>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0c5      	beq.n	80084de <_svfiprintf_r+0x12e>
 8008552:	9209      	str	r2, [sp, #36]	; 0x24
 8008554:	e7c3      	b.n	80084de <_svfiprintf_r+0x12e>
 8008556:	4342      	muls	r2, r0
 8008558:	0035      	movs	r5, r6
 800855a:	2301      	movs	r3, #1
 800855c:	1852      	adds	r2, r2, r1
 800855e:	e7f1      	b.n	8008544 <_svfiprintf_r+0x194>
 8008560:	ab07      	add	r3, sp, #28
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	003a      	movs	r2, r7
 8008566:	0021      	movs	r1, r4
 8008568:	4b10      	ldr	r3, [pc, #64]	; (80085ac <_svfiprintf_r+0x1fc>)
 800856a:	9803      	ldr	r0, [sp, #12]
 800856c:	e000      	b.n	8008570 <_svfiprintf_r+0x1c0>
 800856e:	bf00      	nop
 8008570:	9004      	str	r0, [sp, #16]
 8008572:	9b04      	ldr	r3, [sp, #16]
 8008574:	3301      	adds	r3, #1
 8008576:	d1d3      	bne.n	8008520 <_svfiprintf_r+0x170>
 8008578:	89bb      	ldrh	r3, [r7, #12]
 800857a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800857c:	065b      	lsls	r3, r3, #25
 800857e:	d400      	bmi.n	8008582 <_svfiprintf_r+0x1d2>
 8008580:	e72d      	b.n	80083de <_svfiprintf_r+0x2e>
 8008582:	2001      	movs	r0, #1
 8008584:	4240      	negs	r0, r0
 8008586:	e72a      	b.n	80083de <_svfiprintf_r+0x2e>
 8008588:	ab07      	add	r3, sp, #28
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	003a      	movs	r2, r7
 800858e:	0021      	movs	r1, r4
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <_svfiprintf_r+0x1fc>)
 8008592:	9803      	ldr	r0, [sp, #12]
 8008594:	f000 f87c 	bl	8008690 <_printf_i>
 8008598:	e7ea      	b.n	8008570 <_svfiprintf_r+0x1c0>
 800859a:	46c0      	nop			; (mov r8, r8)
 800859c:	08008c68 	.word	0x08008c68
 80085a0:	08008c6e 	.word	0x08008c6e
 80085a4:	08008c72 	.word	0x08008c72
 80085a8:	00000000 	.word	0x00000000
 80085ac:	080082ed 	.word	0x080082ed

080085b0 <_printf_common>:
 80085b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085b2:	0015      	movs	r5, r2
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	688a      	ldr	r2, [r1, #8]
 80085b8:	690b      	ldr	r3, [r1, #16]
 80085ba:	000c      	movs	r4, r1
 80085bc:	9000      	str	r0, [sp, #0]
 80085be:	4293      	cmp	r3, r2
 80085c0:	da00      	bge.n	80085c4 <_printf_common+0x14>
 80085c2:	0013      	movs	r3, r2
 80085c4:	0022      	movs	r2, r4
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	3243      	adds	r2, #67	; 0x43
 80085ca:	7812      	ldrb	r2, [r2, #0]
 80085cc:	2a00      	cmp	r2, #0
 80085ce:	d001      	beq.n	80085d4 <_printf_common+0x24>
 80085d0:	3301      	adds	r3, #1
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	069b      	lsls	r3, r3, #26
 80085d8:	d502      	bpl.n	80085e0 <_printf_common+0x30>
 80085da:	682b      	ldr	r3, [r5, #0]
 80085dc:	3302      	adds	r3, #2
 80085de:	602b      	str	r3, [r5, #0]
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	2306      	movs	r3, #6
 80085e4:	0017      	movs	r7, r2
 80085e6:	401f      	ands	r7, r3
 80085e8:	421a      	tst	r2, r3
 80085ea:	d027      	beq.n	800863c <_printf_common+0x8c>
 80085ec:	0023      	movs	r3, r4
 80085ee:	3343      	adds	r3, #67	; 0x43
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	1e5a      	subs	r2, r3, #1
 80085f4:	4193      	sbcs	r3, r2
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	0692      	lsls	r2, r2, #26
 80085fa:	d430      	bmi.n	800865e <_printf_common+0xae>
 80085fc:	0022      	movs	r2, r4
 80085fe:	9901      	ldr	r1, [sp, #4]
 8008600:	9800      	ldr	r0, [sp, #0]
 8008602:	9e08      	ldr	r6, [sp, #32]
 8008604:	3243      	adds	r2, #67	; 0x43
 8008606:	47b0      	blx	r6
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d025      	beq.n	8008658 <_printf_common+0xa8>
 800860c:	2306      	movs	r3, #6
 800860e:	6820      	ldr	r0, [r4, #0]
 8008610:	682a      	ldr	r2, [r5, #0]
 8008612:	68e1      	ldr	r1, [r4, #12]
 8008614:	2500      	movs	r5, #0
 8008616:	4003      	ands	r3, r0
 8008618:	2b04      	cmp	r3, #4
 800861a:	d103      	bne.n	8008624 <_printf_common+0x74>
 800861c:	1a8d      	subs	r5, r1, r2
 800861e:	43eb      	mvns	r3, r5
 8008620:	17db      	asrs	r3, r3, #31
 8008622:	401d      	ands	r5, r3
 8008624:	68a3      	ldr	r3, [r4, #8]
 8008626:	6922      	ldr	r2, [r4, #16]
 8008628:	4293      	cmp	r3, r2
 800862a:	dd01      	ble.n	8008630 <_printf_common+0x80>
 800862c:	1a9b      	subs	r3, r3, r2
 800862e:	18ed      	adds	r5, r5, r3
 8008630:	2700      	movs	r7, #0
 8008632:	42bd      	cmp	r5, r7
 8008634:	d120      	bne.n	8008678 <_printf_common+0xc8>
 8008636:	2000      	movs	r0, #0
 8008638:	e010      	b.n	800865c <_printf_common+0xac>
 800863a:	3701      	adds	r7, #1
 800863c:	68e3      	ldr	r3, [r4, #12]
 800863e:	682a      	ldr	r2, [r5, #0]
 8008640:	1a9b      	subs	r3, r3, r2
 8008642:	42bb      	cmp	r3, r7
 8008644:	ddd2      	ble.n	80085ec <_printf_common+0x3c>
 8008646:	0022      	movs	r2, r4
 8008648:	2301      	movs	r3, #1
 800864a:	9901      	ldr	r1, [sp, #4]
 800864c:	9800      	ldr	r0, [sp, #0]
 800864e:	9e08      	ldr	r6, [sp, #32]
 8008650:	3219      	adds	r2, #25
 8008652:	47b0      	blx	r6
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d1f0      	bne.n	800863a <_printf_common+0x8a>
 8008658:	2001      	movs	r0, #1
 800865a:	4240      	negs	r0, r0
 800865c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800865e:	2030      	movs	r0, #48	; 0x30
 8008660:	18e1      	adds	r1, r4, r3
 8008662:	3143      	adds	r1, #67	; 0x43
 8008664:	7008      	strb	r0, [r1, #0]
 8008666:	0021      	movs	r1, r4
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	3145      	adds	r1, #69	; 0x45
 800866c:	7809      	ldrb	r1, [r1, #0]
 800866e:	18a2      	adds	r2, r4, r2
 8008670:	3243      	adds	r2, #67	; 0x43
 8008672:	3302      	adds	r3, #2
 8008674:	7011      	strb	r1, [r2, #0]
 8008676:	e7c1      	b.n	80085fc <_printf_common+0x4c>
 8008678:	0022      	movs	r2, r4
 800867a:	2301      	movs	r3, #1
 800867c:	9901      	ldr	r1, [sp, #4]
 800867e:	9800      	ldr	r0, [sp, #0]
 8008680:	9e08      	ldr	r6, [sp, #32]
 8008682:	321a      	adds	r2, #26
 8008684:	47b0      	blx	r6
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d0e6      	beq.n	8008658 <_printf_common+0xa8>
 800868a:	3701      	adds	r7, #1
 800868c:	e7d1      	b.n	8008632 <_printf_common+0x82>
	...

08008690 <_printf_i>:
 8008690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008692:	b08b      	sub	sp, #44	; 0x2c
 8008694:	9206      	str	r2, [sp, #24]
 8008696:	000a      	movs	r2, r1
 8008698:	3243      	adds	r2, #67	; 0x43
 800869a:	9307      	str	r3, [sp, #28]
 800869c:	9005      	str	r0, [sp, #20]
 800869e:	9204      	str	r2, [sp, #16]
 80086a0:	7e0a      	ldrb	r2, [r1, #24]
 80086a2:	000c      	movs	r4, r1
 80086a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086a6:	2a78      	cmp	r2, #120	; 0x78
 80086a8:	d806      	bhi.n	80086b8 <_printf_i+0x28>
 80086aa:	2a62      	cmp	r2, #98	; 0x62
 80086ac:	d808      	bhi.n	80086c0 <_printf_i+0x30>
 80086ae:	2a00      	cmp	r2, #0
 80086b0:	d100      	bne.n	80086b4 <_printf_i+0x24>
 80086b2:	e0c0      	b.n	8008836 <_printf_i+0x1a6>
 80086b4:	2a58      	cmp	r2, #88	; 0x58
 80086b6:	d052      	beq.n	800875e <_printf_i+0xce>
 80086b8:	0026      	movs	r6, r4
 80086ba:	3642      	adds	r6, #66	; 0x42
 80086bc:	7032      	strb	r2, [r6, #0]
 80086be:	e022      	b.n	8008706 <_printf_i+0x76>
 80086c0:	0010      	movs	r0, r2
 80086c2:	3863      	subs	r0, #99	; 0x63
 80086c4:	2815      	cmp	r0, #21
 80086c6:	d8f7      	bhi.n	80086b8 <_printf_i+0x28>
 80086c8:	f7f7 fd26 	bl	8000118 <__gnu_thumb1_case_shi>
 80086cc:	001f0016 	.word	0x001f0016
 80086d0:	fff6fff6 	.word	0xfff6fff6
 80086d4:	fff6fff6 	.word	0xfff6fff6
 80086d8:	fff6001f 	.word	0xfff6001f
 80086dc:	fff6fff6 	.word	0xfff6fff6
 80086e0:	00a8fff6 	.word	0x00a8fff6
 80086e4:	009a0036 	.word	0x009a0036
 80086e8:	fff6fff6 	.word	0xfff6fff6
 80086ec:	fff600b9 	.word	0xfff600b9
 80086f0:	fff60036 	.word	0xfff60036
 80086f4:	009efff6 	.word	0x009efff6
 80086f8:	0026      	movs	r6, r4
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	3642      	adds	r6, #66	; 0x42
 80086fe:	1d11      	adds	r1, r2, #4
 8008700:	6019      	str	r1, [r3, #0]
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	7033      	strb	r3, [r6, #0]
 8008706:	2301      	movs	r3, #1
 8008708:	e0a7      	b.n	800885a <_printf_i+0x1ca>
 800870a:	6808      	ldr	r0, [r1, #0]
 800870c:	6819      	ldr	r1, [r3, #0]
 800870e:	1d0a      	adds	r2, r1, #4
 8008710:	0605      	lsls	r5, r0, #24
 8008712:	d50b      	bpl.n	800872c <_printf_i+0x9c>
 8008714:	680d      	ldr	r5, [r1, #0]
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	2d00      	cmp	r5, #0
 800871a:	da03      	bge.n	8008724 <_printf_i+0x94>
 800871c:	232d      	movs	r3, #45	; 0x2d
 800871e:	9a04      	ldr	r2, [sp, #16]
 8008720:	426d      	negs	r5, r5
 8008722:	7013      	strb	r3, [r2, #0]
 8008724:	4b61      	ldr	r3, [pc, #388]	; (80088ac <_printf_i+0x21c>)
 8008726:	270a      	movs	r7, #10
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	e032      	b.n	8008792 <_printf_i+0x102>
 800872c:	680d      	ldr	r5, [r1, #0]
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	0641      	lsls	r1, r0, #25
 8008732:	d5f1      	bpl.n	8008718 <_printf_i+0x88>
 8008734:	b22d      	sxth	r5, r5
 8008736:	e7ef      	b.n	8008718 <_printf_i+0x88>
 8008738:	680d      	ldr	r5, [r1, #0]
 800873a:	6819      	ldr	r1, [r3, #0]
 800873c:	1d08      	adds	r0, r1, #4
 800873e:	6018      	str	r0, [r3, #0]
 8008740:	062e      	lsls	r6, r5, #24
 8008742:	d501      	bpl.n	8008748 <_printf_i+0xb8>
 8008744:	680d      	ldr	r5, [r1, #0]
 8008746:	e003      	b.n	8008750 <_printf_i+0xc0>
 8008748:	066d      	lsls	r5, r5, #25
 800874a:	d5fb      	bpl.n	8008744 <_printf_i+0xb4>
 800874c:	680d      	ldr	r5, [r1, #0]
 800874e:	b2ad      	uxth	r5, r5
 8008750:	4b56      	ldr	r3, [pc, #344]	; (80088ac <_printf_i+0x21c>)
 8008752:	270a      	movs	r7, #10
 8008754:	9303      	str	r3, [sp, #12]
 8008756:	2a6f      	cmp	r2, #111	; 0x6f
 8008758:	d117      	bne.n	800878a <_printf_i+0xfa>
 800875a:	2708      	movs	r7, #8
 800875c:	e015      	b.n	800878a <_printf_i+0xfa>
 800875e:	3145      	adds	r1, #69	; 0x45
 8008760:	700a      	strb	r2, [r1, #0]
 8008762:	4a52      	ldr	r2, [pc, #328]	; (80088ac <_printf_i+0x21c>)
 8008764:	9203      	str	r2, [sp, #12]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	6821      	ldr	r1, [r4, #0]
 800876a:	ca20      	ldmia	r2!, {r5}
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	0608      	lsls	r0, r1, #24
 8008770:	d550      	bpl.n	8008814 <_printf_i+0x184>
 8008772:	07cb      	lsls	r3, r1, #31
 8008774:	d502      	bpl.n	800877c <_printf_i+0xec>
 8008776:	2320      	movs	r3, #32
 8008778:	4319      	orrs	r1, r3
 800877a:	6021      	str	r1, [r4, #0]
 800877c:	2710      	movs	r7, #16
 800877e:	2d00      	cmp	r5, #0
 8008780:	d103      	bne.n	800878a <_printf_i+0xfa>
 8008782:	2320      	movs	r3, #32
 8008784:	6822      	ldr	r2, [r4, #0]
 8008786:	439a      	bics	r2, r3
 8008788:	6022      	str	r2, [r4, #0]
 800878a:	0023      	movs	r3, r4
 800878c:	2200      	movs	r2, #0
 800878e:	3343      	adds	r3, #67	; 0x43
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	6863      	ldr	r3, [r4, #4]
 8008794:	60a3      	str	r3, [r4, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	db03      	blt.n	80087a2 <_printf_i+0x112>
 800879a:	2204      	movs	r2, #4
 800879c:	6821      	ldr	r1, [r4, #0]
 800879e:	4391      	bics	r1, r2
 80087a0:	6021      	str	r1, [r4, #0]
 80087a2:	2d00      	cmp	r5, #0
 80087a4:	d102      	bne.n	80087ac <_printf_i+0x11c>
 80087a6:	9e04      	ldr	r6, [sp, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00c      	beq.n	80087c6 <_printf_i+0x136>
 80087ac:	9e04      	ldr	r6, [sp, #16]
 80087ae:	0028      	movs	r0, r5
 80087b0:	0039      	movs	r1, r7
 80087b2:	f7f7 fd41 	bl	8000238 <__aeabi_uidivmod>
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	3e01      	subs	r6, #1
 80087ba:	5c5b      	ldrb	r3, [r3, r1]
 80087bc:	7033      	strb	r3, [r6, #0]
 80087be:	002b      	movs	r3, r5
 80087c0:	0005      	movs	r5, r0
 80087c2:	429f      	cmp	r7, r3
 80087c4:	d9f3      	bls.n	80087ae <_printf_i+0x11e>
 80087c6:	2f08      	cmp	r7, #8
 80087c8:	d109      	bne.n	80087de <_printf_i+0x14e>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	07db      	lsls	r3, r3, #31
 80087ce:	d506      	bpl.n	80087de <_printf_i+0x14e>
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	6922      	ldr	r2, [r4, #16]
 80087d4:	4293      	cmp	r3, r2
 80087d6:	dc02      	bgt.n	80087de <_printf_i+0x14e>
 80087d8:	2330      	movs	r3, #48	; 0x30
 80087da:	3e01      	subs	r6, #1
 80087dc:	7033      	strb	r3, [r6, #0]
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	1b9b      	subs	r3, r3, r6
 80087e2:	6123      	str	r3, [r4, #16]
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	0021      	movs	r1, r4
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	9805      	ldr	r0, [sp, #20]
 80087ec:	9b06      	ldr	r3, [sp, #24]
 80087ee:	aa09      	add	r2, sp, #36	; 0x24
 80087f0:	f7ff fede 	bl	80085b0 <_printf_common>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d135      	bne.n	8008864 <_printf_i+0x1d4>
 80087f8:	2001      	movs	r0, #1
 80087fa:	4240      	negs	r0, r0
 80087fc:	b00b      	add	sp, #44	; 0x2c
 80087fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008800:	2220      	movs	r2, #32
 8008802:	6809      	ldr	r1, [r1, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	6022      	str	r2, [r4, #0]
 8008808:	0022      	movs	r2, r4
 800880a:	2178      	movs	r1, #120	; 0x78
 800880c:	3245      	adds	r2, #69	; 0x45
 800880e:	7011      	strb	r1, [r2, #0]
 8008810:	4a27      	ldr	r2, [pc, #156]	; (80088b0 <_printf_i+0x220>)
 8008812:	e7a7      	b.n	8008764 <_printf_i+0xd4>
 8008814:	0648      	lsls	r0, r1, #25
 8008816:	d5ac      	bpl.n	8008772 <_printf_i+0xe2>
 8008818:	b2ad      	uxth	r5, r5
 800881a:	e7aa      	b.n	8008772 <_printf_i+0xe2>
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	680d      	ldr	r5, [r1, #0]
 8008820:	1d10      	adds	r0, r2, #4
 8008822:	6949      	ldr	r1, [r1, #20]
 8008824:	6018      	str	r0, [r3, #0]
 8008826:	6813      	ldr	r3, [r2, #0]
 8008828:	062e      	lsls	r6, r5, #24
 800882a:	d501      	bpl.n	8008830 <_printf_i+0x1a0>
 800882c:	6019      	str	r1, [r3, #0]
 800882e:	e002      	b.n	8008836 <_printf_i+0x1a6>
 8008830:	066d      	lsls	r5, r5, #25
 8008832:	d5fb      	bpl.n	800882c <_printf_i+0x19c>
 8008834:	8019      	strh	r1, [r3, #0]
 8008836:	2300      	movs	r3, #0
 8008838:	9e04      	ldr	r6, [sp, #16]
 800883a:	6123      	str	r3, [r4, #16]
 800883c:	e7d2      	b.n	80087e4 <_printf_i+0x154>
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	1d11      	adds	r1, r2, #4
 8008842:	6019      	str	r1, [r3, #0]
 8008844:	6816      	ldr	r6, [r2, #0]
 8008846:	2100      	movs	r1, #0
 8008848:	0030      	movs	r0, r6
 800884a:	6862      	ldr	r2, [r4, #4]
 800884c:	f000 f834 	bl	80088b8 <memchr>
 8008850:	2800      	cmp	r0, #0
 8008852:	d001      	beq.n	8008858 <_printf_i+0x1c8>
 8008854:	1b80      	subs	r0, r0, r6
 8008856:	6060      	str	r0, [r4, #4]
 8008858:	6863      	ldr	r3, [r4, #4]
 800885a:	6123      	str	r3, [r4, #16]
 800885c:	2300      	movs	r3, #0
 800885e:	9a04      	ldr	r2, [sp, #16]
 8008860:	7013      	strb	r3, [r2, #0]
 8008862:	e7bf      	b.n	80087e4 <_printf_i+0x154>
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	0032      	movs	r2, r6
 8008868:	9906      	ldr	r1, [sp, #24]
 800886a:	9805      	ldr	r0, [sp, #20]
 800886c:	9d07      	ldr	r5, [sp, #28]
 800886e:	47a8      	blx	r5
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d0c1      	beq.n	80087f8 <_printf_i+0x168>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	079b      	lsls	r3, r3, #30
 8008878:	d415      	bmi.n	80088a6 <_printf_i+0x216>
 800887a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887c:	68e0      	ldr	r0, [r4, #12]
 800887e:	4298      	cmp	r0, r3
 8008880:	dabc      	bge.n	80087fc <_printf_i+0x16c>
 8008882:	0018      	movs	r0, r3
 8008884:	e7ba      	b.n	80087fc <_printf_i+0x16c>
 8008886:	0022      	movs	r2, r4
 8008888:	2301      	movs	r3, #1
 800888a:	9906      	ldr	r1, [sp, #24]
 800888c:	9805      	ldr	r0, [sp, #20]
 800888e:	9e07      	ldr	r6, [sp, #28]
 8008890:	3219      	adds	r2, #25
 8008892:	47b0      	blx	r6
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d0af      	beq.n	80087f8 <_printf_i+0x168>
 8008898:	3501      	adds	r5, #1
 800889a:	68e3      	ldr	r3, [r4, #12]
 800889c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	42ab      	cmp	r3, r5
 80088a2:	dcf0      	bgt.n	8008886 <_printf_i+0x1f6>
 80088a4:	e7e9      	b.n	800887a <_printf_i+0x1ea>
 80088a6:	2500      	movs	r5, #0
 80088a8:	e7f7      	b.n	800889a <_printf_i+0x20a>
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	08008c79 	.word	0x08008c79
 80088b0:	08008c8a 	.word	0x08008c8a

080088b4 <__retarget_lock_acquire_recursive>:
 80088b4:	4770      	bx	lr

080088b6 <__retarget_lock_release_recursive>:
 80088b6:	4770      	bx	lr

080088b8 <memchr>:
 80088b8:	b2c9      	uxtb	r1, r1
 80088ba:	1882      	adds	r2, r0, r2
 80088bc:	4290      	cmp	r0, r2
 80088be:	d101      	bne.n	80088c4 <memchr+0xc>
 80088c0:	2000      	movs	r0, #0
 80088c2:	4770      	bx	lr
 80088c4:	7803      	ldrb	r3, [r0, #0]
 80088c6:	428b      	cmp	r3, r1
 80088c8:	d0fb      	beq.n	80088c2 <memchr+0xa>
 80088ca:	3001      	adds	r0, #1
 80088cc:	e7f6      	b.n	80088bc <memchr+0x4>

080088ce <memmove>:
 80088ce:	b510      	push	{r4, lr}
 80088d0:	4288      	cmp	r0, r1
 80088d2:	d902      	bls.n	80088da <memmove+0xc>
 80088d4:	188b      	adds	r3, r1, r2
 80088d6:	4298      	cmp	r0, r3
 80088d8:	d303      	bcc.n	80088e2 <memmove+0x14>
 80088da:	2300      	movs	r3, #0
 80088dc:	e007      	b.n	80088ee <memmove+0x20>
 80088de:	5c8b      	ldrb	r3, [r1, r2]
 80088e0:	5483      	strb	r3, [r0, r2]
 80088e2:	3a01      	subs	r2, #1
 80088e4:	d2fb      	bcs.n	80088de <memmove+0x10>
 80088e6:	bd10      	pop	{r4, pc}
 80088e8:	5ccc      	ldrb	r4, [r1, r3]
 80088ea:	54c4      	strb	r4, [r0, r3]
 80088ec:	3301      	adds	r3, #1
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d1fa      	bne.n	80088e8 <memmove+0x1a>
 80088f2:	e7f8      	b.n	80088e6 <memmove+0x18>

080088f4 <_realloc_r>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	0007      	movs	r7, r0
 80088f8:	000d      	movs	r5, r1
 80088fa:	0016      	movs	r6, r2
 80088fc:	2900      	cmp	r1, #0
 80088fe:	d105      	bne.n	800890c <_realloc_r+0x18>
 8008900:	0011      	movs	r1, r2
 8008902:	f7ff fc35 	bl	8008170 <_malloc_r>
 8008906:	0004      	movs	r4, r0
 8008908:	0020      	movs	r0, r4
 800890a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890c:	2a00      	cmp	r2, #0
 800890e:	d103      	bne.n	8008918 <_realloc_r+0x24>
 8008910:	f7ff fbe4 	bl	80080dc <_free_r>
 8008914:	0034      	movs	r4, r6
 8008916:	e7f7      	b.n	8008908 <_realloc_r+0x14>
 8008918:	f000 f812 	bl	8008940 <_malloc_usable_size_r>
 800891c:	002c      	movs	r4, r5
 800891e:	42b0      	cmp	r0, r6
 8008920:	d2f2      	bcs.n	8008908 <_realloc_r+0x14>
 8008922:	0031      	movs	r1, r6
 8008924:	0038      	movs	r0, r7
 8008926:	f7ff fc23 	bl	8008170 <_malloc_r>
 800892a:	1e04      	subs	r4, r0, #0
 800892c:	d0ec      	beq.n	8008908 <_realloc_r+0x14>
 800892e:	0029      	movs	r1, r5
 8008930:	0032      	movs	r2, r6
 8008932:	f7ff fbb3 	bl	800809c <memcpy>
 8008936:	0029      	movs	r1, r5
 8008938:	0038      	movs	r0, r7
 800893a:	f7ff fbcf 	bl	80080dc <_free_r>
 800893e:	e7e3      	b.n	8008908 <_realloc_r+0x14>

08008940 <_malloc_usable_size_r>:
 8008940:	1f0b      	subs	r3, r1, #4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	1f18      	subs	r0, r3, #4
 8008946:	2b00      	cmp	r3, #0
 8008948:	da01      	bge.n	800894e <_malloc_usable_size_r+0xe>
 800894a:	580b      	ldr	r3, [r1, r0]
 800894c:	18c0      	adds	r0, r0, r3
 800894e:	4770      	bx	lr

08008950 <_init>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr

0800895c <_fini>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	46c0      	nop			; (mov r8, r8)
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr
