
FreeRTOS_Weerstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005258  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005318  08005318  00015318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005570  08005570  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005570  08005570  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005570  08005570  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba8  20000070  080055e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000100  20001c18  080055e8  00021c18  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019518  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003174  00000000  00000000  000395b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  0003d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036ce  00000000  00000000  0003eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015005  00000000  00000000  0004224e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006efd3  00000000  00000000  00057253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c6226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  000c627c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005300 	.word	0x08005300

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005300 	.word	0x08005300

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <debugPrintln>:
void debugPrint(UART_HandleTypeDef *huart, char _out[]){
HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
}

//Send message to PC with enter
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	0018      	movs	r0, r3
 800023e:	f7ff ff63 	bl	8000108 <strlen>
 8000242:	0003      	movs	r3, r0
 8000244:	b29a      	uxth	r2, r3
 8000246:	6839      	ldr	r1, [r7, #0]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	230a      	movs	r3, #10
 800024c:	f001 ff82 	bl	8002154 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8000250:	210c      	movs	r1, #12
 8000252:	187b      	adds	r3, r7, r1
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <debugPrintln+0x3c>)
 8000256:	801a      	strh	r2, [r3, #0]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000258:	1879      	adds	r1, r7, r1
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	230a      	movs	r3, #10
 800025e:	2202      	movs	r2, #2
 8000260:	f001 ff78 	bl	8002154 <HAL_UART_Transmit>
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}
 800026c:	00000a0d 	.word	0x00000a0d

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fcea 	bl	8000c4c <HAL_Init>

  /* USER CODE BEGIN Init */
  //Reset sensor data.
  //memory allocation
  intTemp = (int*)calloc(10, sizeof(int));
 8000278:	2104      	movs	r1, #4
 800027a:	200a      	movs	r0, #10
 800027c:	f004 fe36 	bl	8004eec <calloc>
 8000280:	0003      	movs	r3, r0
 8000282:	001a      	movs	r2, r3
 8000284:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <main+0x88>)
 8000286:	601a      	str	r2, [r3, #0]
  intHum = (int*)calloc(10, sizeof(int));
 8000288:	2104      	movs	r1, #4
 800028a:	200a      	movs	r0, #10
 800028c:	f004 fe2e 	bl	8004eec <calloc>
 8000290:	0003      	movs	r3, r0
 8000292:	001a      	movs	r2, r3
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <main+0x8c>)
 8000296:	601a      	str	r2, [r3, #0]
  intPress = (int*)calloc(10, sizeof(int));
 8000298:	2104      	movs	r1, #4
 800029a:	200a      	movs	r0, #10
 800029c:	f004 fe26 	bl	8004eec <calloc>
 80002a0:	0003      	movs	r3, r0
 80002a2:	001a      	movs	r2, r3
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <main+0x90>)
 80002a6:	601a      	str	r2, [r3, #0]
  senDT = calloc(10, sizeof(*senDT));
 80002a8:	2110      	movs	r1, #16
 80002aa:	200a      	movs	r0, #10
 80002ac:	f004 fe1e 	bl	8004eec <calloc>
 80002b0:	0003      	movs	r3, r0
 80002b2:	001a      	movs	r2, r3
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <main+0x94>)
 80002b6:	601a      	str	r2, [r3, #0]
  intError = 4;
 80002b8:	4b13      	ldr	r3, [pc, #76]	; (8000308 <main+0x98>)
 80002ba:	2204      	movs	r2, #4
 80002bc:	601a      	str	r2, [r3, #0]
   *  1 = ESP-ERROR
   *
   */


  HAL_UART_Transmit(&huart1, (uint8_t *) "ATE0\r\n", strlen("ATE0\r\n"), 100); //Disable ESP echo
 80002be:	4913      	ldr	r1, [pc, #76]	; (800030c <main+0x9c>)
 80002c0:	4813      	ldr	r0, [pc, #76]	; (8000310 <main+0xa0>)
 80002c2:	2364      	movs	r3, #100	; 0x64
 80002c4:	2206      	movs	r2, #6
 80002c6:	f001 ff45 	bl	8002154 <HAL_UART_Transmit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f829 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f8e9 	bl	80004a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002d2:	f000 f8b7 	bl	8000444 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80002d6:	f000 f885 	bl	80003e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002da:	f002 fbc1 	bl	8002a60 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of dataESP */
  dataESPHandle = osThreadNew(sendDataESP, NULL, &dataESP_attributes);
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <main+0xa4>)
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <main+0xa8>)
 80002e2:	2100      	movs	r1, #0
 80002e4:	0018      	movs	r0, r3
 80002e6:	f002 fc15 	bl	8002b14 <osThreadNew>
 80002ea:	0002      	movs	r2, r0
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <main+0xac>)
 80002ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002f0:	f002 fbe2 	bl	8002ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <main+0x84>
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	20001b78 	.word	0x20001b78
 80002fc:	20001aec 	.word	0x20001aec
 8000300:	20001a5c 	.word	0x20001a5c
 8000304:	20001af0 	.word	0x20001af0
 8000308:	20001ae8 	.word	0x20001ae8
 800030c:	08005320 	.word	0x08005320
 8000310:	20001a64 	.word	0x20001a64
 8000314:	08005484 	.word	0x08005484
 8000318:	08000579 	.word	0x08000579
 800031c:	20001a60 	.word	0x20001a60

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b095      	sub	sp, #84	; 0x54
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	2420      	movs	r4, #32
 8000328:	193b      	adds	r3, r7, r4
 800032a:	0018      	movs	r0, r3
 800032c:	2330      	movs	r3, #48	; 0x30
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f004 fe36 	bl	8004fa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000336:	2310      	movs	r3, #16
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2310      	movs	r3, #16
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f004 fe2e 	bl	8004fa2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000346:	003b      	movs	r3, r7
 8000348:	0018      	movs	r0, r3
 800034a:	2310      	movs	r3, #16
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f004 fe27 	bl	8004fa2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000354:	0021      	movs	r1, r4
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2202      	movs	r2, #2
 800035a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2201      	movs	r2, #1
 8000360:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2210      	movs	r2, #16
 8000366:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2202      	movs	r2, #2
 800036c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	22a0      	movs	r2, #160	; 0xa0
 8000378:	0392      	lsls	r2, r2, #14
 800037a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2200      	movs	r2, #0
 8000380:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	187b      	adds	r3, r7, r1
 8000384:	0018      	movs	r0, r3
 8000386:	f000 fecd 	bl	8001124 <HAL_RCC_OscConfig>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800038e:	f000 facf 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	2110      	movs	r1, #16
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2207      	movs	r2, #7
 8000398:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2202      	movs	r2, #2
 800039e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2200      	movs	r2, #0
 80003aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2101      	movs	r1, #1
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 f9d1 	bl	8001758 <HAL_RCC_ClockConfig>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003ba:	f000 fab9 	bl	8000930 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003be:	003b      	movs	r3, r7
 80003c0:	2201      	movs	r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003c4:	003b      	movs	r3, r7
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ca:	003b      	movs	r3, r7
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 fb3f 	bl	8001a50 <HAL_RCCEx_PeriphCLKConfig>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003d6:	f000 faab 	bl	8000930 <Error_Handler>
  }
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b015      	add	sp, #84	; 0x54
 80003e0:	bd90      	pop	{r4, r7, pc}
	...

080003e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_USART1_UART_Init+0x58>)
 80003ea:	4a15      	ldr	r2, [pc, #84]	; (8000440 <MX_USART1_UART_Init+0x5c>)
 80003ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_USART1_UART_Init+0x58>)
 80003f0:	22e1      	movs	r2, #225	; 0xe1
 80003f2:	0252      	lsls	r2, r2, #9
 80003f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_USART1_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_USART1_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_USART1_UART_Init+0x58>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fe3f 	bl	80020ac <HAL_UART_Init>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000432:	f000 fa7d 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20001a64 	.word	0x20001a64
 8000440:	40013800 	.word	0x40013800

08000444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_USART2_UART_Init+0x58>)
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <MX_USART2_UART_Init+0x5c>)
 800044c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000450:	22e1      	movs	r2, #225	; 0xe1
 8000452:	0252      	lsls	r2, r2, #9
 8000454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_USART2_UART_Init+0x58>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fe0f 	bl	80020ac <HAL_UART_Init>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000492:	f000 fa4d 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20001af4 	.word	0x20001af4
 80004a0:	40004400 	.word	0x40004400

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b089      	sub	sp, #36	; 0x24
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	240c      	movs	r4, #12
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2314      	movs	r3, #20
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f004 fd74 	bl	8004fa2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ba:	4b2d      	ldr	r3, [pc, #180]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0309      	lsls	r1, r1, #12
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b29      	ldr	r3, [pc, #164]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	031b      	lsls	r3, r3, #12
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4b26      	ldr	r3, [pc, #152]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b25      	ldr	r3, [pc, #148]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	03c9      	lsls	r1, r1, #15
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b22      	ldr	r3, [pc, #136]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	03db      	lsls	r3, r3, #15
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_GPIO_Init+0xcc>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0289      	lsls	r1, r1, #10
 80004fc:	430a      	orrs	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_GPIO_Init+0xcc>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	029b      	lsls	r3, r3, #10
 8000508:	4013      	ands	r3, r2
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800050e:	2390      	movs	r3, #144	; 0x90
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	2200      	movs	r2, #0
 8000514:	2120      	movs	r1, #32
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fde6 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	0192      	lsls	r2, r2, #6
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2284      	movs	r2, #132	; 0x84
 8000528:	0392      	lsls	r2, r2, #14
 800052a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000532:	193b      	adds	r3, r7, r4
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <MX_GPIO_Init+0xd0>)
 8000536:	0019      	movs	r1, r3
 8000538:	0010      	movs	r0, r2
 800053a:	f000 fc65 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2220      	movs	r2, #32
 8000544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000558:	187a      	adds	r2, r7, r1
 800055a:	2390      	movs	r3, #144	; 0x90
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fc51 	bl	8000e08 <HAL_GPIO_Init>

}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b009      	add	sp, #36	; 0x24
 800056c:	bd90      	pop	{r4, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40021000 	.word	0x40021000
 8000574:	48000800 	.word	0x48000800

08000578 <sendDataESP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendDataESP */
void sendDataESP(void *argument)
{
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057a:	b0cf      	sub	sp, #316	; 0x13c
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//Local var. declaration.
	char rxData[10]; //Containt data send from the ESP over UART1
	char dtDEBUG[] = "Date & Time: ";
 8000580:	238c      	movs	r3, #140	; 0x8c
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	18fb      	adds	r3, r7, r3
 8000586:	4ac8      	ldr	r2, [pc, #800]	; (80008a8 <sendDataESP+0x330>)
 8000588:	ca13      	ldmia	r2!, {r0, r1, r4}
 800058a:	c313      	stmia	r3!, {r0, r1, r4}
 800058c:	8812      	ldrh	r2, [r2, #0]
 800058e:	801a      	strh	r2, [r3, #0]
	char tempDEBUG[] = "Temp in C: ";
 8000590:	2386      	movs	r3, #134	; 0x86
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	4ac5      	ldr	r2, [pc, #788]	; (80008ac <sendDataESP+0x334>)
 8000598:	ca13      	ldmia	r2!, {r0, r1, r4}
 800059a:	c313      	stmia	r3!, {r0, r1, r4}
	char humDEBUG[] = "Hum in %: ";
 800059c:	1c7b      	adds	r3, r7, #1
 800059e:	33ff      	adds	r3, #255	; 0xff
 80005a0:	4ac3      	ldr	r2, [pc, #780]	; (80008b0 <sendDataESP+0x338>)
 80005a2:	ca03      	ldmia	r2!, {r0, r1}
 80005a4:	c303      	stmia	r3!, {r0, r1}
 80005a6:	8811      	ldrh	r1, [r2, #0]
 80005a8:	8019      	strh	r1, [r3, #0]
 80005aa:	7892      	ldrb	r2, [r2, #2]
 80005ac:	709a      	strb	r2, [r3, #2]
	char pressDEBUG[] = "Press in Pa: ";
 80005ae:	23f0      	movs	r3, #240	; 0xf0
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	4ac0      	ldr	r2, [pc, #768]	; (80008b4 <sendDataESP+0x33c>)
 80005b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005b6:	c313      	stmia	r3!, {r0, r1, r4}
 80005b8:	8812      	ldrh	r2, [r2, #0]
 80005ba:	801a      	strh	r2, [r3, #0]
	char errorDEBUG[] = "Error: ";
 80005bc:	23e8      	movs	r3, #232	; 0xe8
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	4abd      	ldr	r2, [pc, #756]	; (80008b8 <sendDataESP+0x340>)
 80005c2:	ca03      	ldmia	r2!, {r0, r1}
 80005c4:	c303      	stmia	r3!, {r0, r1}
	char url[] = "GET http://server03.hammer-tech.eu/weerstationProject/connect.php?"; //Create connection with a PHP-page
 80005c6:	23a4      	movs	r3, #164	; 0xa4
 80005c8:	18fa      	adds	r2, r7, r3
 80005ca:	4bbc      	ldr	r3, [pc, #752]	; (80008bc <sendDataESP+0x344>)
 80005cc:	0010      	movs	r0, r2
 80005ce:	0019      	movs	r1, r3
 80005d0:	2343      	movs	r3, #67	; 0x43
 80005d2:	001a      	movs	r2, r3
 80005d4:	f004 fcdc 	bl	8004f90 <memcpy>
	char temp[] = "&intTemp=";
 80005d8:	2398      	movs	r3, #152	; 0x98
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	4ab8      	ldr	r2, [pc, #736]	; (80008c0 <sendDataESP+0x348>)
 80005de:	ca03      	ldmia	r2!, {r0, r1}
 80005e0:	c303      	stmia	r3!, {r0, r1}
 80005e2:	8812      	ldrh	r2, [r2, #0]
 80005e4:	801a      	strh	r2, [r3, #0]
	char hum[] = "&intHum=";
 80005e6:	238c      	movs	r3, #140	; 0x8c
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	4ab6      	ldr	r2, [pc, #728]	; (80008c4 <sendDataESP+0x34c>)
 80005ec:	ca03      	ldmia	r2!, {r0, r1}
 80005ee:	c303      	stmia	r3!, {r0, r1}
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	701a      	strb	r2, [r3, #0]
	char press[] = "&intPress=";
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	4ab3      	ldr	r2, [pc, #716]	; (80008c8 <sendDataESP+0x350>)
 80005fa:	ca03      	ldmia	r2!, {r0, r1}
 80005fc:	c303      	stmia	r3!, {r0, r1}
 80005fe:	8811      	ldrh	r1, [r2, #0]
 8000600:	8019      	strh	r1, [r3, #0]
 8000602:	7892      	ldrb	r2, [r2, #2]
 8000604:	709a      	strb	r2, [r3, #2]
	char datetime[] = "&dtDateTime=";
 8000606:	2370      	movs	r3, #112	; 0x70
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	4ab0      	ldr	r2, [pc, #704]	; (80008cc <sendDataESP+0x354>)
 800060c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800060e:	c313      	stmia	r3!, {r0, r1, r4}
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	701a      	strb	r2, [r3, #0]
	char error[] = "&intStationError=";
 8000614:	235c      	movs	r3, #92	; 0x5c
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	4aad      	ldr	r2, [pc, #692]	; (80008d0 <sendDataESP+0x358>)
 800061a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800061c:	c313      	stmia	r3!, {r0, r1, r4}
 800061e:	6811      	ldr	r1, [r2, #0]
 8000620:	6019      	str	r1, [r3, #0]
 8000622:	8892      	ldrh	r2, [r2, #4]
 8000624:	809a      	strh	r2, [r3, #4]
	char tempDAT[] = ""; //URL-part + data
 8000626:	2358      	movs	r3, #88	; 0x58
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	4aaa      	ldr	r2, [pc, #680]	; (80008d4 <sendDataESP+0x35c>)
 800062c:	7812      	ldrb	r2, [r2, #0]
 800062e:	701a      	strb	r2, [r3, #0]
	char humDAT[] = ""; //URL-part + data
 8000630:	2354      	movs	r3, #84	; 0x54
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	4aa7      	ldr	r2, [pc, #668]	; (80008d4 <sendDataESP+0x35c>)
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	701a      	strb	r2, [r3, #0]
	char pressDAT[] = ""; //URL-part + data
 800063a:	2350      	movs	r3, #80	; 0x50
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	4aa5      	ldr	r2, [pc, #660]	; (80008d4 <sendDataESP+0x35c>)
 8000640:	7812      	ldrb	r2, [r2, #0]
 8000642:	701a      	strb	r2, [r3, #0]
	char errorDAT[] = ""; //URL-part + data
 8000644:	234c      	movs	r3, #76	; 0x4c
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	4aa2      	ldr	r2, [pc, #648]	; (80008d4 <sendDataESP+0x35c>)
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	701a      	strb	r2, [r3, #0]
	char end[] = " HTTP/1.1\r\nHost: server03.hammer-tech.eu\r\n Connection: close\r\n\r\n"; //Close connection with PHP-page
 800064e:	4ba2      	ldr	r3, [pc, #648]	; (80008d8 <sendDataESP+0x360>)
 8000650:	229c      	movs	r2, #156	; 0x9c
 8000652:	0052      	lsls	r2, r2, #1
 8000654:	18ba      	adds	r2, r7, r2
 8000656:	18d2      	adds	r2, r2, r3
 8000658:	4ba0      	ldr	r3, [pc, #640]	; (80008dc <sendDataESP+0x364>)
 800065a:	0010      	movs	r0, r2
 800065c:	0019      	movs	r1, r3
 800065e:	2341      	movs	r3, #65	; 0x41
 8000660:	001a      	movs	r2, r3
 8000662:	f004 fc95 	bl	8004f90 <memcpy>
  for(;;)
  {
	  int i;
	  for(i = 0;i != sizeof(intTemp);i++){
 8000666:	2300      	movs	r3, #0
 8000668:	229a      	movs	r2, #154	; 0x9a
 800066a:	0052      	lsls	r2, r2, #1
 800066c:	18ba      	adds	r2, r7, r2
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	e10e      	b.n	8000890 <sendDataESP+0x318>
	  	//Convert INT to Char array
		itoa(intTemp[i],tempDAT,10);
 8000672:	4b9b      	ldr	r3, [pc, #620]	; (80008e0 <sendDataESP+0x368>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	249a      	movs	r4, #154	; 0x9a
 8000678:	0064      	lsls	r4, r4, #1
 800067a:	193b      	adds	r3, r7, r4
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	18d3      	adds	r3, r2, r3
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2558      	movs	r5, #88	; 0x58
 8000686:	1979      	adds	r1, r7, r5
 8000688:	220a      	movs	r2, #10
 800068a:	0018      	movs	r0, r3
 800068c:	f004 fc7a 	bl	8004f84 <itoa>
		itoa(intHum[i],humDAT,10);
 8000690:	4b94      	ldr	r3, [pc, #592]	; (80008e4 <sendDataESP+0x36c>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	193b      	adds	r3, r7, r4
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	18d3      	adds	r3, r2, r3
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2654      	movs	r6, #84	; 0x54
 80006a0:	19b9      	adds	r1, r7, r6
 80006a2:	220a      	movs	r2, #10
 80006a4:	0018      	movs	r0, r3
 80006a6:	f004 fc6d 	bl	8004f84 <itoa>
		itoa(intPress[i],pressDAT,10);
 80006aa:	4b8f      	ldr	r3, [pc, #572]	; (80008e8 <sendDataESP+0x370>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	18d3      	adds	r3, r2, r3
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2250      	movs	r2, #80	; 0x50
 80006ba:	18b9      	adds	r1, r7, r2
 80006bc:	220a      	movs	r2, #10
 80006be:	0018      	movs	r0, r3
 80006c0:	f004 fc60 	bl	8004f84 <itoa>
		itoa(intError,errorDAT,10);
 80006c4:	4b89      	ldr	r3, [pc, #548]	; (80008ec <sendDataESP+0x374>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	214c      	movs	r1, #76	; 0x4c
 80006ca:	1879      	adds	r1, r7, r1
 80006cc:	220a      	movs	r2, #10
 80006ce:	0018      	movs	r0, r3
 80006d0:	f004 fc58 	bl	8004f84 <itoa>

		//Combine array data with URL-part & print result for debugging
		strcat(datetime,senDT[i]);
 80006d4:	4b86      	ldr	r3, [pc, #536]	; (80008f0 <sendDataESP+0x378>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	18d2      	adds	r2, r2, r3
 80006e0:	2370      	movs	r3, #112	; 0x70
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f004 fd56 	bl	8005198 <strcat>
		strcat(tempDEBUG,tempDAT);
 80006ec:	197a      	adds	r2, r7, r5
 80006ee:	2086      	movs	r0, #134	; 0x86
 80006f0:	0040      	lsls	r0, r0, #1
 80006f2:	0004      	movs	r4, r0
 80006f4:	183b      	adds	r3, r7, r0
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f004 fd4d 	bl	8005198 <strcat>
		debugPrintln(&huart2, tempDEBUG);
 80006fe:	0020      	movs	r0, r4
 8000700:	183a      	adds	r2, r7, r0
 8000702:	4b7c      	ldr	r3, [pc, #496]	; (80008f4 <sendDataESP+0x37c>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff fd92 	bl	8000230 <debugPrintln>
		strcat(humDEBUG,humDAT);
 800070c:	19ba      	adds	r2, r7, r6
 800070e:	1c7b      	adds	r3, r7, #1
 8000710:	33ff      	adds	r3, #255	; 0xff
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f004 fd3f 	bl	8005198 <strcat>
		debugPrintln(&huart2, humDEBUG);
 800071a:	1c7a      	adds	r2, r7, #1
 800071c:	32ff      	adds	r2, #255	; 0xff
 800071e:	4b75      	ldr	r3, [pc, #468]	; (80008f4 <sendDataESP+0x37c>)
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff fd84 	bl	8000230 <debugPrintln>
		strcat(pressDEBUG,pressDAT);
 8000728:	2450      	movs	r4, #80	; 0x50
 800072a:	193a      	adds	r2, r7, r4
 800072c:	20f0      	movs	r0, #240	; 0xf0
 800072e:	183b      	adds	r3, r7, r0
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f004 fd30 	bl	8005198 <strcat>
		debugPrintln(&huart2, pressDEBUG);
 8000738:	20f0      	movs	r0, #240	; 0xf0
 800073a:	183a      	adds	r2, r7, r0
 800073c:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <sendDataESP+0x37c>)
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff fd75 	bl	8000230 <debugPrintln>
		strcat(dtDEBUG,NTPdateTime);
 8000746:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <sendDataESP+0x380>)
 8000748:	208c      	movs	r0, #140	; 0x8c
 800074a:	0040      	lsls	r0, r0, #1
 800074c:	183b      	adds	r3, r7, r0
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f004 fd21 	bl	8005198 <strcat>
		debugPrintln(&huart2, dtDEBUG);
 8000756:	208c      	movs	r0, #140	; 0x8c
 8000758:	0040      	lsls	r0, r0, #1
 800075a:	183a      	adds	r2, r7, r0
 800075c:	4b65      	ldr	r3, [pc, #404]	; (80008f4 <sendDataESP+0x37c>)
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fd65 	bl	8000230 <debugPrintln>
		strcat(errorDEBUG,errorDAT);
 8000766:	214c      	movs	r1, #76	; 0x4c
 8000768:	187a      	adds	r2, r7, r1
 800076a:	20e8      	movs	r0, #232	; 0xe8
 800076c:	183b      	adds	r3, r7, r0
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f004 fd11 	bl	8005198 <strcat>
		debugPrintln(&huart2, errorDEBUG);
 8000776:	20e8      	movs	r0, #232	; 0xe8
 8000778:	183a      	adds	r2, r7, r0
 800077a:	4b5e      	ldr	r3, [pc, #376]	; (80008f4 <sendDataESP+0x37c>)
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f7ff fd56 	bl	8000230 <debugPrintln>
		strcat(temp,tempDAT);
 8000784:	197a      	adds	r2, r7, r5
 8000786:	2598      	movs	r5, #152	; 0x98
 8000788:	197b      	adds	r3, r7, r5
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f004 fd03 	bl	8005198 <strcat>
		strcat(hum,humDAT);
 8000792:	19ba      	adds	r2, r7, r6
 8000794:	268c      	movs	r6, #140	; 0x8c
 8000796:	19bb      	adds	r3, r7, r6
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f004 fcfc 	bl	8005198 <strcat>
		strcat(press,pressDAT);
 80007a0:	193a      	adds	r2, r7, r4
 80007a2:	2080      	movs	r0, #128	; 0x80
 80007a4:	183b      	adds	r3, r7, r0
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f004 fcf5 	bl	8005198 <strcat>
		strcat(error,errorDAT);
 80007ae:	214c      	movs	r1, #76	; 0x4c
 80007b0:	187a      	adds	r2, r7, r1
 80007b2:	215c      	movs	r1, #92	; 0x5c
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f004 fced 	bl	8005198 <strcat>
		strcat(url,temp);
 80007be:	197a      	adds	r2, r7, r5
 80007c0:	24a4      	movs	r4, #164	; 0xa4
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f004 fce6 	bl	8005198 <strcat>
		strcat(url,hum);
 80007cc:	19ba      	adds	r2, r7, r6
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f004 fce0 	bl	8005198 <strcat>
		strcat(url,press);
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	183a      	adds	r2, r7, r0
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f004 fcd9 	bl	8005198 <strcat>
		strcat(url,datetime);
 80007e6:	2370      	movs	r3, #112	; 0x70
 80007e8:	18fa      	adds	r2, r7, r3
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f004 fcd2 	bl	8005198 <strcat>
		strcat(url,error);
 80007f4:	215c      	movs	r1, #92	; 0x5c
 80007f6:	187a      	adds	r2, r7, r1
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f004 fccb 	bl	8005198 <strcat>
		strcat(url,end);
 8000802:	2308      	movs	r3, #8
 8000804:	18fa      	adds	r2, r7, r3
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f004 fcc4 	bl	8005198 <strcat>


		debugPrintln(&huart2, url); //Print end result AT-command for debugging
 8000810:	193a      	adds	r2, r7, r4
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <sendDataESP+0x37c>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff fd0a 	bl	8000230 <debugPrintln>
		HAL_UART_Transmit(&huart1, (uint8_t *) url, strlen(url), 100); //Send AT-command
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff fc72 	bl	8000108 <strlen>
 8000824:	0003      	movs	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	1939      	adds	r1, r7, r4
 800082a:	4834      	ldr	r0, [pc, #208]	; (80008fc <sendDataESP+0x384>)
 800082c:	2364      	movs	r3, #100	; 0x64
 800082e:	f001 fc91 	bl	8002154 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t *)rxData, 8, 100); //Get response (like OK or ERROR)
 8000832:	2494      	movs	r4, #148	; 0x94
 8000834:	0064      	lsls	r4, r4, #1
 8000836:	1939      	adds	r1, r7, r4
 8000838:	4830      	ldr	r0, [pc, #192]	; (80008fc <sendDataESP+0x384>)
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2208      	movs	r2, #8
 800083e:	f001 fd33 	bl	80022a8 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)rxData, strlen(rxData) , 100); //Print response for debugging
 8000842:	193b      	adds	r3, r7, r4
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fc5f 	bl	8000108 <strlen>
 800084a:	0003      	movs	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	1939      	adds	r1, r7, r4
 8000850:	4828      	ldr	r0, [pc, #160]	; (80008f4 <sendDataESP+0x37c>)
 8000852:	2364      	movs	r3, #100	; 0x64
 8000854:	f001 fc7e 	bl	8002154 <HAL_UART_Transmit>
		//Check if there was an error
		if (strstr(rxData, "ERROR") != NULL) {
 8000858:	4a29      	ldr	r2, [pc, #164]	; (8000900 <sendDataESP+0x388>)
 800085a:	193b      	adds	r3, r7, r4
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f004 fca7 	bl	80051b2 <strstr>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d008      	beq.n	800087a <sendDataESP+0x302>
		    intError = 1; //change error code to '1' for ESP related error
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <sendDataESP+0x374>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
		    debugPrintln(&huart2, "ERROR1"); // Message for debugging
 800086e:	4a25      	ldr	r2, [pc, #148]	; (8000904 <sendDataESP+0x38c>)
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <sendDataESP+0x37c>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fcdb 	bl	8000230 <debugPrintln>
		}
	 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	 osDelay(60000); //Delay for sending #1min
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <sendDataESP+0x390>)
 800087c:	0018      	movs	r0, r3
 800087e:	f002 f9f1 	bl	8002c64 <osDelay>
	  for(i = 0;i != sizeof(intTemp);i++){
 8000882:	229a      	movs	r2, #154	; 0x9a
 8000884:	0052      	lsls	r2, r2, #1
 8000886:	18bb      	adds	r3, r7, r2
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	18ba      	adds	r2, r7, r2
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	229a      	movs	r2, #154	; 0x9a
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	18bb      	adds	r3, r7, r2
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d000      	beq.n	800089e <sendDataESP+0x326>
 800089c:	e6e9      	b.n	8000672 <sendDataESP+0xfa>
	  }
	  i = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	18ba      	adds	r2, r7, r2
 80008a2:	6013      	str	r3, [r2, #0]
  {
 80008a4:	e6df      	b.n	8000666 <sendDataESP+0xee>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	08005338 	.word	0x08005338
 80008ac:	08005348 	.word	0x08005348
 80008b0:	08005354 	.word	0x08005354
 80008b4:	08005360 	.word	0x08005360
 80008b8:	08005370 	.word	0x08005370
 80008bc:	08005378 	.word	0x08005378
 80008c0:	080053bc 	.word	0x080053bc
 80008c4:	080053c8 	.word	0x080053c8
 80008c8:	080053d4 	.word	0x080053d4
 80008cc:	080053e0 	.word	0x080053e0
 80008d0:	080053f0 	.word	0x080053f0
 80008d4:	08005404 	.word	0x08005404
 80008d8:	fffffed0 	.word	0xfffffed0
 80008dc:	08005408 	.word	0x08005408
 80008e0:	20001b78 	.word	0x20001b78
 80008e4:	20001aec 	.word	0x20001aec
 80008e8:	20001a5c 	.word	0x20001a5c
 80008ec:	20001ae8 	.word	0x20001ae8
 80008f0:	20001af0 	.word	0x20001af0
 80008f4:	20001af4 	.word	0x20001af4
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	20001a64 	.word	0x20001a64
 8000900:	08005328 	.word	0x08005328
 8000904:	08005330 	.word	0x08005330
 8000908:	0000ea60 	.word	0x0000ea60

0800090c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091e:	f000 f9a9 	bl	8000c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40014800 	.word	0x40014800

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_MspInit+0x50>)
 8000944:	699a      	ldr	r2, [r3, #24]
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_MspInit+0x50>)
 8000948:	2101      	movs	r1, #1
 800094a:	430a      	orrs	r2, r1
 800094c:	619a      	str	r2, [r3, #24]
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x50>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	2201      	movs	r2, #1
 8000954:	4013      	ands	r3, r2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x50>)
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_MspInit+0x50>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0549      	lsls	r1, r1, #21
 8000964:	430a      	orrs	r2, r1
 8000966:	61da      	str	r2, [r3, #28]
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_MspInit+0x50>)
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	055b      	lsls	r3, r3, #21
 8000970:	4013      	ands	r3, r2
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000976:	2302      	movs	r3, #2
 8000978:	425b      	negs	r3, r3
 800097a:	2200      	movs	r2, #0
 800097c:	2103      	movs	r1, #3
 800097e:	0018      	movs	r0, r3
 8000980:	f000 fa1c 	bl	8000dbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b08d      	sub	sp, #52	; 0x34
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	241c      	movs	r4, #28
 800099a:	193b      	adds	r3, r7, r4
 800099c:	0018      	movs	r0, r3
 800099e:	2314      	movs	r3, #20
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f004 fafd 	bl	8004fa2 <memset>
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a39      	ldr	r2, [pc, #228]	; (8000a94 <HAL_UART_MspInit+0x104>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d134      	bne.n	8000a1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b2:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <HAL_UART_MspInit+0x108>)
 80009b4:	699a      	ldr	r2, [r3, #24]
 80009b6:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <HAL_UART_MspInit+0x108>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	01c9      	lsls	r1, r1, #7
 80009bc:	430a      	orrs	r2, r1
 80009be:	619a      	str	r2, [r3, #24]
 80009c0:	4b35      	ldr	r3, [pc, #212]	; (8000a98 <HAL_UART_MspInit+0x108>)
 80009c2:	699a      	ldr	r2, [r3, #24]
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	01db      	lsls	r3, r3, #7
 80009c8:	4013      	ands	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <HAL_UART_MspInit+0x108>)
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <HAL_UART_MspInit+0x108>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0289      	lsls	r1, r1, #10
 80009d8:	430a      	orrs	r2, r1
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <HAL_UART_MspInit+0x108>)
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	029b      	lsls	r3, r3, #10
 80009e4:	4013      	ands	r3, r2
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	22c0      	movs	r2, #192	; 0xc0
 80009ee:	00d2      	lsls	r2, r2, #3
 80009f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	0021      	movs	r1, r4
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2203      	movs	r2, #3
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	187a      	adds	r2, r7, r1
 8000a0e:	2390      	movs	r3, #144	; 0x90
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 f9f7 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1a:	e037      	b.n	8000a8c <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <HAL_UART_MspInit+0x10c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d132      	bne.n	8000a8c <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_UART_MspInit+0x108>)
 8000a28:	69da      	ldr	r2, [r3, #28]
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <HAL_UART_MspInit+0x108>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	0289      	lsls	r1, r1, #10
 8000a30:	430a      	orrs	r2, r1
 8000a32:	61da      	str	r2, [r3, #28]
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_UART_MspInit+0x108>)
 8000a36:	69da      	ldr	r2, [r3, #28]
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	029b      	lsls	r3, r3, #10
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x108>)
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_UART_MspInit+0x108>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0289      	lsls	r1, r1, #10
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_UART_MspInit+0x108>)
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	029b      	lsls	r3, r3, #10
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5e:	211c      	movs	r1, #28
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2202      	movs	r2, #2
 8000a6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	187a      	adds	r2, r7, r1
 8000a80:	2390      	movs	r3, #144	; 0x90
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	0011      	movs	r1, r2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f9be 	bl	8000e08 <HAL_GPIO_Init>
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b00d      	add	sp, #52	; 0x34
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	2016      	movs	r0, #22
 8000ab8:	f000 f980 	bl	8000dbc <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000abc:	2016      	movs	r0, #22
 8000abe:	f000 f992 	bl	8000de6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <HAL_InitTick+0xa8>)
 8000ac4:	699a      	ldr	r2, [r3, #24]
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_InitTick+0xa8>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	02c9      	lsls	r1, r1, #11
 8000acc:	430a      	orrs	r2, r1
 8000ace:	619a      	str	r2, [r3, #24]
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_InitTick+0xa8>)
 8000ad2:	699a      	ldr	r2, [r3, #24]
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	02db      	lsls	r3, r3, #11
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ade:	230c      	movs	r3, #12
 8000ae0:	18fa      	adds	r2, r7, r3
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 ff87 	bl	80019fc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aee:	f000 ff6f 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8000af2:	0003      	movs	r3, r0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	4914      	ldr	r1, [pc, #80]	; (8000b4c <HAL_InitTick+0xac>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff fb0c 	bl	8000118 <__udivsi3>
 8000b00:	0003      	movs	r3, r0
 8000b02:	3b01      	subs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0xb0>)
 8000b08:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <HAL_InitTick+0xb4>)
 8000b0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_InitTick+0xb0>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <HAL_InitTick+0xb8>)
 8000b10:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_InitTick+0xb0>)
 8000b14:	6a3a      	ldr	r2, [r7, #32]
 8000b16:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_InitTick+0xb0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_InitTick+0xb0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_InitTick+0xb0>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 f860 	bl	8001bec <HAL_TIM_Base_Init>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d105      	bne.n	8000b3c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_InitTick+0xb0>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f001 f8b2 	bl	8001c9c <HAL_TIM_Base_Start_IT>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	e000      	b.n	8000b3e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b00a      	add	sp, #40	; 0x28
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	000f4240 	.word	0x000f4240
 8000b50:	20001b7c 	.word	0x20001b7c
 8000b54:	40014800 	.word	0x40014800
 8000b58:	000003e7 	.word	0x000003e7

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <TIM17_IRQHandler+0x14>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f001 f8e0 	bl	8001d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20001b7c 	.word	0x20001b7c

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f004 f9a6 	bl	8004f00 <__errno>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	18d2      	adds	r2, r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b006      	add	sp, #24
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20002000 	.word	0x20002000
 8000be0:	00000080 	.word	0x00000080
 8000be4:	20000090 	.word	0x20000090
 8000be8:	20001c18 	.word	0x20001c18

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c22:	f7ff ffe3 	bl	8000bec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c26:	f004 f971 	bl	8004f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff fb21 	bl	8000270 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   r0, =_estack
 8000c30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c3c:	08005578 	.word	0x08005578
  ldr r2, =_sbss
 8000c40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c44:	20001c18 	.word	0x20001c18

08000c48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_IRQHandler>
	...

08000c4c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_Init+0x24>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_Init+0x24>)
 8000c56:	2110      	movs	r1, #16
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f7ff ff1f 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c62:	f7ff fe6b 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x20>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	18d2      	adds	r2, r2, r3
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_IncTick+0x20>)
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000004 	.word	0x20000004
 8000c94:	20001bc4 	.word	0x20001bc4

08000c98 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <HAL_GetTick+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20001bc4 	.word	0x20001bc4

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000cbe:	d809      	bhi.n	8000cd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	231f      	movs	r3, #31
 8000cc8:	401a      	ands	r2, r3
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_EnableIRQ+0x30>)
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4091      	lsls	r1, r2
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]
  }
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf4:	d828      	bhi.n	8000d48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf6:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <__NVIC_SetPriority+0xd4>)
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	33c0      	adds	r3, #192	; 0xc0
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	589b      	ldr	r3, [r3, r2]
 8000d06:	1dfa      	adds	r2, r7, #7
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	400a      	ands	r2, r1
 8000d10:	00d2      	lsls	r2, r2, #3
 8000d12:	21ff      	movs	r1, #255	; 0xff
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	43d2      	mvns	r2, r2
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	019b      	lsls	r3, r3, #6
 8000d22:	22ff      	movs	r2, #255	; 0xff
 8000d24:	401a      	ands	r2, r3
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	4003      	ands	r3, r0
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d34:	481f      	ldr	r0, [pc, #124]	; (8000db4 <__NVIC_SetPriority+0xd4>)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	33c0      	adds	r3, #192	; 0xc0
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d46:	e031      	b.n	8000dac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <__NVIC_SetPriority+0xd8>)
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	0019      	movs	r1, r3
 8000d50:	230f      	movs	r3, #15
 8000d52:	400b      	ands	r3, r1
 8000d54:	3b08      	subs	r3, #8
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3306      	adds	r3, #6
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	18d3      	adds	r3, r2, r3
 8000d5e:	3304      	adds	r3, #4
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	1dfa      	adds	r2, r7, #7
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	0011      	movs	r1, r2
 8000d68:	2203      	movs	r2, #3
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	00d2      	lsls	r2, r2, #3
 8000d6e:	21ff      	movs	r1, #255	; 0xff
 8000d70:	4091      	lsls	r1, r2
 8000d72:	000a      	movs	r2, r1
 8000d74:	43d2      	mvns	r2, r2
 8000d76:	401a      	ands	r2, r3
 8000d78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	019b      	lsls	r3, r3, #6
 8000d7e:	22ff      	movs	r2, #255	; 0xff
 8000d80:	401a      	ands	r2, r3
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	0018      	movs	r0, r3
 8000d88:	2303      	movs	r3, #3
 8000d8a:	4003      	ands	r3, r0
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <__NVIC_SetPriority+0xd8>)
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	001c      	movs	r4, r3
 8000d98:	230f      	movs	r3, #15
 8000d9a:	4023      	ands	r3, r4
 8000d9c:	3b08      	subs	r3, #8
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	430a      	orrs	r2, r1
 8000da2:	3306      	adds	r3, #6
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	18c3      	adds	r3, r0, r3
 8000da8:	3304      	adds	r3, #4
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b003      	add	sp, #12
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	1c02      	adds	r2, r0, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff ff81 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b004      	add	sp, #16
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	0002      	movs	r2, r0
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff ff57 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e14f      	b.n	80010b8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4091      	lsls	r1, r2
 8000e22:	000a      	movs	r2, r1
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <HAL_GPIO_Init+0x28>
 8000e2e:	e140      	b.n	80010b2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2203      	movs	r2, #3
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d005      	beq.n	8000e48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2203      	movs	r2, #3
 8000e42:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d130      	bne.n	8000eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	409a      	lsls	r2, r3
 8000e56:	0013      	movs	r3, r2
 8000e58:	43da      	mvns	r2, r3
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7e:	2201      	movs	r2, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	2201      	movs	r2, #1
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d017      	beq.n	8000ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2203      	movs	r2, #3
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d123      	bne.n	8000f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	58d3      	ldr	r3, [r2, r3]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2207      	movs	r2, #7
 8000f04:	4013      	ands	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2107      	movs	r1, #7
 8000f1e:	400b      	ands	r3, r1
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	6939      	ldr	r1, [r7, #16]
 8000f38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2203      	movs	r2, #3
 8000f58:	401a      	ands	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	23c0      	movs	r3, #192	; 0xc0
 8000f74:	029b      	lsls	r3, r3, #10
 8000f76:	4013      	ands	r3, r2
 8000f78:	d100      	bne.n	8000f7c <HAL_GPIO_Init+0x174>
 8000f7a:	e09a      	b.n	80010b2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7c:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <HAL_GPIO_Init+0x2c8>)
 8000f7e:	699a      	ldr	r2, [r3, #24]
 8000f80:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_GPIO_Init+0x2c8>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	430a      	orrs	r2, r1
 8000f86:	619a      	str	r2, [r3, #24]
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_GPIO_Init+0x2c8>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4013      	ands	r3, r2
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f94:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <HAL_GPIO_Init+0x2cc>)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	589b      	ldr	r3, [r3, r2]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	409a      	lsls	r2, r3
 8000fae:	0013      	movs	r3, r2
 8000fb0:	43da      	mvns	r2, r3
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	2390      	movs	r3, #144	; 0x90
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x1e2>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a44      	ldr	r2, [pc, #272]	; (80010d8 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x1de>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a43      	ldr	r2, [pc, #268]	; (80010dc <HAL_GPIO_Init+0x2d4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x1da>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a42      	ldr	r2, [pc, #264]	; (80010e0 <HAL_GPIO_Init+0x2d8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x1d6>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x1e4>
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_Init+0x1e4>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x1e4>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x1e4>
 8000fea:	2300      	movs	r3, #0
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	2103      	movs	r1, #3
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4093      	lsls	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ffc:	4935      	ldr	r1, [pc, #212]	; (80010d4 <HAL_GPIO_Init+0x2cc>)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100a:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	025b      	lsls	r3, r3, #9
 8001022:	4013      	ands	r3, r2
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43da      	mvns	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	029b      	lsls	r3, r3, #10
 800104c:	4013      	ands	r3, r2
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43da      	mvns	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	035b      	lsls	r3, r3, #13
 8001076:	4013      	ands	r3, r2
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43da      	mvns	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	039b      	lsls	r3, r3, #14
 80010a0:	4013      	ands	r3, r2
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	40da      	lsrs	r2, r3
 80010c0:	1e13      	subs	r3, r2, #0
 80010c2:	d000      	beq.n	80010c6 <HAL_GPIO_Init+0x2be>
 80010c4:	e6a8      	b.n	8000e18 <HAL_GPIO_Init+0x10>
  } 
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b006      	add	sp, #24
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	40010400 	.word	0x40010400

080010e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	0008      	movs	r0, r1
 80010f2:	0011      	movs	r1, r2
 80010f4:	1cbb      	adds	r3, r7, #2
 80010f6:	1c02      	adds	r2, r0, #0
 80010f8:	801a      	strh	r2, [r3, #0]
 80010fa:	1c7b      	adds	r3, r7, #1
 80010fc:	1c0a      	adds	r2, r1, #0
 80010fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001100:	1c7b      	adds	r3, r7, #1
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001108:	1cbb      	adds	r3, r7, #2
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001110:	e003      	b.n	800111a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001112:	1cbb      	adds	r3, r7, #2
 8001114:	881a      	ldrh	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e301      	b.n	800173a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	d100      	bne.n	8001142 <HAL_RCC_OscConfig+0x1e>
 8001140:	e08d      	b.n	800125e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001142:	4bc3      	ldr	r3, [pc, #780]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	220c      	movs	r2, #12
 8001148:	4013      	ands	r3, r2
 800114a:	2b04      	cmp	r3, #4
 800114c:	d00e      	beq.n	800116c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800114e:	4bc0      	ldr	r3, [pc, #768]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	220c      	movs	r2, #12
 8001154:	4013      	ands	r3, r2
 8001156:	2b08      	cmp	r3, #8
 8001158:	d116      	bne.n	8001188 <HAL_RCC_OscConfig+0x64>
 800115a:	4bbd      	ldr	r3, [pc, #756]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	401a      	ands	r2, r3
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	025b      	lsls	r3, r3, #9
 8001168:	429a      	cmp	r2, r3
 800116a:	d10d      	bne.n	8001188 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	4bb8      	ldr	r3, [pc, #736]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	029b      	lsls	r3, r3, #10
 8001174:	4013      	ands	r3, r2
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x56>
 8001178:	e070      	b.n	800125c <HAL_RCC_OscConfig+0x138>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d000      	beq.n	8001184 <HAL_RCC_OscConfig+0x60>
 8001182:	e06b      	b.n	800125c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e2d8      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d107      	bne.n	80011a0 <HAL_RCC_OscConfig+0x7c>
 8001190:	4baf      	ldr	r3, [pc, #700]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4bae      	ldr	r3, [pc, #696]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	0249      	lsls	r1, r1, #9
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e02f      	b.n	8001200 <HAL_RCC_OscConfig+0xdc>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10c      	bne.n	80011c2 <HAL_RCC_OscConfig+0x9e>
 80011a8:	4ba9      	ldr	r3, [pc, #676]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4ba8      	ldr	r3, [pc, #672]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	49a9      	ldr	r1, [pc, #676]	; (8001454 <HAL_RCC_OscConfig+0x330>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	4ba6      	ldr	r3, [pc, #664]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4ba5      	ldr	r3, [pc, #660]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011ba:	49a7      	ldr	r1, [pc, #668]	; (8001458 <HAL_RCC_OscConfig+0x334>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e01e      	b.n	8001200 <HAL_RCC_OscConfig+0xdc>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d10e      	bne.n	80011e8 <HAL_RCC_OscConfig+0xc4>
 80011ca:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4ba0      	ldr	r3, [pc, #640]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	02c9      	lsls	r1, r1, #11
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	4b9d      	ldr	r3, [pc, #628]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b9c      	ldr	r3, [pc, #624]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	0249      	lsls	r1, r1, #9
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xdc>
 80011e8:	4b99      	ldr	r3, [pc, #612]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b98      	ldr	r3, [pc, #608]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	4999      	ldr	r1, [pc, #612]	; (8001454 <HAL_RCC_OscConfig+0x330>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	4b96      	ldr	r3, [pc, #600]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b95      	ldr	r3, [pc, #596]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	4997      	ldr	r1, [pc, #604]	; (8001458 <HAL_RCC_OscConfig+0x334>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d014      	beq.n	8001232 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fd46 	bl	8000c98 <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001212:	f7ff fd41 	bl	8000c98 <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b64      	cmp	r3, #100	; 0x64
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e28a      	b.n	800173a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001224:	4b8a      	ldr	r3, [pc, #552]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	029b      	lsls	r3, r3, #10
 800122c:	4013      	ands	r3, r2
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0xee>
 8001230:	e015      	b.n	800125e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fd31 	bl	8000c98 <HAL_GetTick>
 8001236:	0003      	movs	r3, r0
 8001238:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fd2c 	bl	8000c98 <HAL_GetTick>
 8001240:	0002      	movs	r2, r0
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e275      	b.n	800173a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	4b80      	ldr	r3, [pc, #512]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	029b      	lsls	r3, r3, #10
 8001256:	4013      	ands	r3, r2
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x118>
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2202      	movs	r2, #2
 8001264:	4013      	ands	r3, r2
 8001266:	d100      	bne.n	800126a <HAL_RCC_OscConfig+0x146>
 8001268:	e069      	b.n	800133e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	220c      	movs	r2, #12
 8001270:	4013      	ands	r3, r2
 8001272:	d00b      	beq.n	800128c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001274:	4b76      	ldr	r3, [pc, #472]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	220c      	movs	r2, #12
 800127a:	4013      	ands	r3, r2
 800127c:	2b08      	cmp	r3, #8
 800127e:	d11c      	bne.n	80012ba <HAL_RCC_OscConfig+0x196>
 8001280:	4b73      	ldr	r3, [pc, #460]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	025b      	lsls	r3, r3, #9
 8001288:	4013      	ands	r3, r2
 800128a:	d116      	bne.n	80012ba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128c:	4b70      	ldr	r3, [pc, #448]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x17e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e24b      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	22f8      	movs	r2, #248	; 0xf8
 80012a8:	4393      	bics	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	00da      	lsls	r2, r3, #3
 80012b2:	4b67      	ldr	r3, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b8:	e041      	b.n	800133e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d024      	beq.n	800130c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c2:	4b63      	ldr	r3, [pc, #396]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b62      	ldr	r3, [pc, #392]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fce3 	bl	8000c98 <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fcde 	bl	8000c98 <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e227      	b.n	800173a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2202      	movs	r2, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	d0f1      	beq.n	80012d8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b56      	ldr	r3, [pc, #344]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	22f8      	movs	r2, #248	; 0xf8
 80012fa:	4393      	bics	r3, r2
 80012fc:	0019      	movs	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00da      	lsls	r2, r3, #3
 8001304:	4b52      	ldr	r3, [pc, #328]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e018      	b.n	800133e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130c:	4b50      	ldr	r3, [pc, #320]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001312:	2101      	movs	r1, #1
 8001314:	438a      	bics	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fcbe 	bl	8000c98 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fcb9 	bl	8000c98 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e202      	b.n	800173a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001334:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d1f1      	bne.n	8001322 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2208      	movs	r2, #8
 8001344:	4013      	ands	r3, r2
 8001346:	d036      	beq.n	80013b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d019      	beq.n	8001384 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001350:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001354:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001356:	2101      	movs	r1, #1
 8001358:	430a      	orrs	r2, r1
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff fc9c 	bl	8000c98 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff fc97 	bl	8000c98 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e1e0      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
 8001380:	d0f1      	beq.n	8001366 <HAL_RCC_OscConfig+0x242>
 8001382:	e018      	b.n	80013b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800138a:	2101      	movs	r1, #1
 800138c:	438a      	bics	r2, r1
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fc82 	bl	8000c98 <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139a:	f7ff fc7d 	bl	8000c98 <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e1c6      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	2202      	movs	r2, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d1f1      	bne.n	800139a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2204      	movs	r2, #4
 80013bc:	4013      	ands	r3, r2
 80013be:	d100      	bne.n	80013c2 <HAL_RCC_OscConfig+0x29e>
 80013c0:	e0b4      	b.n	800152c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c2:	201f      	movs	r0, #31
 80013c4:	183b      	adds	r3, r7, r0
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	69da      	ldr	r2, [r3, #28]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	055b      	lsls	r3, r3, #21
 80013d2:	4013      	ands	r3, r2
 80013d4:	d110      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013d8:	69da      	ldr	r2, [r3, #28]
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	0549      	lsls	r1, r1, #21
 80013e0:	430a      	orrs	r2, r1
 80013e2:	61da      	str	r2, [r3, #28]
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	055b      	lsls	r3, r3, #21
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013f2:	183b      	adds	r3, r7, r0
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_RCC_OscConfig+0x338>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4013      	ands	r3, r2
 8001402:	d11a      	bne.n	800143a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_RCC_OscConfig+0x338>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_RCC_OscConfig+0x338>)
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	0049      	lsls	r1, r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001412:	f7ff fc41 	bl	8000c98 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141c:	f7ff fc3c 	bl	8000c98 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e185      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_OscConfig+0x338>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4013      	ands	r3, r2
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d10e      	bne.n	8001460 <HAL_RCC_OscConfig+0x33c>
 8001442:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	4b02      	ldr	r3, [pc, #8]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	621a      	str	r2, [r3, #32]
 800144e:	e035      	b.n	80014bc <HAL_RCC_OscConfig+0x398>
 8001450:	40021000 	.word	0x40021000
 8001454:	fffeffff 	.word	0xfffeffff
 8001458:	fffbffff 	.word	0xfffbffff
 800145c:	40007000 	.word	0x40007000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x35e>
 8001468:	4bb6      	ldr	r3, [pc, #728]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	4bb5      	ldr	r3, [pc, #724]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800146e:	2101      	movs	r1, #1
 8001470:	438a      	bics	r2, r1
 8001472:	621a      	str	r2, [r3, #32]
 8001474:	4bb3      	ldr	r3, [pc, #716]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001476:	6a1a      	ldr	r2, [r3, #32]
 8001478:	4bb2      	ldr	r3, [pc, #712]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800147a:	2104      	movs	r1, #4
 800147c:	438a      	bics	r2, r1
 800147e:	621a      	str	r2, [r3, #32]
 8001480:	e01c      	b.n	80014bc <HAL_RCC_OscConfig+0x398>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x380>
 800148a:	4bae      	ldr	r3, [pc, #696]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	4bad      	ldr	r3, [pc, #692]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001490:	2104      	movs	r1, #4
 8001492:	430a      	orrs	r2, r1
 8001494:	621a      	str	r2, [r3, #32]
 8001496:	4bab      	ldr	r3, [pc, #684]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	4baa      	ldr	r3, [pc, #680]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800149c:	2101      	movs	r1, #1
 800149e:	430a      	orrs	r2, r1
 80014a0:	621a      	str	r2, [r3, #32]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0x398>
 80014a4:	4ba7      	ldr	r3, [pc, #668]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	4ba6      	ldr	r3, [pc, #664]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	438a      	bics	r2, r1
 80014ae:	621a      	str	r2, [r3, #32]
 80014b0:	4ba4      	ldr	r3, [pc, #656]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	4ba3      	ldr	r3, [pc, #652]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	438a      	bics	r2, r1
 80014ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d014      	beq.n	80014ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff fbe8 	bl	8000c98 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014cc:	e009      	b.n	80014e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff fbe3 	bl	8000c98 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	4a9b      	ldr	r2, [pc, #620]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e12b      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e2:	4b98      	ldr	r3, [pc, #608]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x3aa>
 80014ec:	e013      	b.n	8001516 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fbd3 	bl	8000c98 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f6:	e009      	b.n	800150c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f8:	f7ff fbce 	bl	8000c98 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	4a91      	ldr	r2, [pc, #580]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e116      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	4b8d      	ldr	r3, [pc, #564]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001516:	231f      	movs	r3, #31
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001522:	69da      	ldr	r2, [r3, #28]
 8001524:	4b87      	ldr	r3, [pc, #540]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001526:	4989      	ldr	r1, [pc, #548]	; (800174c <HAL_RCC_OscConfig+0x628>)
 8001528:	400a      	ands	r2, r1
 800152a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2210      	movs	r2, #16
 8001532:	4013      	ands	r3, r2
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d12a      	bne.n	8001594 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800153e:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001542:	4b80      	ldr	r3, [pc, #512]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001544:	2104      	movs	r1, #4
 8001546:	430a      	orrs	r2, r1
 8001548:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800154a:	4b7e      	ldr	r3, [pc, #504]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800154c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154e:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff fb9f 	bl	8000c98 <HAL_GetTick>
 800155a:	0003      	movs	r3, r0
 800155c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001560:	f7ff fb9a 	bl	8000c98 <HAL_GetTick>
 8001564:	0002      	movs	r2, r0
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0e3      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d0f1      	beq.n	8001560 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800157c:	4b71      	ldr	r3, [pc, #452]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001580:	22f8      	movs	r2, #248	; 0xf8
 8001582:	4393      	bics	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	00da      	lsls	r2, r3, #3
 800158c:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800158e:	430a      	orrs	r2, r1
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
 8001592:	e034      	b.n	80015fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	3305      	adds	r3, #5
 800159a:	d111      	bne.n	80015c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800159c:	4b69      	ldr	r3, [pc, #420]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800159e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a0:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80015a2:	2104      	movs	r1, #4
 80015a4:	438a      	bics	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015a8:	4b66      	ldr	r3, [pc, #408]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80015aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ac:	22f8      	movs	r2, #248	; 0xf8
 80015ae:	4393      	bics	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	00da      	lsls	r2, r3, #3
 80015b8:	4b62      	ldr	r3, [pc, #392]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
 80015be:	e01e      	b.n	80015fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015c0:	4b60      	ldr	r3, [pc, #384]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80015c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c4:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80015c6:	2104      	movs	r1, #4
 80015c8:	430a      	orrs	r2, r1
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015cc:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d0:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	438a      	bics	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fb5e 	bl	8000c98 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015e2:	f7ff fb59 	bl	8000c98 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0a2      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80015f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d1f1      	bne.n	80015e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d100      	bne.n	8001608 <HAL_RCC_OscConfig+0x4e4>
 8001606:	e097      	b.n	8001738 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001608:	4b4e      	ldr	r3, [pc, #312]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	220c      	movs	r2, #12
 800160e:	4013      	ands	r3, r2
 8001610:	2b08      	cmp	r3, #8
 8001612:	d100      	bne.n	8001616 <HAL_RCC_OscConfig+0x4f2>
 8001614:	e06b      	b.n	80016ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d14c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161e:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b48      	ldr	r3, [pc, #288]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001624:	494a      	ldr	r1, [pc, #296]	; (8001750 <HAL_RCC_OscConfig+0x62c>)
 8001626:	400a      	ands	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb35 	bl	8000c98 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb30 	bl	8000c98 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e079      	b.n	800173a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001646:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	049b      	lsls	r3, r3, #18
 800164e:	4013      	ands	r3, r2
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	220f      	movs	r2, #15
 8001658:	4393      	bics	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001662:	430a      	orrs	r2, r1
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
 8001666:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4a3a      	ldr	r2, [pc, #232]	; (8001754 <HAL_RCC_OscConfig+0x630>)
 800166c:	4013      	ands	r3, r2
 800166e:	0019      	movs	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	431a      	orrs	r2, r3
 800167a:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	0449      	lsls	r1, r1, #17
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fb03 	bl	8000c98 <HAL_GetTick>
 8001692:	0003      	movs	r3, r0
 8001694:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fafe 	bl	8000c98 <HAL_GetTick>
 800169c:	0002      	movs	r2, r0
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e047      	b.n	800173a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	049b      	lsls	r3, r3, #18
 80016b2:	4013      	ands	r3, r2
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x574>
 80016b6:	e03f      	b.n	8001738 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80016be:	4924      	ldr	r1, [pc, #144]	; (8001750 <HAL_RCC_OscConfig+0x62c>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fae8 	bl	8000c98 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fae3 	bl	8000c98 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e02c      	b.n	800173a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	049b      	lsls	r3, r3, #18
 80016e8:	4013      	ands	r3, r2
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x5aa>
 80016ec:	e024      	b.n	8001738 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e01f      	b.n	800173a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_RCC_OscConfig+0x620>)
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	025b      	lsls	r3, r3, #9
 800170c:	401a      	ands	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	429a      	cmp	r2, r3
 8001714:	d10e      	bne.n	8001734 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	220f      	movs	r2, #15
 800171a:	401a      	ands	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	23f0      	movs	r3, #240	; 0xf0
 8001728:	039b      	lsls	r3, r3, #14
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b008      	add	sp, #32
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	40021000 	.word	0x40021000
 8001748:	00001388 	.word	0x00001388
 800174c:	efffffff 	.word	0xefffffff
 8001750:	feffffff 	.word	0xfeffffff
 8001754:	ffc2ffff 	.word	0xffc2ffff

08001758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b3      	b.n	80018d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800176c:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <HAL_RCC_ClockConfig+0x184>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d911      	bls.n	800179e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x184>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4393      	bics	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	4b55      	ldr	r3, [pc, #340]	; (80018dc <HAL_RCC_ClockConfig+0x184>)
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x184>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	4013      	ands	r3, r2
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d001      	beq.n	800179e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e09a      	b.n	80018d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d015      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2204      	movs	r2, #4
 80017ae:	4013      	ands	r3, r2
 80017b0:	d006      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017b2:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 80017b8:	21e0      	movs	r1, #224	; 0xe0
 80017ba:	00c9      	lsls	r1, r1, #3
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	22f0      	movs	r2, #240	; 0xf0
 80017c6:	4393      	bics	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 80017d0:	430a      	orrs	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	4013      	ands	r3, r2
 80017dc:	d040      	beq.n	8001860 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	029b      	lsls	r3, r3, #10
 80017ee:	4013      	ands	r3, r2
 80017f0:	d114      	bne.n	800181c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06e      	b.n	80018d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	049b      	lsls	r3, r3, #18
 8001806:	4013      	ands	r3, r2
 8001808:	d108      	bne.n	800181c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e062      	b.n	80018d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e05b      	b.n	80018d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181c:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2203      	movs	r2, #3
 8001822:	4393      	bics	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff fa32 	bl	8000c98 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001838:	e009      	b.n	800184e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183a:	f7ff fa2d 	bl	8000c98 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	4a27      	ldr	r2, [pc, #156]	; (80018e4 <HAL_RCC_ClockConfig+0x18c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e042      	b.n	80018d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	220c      	movs	r2, #12
 8001854:	401a      	ands	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1ec      	bne.n	800183a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_ClockConfig+0x184>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d211      	bcs.n	8001892 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_RCC_ClockConfig+0x184>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4393      	bics	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_RCC_ClockConfig+0x184>)
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x184>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d001      	beq.n	8001892 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e020      	b.n	80018d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2204      	movs	r2, #4
 8001898:	4013      	ands	r3, r2
 800189a:	d009      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_RCC_ClockConfig+0x190>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 80018ac:	430a      	orrs	r2, r1
 80018ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018b0:	f000 f820 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b4:	0001      	movs	r1, r0
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x188>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	220f      	movs	r2, #15
 80018be:	4013      	ands	r3, r2
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x194>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	000a      	movs	r2, r1
 80018c6:	40da      	lsrs	r2, r3
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x198>)
 80018ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f7ff f8e7 	bl	8000aa0 <HAL_InitTick>
  
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b004      	add	sp, #16
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40022000 	.word	0x40022000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	00001388 	.word	0x00001388
 80018e8:	fffff8ff 	.word	0xfffff8ff
 80018ec:	080054a8 	.word	0x080054a8
 80018f0:	20000000 	.word	0x20000000

080018f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b08f      	sub	sp, #60	; 0x3c
 80018f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018fa:	2314      	movs	r3, #20
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	4a2b      	ldr	r2, [pc, #172]	; (80019ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001900:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001902:	c313      	stmia	r3!, {r0, r1, r4}
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800190c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800190e:	c313      	stmia	r3!, {r0, r1, r4}
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
 800191c:	2300      	movs	r3, #0
 800191e:	637b      	str	r3, [r7, #52]	; 0x34
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001930:	220c      	movs	r2, #12
 8001932:	4013      	ands	r3, r2
 8001934:	2b04      	cmp	r3, #4
 8001936:	d002      	beq.n	800193e <HAL_RCC_GetSysClockFreq+0x4a>
 8001938:	2b08      	cmp	r3, #8
 800193a:	d003      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x50>
 800193c:	e02d      	b.n	800199a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001942:	e02d      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	0c9b      	lsrs	r3, r3, #18
 8001948:	220f      	movs	r2, #15
 800194a:	4013      	ands	r3, r2
 800194c:	2214      	movs	r2, #20
 800194e:	18ba      	adds	r2, r7, r2
 8001950:	5cd3      	ldrb	r3, [r2, r3]
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	220f      	movs	r2, #15
 800195a:	4013      	ands	r3, r2
 800195c:	1d3a      	adds	r2, r7, #4
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	4013      	ands	r3, r2
 800196a:	d009      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800196c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001970:	f7fe fbd2 	bl	8000118 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	001a      	movs	r2, r3
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	4353      	muls	r3, r2
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
 800197e:	e009      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001982:	000a      	movs	r2, r1
 8001984:	0152      	lsls	r2, r2, #5
 8001986:	1a52      	subs	r2, r2, r1
 8001988:	0193      	lsls	r3, r2, #6
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	185b      	adds	r3, r3, r1
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001998:	e002      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800199e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b00f      	add	sp, #60	; 0x3c
 80019a8:	bd90      	pop	{r4, r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	0800544c 	.word	0x0800544c
 80019b0:	0800545c 	.word	0x0800545c
 80019b4:	40021000 	.word	0x40021000
 80019b8:	007a1200 	.word	0x007a1200

080019bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c0:	4b02      	ldr	r3, [pc, #8]	; (80019cc <HAL_RCC_GetHCLKFreq+0x10>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	20000000 	.word	0x20000000

080019d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019d4:	f7ff fff2 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 80019d8:	0001      	movs	r1, r0
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	2207      	movs	r2, #7
 80019e2:	4013      	ands	r3, r2
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	40d9      	lsrs	r1, r3
 80019ea:	000b      	movs	r3, r1
}    
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	40021000 	.word	0x40021000
 80019f8:	080054b8 	.word	0x080054b8

080019fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_RCC_GetClockConfig+0x4c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2203      	movs	r2, #3
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_GetClockConfig+0x4c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	22f0      	movs	r2, #240	; 0xf0
 8001a1e:	401a      	ands	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_RCC_GetClockConfig+0x4c>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	23e0      	movs	r3, #224	; 0xe0
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_RCC_GetClockConfig+0x50>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2201      	movs	r2, #1
 8001a38:	401a      	ands	r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40022000 	.word	0x40022000

08001a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	025b      	lsls	r3, r3, #9
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d100      	bne.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a6c:	e08e      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2017      	movs	r0, #23
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	055b      	lsls	r3, r3, #21
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d110      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b54      	ldr	r3, [pc, #336]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	0549      	lsls	r1, r1, #21
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	61da      	str	r2, [r3, #28]
 8001a90:	4b50      	ldr	r3, [pc, #320]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	055b      	lsls	r3, r3, #21
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9e:	183b      	adds	r3, r7, r0
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	4b4c      	ldr	r3, [pc, #304]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d11a      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab0:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0049      	lsls	r1, r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001abe:	f7ff f8eb 	bl	8000c98 <HAL_GetTick>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	e008      	b.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac8:	f7ff f8e6 	bl	8000c98 <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e077      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae8:	6a1a      	ldr	r2, [r3, #32]
 8001aea:	23c0      	movs	r3, #192	; 0xc0
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d034      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	23c0      	movs	r3, #192	; 0xc0
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d02c      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a33      	ldr	r2, [pc, #204]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b14:	6a1a      	ldr	r2, [r3, #32]
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0249      	lsls	r1, r1, #9
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b22:	6a1a      	ldr	r2, [r3, #32]
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b26:	492e      	ldr	r1, [pc, #184]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f8ad 	bl	8000c98 <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	e009      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f8a8 	bl	8000c98 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	4a25      	ldr	r2, [pc, #148]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e038      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b76:	2317      	movs	r3, #23
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b82:	69da      	ldr	r2, [r3, #28]
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b86:	4918      	ldr	r1, [pc, #96]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	4393      	bics	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d009      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	2210      	movs	r2, #16
 8001bba:	4393      	bics	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b006      	add	sp, #24
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	fffffcff 	.word	0xfffffcff
 8001be0:	fffeffff 	.word	0xfffeffff
 8001be4:	00001388 	.word	0x00001388
 8001be8:	efffffff 	.word	0xefffffff

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e042      	b.n	8001c84 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	223d      	movs	r2, #61	; 0x3d
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	223c      	movs	r2, #60	; 0x3c
 8001c0e:	2100      	movs	r1, #0
 8001c10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 f839 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	223d      	movs	r2, #61	; 0x3d
 8001c1e:	2102      	movs	r1, #2
 8001c20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	0010      	movs	r0, r2
 8001c2e:	f000 f9b7 	bl	8001fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2246      	movs	r2, #70	; 0x46
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	223e      	movs	r2, #62	; 0x3e
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223f      	movs	r2, #63	; 0x3f
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2240      	movs	r2, #64	; 0x40
 8001c4e:	2101      	movs	r1, #1
 8001c50:	5499      	strb	r1, [r3, r2]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2241      	movs	r2, #65	; 0x41
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2242      	movs	r2, #66	; 0x42
 8001c5e:	2101      	movs	r1, #1
 8001c60:	5499      	strb	r1, [r3, r2]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2243      	movs	r2, #67	; 0x43
 8001c66:	2101      	movs	r1, #1
 8001c68:	5499      	strb	r1, [r3, r2]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2244      	movs	r2, #68	; 0x44
 8001c6e:	2101      	movs	r1, #1
 8001c70:	5499      	strb	r1, [r3, r2]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2245      	movs	r2, #69	; 0x45
 8001c76:	2101      	movs	r1, #1
 8001c78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	223d      	movs	r2, #61	; 0x3d
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	223d      	movs	r2, #61	; 0x3d
 8001ca8:	5c9b      	ldrb	r3, [r3, r2]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e035      	b.n	8001d20 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	223d      	movs	r2, #61	; 0x3d
 8001cb8:	2102      	movs	r1, #2
 8001cba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_TIM_Base_Start_IT+0x8c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_TIM_Base_Start_IT+0x4e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <HAL_TIM_Base_Start_IT+0x90>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d004      	beq.n	8001cea <HAL_TIM_Base_Start_IT+0x4e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <HAL_TIM_Base_Start_IT+0x94>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d111      	bne.n	8001d0e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	d010      	beq.n	8001d1e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2101      	movs	r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0c:	e007      	b.n	8001d1e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b004      	add	sp, #16
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40012c00 	.word	0x40012c00
 8001d2c:	40000400 	.word	0x40000400
 8001d30:	40014000 	.word	0x40014000

08001d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d124      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d11d      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	4252      	negs	r2, r2
 8001d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2203      	movs	r2, #3
 8001d70:	4013      	ands	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 f8fa 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e007      	b.n	8001d8e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0018      	movs	r0, r3
 8001d82:	f000 f8ed 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f8f9 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d125      	bne.n	8001dee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2204      	movs	r2, #4
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d11e      	bne.n	8001dee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2205      	movs	r2, #5
 8001db6:	4252      	negs	r2, r2
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	23c0      	movs	r3, #192	; 0xc0
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f8cd 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001dd6:	e007      	b.n	8001de8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f8c0 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f8cc 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2208      	movs	r2, #8
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d124      	bne.n	8001e46 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2208      	movs	r2, #8
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d11d      	bne.n	8001e46 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2209      	movs	r2, #9
 8001e10:	4252      	negs	r2, r2
 8001e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2204      	movs	r2, #4
 8001e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2203      	movs	r2, #3
 8001e22:	4013      	ands	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 f8a1 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e2e:	e007      	b.n	8001e40 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 f894 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f8a0 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	d125      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d11e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2211      	movs	r2, #17
 8001e68:	4252      	negs	r2, r2
 8001e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2208      	movs	r2, #8
 8001e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	23c0      	movs	r3, #192	; 0xc0
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d004      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f000 f874 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e88:	e007      	b.n	8001e9a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f867 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f000 f873 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10f      	bne.n	8001ece <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d108      	bne.n	8001ece <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4252      	negs	r2, r2
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7fe fd1f 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b80      	cmp	r3, #128	; 0x80
 8001eda:	d10f      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b80      	cmp	r3, #128	; 0x80
 8001ee8:	d108      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2281      	movs	r2, #129	; 0x81
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 f8d0 	bl	800209c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d10f      	bne.n	8001f2a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d108      	bne.n	8001f2a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2241      	movs	r2, #65	; 0x41
 8001f1e:	4252      	negs	r2, r2
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 f833 	bl	8001f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2220      	movs	r2, #32
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d10f      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d108      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2221      	movs	r2, #33	; 0x21
 8001f4c:	4252      	negs	r2, r2
 8001f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 f89a 	bl	800208c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a2f      	ldr	r2, [pc, #188]	; (8002070 <TIM_Base_SetConfig+0xd0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <TIM_Base_SetConfig+0x20>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a2e      	ldr	r2, [pc, #184]	; (8002074 <TIM_Base_SetConfig+0xd4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d108      	bne.n	8001fd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2270      	movs	r2, #112	; 0x70
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a26      	ldr	r2, [pc, #152]	; (8002070 <TIM_Base_SetConfig+0xd0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <TIM_Base_SetConfig+0x62>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	; (8002074 <TIM_Base_SetConfig+0xd4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00f      	beq.n	8002002 <TIM_Base_SetConfig+0x62>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <TIM_Base_SetConfig+0xd8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00b      	beq.n	8002002 <TIM_Base_SetConfig+0x62>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <TIM_Base_SetConfig+0xdc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <TIM_Base_SetConfig+0x62>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a22      	ldr	r2, [pc, #136]	; (8002080 <TIM_Base_SetConfig+0xe0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d003      	beq.n	8002002 <TIM_Base_SetConfig+0x62>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a21      	ldr	r2, [pc, #132]	; (8002084 <TIM_Base_SetConfig+0xe4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d108      	bne.n	8002014 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a20      	ldr	r2, [pc, #128]	; (8002088 <TIM_Base_SetConfig+0xe8>)
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	4393      	bics	r3, r2
 800201a:	001a      	movs	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <TIM_Base_SetConfig+0xd0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00b      	beq.n	800205a <TIM_Base_SetConfig+0xba>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <TIM_Base_SetConfig+0xdc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <TIM_Base_SetConfig+0xba>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <TIM_Base_SetConfig+0xe0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d003      	beq.n	800205a <TIM_Base_SetConfig+0xba>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <TIM_Base_SetConfig+0xe4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d103      	bne.n	8002062 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	615a      	str	r2, [r3, #20]
}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b004      	add	sp, #16
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40000400 	.word	0x40000400
 8002078:	40002000 	.word	0x40002000
 800207c:	40014000 	.word	0x40014000
 8002080:	40014400 	.word	0x40014400
 8002084:	40014800 	.word	0x40014800
 8002088:	fffffcff 	.word	0xfffffcff

0800208c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e044      	b.n	8002148 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2274      	movs	r2, #116	; 0x74
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7fe fc5d 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2224      	movs	r2, #36	; 0x24
 80020da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2101      	movs	r1, #1
 80020e8:	438a      	bics	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f9b6 	bl	8002460 <UART_SetConfig>
 80020f4:	0003      	movs	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e024      	b.n	8002148 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f000 fae9 	bl	80026e0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	490d      	ldr	r1, [pc, #52]	; (8002150 <HAL_UART_Init+0xa4>)
 800211a:	400a      	ands	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2108      	movs	r1, #8
 800212a:	438a      	bics	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f000 fb81 	bl	8002848 <UART_CheckIdleState>
 8002146:	0003      	movs	r3, r0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}
 8002150:	fffff7ff 	.word	0xfffff7ff

08002154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	1dbb      	adds	r3, r7, #6
 8002162:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002168:	2b20      	cmp	r3, #32
 800216a:	d000      	beq.n	800216e <HAL_UART_Transmit+0x1a>
 800216c:	e096      	b.n	800229c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_UART_Transmit+0x28>
 8002174:	1dbb      	adds	r3, r7, #6
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e08e      	b.n	800229e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	015b      	lsls	r3, r3, #5
 8002188:	429a      	cmp	r2, r3
 800218a:	d109      	bne.n	80021a0 <HAL_UART_Transmit+0x4c>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2201      	movs	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d001      	beq.n	80021a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e07e      	b.n	800229e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2274      	movs	r2, #116	; 0x74
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_UART_Transmit+0x5a>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e077      	b.n	800229e <HAL_UART_Transmit+0x14a>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2274      	movs	r2, #116	; 0x74
 80021b2:	2101      	movs	r1, #1
 80021b4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	2100      	movs	r1, #0
 80021bc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2221      	movs	r2, #33	; 0x21
 80021c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021c4:	f7fe fd68 	bl	8000c98 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1dba      	adds	r2, r7, #6
 80021d0:	2150      	movs	r1, #80	; 0x50
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1dba      	adds	r2, r7, #6
 80021da:	2152      	movs	r1, #82	; 0x52
 80021dc:	8812      	ldrh	r2, [r2, #0]
 80021de:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	015b      	lsls	r3, r3, #5
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d108      	bne.n	80021fe <HAL_UART_Transmit+0xaa>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	e003      	b.n	8002206 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2274      	movs	r2, #116	; 0x74
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800220e:	e02d      	b.n	800226c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	0013      	movs	r3, r2
 800221a:	2200      	movs	r2, #0
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	f000 fb5b 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d001      	beq.n	800222a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e039      	b.n	800229e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	05d2      	lsls	r2, r2, #23
 800223a:	0dd2      	lsrs	r2, r2, #23
 800223c:	b292      	uxth	r2, r2
 800223e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	3302      	adds	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	e008      	b.n	800225a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b292      	uxth	r2, r2
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3301      	adds	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2252      	movs	r2, #82	; 0x52
 800225e:	5a9b      	ldrh	r3, [r3, r2]
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b299      	uxth	r1, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2252      	movs	r2, #82	; 0x52
 800226a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2252      	movs	r2, #82	; 0x52
 8002270:	5a9b      	ldrh	r3, [r3, r2]
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1cb      	bne.n	8002210 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	0013      	movs	r3, r2
 8002282:	2200      	movs	r2, #0
 8002284:	2140      	movs	r1, #64	; 0x40
 8002286:	f000 fb27 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d001      	beq.n	8002292 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e005      	b.n	800229e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	e000      	b.n	800229e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800229c:	2302      	movs	r3, #2
  }
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b008      	add	sp, #32
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	1dbb      	adds	r3, r7, #6
 80022b6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d000      	beq.n	80022c2 <HAL_UART_Receive+0x1a>
 80022c0:	e0c6      	b.n	8002450 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_UART_Receive+0x28>
 80022c8:	1dbb      	adds	r3, r7, #6
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0be      	b.n	8002452 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	015b      	lsls	r3, r3, #5
 80022dc:	429a      	cmp	r2, r3
 80022de:	d109      	bne.n	80022f4 <HAL_UART_Receive+0x4c>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2201      	movs	r2, #1
 80022ec:	4013      	ands	r3, r2
 80022ee:	d001      	beq.n	80022f4 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0ae      	b.n	8002452 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2274      	movs	r2, #116	; 0x74
 80022f8:	5c9b      	ldrb	r3, [r3, r2]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Receive+0x5a>
 80022fe:	2302      	movs	r3, #2
 8002300:	e0a7      	b.n	8002452 <HAL_UART_Receive+0x1aa>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2274      	movs	r2, #116	; 0x74
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	2100      	movs	r1, #0
 8002310:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2222      	movs	r2, #34	; 0x22
 8002316:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800231e:	f7fe fcbb 	bl	8000c98 <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1dba      	adds	r2, r7, #6
 800232a:	2158      	movs	r1, #88	; 0x58
 800232c:	8812      	ldrh	r2, [r2, #0]
 800232e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1dba      	adds	r2, r7, #6
 8002334:	215a      	movs	r1, #90	; 0x5a
 8002336:	8812      	ldrh	r2, [r2, #0]
 8002338:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	015b      	lsls	r3, r3, #5
 8002342:	429a      	cmp	r2, r3
 8002344:	d10d      	bne.n	8002362 <HAL_UART_Receive+0xba>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d104      	bne.n	8002358 <HAL_UART_Receive+0xb0>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	225c      	movs	r2, #92	; 0x5c
 8002352:	4942      	ldr	r1, [pc, #264]	; (800245c <HAL_UART_Receive+0x1b4>)
 8002354:	5299      	strh	r1, [r3, r2]
 8002356:	e01a      	b.n	800238e <HAL_UART_Receive+0xe6>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	225c      	movs	r2, #92	; 0x5c
 800235c:	21ff      	movs	r1, #255	; 0xff
 800235e:	5299      	strh	r1, [r3, r2]
 8002360:	e015      	b.n	800238e <HAL_UART_Receive+0xe6>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_UART_Receive+0xde>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d104      	bne.n	800237c <HAL_UART_Receive+0xd4>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	225c      	movs	r2, #92	; 0x5c
 8002376:	21ff      	movs	r1, #255	; 0xff
 8002378:	5299      	strh	r1, [r3, r2]
 800237a:	e008      	b.n	800238e <HAL_UART_Receive+0xe6>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	225c      	movs	r2, #92	; 0x5c
 8002380:	217f      	movs	r1, #127	; 0x7f
 8002382:	5299      	strh	r1, [r3, r2]
 8002384:	e003      	b.n	800238e <HAL_UART_Receive+0xe6>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	225c      	movs	r2, #92	; 0x5c
 800238a:	2100      	movs	r1, #0
 800238c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800238e:	2312      	movs	r3, #18
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	215c      	movs	r1, #92	; 0x5c
 8002396:	5a52      	ldrh	r2, [r2, r1]
 8002398:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	015b      	lsls	r3, r3, #5
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d108      	bne.n	80023b8 <HAL_UART_Receive+0x110>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2274      	movs	r2, #116	; 0x74
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80023c8:	e037      	b.n	800243a <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	0013      	movs	r3, r2
 80023d4:	2200      	movs	r2, #0
 80023d6:	2120      	movs	r1, #32
 80023d8:	f000 fa7e 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e036      	b.n	8002452 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10e      	bne.n	8002408 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2212      	movs	r2, #18
 80023f4:	18ba      	adds	r2, r7, r2
 80023f6:	8812      	ldrh	r2, [r2, #0]
 80023f8:	4013      	ands	r3, r2
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	3302      	adds	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	e00f      	b.n	8002428 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800240e:	b29b      	uxth	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2212      	movs	r2, #18
 8002414:	18ba      	adds	r2, r7, r2
 8002416:	8812      	ldrh	r2, [r2, #0]
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	4013      	ands	r3, r2
 800241c:	b2da      	uxtb	r2, r3
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3301      	adds	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	225a      	movs	r2, #90	; 0x5a
 800242c:	5a9b      	ldrh	r3, [r3, r2]
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b299      	uxth	r1, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	225a      	movs	r2, #90	; 0x5a
 8002438:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	225a      	movs	r2, #90	; 0x5a
 800243e:	5a9b      	ldrh	r3, [r3, r2]
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1c1      	bne.n	80023ca <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b008      	add	sp, #32
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	000001ff 	.word	0x000001ff

08002460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002468:	231e      	movs	r3, #30
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a8d      	ldr	r2, [pc, #564]	; (80026c4 <UART_SetConfig+0x264>)
 8002490:	4013      	ands	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a88      	ldr	r2, [pc, #544]	; (80026c8 <UART_SetConfig+0x268>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a7f      	ldr	r2, [pc, #508]	; (80026cc <UART_SetConfig+0x26c>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a7b      	ldr	r2, [pc, #492]	; (80026d0 <UART_SetConfig+0x270>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d127      	bne.n	8002536 <UART_SetConfig+0xd6>
 80024e6:	4b7b      	ldr	r3, [pc, #492]	; (80026d4 <UART_SetConfig+0x274>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	2203      	movs	r2, #3
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d00d      	beq.n	800250e <UART_SetConfig+0xae>
 80024f2:	d81b      	bhi.n	800252c <UART_SetConfig+0xcc>
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d014      	beq.n	8002522 <UART_SetConfig+0xc2>
 80024f8:	d818      	bhi.n	800252c <UART_SetConfig+0xcc>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <UART_SetConfig+0xa4>
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d00a      	beq.n	8002518 <UART_SetConfig+0xb8>
 8002502:	e013      	b.n	800252c <UART_SetConfig+0xcc>
 8002504:	231f      	movs	r3, #31
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e021      	b.n	8002552 <UART_SetConfig+0xf2>
 800250e:	231f      	movs	r3, #31
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2202      	movs	r2, #2
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e01c      	b.n	8002552 <UART_SetConfig+0xf2>
 8002518:	231f      	movs	r3, #31
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2204      	movs	r2, #4
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	e017      	b.n	8002552 <UART_SetConfig+0xf2>
 8002522:	231f      	movs	r3, #31
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2208      	movs	r2, #8
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e012      	b.n	8002552 <UART_SetConfig+0xf2>
 800252c:	231f      	movs	r3, #31
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	2210      	movs	r2, #16
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e00d      	b.n	8002552 <UART_SetConfig+0xf2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a67      	ldr	r2, [pc, #412]	; (80026d8 <UART_SetConfig+0x278>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d104      	bne.n	800254a <UART_SetConfig+0xea>
 8002540:	231f      	movs	r3, #31
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e003      	b.n	8002552 <UART_SetConfig+0xf2>
 800254a:	231f      	movs	r3, #31
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2210      	movs	r2, #16
 8002550:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	429a      	cmp	r2, r3
 800255c:	d15d      	bne.n	800261a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800255e:	231f      	movs	r3, #31
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d015      	beq.n	8002594 <UART_SetConfig+0x134>
 8002568:	dc18      	bgt.n	800259c <UART_SetConfig+0x13c>
 800256a:	2b04      	cmp	r3, #4
 800256c:	d00d      	beq.n	800258a <UART_SetConfig+0x12a>
 800256e:	dc15      	bgt.n	800259c <UART_SetConfig+0x13c>
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <UART_SetConfig+0x11a>
 8002574:	2b02      	cmp	r3, #2
 8002576:	d005      	beq.n	8002584 <UART_SetConfig+0x124>
 8002578:	e010      	b.n	800259c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800257a:	f7ff fa29 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 800257e:	0003      	movs	r3, r0
 8002580:	61bb      	str	r3, [r7, #24]
        break;
 8002582:	e012      	b.n	80025aa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002584:	4b55      	ldr	r3, [pc, #340]	; (80026dc <UART_SetConfig+0x27c>)
 8002586:	61bb      	str	r3, [r7, #24]
        break;
 8002588:	e00f      	b.n	80025aa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800258a:	f7ff f9b3 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 800258e:	0003      	movs	r3, r0
 8002590:	61bb      	str	r3, [r7, #24]
        break;
 8002592:	e00a      	b.n	80025aa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	61bb      	str	r3, [r7, #24]
        break;
 800259a:	e006      	b.n	80025aa <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025a0:	231e      	movs	r3, #30
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
        break;
 80025a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d100      	bne.n	80025b2 <UART_SetConfig+0x152>
 80025b0:	e07b      	b.n	80026aa <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	005a      	lsls	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	18d2      	adds	r2, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	0019      	movs	r1, r3
 80025c4:	0010      	movs	r0, r2
 80025c6:	f7fd fda7 	bl	8000118 <__udivsi3>
 80025ca:	0003      	movs	r3, r0
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b0f      	cmp	r3, #15
 80025d4:	d91c      	bls.n	8002610 <UART_SetConfig+0x1b0>
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	025b      	lsls	r3, r3, #9
 80025dc:	429a      	cmp	r2, r3
 80025de:	d217      	bcs.n	8002610 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	200e      	movs	r0, #14
 80025e6:	183b      	adds	r3, r7, r0
 80025e8:	210f      	movs	r1, #15
 80025ea:	438a      	bics	r2, r1
 80025ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2207      	movs	r2, #7
 80025f6:	4013      	ands	r3, r2
 80025f8:	b299      	uxth	r1, r3
 80025fa:	183b      	adds	r3, r7, r0
 80025fc:	183a      	adds	r2, r7, r0
 80025fe:	8812      	ldrh	r2, [r2, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	183a      	adds	r2, r7, r0
 800260a:	8812      	ldrh	r2, [r2, #0]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	e04c      	b.n	80026aa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002610:	231e      	movs	r3, #30
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e047      	b.n	80026aa <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800261a:	231f      	movs	r3, #31
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d015      	beq.n	8002650 <UART_SetConfig+0x1f0>
 8002624:	dc18      	bgt.n	8002658 <UART_SetConfig+0x1f8>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d00d      	beq.n	8002646 <UART_SetConfig+0x1e6>
 800262a:	dc15      	bgt.n	8002658 <UART_SetConfig+0x1f8>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <UART_SetConfig+0x1d6>
 8002630:	2b02      	cmp	r3, #2
 8002632:	d005      	beq.n	8002640 <UART_SetConfig+0x1e0>
 8002634:	e010      	b.n	8002658 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002636:	f7ff f9cb 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 800263a:	0003      	movs	r3, r0
 800263c:	61bb      	str	r3, [r7, #24]
        break;
 800263e:	e012      	b.n	8002666 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002640:	4b26      	ldr	r3, [pc, #152]	; (80026dc <UART_SetConfig+0x27c>)
 8002642:	61bb      	str	r3, [r7, #24]
        break;
 8002644:	e00f      	b.n	8002666 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002646:	f7ff f955 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 800264a:	0003      	movs	r3, r0
 800264c:	61bb      	str	r3, [r7, #24]
        break;
 800264e:	e00a      	b.n	8002666 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	61bb      	str	r3, [r7, #24]
        break;
 8002656:	e006      	b.n	8002666 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800265c:	231e      	movs	r3, #30
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
        break;
 8002664:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01e      	beq.n	80026aa <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	085a      	lsrs	r2, r3, #1
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	18d2      	adds	r2, r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0019      	movs	r1, r3
 800267c:	0010      	movs	r0, r2
 800267e:	f7fd fd4b 	bl	8000118 <__udivsi3>
 8002682:	0003      	movs	r3, r0
 8002684:	b29b      	uxth	r3, r3
 8002686:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	d909      	bls.n	80026a2 <UART_SetConfig+0x242>
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	025b      	lsls	r3, r3, #9
 8002694:	429a      	cmp	r2, r3
 8002696:	d204      	bcs.n	80026a2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	e003      	b.n	80026aa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80026a2:	231e      	movs	r3, #30
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80026b6:	231e      	movs	r3, #30
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	781b      	ldrb	r3, [r3, #0]
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b008      	add	sp, #32
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	ffff69f3 	.word	0xffff69f3
 80026c8:	ffffcfff 	.word	0xffffcfff
 80026cc:	fffff4ff 	.word	0xfffff4ff
 80026d0:	40013800 	.word	0x40013800
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40004400 	.word	0x40004400
 80026dc:	007a1200 	.word	0x007a1200

080026e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	2201      	movs	r2, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	d00b      	beq.n	800270a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <UART_AdvFeatureConfig+0x144>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2202      	movs	r2, #2
 8002710:	4013      	ands	r3, r2
 8002712:	d00b      	beq.n	800272c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a43      	ldr	r2, [pc, #268]	; (8002828 <UART_AdvFeatureConfig+0x148>)
 800271c:	4013      	ands	r3, r2
 800271e:	0019      	movs	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2204      	movs	r2, #4
 8002732:	4013      	ands	r3, r2
 8002734:	d00b      	beq.n	800274e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a3b      	ldr	r2, [pc, #236]	; (800282c <UART_AdvFeatureConfig+0x14c>)
 800273e:	4013      	ands	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2208      	movs	r2, #8
 8002754:	4013      	ands	r3, r2
 8002756:	d00b      	beq.n	8002770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a34      	ldr	r2, [pc, #208]	; (8002830 <UART_AdvFeatureConfig+0x150>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2210      	movs	r2, #16
 8002776:	4013      	ands	r3, r2
 8002778:	d00b      	beq.n	8002792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <UART_AdvFeatureConfig+0x154>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	2220      	movs	r2, #32
 8002798:	4013      	ands	r3, r2
 800279a:	d00b      	beq.n	80027b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a25      	ldr	r2, [pc, #148]	; (8002838 <UART_AdvFeatureConfig+0x158>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2240      	movs	r2, #64	; 0x40
 80027ba:	4013      	ands	r3, r2
 80027bc:	d01d      	beq.n	80027fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <UART_AdvFeatureConfig+0x15c>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	035b      	lsls	r3, r3, #13
 80027de:	429a      	cmp	r2, r3
 80027e0:	d10b      	bne.n	80027fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a15      	ldr	r2, [pc, #84]	; (8002840 <UART_AdvFeatureConfig+0x160>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	4013      	ands	r3, r2
 8002802:	d00b      	beq.n	800281c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <UART_AdvFeatureConfig+0x164>)
 800280c:	4013      	ands	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
  }
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}
 8002824:	fffdffff 	.word	0xfffdffff
 8002828:	fffeffff 	.word	0xfffeffff
 800282c:	fffbffff 	.word	0xfffbffff
 8002830:	ffff7fff 	.word	0xffff7fff
 8002834:	ffffefff 	.word	0xffffefff
 8002838:	ffffdfff 	.word	0xffffdfff
 800283c:	ffefffff 	.word	0xffefffff
 8002840:	ff9fffff 	.word	0xff9fffff
 8002844:	fff7ffff 	.word	0xfff7ffff

08002848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af02      	add	r7, sp, #8
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	2100      	movs	r1, #0
 8002856:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002858:	f7fe fa1e 	bl	8000c98 <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2208      	movs	r2, #8
 8002868:	4013      	ands	r3, r2
 800286a:	2b08      	cmp	r3, #8
 800286c:	d10c      	bne.n	8002888 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	0391      	lsls	r1, r2, #14
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <UART_CheckIdleState+0x8c>)
 8002878:	9200      	str	r2, [sp, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	f000 f82c 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	d001      	beq.n	8002888 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e021      	b.n	80028cc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	2b04      	cmp	r3, #4
 8002894:	d10c      	bne.n	80028b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	03d1      	lsls	r1, r2, #15
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <UART_CheckIdleState+0x8c>)
 80028a0:	9200      	str	r2, [sp, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f000 f818 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 80028a8:	1e03      	subs	r3, r0, #0
 80028aa:	d001      	beq.n	80028b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e00d      	b.n	80028cc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2274      	movs	r2, #116	; 0x74
 80028c6:	2100      	movs	r1, #0
 80028c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	01ffffff 	.word	0x01ffffff

080028d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b094      	sub	sp, #80	; 0x50
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e8:	e0a3      	b.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ec:	3301      	adds	r3, #1
 80028ee:	d100      	bne.n	80028f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80028f0:	e09f      	b.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7fe f9d1 	bl	8000c98 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <UART_WaitOnFlagUntilTimeout+0x30>
 8002902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002904:	2b00      	cmp	r3, #0
 8002906:	d13d      	bne.n	8002984 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002908:	f3ef 8310 	mrs	r3, PRIMASK
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002910:	647b      	str	r3, [r7, #68]	; 0x44
 8002912:	2301      	movs	r3, #1
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	f383 8810 	msr	PRIMASK, r3
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	494c      	ldr	r1, [pc, #304]	; (8002a5c <UART_WaitOnFlagUntilTimeout+0x184>)
 800292a:	400a      	ands	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	f383 8810 	msr	PRIMASK, r3
}
 8002938:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293a:	f3ef 8310 	mrs	r3, PRIMASK
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002942:	643b      	str	r3, [r7, #64]	; 0x40
 8002944:	2301      	movs	r3, #1
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	f383 8810 	msr	PRIMASK, r3
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	438a      	bics	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002962:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002966:	f383 8810 	msr	PRIMASK, r3
}
 800296a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2274      	movs	r2, #116	; 0x74
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e067      	b.n	8002a54 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2204      	movs	r2, #4
 800298c:	4013      	ands	r3, r2
 800298e:	d050      	beq.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	401a      	ands	r2, r3
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d146      	bne.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	0112      	lsls	r2, r2, #4
 80029ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ae:	f3ef 8310 	mrs	r3, PRIMASK
 80029b2:	613b      	str	r3, [r7, #16]
  return(result);
 80029b4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b8:	2301      	movs	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f383 8810 	msr	PRIMASK, r3
}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4923      	ldr	r1, [pc, #140]	; (8002a5c <UART_WaitOnFlagUntilTimeout+0x184>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f383 8810 	msr	PRIMASK, r3
}
 80029de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e0:	f3ef 8310 	mrs	r3, PRIMASK
 80029e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80029e6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ea:	2301      	movs	r3, #1
 80029ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f383 8810 	msr	PRIMASK, r3
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2101      	movs	r1, #1
 8002a02:	438a      	bics	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	f383 8810 	msr	PRIMASK, r3
}
 8002a10:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	2120      	movs	r1, #32
 8002a24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2274      	movs	r2, #116	; 0x74
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e010      	b.n	8002a54 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	425a      	negs	r2, r3
 8002a42:	4153      	adcs	r3, r2
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	001a      	movs	r2, r3
 8002a48:	1dfb      	adds	r3, r7, #7
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d100      	bne.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002a50:	e74b      	b.n	80028ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b014      	add	sp, #80	; 0x50
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	fffffe5f 	.word	0xfffffe5f

08002a60 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a66:	f3ef 8305 	mrs	r3, IPSR
 8002a6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a72:	f3ef 8310 	mrs	r3, PRIMASK
 8002a76:	607b      	str	r3, [r7, #4]
  return(result);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <osKernelInitialize+0x2e>
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <osKernelInitialize+0x54>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d103      	bne.n	8002a8e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8002a86:	2306      	movs	r3, #6
 8002a88:	425b      	negs	r3, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e00c      	b.n	8002aa8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <osKernelInitialize+0x54>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <osKernelInitialize+0x54>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e002      	b.n	8002aa8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	425b      	negs	r3, r3
 8002aa6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b004      	add	sp, #16
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	20000094 	.word	0x20000094

08002ab8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002abe:	f3ef 8305 	mrs	r3, IPSR
 8002ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aca:	f3ef 8310 	mrs	r3, PRIMASK
 8002ace:	607b      	str	r3, [r7, #4]
  return(result);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <osKernelStart+0x2e>
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <osKernelStart+0x58>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d103      	bne.n	8002ae6 <osKernelStart+0x2e>
    stat = osErrorISR;
 8002ade:	2306      	movs	r3, #6
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e00e      	b.n	8002b04 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <osKernelStart+0x58>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <osKernelStart+0x58>)
 8002af0:	2202      	movs	r2, #2
 8002af2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002af4:	f000 ff94 	bl	8003a20 <vTaskStartScheduler>
      stat = osOK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e002      	b.n	8002b04 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8002afe:	2301      	movs	r3, #1
 8002b00:	425b      	negs	r3, r3
 8002b02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b004      	add	sp, #16
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	20000094 	.word	0x20000094

08002b14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b090      	sub	sp, #64	; 0x40
 8002b18:	af04      	add	r7, sp, #16
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b24:	f3ef 8305 	mrs	r3, IPSR
 8002b28:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b2a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d000      	beq.n	8002b32 <osThreadNew+0x1e>
 8002b30:	e090      	b.n	8002c54 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b32:	f3ef 8310 	mrs	r3, PRIMASK
 8002b36:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d004      	beq.n	8002b48 <osThreadNew+0x34>
 8002b3e:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <osThreadNew+0x14c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d100      	bne.n	8002b48 <osThreadNew+0x34>
 8002b46:	e085      	b.n	8002c54 <osThreadNew+0x140>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d100      	bne.n	8002b50 <osThreadNew+0x3c>
 8002b4e:	e081      	b.n	8002c54 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002b54:	2318      	movs	r3, #24
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8002b58:	2117      	movs	r1, #23
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	425b      	negs	r3, r3
 8002b68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d044      	beq.n	8002bfa <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <osThreadNew+0x6a>
        name = attr->name;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <osThreadNew+0x8e>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	2b38      	cmp	r3, #56	; 0x38
 8002b96:	d804      	bhi.n	8002ba2 <osThreadNew+0x8e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d001      	beq.n	8002ba6 <osThreadNew+0x92>
        return (NULL);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e057      	b.n	8002c56 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00e      	beq.n	8002bdc <osThreadNew+0xc8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2bbb      	cmp	r3, #187	; 0xbb
 8002bc4:	d90a      	bls.n	8002bdc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <osThreadNew+0xc8>
        mem = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	e010      	b.n	8002bfe <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10c      	bne.n	8002bfe <osThreadNew+0xea>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d108      	bne.n	8002bfe <osThreadNew+0xea>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <osThreadNew+0xea>
          mem = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	e001      	b.n	8002bfe <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d112      	bne.n	8002c2a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c0c:	68bd      	ldr	r5, [r7, #8]
 8002c0e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002c10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	9302      	str	r3, [sp, #8]
 8002c16:	9201      	str	r2, [sp, #4]
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	002b      	movs	r3, r5
 8002c1e:	0022      	movs	r2, r4
 8002c20:	f000 fd49 	bl	80036b6 <xTaskCreateStatic>
 8002c24:	0003      	movs	r3, r0
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	e014      	b.n	8002c54 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d111      	bne.n	8002c54 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68bc      	ldr	r4, [r7, #8]
 8002c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	2310      	movs	r3, #16
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	0023      	movs	r3, r4
 8002c46:	f000 fd79 	bl	800373c <xTaskCreate>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d001      	beq.n	8002c54 <osThreadNew+0x140>
          hTask = NULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c54:	693b      	ldr	r3, [r7, #16]
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b00c      	add	sp, #48	; 0x30
 8002c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	20000094 	.word	0x20000094

08002c64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c6c:	f3ef 8305 	mrs	r3, IPSR
 8002c70:	613b      	str	r3, [r7, #16]
  return(result);
 8002c72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c78:	f3ef 8310 	mrs	r3, PRIMASK
 8002c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <osDelay+0x30>
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <osDelay+0x4c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d103      	bne.n	8002c94 <osDelay+0x30>
    stat = osErrorISR;
 8002c8c:	2306      	movs	r3, #6
 8002c8e:	425b      	negs	r3, r3
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e008      	b.n	8002ca6 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <osDelay+0x42>
      vTaskDelay(ticks);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 fe97 	bl	80039d4 <vTaskDelay>
    }
  }

  return (stat);
 8002ca6:	697b      	ldr	r3, [r7, #20]
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b006      	add	sp, #24
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000094 	.word	0x20000094

08002cb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <vApplicationGetIdleTaskMemory+0x28>)
 8002cc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002cca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	601a      	str	r2, [r3, #0]
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	20000098 	.word	0x20000098
 8002ce0:	20000154 	.word	0x20000154

08002ce4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <vApplicationGetTimerTaskMemory+0x28>)
 8002cf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	0052      	lsls	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b004      	add	sp, #16
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000354 	.word	0x20000354
 8002d10:	20000410 	.word	0x20000410

08002d14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3308      	adds	r3, #8
 8002d20:	001a      	movs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4252      	negs	r2, r2
 8002d2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3308      	adds	r3, #8
 8002d32:	001a      	movs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	601a      	str	r2, [r3, #0]
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}

08002daa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	d103      	bne.n	8002dc8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	e00c      	b.n	8002de2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e002      	b.n	8002dd6 <vListInsert+0x2c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d2f6      	bcs.n	8002dd0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	601a      	str	r2, [r3, #0]
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6892      	ldr	r2, [r2, #8]
 8002e2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6852      	ldr	r2, [r2, #4]
 8002e36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d103      	bne.n	8002e4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1e5a      	subs	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b004      	add	sp, #16
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <xQueueGenericReset+0x18>
 8002e7a:	b672      	cpsid	i
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8002e7e:	f001 fdf7 	bl	8004a70 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	434b      	muls	r3, r1
 8002e90:	18d2      	adds	r2, r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	1e59      	subs	r1, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	434b      	muls	r3, r1
 8002eb4:	18d2      	adds	r2, r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2244      	movs	r2, #68	; 0x44
 8002ebe:	21ff      	movs	r1, #255	; 0xff
 8002ec0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2245      	movs	r2, #69	; 0x45
 8002ec6:	21ff      	movs	r1, #255	; 0xff
 8002ec8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3310      	adds	r3, #16
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 fff5 	bl	8003ecc <xTaskRemoveFromEventList>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d00c      	beq.n	8002f00 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ee6:	f001 fdb3 	bl	8004a50 <vPortYield>
 8002eea:	e009      	b.n	8002f00 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3310      	adds	r3, #16
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7ff ff0f 	bl	8002d14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3324      	adds	r3, #36	; 0x24
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff ff0a 	bl	8002d14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f00:	f001 fdc8 	bl	8004a94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f04:	2301      	movs	r3, #1
}
 8002f06:	0018      	movs	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f0e:	b590      	push	{r4, r7, lr}
 8002f10:	b089      	sub	sp, #36	; 0x24
 8002f12:	af02      	add	r7, sp, #8
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <xQueueGenericCreateStatic+0x18>
 8002f22:	b672      	cpsid	i
 8002f24:	e7fe      	b.n	8002f24 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <xQueueGenericCreateStatic+0x22>
 8002f2c:	b672      	cpsid	i
 8002f2e:	e7fe      	b.n	8002f2e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <xQueueGenericCreateStatic+0x2e>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <xQueueGenericCreateStatic+0x32>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <xQueueGenericCreateStatic+0x34>
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <xQueueGenericCreateStatic+0x3c>
 8002f46:	b672      	cpsid	i
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <xQueueGenericCreateStatic+0x48>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <xQueueGenericCreateStatic+0x4c>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <xQueueGenericCreateStatic+0x4e>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <xQueueGenericCreateStatic+0x56>
 8002f60:	b672      	cpsid	i
 8002f62:	e7fe      	b.n	8002f62 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f64:	2350      	movs	r3, #80	; 0x50
 8002f66:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b50      	cmp	r3, #80	; 0x50
 8002f6c:	d001      	beq.n	8002f72 <xQueueGenericCreateStatic+0x64>
 8002f6e:	b672      	cpsid	i
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00e      	beq.n	8002f9a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2246      	movs	r2, #70	; 0x46
 8002f80:	2101      	movs	r1, #1
 8002f82:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f84:	2328      	movs	r3, #40	; 0x28
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	781c      	ldrb	r4, [r3, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	0023      	movs	r3, r4
 8002f96:	f000 f805 	bl	8002fa4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f9a:	697b      	ldr	r3, [r7, #20]
	}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b007      	add	sp, #28
 8002fa2:	bd90      	pop	{r4, r7, pc}

08002fa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	1cfb      	adds	r3, r7, #3
 8002fb4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d103      	bne.n	8002fc4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	e002      	b.n	8002fca <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2101      	movs	r1, #1
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f7ff ff43 	bl	8002e66 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1cfa      	adds	r2, r7, #3
 8002fe4:	214c      	movs	r1, #76	; 0x4c
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b004      	add	sp, #16
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b08a      	sub	sp, #40	; 0x28
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <xQueueGenericSend+0x20>
 800300e:	b672      	cpsid	i
 8003010:	e7fe      	b.n	8003010 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <xQueueGenericSend+0x2e>
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <xQueueGenericSend+0x32>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <xQueueGenericSend+0x34>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <xQueueGenericSend+0x3c>
 800302a:	b672      	cpsid	i
 800302c:	e7fe      	b.n	800302c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d103      	bne.n	800303c <xQueueGenericSend+0x4a>
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <xQueueGenericSend+0x4e>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <xQueueGenericSend+0x50>
 8003040:	2300      	movs	r3, #0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <xQueueGenericSend+0x58>
 8003046:	b672      	cpsid	i
 8003048:	e7fe      	b.n	8003048 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800304a:	f001 f8dd 	bl	8004208 <xTaskGetSchedulerState>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d102      	bne.n	8003058 <xQueueGenericSend+0x66>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <xQueueGenericSend+0x6a>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <xQueueGenericSend+0x6c>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <xQueueGenericSend+0x74>
 8003062:	b672      	cpsid	i
 8003064:	e7fe      	b.n	8003064 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003066:	f001 fd03 	bl	8004a70 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <xQueueGenericSend+0x8a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d11e      	bne.n	80030ba <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	0018      	movs	r0, r3
 8003084:	f000 f99f 	bl	80033c6 <prvCopyDataToQueue>
 8003088:	0003      	movs	r3, r0
 800308a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	3324      	adds	r3, #36	; 0x24
 8003098:	0018      	movs	r0, r3
 800309a:	f000 ff17 	bl	8003ecc <xTaskRemoveFromEventList>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d007      	beq.n	80030b2 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030a2:	f001 fcd5 	bl	8004a50 <vPortYield>
 80030a6:	e004      	b.n	80030b2 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030ae:	f001 fccf 	bl	8004a50 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030b2:	f001 fcef 	bl	8004a94 <vPortExitCritical>
				return pdPASS;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e05b      	b.n	8003172 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030c0:	f001 fce8 	bl	8004a94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e054      	b.n	8003172 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030ce:	2314      	movs	r3, #20
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 ff56 	bl	8003f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030d8:	2301      	movs	r3, #1
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030dc:	f001 fcda 	bl	8004a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030e0:	f000 fcfc 	bl	8003adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030e4:	f001 fcc4 	bl	8004a70 <vPortEnterCritical>
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	2244      	movs	r2, #68	; 0x44
 80030ec:	5c9b      	ldrb	r3, [r3, r2]
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	d103      	bne.n	80030fc <xQueueGenericSend+0x10a>
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	2244      	movs	r2, #68	; 0x44
 80030f8:	2100      	movs	r1, #0
 80030fa:	5499      	strb	r1, [r3, r2]
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2245      	movs	r2, #69	; 0x45
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	b25b      	sxtb	r3, r3
 8003104:	3301      	adds	r3, #1
 8003106:	d103      	bne.n	8003110 <xQueueGenericSend+0x11e>
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	2245      	movs	r2, #69	; 0x45
 800310c:	2100      	movs	r1, #0
 800310e:	5499      	strb	r1, [r3, r2]
 8003110:	f001 fcc0 	bl	8004a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003114:	1d3a      	adds	r2, r7, #4
 8003116:	2314      	movs	r3, #20
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	0011      	movs	r1, r2
 800311c:	0018      	movs	r0, r3
 800311e:	f000 ff45 	bl	8003fac <xTaskCheckForTimeOut>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d11e      	bne.n	8003164 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 fa51 	bl	80035d0 <prvIsQueueFull>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d011      	beq.n	8003156 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	3310      	adds	r3, #16
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	0011      	movs	r1, r2
 800313a:	0018      	movs	r0, r3
 800313c:	f000 fe82 	bl	8003e44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	0018      	movs	r0, r3
 8003144:	f000 f9d0 	bl	80034e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003148:	f000 fcd4 	bl	8003af4 <xTaskResumeAll>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d18a      	bne.n	8003066 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003150:	f001 fc7e 	bl	8004a50 <vPortYield>
 8003154:	e787      	b.n	8003066 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 f9c5 	bl	80034e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800315e:	f000 fcc9 	bl	8003af4 <xTaskResumeAll>
 8003162:	e780      	b.n	8003066 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 f9be 	bl	80034e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800316c:	f000 fcc2 	bl	8003af4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003170:	2300      	movs	r3, #0
		}
	}
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b00a      	add	sp, #40	; 0x28
 8003178:	bd80      	pop	{r7, pc}

0800317a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800317a:	b590      	push	{r4, r7, lr}
 800317c:	b089      	sub	sp, #36	; 0x24
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <xQueueGenericSendFromISR+0x1c>
 8003192:	b672      	cpsid	i
 8003194:	e7fe      	b.n	8003194 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <xQueueGenericSendFromISR+0x2a>
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <xQueueGenericSendFromISR+0x2e>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <xQueueGenericSendFromISR+0x30>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <xQueueGenericSendFromISR+0x38>
 80031ae:	b672      	cpsid	i
 80031b0:	e7fe      	b.n	80031b0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d103      	bne.n	80031c0 <xQueueGenericSendFromISR+0x46>
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <xQueueGenericSendFromISR+0x4a>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <xQueueGenericSendFromISR+0x4c>
 80031c4:	2300      	movs	r3, #0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <xQueueGenericSendFromISR+0x54>
 80031ca:	b672      	cpsid	i
 80031cc:	e7fe      	b.n	80031cc <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031ce:	f001 fc79 	bl	8004ac4 <ulSetInterruptMaskFromISR>
 80031d2:	0003      	movs	r3, r0
 80031d4:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <xQueueGenericSendFromISR+0x6e>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d12e      	bne.n	8003246 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031e8:	2413      	movs	r4, #19
 80031ea:	193b      	adds	r3, r7, r4
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	2145      	movs	r1, #69	; 0x45
 80031f0:	5c52      	ldrb	r2, [r2, r1]
 80031f2:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 f8e3 	bl	80033c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003200:	193b      	adds	r3, r7, r4
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b25b      	sxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	d111      	bne.n	800322e <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	3324      	adds	r3, #36	; 0x24
 8003216:	0018      	movs	r0, r3
 8003218:	f000 fe58 	bl	8003ecc <xTaskRemoveFromEventList>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d00f      	beq.n	8003240 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00c      	beq.n	8003240 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e008      	b.n	8003240 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800322e:	2313      	movs	r3, #19
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	b259      	sxtb	r1, r3
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2245      	movs	r2, #69	; 0x45
 800323e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003240:	2301      	movs	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
		{
 8003244:	e001      	b.n	800324a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	0018      	movs	r0, r3
 800324e:	f001 fc3f 	bl	8004ad0 <vClearInterruptMaskFromISR>

	return xReturn;
 8003252:	69fb      	ldr	r3, [r7, #28]
}
 8003254:	0018      	movs	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	b009      	add	sp, #36	; 0x24
 800325a:	bd90      	pop	{r4, r7, pc}

0800325c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <xQueueReceive+0x1e>
 8003276:	b672      	cpsid	i
 8003278:	e7fe      	b.n	8003278 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <xQueueReceive+0x2c>
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <xQueueReceive+0x30>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <xQueueReceive+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <xQueueReceive+0x3a>
 8003292:	b672      	cpsid	i
 8003294:	e7fe      	b.n	8003294 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003296:	f000 ffb7 	bl	8004208 <xTaskGetSchedulerState>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d102      	bne.n	80032a4 <xQueueReceive+0x48>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <xQueueReceive+0x4c>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <xQueueReceive+0x4e>
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <xQueueReceive+0x56>
 80032ae:	b672      	cpsid	i
 80032b0:	e7fe      	b.n	80032b0 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032b2:	f001 fbdd 	bl	8004a70 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01a      	beq.n	80032f8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	0011      	movs	r1, r2
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 f8e7 	bl	800349c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	1e5a      	subs	r2, r3, #1
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	3310      	adds	r3, #16
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 fdf2 	bl	8003ecc <xTaskRemoveFromEventList>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d001      	beq.n	80032f0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032ec:	f001 fbb0 	bl	8004a50 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032f0:	f001 fbd0 	bl	8004a94 <vPortExitCritical>
				return pdPASS;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e062      	b.n	80033be <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032fe:	f001 fbc9 	bl	8004a94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003302:	2300      	movs	r3, #0
 8003304:	e05b      	b.n	80033be <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800330c:	2314      	movs	r3, #20
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	0018      	movs	r0, r3
 8003312:	f000 fe37 	bl	8003f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003316:	2301      	movs	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800331a:	f001 fbbb 	bl	8004a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800331e:	f000 fbdd 	bl	8003adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003322:	f001 fba5 	bl	8004a70 <vPortEnterCritical>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	2244      	movs	r2, #68	; 0x44
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	b25b      	sxtb	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	d103      	bne.n	800333a <xQueueReceive+0xde>
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	2244      	movs	r2, #68	; 0x44
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	2245      	movs	r2, #69	; 0x45
 800333e:	5c9b      	ldrb	r3, [r3, r2]
 8003340:	b25b      	sxtb	r3, r3
 8003342:	3301      	adds	r3, #1
 8003344:	d103      	bne.n	800334e <xQueueReceive+0xf2>
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	2245      	movs	r2, #69	; 0x45
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]
 800334e:	f001 fba1 	bl	8004a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003352:	1d3a      	adds	r2, r7, #4
 8003354:	2314      	movs	r3, #20
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	0011      	movs	r1, r2
 800335a:	0018      	movs	r0, r3
 800335c:	f000 fe26 	bl	8003fac <xTaskCheckForTimeOut>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d11e      	bne.n	80033a2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f91c 	bl	80035a4 <prvIsQueueEmpty>
 800336c:	1e03      	subs	r3, r0, #0
 800336e:	d011      	beq.n	8003394 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	3324      	adds	r3, #36	; 0x24
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	0011      	movs	r1, r2
 8003378:	0018      	movs	r0, r3
 800337a:	f000 fd63 	bl	8003e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	0018      	movs	r0, r3
 8003382:	f000 f8b1 	bl	80034e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003386:	f000 fbb5 	bl	8003af4 <xTaskResumeAll>
 800338a:	1e03      	subs	r3, r0, #0
 800338c:	d191      	bne.n	80032b2 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800338e:	f001 fb5f 	bl	8004a50 <vPortYield>
 8003392:	e78e      	b.n	80032b2 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	0018      	movs	r0, r3
 8003398:	f000 f8a6 	bl	80034e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800339c:	f000 fbaa 	bl	8003af4 <xTaskResumeAll>
 80033a0:	e787      	b.n	80032b2 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 f89f 	bl	80034e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033aa:	f000 fba3 	bl	8003af4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 f8f7 	bl	80035a4 <prvIsQueueEmpty>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d100      	bne.n	80033bc <xQueueReceive+0x160>
 80033ba:	e77a      	b.n	80032b2 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b00a      	add	sp, #40	; 0x28
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10e      	bne.n	8003402 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d14e      	bne.n	800348a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 ff25 	bl	8004240 <xTaskPriorityDisinherit>
 80033f6:	0003      	movs	r3, r0
 80033f8:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	e043      	b.n	800348a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d119      	bne.n	800343c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6898      	ldr	r0, [r3, #8]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	0019      	movs	r1, r3
 8003414:	f001 fdbc 	bl	8004f90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	18d2      	adds	r2, r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	d32b      	bcc.n	800348a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	e026      	b.n	800348a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68d8      	ldr	r0, [r3, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	0019      	movs	r1, r3
 8003448:	f001 fda2 	bl	8004f90 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	425b      	negs	r3, r3
 8003456:	18d2      	adds	r2, r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d207      	bcs.n	8003478 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	425b      	negs	r3, r3
 8003472:	18d2      	adds	r2, r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d105      	bne.n	800348a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	3b01      	subs	r3, #1
 8003488:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003492:	697b      	ldr	r3, [r7, #20]
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b006      	add	sp, #24
 800349a:	bd80      	pop	{r7, pc}

0800349c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	18d2      	adds	r2, r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d303      	bcc.n	80034d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68d9      	ldr	r1, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	0018      	movs	r0, r3
 80034dc:	f001 fd58 	bl	8004f90 <memcpy>
	}
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034f0:	f001 fabe 	bl	8004a70 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034f4:	230f      	movs	r3, #15
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	2145      	movs	r1, #69	; 0x45
 80034fc:	5c52      	ldrb	r2, [r2, r1]
 80034fe:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003500:	e013      	b.n	800352a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3324      	adds	r3, #36	; 0x24
 800350e:	0018      	movs	r0, r3
 8003510:	f000 fcdc 	bl	8003ecc <xTaskRemoveFromEventList>
 8003514:	1e03      	subs	r3, r0, #0
 8003516:	d001      	beq.n	800351c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003518:	f000 fd98 	bl	800404c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800351c:	210f      	movs	r1, #15
 800351e:	187b      	adds	r3, r7, r1
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	3b01      	subs	r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	187b      	adds	r3, r7, r1
 8003528:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800352a:	230f      	movs	r3, #15
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b25b      	sxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	dce5      	bgt.n	8003502 <prvUnlockQueue+0x1a>
 8003536:	e000      	b.n	800353a <prvUnlockQueue+0x52>
					break;
 8003538:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2245      	movs	r2, #69	; 0x45
 800353e:	21ff      	movs	r1, #255	; 0xff
 8003540:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003542:	f001 faa7 	bl	8004a94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003546:	f001 fa93 	bl	8004a70 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800354a:	230e      	movs	r3, #14
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	2144      	movs	r1, #68	; 0x44
 8003552:	5c52      	ldrb	r2, [r2, r1]
 8003554:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003556:	e013      	b.n	8003580 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d016      	beq.n	800358e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3310      	adds	r3, #16
 8003564:	0018      	movs	r0, r3
 8003566:	f000 fcb1 	bl	8003ecc <xTaskRemoveFromEventList>
 800356a:	1e03      	subs	r3, r0, #0
 800356c:	d001      	beq.n	8003572 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800356e:	f000 fd6d 	bl	800404c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003572:	210e      	movs	r1, #14
 8003574:	187b      	adds	r3, r7, r1
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	3b01      	subs	r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	187b      	adds	r3, r7, r1
 800357e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003580:	230e      	movs	r3, #14
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b25b      	sxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	dce5      	bgt.n	8003558 <prvUnlockQueue+0x70>
 800358c:	e000      	b.n	8003590 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800358e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2244      	movs	r2, #68	; 0x44
 8003594:	21ff      	movs	r1, #255	; 0xff
 8003596:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003598:	f001 fa7c 	bl	8004a94 <vPortExitCritical>
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b004      	add	sp, #16
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035ac:	f001 fa60 	bl	8004a70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e001      	b.n	80035c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035c2:	f001 fa67 	bl	8004a94 <vPortExitCritical>

	return xReturn;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b004      	add	sp, #16
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035d8:	f001 fa4a 	bl	8004a70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d102      	bne.n	80035ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e001      	b.n	80035f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035f2:	f001 fa4f 	bl	8004a94 <vPortExitCritical>

	return xReturn;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b004      	add	sp, #16
 80035fe:	bd80      	pop	{r7, pc}

08003600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e015      	b.n	800363c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <vQueueAddToRegistry+0x4c>)
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	00d2      	lsls	r2, r2, #3
 8003616:	58d3      	ldr	r3, [r2, r3]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10c      	bne.n	8003636 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <vQueueAddToRegistry+0x4c>)
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	00d2      	lsls	r2, r2, #3
 8003622:	6839      	ldr	r1, [r7, #0]
 8003624:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <vQueueAddToRegistry+0x4c>)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	3304      	adds	r3, #4
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003634:	e006      	b.n	8003644 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3301      	adds	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b07      	cmp	r3, #7
 8003640:	d9e6      	bls.n	8003610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b004      	add	sp, #16
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20001bc8 	.word	0x20001bc8

08003650 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003660:	f001 fa06 	bl	8004a70 <vPortEnterCritical>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2244      	movs	r2, #68	; 0x44
 8003668:	5c9b      	ldrb	r3, [r3, r2]
 800366a:	b25b      	sxtb	r3, r3
 800366c:	3301      	adds	r3, #1
 800366e:	d103      	bne.n	8003678 <vQueueWaitForMessageRestricted+0x28>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2244      	movs	r2, #68	; 0x44
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2245      	movs	r2, #69	; 0x45
 800367c:	5c9b      	ldrb	r3, [r3, r2]
 800367e:	b25b      	sxtb	r3, r3
 8003680:	3301      	adds	r3, #1
 8003682:	d103      	bne.n	800368c <vQueueWaitForMessageRestricted+0x3c>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2245      	movs	r2, #69	; 0x45
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]
 800368c:	f001 fa02 	bl	8004a94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3324      	adds	r3, #36	; 0x24
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 fbed 	bl	8003e80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7ff ff1d 	bl	80034e8 <prvUnlockQueue>
	}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b006      	add	sp, #24
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036b6:	b590      	push	{r4, r7, lr}
 80036b8:	b08d      	sub	sp, #52	; 0x34
 80036ba:	af04      	add	r7, sp, #16
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <xTaskCreateStatic+0x18>
 80036ca:	b672      	cpsid	i
 80036cc:	e7fe      	b.n	80036cc <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <xTaskCreateStatic+0x22>
 80036d4:	b672      	cpsid	i
 80036d6:	e7fe      	b.n	80036d6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036d8:	23bc      	movs	r3, #188	; 0xbc
 80036da:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2bbc      	cmp	r3, #188	; 0xbc
 80036e0:	d001      	beq.n	80036e6 <xTaskCreateStatic+0x30>
 80036e2:	b672      	cpsid	i
 80036e4:	e7fe      	b.n	80036e4 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <xTaskCreateStatic+0x78>
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01d      	beq.n	800372e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	22b9      	movs	r2, #185	; 0xb9
 8003700:	2102      	movs	r1, #2
 8003702:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003704:	683c      	ldr	r4, [r7, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	2300      	movs	r3, #0
 800370e:	9303      	str	r3, [sp, #12]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	9302      	str	r3, [sp, #8]
 8003714:	2318      	movs	r3, #24
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	0023      	movs	r3, r4
 8003720:	f000 f858 	bl	80037d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	0018      	movs	r0, r3
 8003728:	f000 f8ec 	bl	8003904 <prvAddNewTaskToReadyList>
 800372c:	e001      	b.n	8003732 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003732:	69bb      	ldr	r3, [r7, #24]
	}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b009      	add	sp, #36	; 0x24
 800373a:	bd90      	pop	{r4, r7, pc}

0800373c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b08d      	sub	sp, #52	; 0x34
 8003740:	af04      	add	r7, sp, #16
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	1dbb      	adds	r3, r7, #6
 800374a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374c:	1dbb      	adds	r3, r7, #6
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	0018      	movs	r0, r3
 8003754:	f001 fa24 	bl	8004ba0 <pvPortMalloc>
 8003758:	0003      	movs	r3, r0
 800375a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003762:	20bc      	movs	r0, #188	; 0xbc
 8003764:	f001 fa1c 	bl	8004ba0 <pvPortMalloc>
 8003768:	0003      	movs	r3, r0
 800376a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
 8003778:	e006      	b.n	8003788 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	0018      	movs	r0, r3
 800377e:	f001 fab5 	bl	8004cec <vPortFree>
 8003782:	e001      	b.n	8003788 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01a      	beq.n	80037c4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	22b9      	movs	r2, #185	; 0xb9
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003796:	1dbb      	adds	r3, r7, #6
 8003798:	881a      	ldrh	r2, [r3, #0]
 800379a:	683c      	ldr	r4, [r7, #0]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	2300      	movs	r3, #0
 80037a2:	9303      	str	r3, [sp, #12]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	0023      	movs	r3, r4
 80037b2:	f000 f80f 	bl	80037d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f000 f8a3 	bl	8003904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037be:	2301      	movs	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e002      	b.n	80037ca <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037c4:	2301      	movs	r3, #1
 80037c6:	425b      	negs	r3, r3
 80037c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037ca:	69bb      	ldr	r3, [r7, #24]
	}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b009      	add	sp, #36	; 0x24
 80037d2:	bd90      	pop	{r4, r7, pc}

080037d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	001a      	movs	r2, r3
 80037ec:	21a5      	movs	r1, #165	; 0xa5
 80037ee:	f001 fbd8 	bl	8004fa2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	493e      	ldr	r1, [pc, #248]	; (80038f4 <prvInitialiseNewTask+0x120>)
 80037fa:	468c      	mov	ip, r1
 80037fc:	4463      	add	r3, ip
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	18d3      	adds	r3, r2, r3
 8003802:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2207      	movs	r2, #7
 8003808:	4393      	bics	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2207      	movs	r2, #7
 8003810:	4013      	ands	r3, r2
 8003812:	d001      	beq.n	8003818 <prvInitialiseNewTask+0x44>
 8003814:	b672      	cpsid	i
 8003816:	e7fe      	b.n	8003816 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e013      	b.n	8003846 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	18d3      	adds	r3, r2, r3
 8003824:	7818      	ldrb	r0, [r3, #0]
 8003826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003828:	2134      	movs	r1, #52	; 0x34
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	18d3      	adds	r3, r2, r3
 800382e:	185b      	adds	r3, r3, r1
 8003830:	1c02      	adds	r2, r0, #0
 8003832:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	18d3      	adds	r3, r2, r3
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b0f      	cmp	r3, #15
 800384a:	d9e8      	bls.n	800381e <prvInitialiseNewTask+0x4a>
 800384c:	e000      	b.n	8003850 <prvInitialiseNewTask+0x7c>
		{
			break;
 800384e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	2243      	movs	r2, #67	; 0x43
 8003854:	2100      	movs	r1, #0
 8003856:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	2b37      	cmp	r3, #55	; 0x37
 800385c:	d901      	bls.n	8003862 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800385e:	2337      	movs	r3, #55	; 0x37
 8003860:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	6a3a      	ldr	r2, [r7, #32]
 800386c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	2200      	movs	r2, #0
 8003872:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	3304      	adds	r3, #4
 8003878:	0018      	movs	r0, r3
 800387a:	f7ff fa69 	bl	8002d50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	3318      	adds	r3, #24
 8003882:	0018      	movs	r0, r3
 8003884:	f7ff fa64 	bl	8002d50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	2238      	movs	r2, #56	; 0x38
 8003892:	1ad2      	subs	r2, r2, r3
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	22b4      	movs	r2, #180	; 0xb4
 80038a2:	2100      	movs	r1, #0
 80038a4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	22b8      	movs	r2, #184	; 0xb8
 80038aa:	2100      	movs	r1, #0
 80038ac:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	3354      	adds	r3, #84	; 0x54
 80038b2:	2260      	movs	r2, #96	; 0x60
 80038b4:	2100      	movs	r1, #0
 80038b6:	0018      	movs	r0, r3
 80038b8:	f001 fb73 	bl	8004fa2 <memset>
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <prvInitialiseNewTask+0x124>)
 80038c0:	659a      	str	r2, [r3, #88]	; 0x58
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	4a0d      	ldr	r2, [pc, #52]	; (80038fc <prvInitialiseNewTask+0x128>)
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <prvInitialiseNewTask+0x12c>)
 80038cc:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f001 f833 	bl	8004940 <pxPortInitialiseStack>
 80038da:	0002      	movs	r2, r0
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b006      	add	sp, #24
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	3fffffff 	.word	0x3fffffff
 80038f8:	08005508 	.word	0x08005508
 80038fc:	08005528 	.word	0x08005528
 8003900:	080054e8 	.word	0x080054e8

08003904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800390c:	f001 f8b0 	bl	8004a70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003910:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <prvAddNewTaskToReadyList+0xb8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <prvAddNewTaskToReadyList+0xb8>)
 8003918:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <prvAddNewTaskToReadyList+0xbc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003922:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <prvAddNewTaskToReadyList+0xbc>)
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <prvAddNewTaskToReadyList+0xb8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d110      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003930:	f000 fba6 	bl	8004080 <prvInitialiseTaskLists>
 8003934:	e00d      	b.n	8003952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003936:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <prvAddNewTaskToReadyList+0xc0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <prvAddNewTaskToReadyList+0xbc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d802      	bhi.n	8003952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800394c:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <prvAddNewTaskToReadyList+0xbc>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 800395a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4b18      	ldr	r3, [pc, #96]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d903      	bls.n	8003978 <prvAddNewTaskToReadyList+0x74>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	0013      	movs	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	189b      	adds	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <prvAddNewTaskToReadyList+0xcc>)
 8003986:	189a      	adds	r2, r3, r2
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	0019      	movs	r1, r3
 800398e:	0010      	movs	r0, r2
 8003990:	f7ff f9e9 	bl	8002d66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003994:	f001 f87e 	bl	8004a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <prvAddNewTaskToReadyList+0xc0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <prvAddNewTaskToReadyList+0xbc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d201      	bcs.n	80039b2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ae:	f001 f84f 	bl	8004a50 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b002      	add	sp, #8
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	20000ce4 	.word	0x20000ce4
 80039c0:	20000810 	.word	0x20000810
 80039c4:	20000cf0 	.word	0x20000cf0
 80039c8:	20000d00 	.word	0x20000d00
 80039cc:	20000cec 	.word	0x20000cec
 80039d0:	20000814 	.word	0x20000814

080039d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d010      	beq.n	8003a08 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <vTaskDelay+0x48>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <vTaskDelay+0x1e>
 80039ee:	b672      	cpsid	i
 80039f0:	e7fe      	b.n	80039f0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80039f2:	f000 f873 	bl	8003adc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2100      	movs	r1, #0
 80039fa:	0018      	movs	r0, r3
 80039fc:	f000 fc7c 	bl	80042f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a00:	f000 f878 	bl	8003af4 <xTaskResumeAll>
 8003a04:	0003      	movs	r3, r0
 8003a06:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003a0e:	f001 f81f 	bl	8004a50 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b004      	add	sp, #16
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	20000d0c 	.word	0x20000d0c

08003a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a2e:	003a      	movs	r2, r7
 8003a30:	1d39      	adds	r1, r7, #4
 8003a32:	2308      	movs	r3, #8
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7ff f93c 	bl	8002cb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a3c:	683c      	ldr	r4, [r7, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	491e      	ldr	r1, [pc, #120]	; (8003abc <vTaskStartScheduler+0x9c>)
 8003a44:	481e      	ldr	r0, [pc, #120]	; (8003ac0 <vTaskStartScheduler+0xa0>)
 8003a46:	9202      	str	r2, [sp, #8]
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	0022      	movs	r2, r4
 8003a52:	f7ff fe30 	bl	80036b6 <xTaskCreateStatic>
 8003a56:	0002      	movs	r2, r0
 8003a58:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <vTaskStartScheduler+0xa4>)
 8003a5a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <vTaskStartScheduler+0xa4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a64:	2301      	movs	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e001      	b.n	8003a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d103      	bne.n	8003a7c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003a74:	f000 fc94 	bl	80043a0 <xTimerCreateTimerTask>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d113      	bne.n	8003aaa <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003a82:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <vTaskStartScheduler+0xa8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3354      	adds	r3, #84	; 0x54
 8003a8a:	001a      	movs	r2, r3
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <vTaskStartScheduler+0xac>)
 8003a8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <vTaskStartScheduler+0xb0>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	4252      	negs	r2, r2
 8003a96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <vTaskStartScheduler+0xb4>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <vTaskStartScheduler+0xb8>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aa4:	f000 ffb0 	bl	8004a08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003aa8:	e004      	b.n	8003ab4 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <vTaskStartScheduler+0x94>
 8003ab0:	b672      	cpsid	i
 8003ab2:	e7fe      	b.n	8003ab2 <vTaskStartScheduler+0x92>
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b005      	add	sp, #20
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	0800546c 	.word	0x0800546c
 8003ac0:	08004061 	.word	0x08004061
 8003ac4:	20000d08 	.word	0x20000d08
 8003ac8:	20000810 	.word	0x20000810
 8003acc:	2000000c 	.word	0x2000000c
 8003ad0:	20000d04 	.word	0x20000d04
 8003ad4:	20000cf0 	.word	0x20000cf0
 8003ad8:	20000ce8 	.word	0x20000ce8

08003adc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <vTaskSuspendAll+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	4b02      	ldr	r3, [pc, #8]	; (8003af0 <vTaskSuspendAll+0x14>)
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000d0c 	.word	0x20000d0c

08003af4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b02:	4b3a      	ldr	r3, [pc, #232]	; (8003bec <xTaskResumeAll+0xf8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <xTaskResumeAll+0x1a>
 8003b0a:	b672      	cpsid	i
 8003b0c:	e7fe      	b.n	8003b0c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b0e:	f000 ffaf 	bl	8004a70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b12:	4b36      	ldr	r3, [pc, #216]	; (8003bec <xTaskResumeAll+0xf8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	1e5a      	subs	r2, r3, #1
 8003b18:	4b34      	ldr	r3, [pc, #208]	; (8003bec <xTaskResumeAll+0xf8>)
 8003b1a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1c:	4b33      	ldr	r3, [pc, #204]	; (8003bec <xTaskResumeAll+0xf8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d15b      	bne.n	8003bdc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b24:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <xTaskResumeAll+0xfc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d057      	beq.n	8003bdc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b2c:	e02f      	b.n	8003b8e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b2e:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <xTaskResumeAll+0x100>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3318      	adds	r3, #24
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7ff f96b 	bl	8002e16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3304      	adds	r3, #4
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7ff f966 	bl	8002e16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <xTaskResumeAll+0x104>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d903      	bls.n	8003b5e <xTaskResumeAll+0x6a>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <xTaskResumeAll+0x104>)
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b62:	0013      	movs	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4a24      	ldr	r2, [pc, #144]	; (8003bfc <xTaskResumeAll+0x108>)
 8003b6c:	189a      	adds	r2, r3, r2
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3304      	adds	r3, #4
 8003b72:	0019      	movs	r1, r3
 8003b74:	0010      	movs	r0, r2
 8003b76:	f7ff f8f6 	bl	8002d66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <xTaskResumeAll+0x10c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d302      	bcc.n	8003b8e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003b88:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <xTaskResumeAll+0x110>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <xTaskResumeAll+0x100>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1cb      	bne.n	8003b2e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b9c:	f000 fb10 	bl	80041c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <xTaskResumeAll+0x114>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00f      	beq.n	8003bcc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bac:	f000 f83c 	bl	8003c28 <xTaskIncrementTick>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d002      	beq.n	8003bba <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <xTaskResumeAll+0x110>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f2      	bne.n	8003bac <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <xTaskResumeAll+0x114>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <xTaskResumeAll+0x110>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bd8:	f000 ff3a 	bl	8004a50 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bdc:	f000 ff5a 	bl	8004a94 <vPortExitCritical>

	return xAlreadyYielded;
 8003be0:	68bb      	ldr	r3, [r7, #8]
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b004      	add	sp, #16
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	20000d0c 	.word	0x20000d0c
 8003bf0:	20000ce4 	.word	0x20000ce4
 8003bf4:	20000ca4 	.word	0x20000ca4
 8003bf8:	20000cec 	.word	0x20000cec
 8003bfc:	20000814 	.word	0x20000814
 8003c00:	20000810 	.word	0x20000810
 8003c04:	20000cf8 	.word	0x20000cf8
 8003c08:	20000cf4 	.word	0x20000cf4

08003c0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c12:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <xTaskGetTickCount+0x18>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c18:	687b      	ldr	r3, [r7, #4]
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b002      	add	sp, #8
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	20000ce8 	.word	0x20000ce8

08003c28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c32:	4b4c      	ldr	r3, [pc, #304]	; (8003d64 <xTaskIncrementTick+0x13c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d000      	beq.n	8003c3c <xTaskIncrementTick+0x14>
 8003c3a:	e083      	b.n	8003d44 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c3c:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <xTaskIncrementTick+0x140>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c44:	4b48      	ldr	r3, [pc, #288]	; (8003d68 <xTaskIncrementTick+0x140>)
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d117      	bne.n	8003c80 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c50:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <xTaskIncrementTick+0x144>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <xTaskIncrementTick+0x36>
 8003c5a:	b672      	cpsid	i
 8003c5c:	e7fe      	b.n	8003c5c <xTaskIncrementTick+0x34>
 8003c5e:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <xTaskIncrementTick+0x144>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	4b42      	ldr	r3, [pc, #264]	; (8003d70 <xTaskIncrementTick+0x148>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b40      	ldr	r3, [pc, #256]	; (8003d6c <xTaskIncrementTick+0x144>)
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	4b40      	ldr	r3, [pc, #256]	; (8003d70 <xTaskIncrementTick+0x148>)
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	4b40      	ldr	r3, [pc, #256]	; (8003d74 <xTaskIncrementTick+0x14c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <xTaskIncrementTick+0x14c>)
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	f000 faa0 	bl	80041c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c80:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <xTaskIncrementTick+0x150>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d34e      	bcc.n	8003d28 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c8a:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <xTaskIncrementTick+0x144>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <xTaskIncrementTick+0x70>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <xTaskIncrementTick+0x72>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <xTaskIncrementTick+0x150>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	4252      	negs	r2, r2
 8003ca4:	601a      	str	r2, [r3, #0]
					break;
 8003ca6:	e03f      	b.n	8003d28 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ca8:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <xTaskIncrementTick+0x144>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d203      	bcs.n	8003cc8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <xTaskIncrementTick+0x150>)
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	601a      	str	r2, [r3, #0]
						break;
 8003cc6:	e02f      	b.n	8003d28 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7ff f8a2 	bl	8002e16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	3318      	adds	r3, #24
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7ff f899 	bl	8002e16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <xTaskIncrementTick+0x154>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d903      	bls.n	8003cf8 <xTaskIncrementTick+0xd0>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <xTaskIncrementTick+0x154>)
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	0013      	movs	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <xTaskIncrementTick+0x158>)
 8003d06:	189a      	adds	r2, r3, r2
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	0010      	movs	r0, r2
 8003d10:	f7ff f829 	bl	8002d66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <xTaskIncrementTick+0x15c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d3b3      	bcc.n	8003c8a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003d22:	2301      	movs	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d26:	e7b0      	b.n	8003c8a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <xTaskIncrementTick+0x15c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	4914      	ldr	r1, [pc, #80]	; (8003d80 <xTaskIncrementTick+0x158>)
 8003d30:	0013      	movs	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	585b      	ldr	r3, [r3, r1]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d907      	bls.n	8003d4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e004      	b.n	8003d4e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d44:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <xTaskIncrementTick+0x160>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <xTaskIncrementTick+0x160>)
 8003d4c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <xTaskIncrementTick+0x164>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d5a:	697b      	ldr	r3, [r7, #20]
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b006      	add	sp, #24
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000d0c 	.word	0x20000d0c
 8003d68:	20000ce8 	.word	0x20000ce8
 8003d6c:	20000c9c 	.word	0x20000c9c
 8003d70:	20000ca0 	.word	0x20000ca0
 8003d74:	20000cfc 	.word	0x20000cfc
 8003d78:	20000d04 	.word	0x20000d04
 8003d7c:	20000cec 	.word	0x20000cec
 8003d80:	20000814 	.word	0x20000814
 8003d84:	20000810 	.word	0x20000810
 8003d88:	20000cf4 	.word	0x20000cf4
 8003d8c:	20000cf8 	.word	0x20000cf8

08003d90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <vTaskSwitchContext+0x9c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d9e:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <vTaskSwitchContext+0xa0>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003da4:	e03d      	b.n	8003e22 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <vTaskSwitchContext+0xa0>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dac:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <vTaskSwitchContext+0xa4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	e007      	b.n	8003dc4 <vTaskSwitchContext+0x34>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <vTaskSwitchContext+0x2e>
 8003dba:	b672      	cpsid	i
 8003dbc:	e7fe      	b.n	8003dbc <vTaskSwitchContext+0x2c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	491c      	ldr	r1, [pc, #112]	; (8003e38 <vTaskSwitchContext+0xa8>)
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	0013      	movs	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	585b      	ldr	r3, [r3, r1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ee      	beq.n	8003db4 <vTaskSwitchContext+0x24>
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	0013      	movs	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <vTaskSwitchContext+0xa8>)
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d104      	bne.n	8003e06 <vTaskSwitchContext+0x76>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <vTaskSwitchContext+0xac>)
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <vTaskSwitchContext+0xa4>)
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <vTaskSwitchContext+0xac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3354      	adds	r3, #84	; 0x54
 8003e1c:	001a      	movs	r2, r3
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <vTaskSwitchContext+0xb0>)
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b002      	add	sp, #8
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	20000d0c 	.word	0x20000d0c
 8003e30:	20000cf8 	.word	0x20000cf8
 8003e34:	20000cec 	.word	0x20000cec
 8003e38:	20000814 	.word	0x20000814
 8003e3c:	20000810 	.word	0x20000810
 8003e40:	2000000c 	.word	0x2000000c

08003e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <vTaskPlaceOnEventList+0x14>
 8003e54:	b672      	cpsid	i
 8003e56:	e7fe      	b.n	8003e56 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <vTaskPlaceOnEventList+0x38>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3318      	adds	r3, #24
 8003e5e:	001a      	movs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	0011      	movs	r1, r2
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7fe ffa0 	bl	8002daa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 fa42 	bl	80042f8 <prvAddCurrentTaskToDelayedList>
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000810 	.word	0x20000810

08003e80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <vTaskPlaceOnEventListRestricted+0x16>
 8003e92:	b672      	cpsid	i
 8003e94:	e7fe      	b.n	8003e94 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <vTaskPlaceOnEventListRestricted+0x48>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7fe ff5f 	bl	8002d66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	425b      	negs	r3, r3
 8003eb2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	0011      	movs	r1, r2
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f000 fa1c 	bl	80042f8 <prvAddCurrentTaskToDelayedList>
	}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000810 	.word	0x20000810

08003ecc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <xTaskRemoveFromEventList+0x1a>
 8003ee2:	b672      	cpsid	i
 8003ee4:	e7fe      	b.n	8003ee4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	3318      	adds	r3, #24
 8003eea:	0018      	movs	r0, r3
 8003eec:	f7fe ff93 	bl	8002e16 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef0:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <xTaskRemoveFromEventList+0xa0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11d      	bne.n	8003f34 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	3304      	adds	r3, #4
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7fe ff8a 	bl	8002e16 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <xTaskRemoveFromEventList+0xa4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d903      	bls.n	8003f16 <xTaskRemoveFromEventList+0x4a>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <xTaskRemoveFromEventList+0xa4>)
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1a:	0013      	movs	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	189b      	adds	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <xTaskRemoveFromEventList+0xa8>)
 8003f24:	189a      	adds	r2, r3, r2
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	0010      	movs	r0, r2
 8003f2e:	f7fe ff1a 	bl	8002d66 <vListInsertEnd>
 8003f32:	e007      	b.n	8003f44 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3318      	adds	r3, #24
 8003f38:	001a      	movs	r2, r3
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <xTaskRemoveFromEventList+0xac>)
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f7fe ff11 	bl	8002d66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <xTaskRemoveFromEventList+0xb0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d905      	bls.n	8003f5e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <xTaskRemoveFromEventList+0xb4>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e001      	b.n	8003f62 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003f62:	68fb      	ldr	r3, [r7, #12]
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b004      	add	sp, #16
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000d0c 	.word	0x20000d0c
 8003f70:	20000cec 	.word	0x20000cec
 8003f74:	20000814 	.word	0x20000814
 8003f78:	20000ca4 	.word	0x20000ca4
 8003f7c:	20000810 	.word	0x20000810
 8003f80:	20000cf8 	.word	0x20000cf8

08003f84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <vTaskInternalSetTimeOutState+0x20>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <vTaskInternalSetTimeOutState+0x24>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	605a      	str	r2, [r3, #4]
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000cfc 	.word	0x20000cfc
 8003fa8:	20000ce8 	.word	0x20000ce8

08003fac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <xTaskCheckForTimeOut+0x14>
 8003fbc:	b672      	cpsid	i
 8003fbe:	e7fe      	b.n	8003fbe <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <xTaskCheckForTimeOut+0x1e>
 8003fc6:	b672      	cpsid	i
 8003fc8:	e7fe      	b.n	8003fc8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003fca:	f000 fd51 	bl	8004a70 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <xTaskCheckForTimeOut+0x98>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	d102      	bne.n	8003fec <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	e024      	b.n	8004036 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <xTaskCheckForTimeOut+0x9c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d007      	beq.n	8004008 <xTaskCheckForTimeOut+0x5c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004002:	2301      	movs	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e016      	b.n	8004036 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	429a      	cmp	r2, r3
 8004010:	d20c      	bcs.n	800402c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad2      	subs	r2, r2, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff ffaf 	bl	8003f84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e004      	b.n	8004036 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004032:	2301      	movs	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004036:	f000 fd2d 	bl	8004a94 <vPortExitCritical>

	return xReturn;
 800403a:	697b      	ldr	r3, [r7, #20]
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b006      	add	sp, #24
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000ce8 	.word	0x20000ce8
 8004048:	20000cfc 	.word	0x20000cfc

0800404c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004050:	4b02      	ldr	r3, [pc, #8]	; (800405c <vTaskMissedYield+0x10>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000cf8 	.word	0x20000cf8

08004060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004068:	f000 f84e 	bl	8004108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <prvIdleTask+0x1c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d9f9      	bls.n	8004068 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004074:	f000 fcec 	bl	8004a50 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004078:	e7f6      	b.n	8004068 <prvIdleTask+0x8>
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	20000814 	.word	0x20000814

08004080 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	e00c      	b.n	80040a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	0013      	movs	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	189b      	adds	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <prvInitialiseTaskLists+0x68>)
 8004098:	189b      	adds	r3, r3, r2
 800409a:	0018      	movs	r0, r3
 800409c:	f7fe fe3a 	bl	8002d14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3301      	adds	r3, #1
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b37      	cmp	r3, #55	; 0x37
 80040aa:	d9ef      	bls.n	800408c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <prvInitialiseTaskLists+0x6c>)
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7fe fe30 	bl	8002d14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <prvInitialiseTaskLists+0x70>)
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7fe fe2c 	bl	8002d14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <prvInitialiseTaskLists+0x74>)
 80040be:	0018      	movs	r0, r3
 80040c0:	f7fe fe28 	bl	8002d14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <prvInitialiseTaskLists+0x78>)
 80040c6:	0018      	movs	r0, r3
 80040c8:	f7fe fe24 	bl	8002d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <prvInitialiseTaskLists+0x7c>)
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7fe fe20 	bl	8002d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <prvInitialiseTaskLists+0x80>)
 80040d6:	4a05      	ldr	r2, [pc, #20]	; (80040ec <prvInitialiseTaskLists+0x6c>)
 80040d8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <prvInitialiseTaskLists+0x84>)
 80040dc:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <prvInitialiseTaskLists+0x70>)
 80040de:	601a      	str	r2, [r3, #0]
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000814 	.word	0x20000814
 80040ec:	20000c74 	.word	0x20000c74
 80040f0:	20000c88 	.word	0x20000c88
 80040f4:	20000ca4 	.word	0x20000ca4
 80040f8:	20000cb8 	.word	0x20000cb8
 80040fc:	20000cd0 	.word	0x20000cd0
 8004100:	20000c9c 	.word	0x20000c9c
 8004104:	20000ca0 	.word	0x20000ca0

08004108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800410e:	e01a      	b.n	8004146 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004110:	f000 fcae 	bl	8004a70 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004114:	4b10      	ldr	r3, [pc, #64]	; (8004158 <prvCheckTasksWaitingTermination+0x50>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	0018      	movs	r0, r3
 8004122:	f7fe fe78 	bl	8002e16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <prvCheckTasksWaitingTermination+0x54>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1e5a      	subs	r2, r3, #1
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <prvCheckTasksWaitingTermination+0x54>)
 800412e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <prvCheckTasksWaitingTermination+0x58>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	1e5a      	subs	r2, r3, #1
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <prvCheckTasksWaitingTermination+0x58>)
 8004138:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800413a:	f000 fcab 	bl	8004a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0018      	movs	r0, r3
 8004142:	f000 f80f 	bl	8004164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <prvCheckTasksWaitingTermination+0x58>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e0      	bne.n	8004110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000cb8 	.word	0x20000cb8
 800415c:	20000ce4 	.word	0x20000ce4
 8004160:	20000ccc 	.word	0x20000ccc

08004164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3354      	adds	r3, #84	; 0x54
 8004170:	0018      	movs	r0, r3
 8004172:	f000 ff99 	bl	80050a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	22b9      	movs	r2, #185	; 0xb9
 800417a:	5c9b      	ldrb	r3, [r3, r2]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	0018      	movs	r0, r3
 8004186:	f000 fdb1 	bl	8004cec <vPortFree>
				vPortFree( pxTCB );
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f000 fdad 	bl	8004cec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004192:	e010      	b.n	80041b6 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	22b9      	movs	r2, #185	; 0xb9
 8004198:	5c9b      	ldrb	r3, [r3, r2]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d104      	bne.n	80041a8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f000 fda3 	bl	8004cec <vPortFree>
	}
 80041a6:	e006      	b.n	80041b6 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	22b9      	movs	r2, #185	; 0xb9
 80041ac:	5c9b      	ldrb	r3, [r3, r2]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d001      	beq.n	80041b6 <prvDeleteTCB+0x52>
 80041b2:	b672      	cpsid	i
 80041b4:	e7fe      	b.n	80041b4 <prvDeleteTCB+0x50>
	}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b002      	add	sp, #8
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <prvResetNextTaskUnblockTime+0x40>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <prvResetNextTaskUnblockTime+0x14>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <prvResetNextTaskUnblockTime+0x16>
 80041d4:	2300      	movs	r3, #0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <prvResetNextTaskUnblockTime+0x44>)
 80041dc:	2201      	movs	r2, #1
 80041de:	4252      	negs	r2, r2
 80041e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041e2:	e008      	b.n	80041f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <prvResetNextTaskUnblockTime+0x40>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <prvResetNextTaskUnblockTime+0x44>)
 80041f4:	601a      	str	r2, [r3, #0]
}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b002      	add	sp, #8
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	20000c9c 	.word	0x20000c9c
 8004204:	20000d04 	.word	0x20000d04

08004208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <xTaskGetSchedulerState+0x30>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004216:	2301      	movs	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	e008      	b.n	800422e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800421c:	4b07      	ldr	r3, [pc, #28]	; (800423c <xTaskGetSchedulerState+0x34>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004224:	2302      	movs	r3, #2
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	e001      	b.n	800422e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800422e:	687b      	ldr	r3, [r7, #4]
	}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000cf0 	.word	0x20000cf0
 800423c:	20000d0c 	.word	0x20000d0c

08004240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d044      	beq.n	80042e0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004256:	4b25      	ldr	r3, [pc, #148]	; (80042ec <xTaskPriorityDisinherit+0xac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <xTaskPriorityDisinherit+0x24>
 8004260:	b672      	cpsid	i
 8004262:	e7fe      	b.n	8004262 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <xTaskPriorityDisinherit+0x30>
 800426c:	b672      	cpsid	i
 800426e:	e7fe      	b.n	800426e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	1e5a      	subs	r2, r3, #1
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	429a      	cmp	r2, r3
 8004284:	d02c      	beq.n	80042e0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428a:	2b00      	cmp	r3, #0
 800428c:	d128      	bne.n	80042e0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3304      	adds	r3, #4
 8004292:	0018      	movs	r0, r3
 8004294:	f7fe fdbf 	bl	8002e16 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	2238      	movs	r2, #56	; 0x38
 80042a6:	1ad2      	subs	r2, r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <xTaskPriorityDisinherit+0xb0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d903      	bls.n	80042c0 <xTaskPriorityDisinherit+0x80>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <xTaskPriorityDisinherit+0xb0>)
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c4:	0013      	movs	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	189b      	adds	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <xTaskPriorityDisinherit+0xb4>)
 80042ce:	189a      	adds	r2, r3, r2
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3304      	adds	r3, #4
 80042d4:	0019      	movs	r1, r3
 80042d6:	0010      	movs	r0, r2
 80042d8:	f7fe fd45 	bl	8002d66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042e0:	68fb      	ldr	r3, [r7, #12]
	}
 80042e2:	0018      	movs	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b004      	add	sp, #16
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	20000810 	.word	0x20000810
 80042f0:	20000cec 	.word	0x20000cec
 80042f4:	20000814 	.word	0x20000814

080042f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004302:	4b21      	ldr	r3, [pc, #132]	; (8004388 <prvAddCurrentTaskToDelayedList+0x90>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004308:	4b20      	ldr	r3, [pc, #128]	; (800438c <prvAddCurrentTaskToDelayedList+0x94>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3304      	adds	r3, #4
 800430e:	0018      	movs	r0, r3
 8004310:	f7fe fd81 	bl	8002e16 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3301      	adds	r3, #1
 8004318:	d10b      	bne.n	8004332 <prvAddCurrentTaskToDelayedList+0x3a>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <prvAddCurrentTaskToDelayedList+0x94>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1d1a      	adds	r2, r3, #4
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <prvAddCurrentTaskToDelayedList+0x98>)
 8004328:	0011      	movs	r1, r2
 800432a:	0018      	movs	r0, r3
 800432c:	f7fe fd1b 	bl	8002d66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004330:	e026      	b.n	8004380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	18d3      	adds	r3, r2, r3
 8004338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <prvAddCurrentTaskToDelayedList+0x94>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	429a      	cmp	r2, r3
 8004348:	d209      	bcs.n	800435e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <prvAddCurrentTaskToDelayedList+0x94>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3304      	adds	r3, #4
 8004354:	0019      	movs	r1, r3
 8004356:	0010      	movs	r0, r2
 8004358:	f7fe fd27 	bl	8002daa <vListInsert>
}
 800435c:	e010      	b.n	8004380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800435e:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <prvAddCurrentTaskToDelayedList+0x94>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3304      	adds	r3, #4
 8004368:	0019      	movs	r1, r3
 800436a:	0010      	movs	r0, r2
 800436c:	f7fe fd1d 	bl	8002daa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	d202      	bcs.n	8004380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800437a:	4b08      	ldr	r3, [pc, #32]	; (800439c <prvAddCurrentTaskToDelayedList+0xa4>)
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	601a      	str	r2, [r3, #0]
}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	b004      	add	sp, #16
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000ce8 	.word	0x20000ce8
 800438c:	20000810 	.word	0x20000810
 8004390:	20000cd0 	.word	0x20000cd0
 8004394:	20000ca0 	.word	0x20000ca0
 8004398:	20000c9c 	.word	0x20000c9c
 800439c:	20000d04 	.word	0x20000d04

080043a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043aa:	f000 fa87 	bl	80048bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <xTimerCreateTimerTask+0x6c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d020      	beq.n	80043f8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043be:	003a      	movs	r2, r7
 80043c0:	1d39      	adds	r1, r7, #4
 80043c2:	2308      	movs	r3, #8
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	0018      	movs	r0, r3
 80043c8:	f7fe fc8c 	bl	8002ce4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043cc:	683c      	ldr	r4, [r7, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	490f      	ldr	r1, [pc, #60]	; (8004410 <xTimerCreateTimerTask+0x70>)
 80043d4:	480f      	ldr	r0, [pc, #60]	; (8004414 <xTimerCreateTimerTask+0x74>)
 80043d6:	9202      	str	r2, [sp, #8]
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	2302      	movs	r3, #2
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2300      	movs	r3, #0
 80043e0:	0022      	movs	r2, r4
 80043e2:	f7ff f968 	bl	80036b6 <xTaskCreateStatic>
 80043e6:	0002      	movs	r2, r0
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <xTimerCreateTimerTask+0x78>)
 80043ea:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <xTimerCreateTimerTask+0x78>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80043f4:	2301      	movs	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <xTimerCreateTimerTask+0x62>
 80043fe:	b672      	cpsid	i
 8004400:	e7fe      	b.n	8004400 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8004402:	68fb      	ldr	r3, [r7, #12]
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b005      	add	sp, #20
 800440a:	bd90      	pop	{r4, r7, pc}
 800440c:	20000d40 	.word	0x20000d40
 8004410:	08005474 	.word	0x08005474
 8004414:	08004521 	.word	0x08004521
 8004418:	20000d44 	.word	0x20000d44

0800441c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b08b      	sub	sp, #44	; 0x2c
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <xTimerGenericCommand+0x1c>
 8004434:	b672      	cpsid	i
 8004436:	e7fe      	b.n	8004436 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <xTimerGenericCommand+0x90>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d030      	beq.n	80044a2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004440:	2414      	movs	r4, #20
 8004442:	193b      	adds	r3, r7, r4
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004448:	193b      	adds	r3, r7, r4
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800444e:	193b      	adds	r3, r7, r4
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b05      	cmp	r3, #5
 8004458:	dc19      	bgt.n	800448e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800445a:	f7ff fed5 	bl	8004208 <xTaskGetSchedulerState>
 800445e:	0003      	movs	r3, r0
 8004460:	2b02      	cmp	r3, #2
 8004462:	d109      	bne.n	8004478 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <xTimerGenericCommand+0x90>)
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800446a:	1939      	adds	r1, r7, r4
 800446c:	2300      	movs	r3, #0
 800446e:	f7fe fdc0 	bl	8002ff2 <xQueueGenericSend>
 8004472:	0003      	movs	r3, r0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	e014      	b.n	80044a2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <xTimerGenericCommand+0x90>)
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	2314      	movs	r3, #20
 800447e:	18f9      	adds	r1, r7, r3
 8004480:	2300      	movs	r3, #0
 8004482:	2200      	movs	r2, #0
 8004484:	f7fe fdb5 	bl	8002ff2 <xQueueGenericSend>
 8004488:	0003      	movs	r3, r0
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	e009      	b.n	80044a2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <xTimerGenericCommand+0x90>)
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	2314      	movs	r3, #20
 8004496:	18f9      	adds	r1, r7, r3
 8004498:	2300      	movs	r3, #0
 800449a:	f7fe fe6e 	bl	800317a <xQueueGenericSendFromISR>
 800449e:	0003      	movs	r3, r0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b00b      	add	sp, #44	; 0x2c
 80044aa:	bd90      	pop	{r4, r7, pc}
 80044ac:	20000d40 	.word	0x20000d40

080044b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044ba:	4b18      	ldr	r3, [pc, #96]	; (800451c <prvProcessExpiredTimer+0x6c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3304      	adds	r3, #4
 80044c8:	0018      	movs	r0, r3
 80044ca:	f7fe fca4 	bl	8002e16 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d119      	bne.n	800450a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	18d1      	adds	r1, r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f8b6 	bl	8004654 <prvInsertTimerInActiveList>
 80044e8:	1e03      	subs	r3, r0, #0
 80044ea:	d00e      	beq.n	800450a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	2300      	movs	r3, #0
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2300      	movs	r3, #0
 80044f6:	2100      	movs	r1, #0
 80044f8:	f7ff ff90 	bl	800441c <xTimerGenericCommand>
 80044fc:	0003      	movs	r3, r0
 80044fe:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <prvProcessExpiredTimer+0x5a>
 8004506:	b672      	cpsid	i
 8004508:	e7fe      	b.n	8004508 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	0010      	movs	r0, r2
 8004512:	4798      	blx	r3
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b004      	add	sp, #16
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000d38 	.word	0x20000d38

08004520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004528:	2308      	movs	r3, #8
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	0018      	movs	r0, r3
 800452e:	f000 f851 	bl	80045d4 <prvGetNextExpireTime>
 8004532:	0003      	movs	r3, r0
 8004534:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	0011      	movs	r1, r2
 800453c:	0018      	movs	r0, r3
 800453e:	f000 f803 	bl	8004548 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004542:	f000 f8c9 	bl	80046d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004546:	e7ef      	b.n	8004528 <prvTimerTask+0x8>

08004548 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004552:	f7ff fac3 	bl	8003adc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004556:	2308      	movs	r3, #8
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	0018      	movs	r0, r3
 800455c:	f000 f85a 	bl	8004614 <prvSampleTimeNow>
 8004560:	0003      	movs	r3, r0
 8004562:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d129      	bne.n	80045be <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10c      	bne.n	800458a <prvProcessTimerOrBlockTask+0x42>
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	429a      	cmp	r2, r3
 8004576:	d808      	bhi.n	800458a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004578:	f7ff fabc 	bl	8003af4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0011      	movs	r1, r2
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff ff94 	bl	80044b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004588:	e01b      	b.n	80045c2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004590:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <prvProcessTimerOrBlockTask+0x84>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	425a      	negs	r2, r3
 8004598:	4153      	adcs	r3, r2
 800459a:	b2db      	uxtb	r3, r3
 800459c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <prvProcessTimerOrBlockTask+0x88>)
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	0019      	movs	r1, r3
 80045ac:	f7ff f850 	bl	8003650 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045b0:	f7ff faa0 	bl	8003af4 <xTaskResumeAll>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d104      	bne.n	80045c2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80045b8:	f000 fa4a 	bl	8004a50 <vPortYield>
}
 80045bc:	e001      	b.n	80045c2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80045be:	f7ff fa99 	bl	8003af4 <xTaskResumeAll>
}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b004      	add	sp, #16
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	20000d3c 	.word	0x20000d3c
 80045d0:	20000d40 	.word	0x20000d40

080045d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <prvGetNextExpireTime+0x3c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	425a      	negs	r2, r3
 80045e4:	4153      	adcs	r3, r2
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	001a      	movs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <prvGetNextExpireTime+0x3c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e001      	b.n	8004606 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b004      	add	sp, #16
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000d38 	.word	0x20000d38

08004614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800461c:	f7ff faf6 	bl	8003c0c <xTaskGetTickCount>
 8004620:	0003      	movs	r3, r0
 8004622:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <prvSampleTimeNow+0x3c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	429a      	cmp	r2, r3
 800462c:	d205      	bcs.n	800463a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800462e:	f000 f8eb 	bl	8004808 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e002      	b.n	8004640 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <prvSampleTimeNow+0x3c>)
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004646:	68fb      	ldr	r3, [r7, #12]
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b004      	add	sp, #16
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000d48 	.word	0x20000d48

08004654 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d812      	bhi.n	80046a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	1ad2      	subs	r2, r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	429a      	cmp	r2, r3
 8004686:	d302      	bcc.n	800468e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004688:	2301      	movs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	e01b      	b.n	80046c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <prvInsertTimerInActiveList+0x7c>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3304      	adds	r3, #4
 8004696:	0019      	movs	r1, r3
 8004698:	0010      	movs	r0, r2
 800469a:	f7fe fb86 	bl	8002daa <vListInsert>
 800469e:	e012      	b.n	80046c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d206      	bcs.n	80046b6 <prvInsertTimerInActiveList+0x62>
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e007      	b.n	80046c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046b6:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <prvInsertTimerInActiveList+0x80>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3304      	adds	r3, #4
 80046be:	0019      	movs	r1, r3
 80046c0:	0010      	movs	r0, r2
 80046c2:	f7fe fb72 	bl	8002daa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046c6:	697b      	ldr	r3, [r7, #20]
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b006      	add	sp, #24
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000d3c 	.word	0x20000d3c
 80046d4:	20000d38 	.word	0x20000d38

080046d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b08d      	sub	sp, #52	; 0x34
 80046dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046de:	e07f      	b.n	80047e0 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046e0:	2208      	movs	r2, #8
 80046e2:	18bb      	adds	r3, r7, r2
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	da0f      	bge.n	800470a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046ea:	18bb      	adds	r3, r7, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <prvProcessReceivedCommands+0x22>
 80046f6:	b672      	cpsid	i
 80046f8:	e7fe      	b.n	80046f8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	6858      	ldr	r0, [r3, #4]
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	0019      	movs	r1, r3
 8004708:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800470a:	2208      	movs	r2, #8
 800470c:	18bb      	adds	r3, r7, r2
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	db64      	blt.n	80047de <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004714:	18bb      	adds	r3, r7, r2
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	3304      	adds	r3, #4
 8004726:	0018      	movs	r0, r3
 8004728:	f7fe fb75 	bl	8002e16 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff ff70 	bl	8004614 <prvSampleTimeNow>
 8004734:	0003      	movs	r3, r0
 8004736:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004738:	2308      	movs	r3, #8
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b09      	cmp	r3, #9
 8004740:	d84e      	bhi.n	80047e0 <prvProcessReceivedCommands+0x108>
 8004742:	009a      	lsls	r2, r3, #2
 8004744:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <prvProcessReceivedCommands+0x128>)
 8004746:	18d3      	adds	r3, r2, r3
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800474c:	2408      	movs	r4, #8
 800474e:	193b      	adds	r3, r7, r4
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	18d1      	adds	r1, r2, r3
 8004758:	193b      	adds	r3, r7, r4
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	6a38      	ldr	r0, [r7, #32]
 8004760:	f7ff ff78 	bl	8004654 <prvInsertTimerInActiveList>
 8004764:	1e03      	subs	r3, r0, #0
 8004766:	d03b      	beq.n	80047e0 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	0010      	movs	r0, r2
 8004770:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d132      	bne.n	80047e0 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800477a:	193b      	adds	r3, r7, r4
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	18d2      	adds	r2, r2, r3
 8004784:	6a38      	ldr	r0, [r7, #32]
 8004786:	2300      	movs	r3, #0
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	2300      	movs	r3, #0
 800478c:	2100      	movs	r1, #0
 800478e:	f7ff fe45 	bl	800441c <xTimerGenericCommand>
 8004792:	0003      	movs	r3, r0
 8004794:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d121      	bne.n	80047e0 <prvProcessReceivedCommands+0x108>
 800479c:	b672      	cpsid	i
 800479e:	e7fe      	b.n	800479e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047a0:	2308      	movs	r3, #8
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <prvProcessReceivedCommands+0xde>
 80047b2:	b672      	cpsid	i
 80047b4:	e7fe      	b.n	80047b4 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	18d1      	adds	r1, r2, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	6a38      	ldr	r0, [r7, #32]
 80047c4:	f7ff ff46 	bl	8004654 <prvInsertTimerInActiveList>
					break;
 80047c8:	e00a      	b.n	80047e0 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	222c      	movs	r2, #44	; 0x2c
 80047ce:	5c9b      	ldrb	r3, [r3, r2]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f000 fa88 	bl	8004cec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047dc:	e000      	b.n	80047e0 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80047de:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <prvProcessReceivedCommands+0x12c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2208      	movs	r2, #8
 80047e6:	18b9      	adds	r1, r7, r2
 80047e8:	2200      	movs	r2, #0
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7fe fd36 	bl	800325c <xQueueReceive>
 80047f0:	1e03      	subs	r3, r0, #0
 80047f2:	d000      	beq.n	80047f6 <prvProcessReceivedCommands+0x11e>
 80047f4:	e774      	b.n	80046e0 <prvProcessReceivedCommands+0x8>
	}
}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b00b      	add	sp, #44	; 0x2c
 80047fe:	bd90      	pop	{r4, r7, pc}
 8004800:	080054c0 	.word	0x080054c0
 8004804:	20000d40 	.word	0x20000d40

08004808 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800480e:	e03e      	b.n	800488e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004810:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <prvSwitchTimerLists+0xac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800481a:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <prvSwitchTimerLists+0xac>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3304      	adds	r3, #4
 8004828:	0018      	movs	r0, r3
 800482a:	f7fe faf4 	bl	8002e16 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	0010      	movs	r0, r2
 8004836:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d126      	bne.n	800488e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	18d3      	adds	r3, r2, r3
 8004848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	d90e      	bls.n	8004870 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <prvSwitchTimerLists+0xac>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3304      	adds	r3, #4
 8004866:	0019      	movs	r1, r3
 8004868:	0010      	movs	r0, r2
 800486a:	f7fe fa9e 	bl	8002daa <vListInsert>
 800486e:	e00e      	b.n	800488e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	2300      	movs	r3, #0
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2300      	movs	r3, #0
 800487a:	2100      	movs	r1, #0
 800487c:	f7ff fdce 	bl	800441c <xTimerGenericCommand>
 8004880:	0003      	movs	r3, r0
 8004882:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <prvSwitchTimerLists+0x86>
 800488a:	b672      	cpsid	i
 800488c:	e7fe      	b.n	800488c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <prvSwitchTimerLists+0xac>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1bb      	bne.n	8004810 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <prvSwitchTimerLists+0xac>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800489e:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <prvSwitchTimerLists+0xb0>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <prvSwitchTimerLists+0xac>)
 80048a4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80048a6:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <prvSwitchTimerLists+0xb0>)
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	601a      	str	r2, [r3, #0]
}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b006      	add	sp, #24
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000d38 	.word	0x20000d38
 80048b8:	20000d3c 	.word	0x20000d3c

080048bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048c2:	f000 f8d5 	bl	8004a70 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048c6:	4b16      	ldr	r3, [pc, #88]	; (8004920 <prvCheckForValidListAndQueue+0x64>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d123      	bne.n	8004916 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80048ce:	4b15      	ldr	r3, [pc, #84]	; (8004924 <prvCheckForValidListAndQueue+0x68>)
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7fe fa1f 	bl	8002d14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <prvCheckForValidListAndQueue+0x6c>)
 80048d8:	0018      	movs	r0, r3
 80048da:	f7fe fa1b 	bl	8002d14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <prvCheckForValidListAndQueue+0x70>)
 80048e0:	4a10      	ldr	r2, [pc, #64]	; (8004924 <prvCheckForValidListAndQueue+0x68>)
 80048e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <prvCheckForValidListAndQueue+0x74>)
 80048e6:	4a10      	ldr	r2, [pc, #64]	; (8004928 <prvCheckForValidListAndQueue+0x6c>)
 80048e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <prvCheckForValidListAndQueue+0x78>)
 80048ec:	4a12      	ldr	r2, [pc, #72]	; (8004938 <prvCheckForValidListAndQueue+0x7c>)
 80048ee:	2100      	movs	r1, #0
 80048f0:	9100      	str	r1, [sp, #0]
 80048f2:	2110      	movs	r1, #16
 80048f4:	200a      	movs	r0, #10
 80048f6:	f7fe fb0a 	bl	8002f0e <xQueueGenericCreateStatic>
 80048fa:	0002      	movs	r2, r0
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <prvCheckForValidListAndQueue+0x64>)
 80048fe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <prvCheckForValidListAndQueue+0x64>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d006      	beq.n	8004916 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <prvCheckForValidListAndQueue+0x64>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a0b      	ldr	r2, [pc, #44]	; (800493c <prvCheckForValidListAndQueue+0x80>)
 800490e:	0011      	movs	r1, r2
 8004910:	0018      	movs	r0, r3
 8004912:	f7fe fe75 	bl	8003600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004916:	f000 f8bd 	bl	8004a94 <vPortExitCritical>
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000d40 	.word	0x20000d40
 8004924:	20000d10 	.word	0x20000d10
 8004928:	20000d24 	.word	0x20000d24
 800492c:	20000d38 	.word	0x20000d38
 8004930:	20000d3c 	.word	0x20000d3c
 8004934:	20000dec 	.word	0x20000dec
 8004938:	20000d4c 	.word	0x20000d4c
 800493c:	0800547c 	.word	0x0800547c

08004940 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3b04      	subs	r3, #4
 8004950:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2280      	movs	r2, #128	; 0x80
 8004956:	0452      	lsls	r2, r2, #17
 8004958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3b04      	subs	r3, #4
 800495e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3b04      	subs	r3, #4
 800496a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800496c:	4a08      	ldr	r2, [pc, #32]	; (8004990 <pxPortInitialiseStack+0x50>)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3b14      	subs	r3, #20
 8004976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3b20      	subs	r3, #32
 8004982:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004984:	68fb      	ldr	r3, [r7, #12]
}
 8004986:	0018      	movs	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	b004      	add	sp, #16
 800498c:	bd80      	pop	{r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	08004995 	.word	0x08004995

08004994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <prvTaskExitError+0x2c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	d001      	beq.n	80049aa <prvTaskExitError+0x16>
 80049a6:	b672      	cpsid	i
 80049a8:	e7fe      	b.n	80049a8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80049aa:	b672      	cpsid	i
	while( ulDummy == 0 )
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0fc      	beq.n	80049ae <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	20000008 	.word	0x20000008

080049c4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80049d0:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <pxCurrentTCBConst2>)
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	3020      	adds	r0, #32
 80049d8:	f380 8809 	msr	PSP, r0
 80049dc:	2002      	movs	r0, #2
 80049de:	f380 8814 	msr	CONTROL, r0
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80049e8:	46ae      	mov	lr, r5
 80049ea:	bc08      	pop	{r3}
 80049ec:	bc04      	pop	{r2}
 80049ee:	b662      	cpsie	i
 80049f0:	4718      	bx	r3
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46c0      	nop			; (mov r8, r8)

08004a00 <pxCurrentTCBConst2>:
 8004a00:	20000810 	.word	0x20000810
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004a04:	46c0      	nop			; (mov r8, r8)
 8004a06:	46c0      	nop			; (mov r8, r8)

08004a08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <xPortStartScheduler+0x40>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <xPortStartScheduler+0x40>)
 8004a12:	21ff      	movs	r1, #255	; 0xff
 8004a14:	0409      	lsls	r1, r1, #16
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <xPortStartScheduler+0x40>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <xPortStartScheduler+0x40>)
 8004a20:	21ff      	movs	r1, #255	; 0xff
 8004a22:	0609      	lsls	r1, r1, #24
 8004a24:	430a      	orrs	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004a28:	f000 f898 	bl	8004b5c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a2c:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <xPortStartScheduler+0x44>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004a32:	f7ff ffcd 	bl	80049d0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a36:	f7ff f9ab 	bl	8003d90 <vTaskSwitchContext>
	prvTaskExitError();
 8004a3a:	f7ff ffab 	bl	8004994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	e000ed20 	.word	0xe000ed20
 8004a4c:	20000008 	.word	0x20000008

08004a50 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <vPortYield+0x1c>)
 8004a56:	2280      	movs	r2, #128	; 0x80
 8004a58:	0552      	lsls	r2, r2, #21
 8004a5a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004a5c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004a60:	f3bf 8f6f 	isb	sy
}
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004a74:	b672      	cpsid	i
    uxCriticalNesting++;
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <vPortEnterCritical+0x20>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <vPortEnterCritical+0x20>)
 8004a7e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004a80:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004a84:	f3bf 8f6f 	isb	sy
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	20000008 	.word	0x20000008

08004a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <vPortExitCritical+0x2c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <vPortExitCritical+0x10>
 8004aa0:	b672      	cpsid	i
 8004aa2:	e7fe      	b.n	8004aa2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <vPortExitCritical+0x2c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	1e5a      	subs	r2, r3, #1
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <vPortExitCritical+0x2c>)
 8004aac:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004aae:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <vPortExitCritical+0x2c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d100      	bne.n	8004ab8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004ab6:	b662      	cpsie	i
    }
}
 8004ab8:	46c0      	nop			; (mov r8, r8)
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	20000008 	.word	0x20000008

08004ac4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004ac4:	f3ef 8010 	mrs	r0, PRIMASK
 8004ac8:	b672      	cpsid	i
 8004aca:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	0018      	movs	r0, r3

08004ad0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004ad0:	f380 8810 	msr	PRIMASK, r0
 8004ad4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004ad6:	46c0      	nop			; (mov r8, r8)
	...

08004ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ae0:	f3ef 8009 	mrs	r0, PSP
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <pxCurrentTCBConst>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	3820      	subs	r0, #32
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004aee:	4644      	mov	r4, r8
 8004af0:	464d      	mov	r5, r9
 8004af2:	4656      	mov	r6, sl
 8004af4:	465f      	mov	r7, fp
 8004af6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004af8:	b508      	push	{r3, lr}
 8004afa:	b672      	cpsid	i
 8004afc:	f7ff f948 	bl	8003d90 <vTaskSwitchContext>
 8004b00:	b662      	cpsie	i
 8004b02:	bc0c      	pop	{r2, r3}
 8004b04:	6811      	ldr	r1, [r2, #0]
 8004b06:	6808      	ldr	r0, [r1, #0]
 8004b08:	3010      	adds	r0, #16
 8004b0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004b0c:	46a0      	mov	r8, r4
 8004b0e:	46a9      	mov	r9, r5
 8004b10:	46b2      	mov	sl, r6
 8004b12:	46bb      	mov	fp, r7
 8004b14:	f380 8809 	msr	PSP, r0
 8004b18:	3820      	subs	r0, #32
 8004b1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004b1c:	4718      	bx	r3
 8004b1e:	46c0      	nop			; (mov r8, r8)

08004b20 <pxCurrentTCBConst>:
 8004b20:	20000810 	.word	0x20000810
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46c0      	nop			; (mov r8, r8)

08004b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b2e:	f7ff ffc9 	bl	8004ac4 <ulSetInterruptMaskFromISR>
 8004b32:	0003      	movs	r3, r0
 8004b34:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b36:	f7ff f877 	bl	8003c28 <xTaskIncrementTick>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d003      	beq.n	8004b46 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <SysTick_Handler+0x30>)
 8004b40:	2280      	movs	r2, #128	; 0x80
 8004b42:	0552      	lsls	r2, r2, #21
 8004b44:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff ffc1 	bl	8004ad0 <vClearInterruptMaskFromISR>
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b002      	add	sp, #8
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <prvSetupTimerInterrupt+0x34>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <prvSetupTimerInterrupt+0x38>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <prvSetupTimerInterrupt+0x3c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	22fa      	movs	r2, #250	; 0xfa
 8004b72:	0091      	lsls	r1, r2, #2
 8004b74:	0018      	movs	r0, r3
 8004b76:	f7fb facf 	bl	8000118 <__udivsi3>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	001a      	movs	r2, r3
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <prvSetupTimerInterrupt+0x40>)
 8004b80:	3a01      	subs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004b84:	4b02      	ldr	r3, [pc, #8]	; (8004b90 <prvSetupTimerInterrupt+0x34>)
 8004b86:	2207      	movs	r2, #7
 8004b88:	601a      	str	r2, [r3, #0]
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	e000e010 	.word	0xe000e010
 8004b94:	e000e018 	.word	0xe000e018
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	e000e014 	.word	0xe000e014

08004ba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004bac:	f7fe ff96 	bl	8003adc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bb0:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <pvPortMalloc+0x138>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bb8:	f000 f8e0 	bl	8004d7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bbc:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <pvPortMalloc+0x13c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d000      	beq.n	8004bc8 <pvPortMalloc+0x28>
 8004bc6:	e079      	b.n	8004cbc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d012      	beq.n	8004bf4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004bce:	2208      	movs	r2, #8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2207      	movs	r2, #7
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d00a      	beq.n	8004bf4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2207      	movs	r2, #7
 8004be2:	4393      	bics	r3, r2
 8004be4:	3308      	adds	r3, #8
 8004be6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2207      	movs	r2, #7
 8004bec:	4013      	ands	r3, r2
 8004bee:	d001      	beq.n	8004bf4 <pvPortMalloc+0x54>
 8004bf0:	b672      	cpsid	i
 8004bf2:	e7fe      	b.n	8004bf2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d060      	beq.n	8004cbc <pvPortMalloc+0x11c>
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <pvPortMalloc+0x140>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d85b      	bhi.n	8004cbc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c04:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <pvPortMalloc+0x144>)
 8004c06:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004c08:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <pvPortMalloc+0x144>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c0e:	e004      	b.n	8004c1a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d903      	bls.n	8004c2c <pvPortMalloc+0x8c>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f1      	bne.n	8004c10 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c2c:	4b2a      	ldr	r3, [pc, #168]	; (8004cd8 <pvPortMalloc+0x138>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d042      	beq.n	8004cbc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	2308      	movs	r3, #8
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d916      	bls.n	8004c86 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	18d3      	adds	r3, r2, r3
 8004c5e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2207      	movs	r2, #7
 8004c64:	4013      	ands	r3, r2
 8004c66:	d001      	beq.n	8004c6c <pvPortMalloc+0xcc>
 8004c68:	b672      	cpsid	i
 8004c6a:	e7fe      	b.n	8004c6a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	0018      	movs	r0, r3
 8004c82:	f000 f8db 	bl	8004e3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c86:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <pvPortMalloc+0x140>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	1ad2      	subs	r2, r2, r3
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <pvPortMalloc+0x140>)
 8004c92:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c94:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <pvPortMalloc+0x140>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <pvPortMalloc+0x148>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d203      	bcs.n	8004ca8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <pvPortMalloc+0x140>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <pvPortMalloc+0x148>)
 8004ca6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <pvPortMalloc+0x13c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cbc:	f7fe ff1a 	bl	8003af4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2207      	movs	r2, #7
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d001      	beq.n	8004ccc <pvPortMalloc+0x12c>
 8004cc8:	b672      	cpsid	i
 8004cca:	e7fe      	b.n	8004cca <pvPortMalloc+0x12a>
	return pvReturn;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
}
 8004cce:	0018      	movs	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b006      	add	sp, #24
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	20001a44 	.word	0x20001a44
 8004cdc:	20001a50 	.word	0x20001a50
 8004ce0:	20001a48 	.word	0x20001a48
 8004ce4:	20001a3c 	.word	0x20001a3c
 8004ce8:	20001a4c 	.word	0x20001a4c

08004cec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d035      	beq.n	8004d6a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004cfe:	2308      	movs	r3, #8
 8004d00:	425b      	negs	r3, r3
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	18d3      	adds	r3, r2, r3
 8004d06:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <vPortFree+0x88>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4013      	ands	r3, r2
 8004d16:	d101      	bne.n	8004d1c <vPortFree+0x30>
 8004d18:	b672      	cpsid	i
 8004d1a:	e7fe      	b.n	8004d1a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <vPortFree+0x3c>
 8004d24:	b672      	cpsid	i
 8004d26:	e7fe      	b.n	8004d26 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <vPortFree+0x88>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4013      	ands	r3, r2
 8004d32:	d01a      	beq.n	8004d6a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d116      	bne.n	8004d6a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <vPortFree+0x88>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	401a      	ands	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d4c:	f7fe fec6 	bl	8003adc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <vPortFree+0x8c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	18d2      	adds	r2, r2, r3
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <vPortFree+0x8c>)
 8004d5c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f86b 	bl	8004e3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d66:	f7fe fec5 	bl	8003af4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b004      	add	sp, #16
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	20001a50 	.word	0x20001a50
 8004d78:	20001a48 	.word	0x20001a48

08004d7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d82:	23c0      	movs	r3, #192	; 0xc0
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d88:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <prvHeapInit+0xa8>)
 8004d8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2207      	movs	r2, #7
 8004d90:	4013      	ands	r3, r2
 8004d92:	d00c      	beq.n	8004dae <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3307      	adds	r3, #7
 8004d98:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2207      	movs	r2, #7
 8004d9e:	4393      	bics	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <prvHeapInit+0xa8>)
 8004daa:	18d3      	adds	r3, r2, r3
 8004dac:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004db2:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <prvHeapInit+0xac>)
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <prvHeapInit+0xac>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	18d3      	adds	r3, r2, r3
 8004dc4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	4393      	bics	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <prvHeapInit+0xb0>)
 8004dda:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <prvHeapInit+0xb0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2200      	movs	r2, #0
 8004de2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004de4:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <prvHeapInit+0xb0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <prvHeapInit+0xb0>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <prvHeapInit+0xb4>)
 8004e08:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <prvHeapInit+0xb8>)
 8004e10:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <prvHeapInit+0xbc>)
 8004e14:	2280      	movs	r2, #128	; 0x80
 8004e16:	0612      	lsls	r2, r2, #24
 8004e18:	601a      	str	r2, [r3, #0]
}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b004      	add	sp, #16
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	20000e3c 	.word	0x20000e3c
 8004e28:	20001a3c 	.word	0x20001a3c
 8004e2c:	20001a44 	.word	0x20001a44
 8004e30:	20001a4c 	.word	0x20001a4c
 8004e34:	20001a48 	.word	0x20001a48
 8004e38:	20001a50 	.word	0x20001a50

08004e3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <prvInsertBlockIntoFreeList+0xa8>)
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e002      	b.n	8004e50 <prvInsertBlockIntoFreeList+0x14>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d8f7      	bhi.n	8004e4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	18d3      	adds	r3, r2, r3
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d108      	bne.n	8004e7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	18d2      	adds	r2, r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	18d2      	adds	r2, r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d118      	bne.n	8004ec4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <prvInsertBlockIntoFreeList+0xac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d00d      	beq.n	8004eba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	18d2      	adds	r2, r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e008      	b.n	8004ecc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004eba:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <prvInsertBlockIntoFreeList+0xac>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e003      	b.n	8004ecc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d002      	beq.n	8004eda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b004      	add	sp, #16
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	20001a3c 	.word	0x20001a3c
 8004ee8:	20001a44 	.word	0x20001a44

08004eec <calloc>:
 8004eec:	b510      	push	{r4, lr}
 8004eee:	4b03      	ldr	r3, [pc, #12]	; (8004efc <calloc+0x10>)
 8004ef0:	000a      	movs	r2, r1
 8004ef2:	0001      	movs	r1, r0
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	f000 f85c 	bl	8004fb2 <_calloc_r>
 8004efa:	bd10      	pop	{r4, pc}
 8004efc:	2000000c 	.word	0x2000000c

08004f00 <__errno>:
 8004f00:	4b01      	ldr	r3, [pc, #4]	; (8004f08 <__errno+0x8>)
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	4770      	bx	lr
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	2000000c 	.word	0x2000000c

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	2600      	movs	r6, #0
 8004f10:	4d0c      	ldr	r5, [pc, #48]	; (8004f44 <__libc_init_array+0x38>)
 8004f12:	4c0d      	ldr	r4, [pc, #52]	; (8004f48 <__libc_init_array+0x3c>)
 8004f14:	1b64      	subs	r4, r4, r5
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	42a6      	cmp	r6, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	2600      	movs	r6, #0
 8004f1e:	f000 f9ef 	bl	8005300 <_init>
 8004f22:	4d0a      	ldr	r5, [pc, #40]	; (8004f4c <__libc_init_array+0x40>)
 8004f24:	4c0a      	ldr	r4, [pc, #40]	; (8004f50 <__libc_init_array+0x44>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	42a6      	cmp	r6, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	00b3      	lsls	r3, r6, #2
 8004f32:	58eb      	ldr	r3, [r5, r3]
 8004f34:	4798      	blx	r3
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	00b3      	lsls	r3, r6, #2
 8004f3c:	58eb      	ldr	r3, [r5, r3]
 8004f3e:	4798      	blx	r3
 8004f40:	3601      	adds	r6, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	08005570 	.word	0x08005570
 8004f48:	08005570 	.word	0x08005570
 8004f4c:	08005570 	.word	0x08005570
 8004f50:	08005574 	.word	0x08005574

08004f54 <__itoa>:
 8004f54:	1e93      	subs	r3, r2, #2
 8004f56:	b510      	push	{r4, lr}
 8004f58:	000c      	movs	r4, r1
 8004f5a:	2b22      	cmp	r3, #34	; 0x22
 8004f5c:	d904      	bls.n	8004f68 <__itoa+0x14>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	001c      	movs	r4, r3
 8004f62:	700b      	strb	r3, [r1, #0]
 8004f64:	0020      	movs	r0, r4
 8004f66:	bd10      	pop	{r4, pc}
 8004f68:	2a0a      	cmp	r2, #10
 8004f6a:	d109      	bne.n	8004f80 <__itoa+0x2c>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	da07      	bge.n	8004f80 <__itoa+0x2c>
 8004f70:	232d      	movs	r3, #45	; 0x2d
 8004f72:	700b      	strb	r3, [r1, #0]
 8004f74:	2101      	movs	r1, #1
 8004f76:	4240      	negs	r0, r0
 8004f78:	1861      	adds	r1, r4, r1
 8004f7a:	f000 f931 	bl	80051e0 <__utoa>
 8004f7e:	e7f1      	b.n	8004f64 <__itoa+0x10>
 8004f80:	2100      	movs	r1, #0
 8004f82:	e7f9      	b.n	8004f78 <__itoa+0x24>

08004f84 <itoa>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	f7ff ffe5 	bl	8004f54 <__itoa>
 8004f8a:	bd10      	pop	{r4, pc}

08004f8c <__retarget_lock_acquire_recursive>:
 8004f8c:	4770      	bx	lr

08004f8e <__retarget_lock_release_recursive>:
 8004f8e:	4770      	bx	lr

08004f90 <memcpy>:
 8004f90:	2300      	movs	r3, #0
 8004f92:	b510      	push	{r4, lr}
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d100      	bne.n	8004f9a <memcpy+0xa>
 8004f98:	bd10      	pop	{r4, pc}
 8004f9a:	5ccc      	ldrb	r4, [r1, r3]
 8004f9c:	54c4      	strb	r4, [r0, r3]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	e7f8      	b.n	8004f94 <memcpy+0x4>

08004fa2 <memset>:
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	1882      	adds	r2, r0, r2
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d100      	bne.n	8004fac <memset+0xa>
 8004faa:	4770      	bx	lr
 8004fac:	7019      	strb	r1, [r3, #0]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	e7f9      	b.n	8004fa6 <memset+0x4>

08004fb2 <_calloc_r>:
 8004fb2:	434a      	muls	r2, r1
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0015      	movs	r5, r2
 8004fba:	f000 f809 	bl	8004fd0 <_malloc_r>
 8004fbe:	1e04      	subs	r4, r0, #0
 8004fc0:	d003      	beq.n	8004fca <_calloc_r+0x18>
 8004fc2:	002a      	movs	r2, r5
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	f7ff ffec 	bl	8004fa2 <memset>
 8004fca:	0020      	movs	r0, r4
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fd0 <_malloc_r>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	1ccd      	adds	r5, r1, #3
 8004fd6:	439d      	bics	r5, r3
 8004fd8:	3508      	adds	r5, #8
 8004fda:	0006      	movs	r6, r0
 8004fdc:	2d0c      	cmp	r5, #12
 8004fde:	d21f      	bcs.n	8005020 <_malloc_r+0x50>
 8004fe0:	250c      	movs	r5, #12
 8004fe2:	42a9      	cmp	r1, r5
 8004fe4:	d81e      	bhi.n	8005024 <_malloc_r+0x54>
 8004fe6:	0030      	movs	r0, r6
 8004fe8:	f000 f930 	bl	800524c <__malloc_lock>
 8004fec:	4925      	ldr	r1, [pc, #148]	; (8005084 <_malloc_r+0xb4>)
 8004fee:	680a      	ldr	r2, [r1, #0]
 8004ff0:	0014      	movs	r4, r2
 8004ff2:	2c00      	cmp	r4, #0
 8004ff4:	d11a      	bne.n	800502c <_malloc_r+0x5c>
 8004ff6:	4f24      	ldr	r7, [pc, #144]	; (8005088 <_malloc_r+0xb8>)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <_malloc_r+0x38>
 8004ffe:	0021      	movs	r1, r4
 8005000:	0030      	movs	r0, r6
 8005002:	f000 f8b7 	bl	8005174 <_sbrk_r>
 8005006:	6038      	str	r0, [r7, #0]
 8005008:	0029      	movs	r1, r5
 800500a:	0030      	movs	r0, r6
 800500c:	f000 f8b2 	bl	8005174 <_sbrk_r>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d12b      	bne.n	800506c <_malloc_r+0x9c>
 8005014:	230c      	movs	r3, #12
 8005016:	0030      	movs	r0, r6
 8005018:	6033      	str	r3, [r6, #0]
 800501a:	f000 f91f 	bl	800525c <__malloc_unlock>
 800501e:	e003      	b.n	8005028 <_malloc_r+0x58>
 8005020:	2d00      	cmp	r5, #0
 8005022:	dade      	bge.n	8004fe2 <_malloc_r+0x12>
 8005024:	230c      	movs	r3, #12
 8005026:	6033      	str	r3, [r6, #0]
 8005028:	2000      	movs	r0, #0
 800502a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	1b5b      	subs	r3, r3, r5
 8005030:	d419      	bmi.n	8005066 <_malloc_r+0x96>
 8005032:	2b0b      	cmp	r3, #11
 8005034:	d903      	bls.n	800503e <_malloc_r+0x6e>
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	18e4      	adds	r4, r4, r3
 800503a:	6025      	str	r5, [r4, #0]
 800503c:	e003      	b.n	8005046 <_malloc_r+0x76>
 800503e:	6863      	ldr	r3, [r4, #4]
 8005040:	42a2      	cmp	r2, r4
 8005042:	d10e      	bne.n	8005062 <_malloc_r+0x92>
 8005044:	600b      	str	r3, [r1, #0]
 8005046:	0030      	movs	r0, r6
 8005048:	f000 f908 	bl	800525c <__malloc_unlock>
 800504c:	0020      	movs	r0, r4
 800504e:	2207      	movs	r2, #7
 8005050:	300b      	adds	r0, #11
 8005052:	1d23      	adds	r3, r4, #4
 8005054:	4390      	bics	r0, r2
 8005056:	1ac2      	subs	r2, r0, r3
 8005058:	4298      	cmp	r0, r3
 800505a:	d0e6      	beq.n	800502a <_malloc_r+0x5a>
 800505c:	1a1b      	subs	r3, r3, r0
 800505e:	50a3      	str	r3, [r4, r2]
 8005060:	e7e3      	b.n	800502a <_malloc_r+0x5a>
 8005062:	6053      	str	r3, [r2, #4]
 8005064:	e7ef      	b.n	8005046 <_malloc_r+0x76>
 8005066:	0022      	movs	r2, r4
 8005068:	6864      	ldr	r4, [r4, #4]
 800506a:	e7c2      	b.n	8004ff2 <_malloc_r+0x22>
 800506c:	2303      	movs	r3, #3
 800506e:	1cc4      	adds	r4, r0, #3
 8005070:	439c      	bics	r4, r3
 8005072:	42a0      	cmp	r0, r4
 8005074:	d0e1      	beq.n	800503a <_malloc_r+0x6a>
 8005076:	1a21      	subs	r1, r4, r0
 8005078:	0030      	movs	r0, r6
 800507a:	f000 f87b 	bl	8005174 <_sbrk_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	d1db      	bne.n	800503a <_malloc_r+0x6a>
 8005082:	e7c7      	b.n	8005014 <_malloc_r+0x44>
 8005084:	20001a54 	.word	0x20001a54
 8005088:	20001a58 	.word	0x20001a58

0800508c <cleanup_glue>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	000d      	movs	r5, r1
 8005090:	6809      	ldr	r1, [r1, #0]
 8005092:	0004      	movs	r4, r0
 8005094:	2900      	cmp	r1, #0
 8005096:	d001      	beq.n	800509c <cleanup_glue+0x10>
 8005098:	f7ff fff8 	bl	800508c <cleanup_glue>
 800509c:	0029      	movs	r1, r5
 800509e:	0020      	movs	r0, r4
 80050a0:	f000 f8e4 	bl	800526c <_free_r>
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080050a8 <_reclaim_reent>:
 80050a8:	4b31      	ldr	r3, [pc, #196]	; (8005170 <_reclaim_reent+0xc8>)
 80050aa:	b570      	push	{r4, r5, r6, lr}
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	0004      	movs	r4, r0
 80050b0:	4283      	cmp	r3, r0
 80050b2:	d049      	beq.n	8005148 <_reclaim_reent+0xa0>
 80050b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <_reclaim_reent+0x28>
 80050ba:	2500      	movs	r5, #0
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	42ab      	cmp	r3, r5
 80050c0:	d147      	bne.n	8005152 <_reclaim_reent+0xaa>
 80050c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c4:	6819      	ldr	r1, [r3, #0]
 80050c6:	2900      	cmp	r1, #0
 80050c8:	d002      	beq.n	80050d0 <_reclaim_reent+0x28>
 80050ca:	0020      	movs	r0, r4
 80050cc:	f000 f8ce 	bl	800526c <_free_r>
 80050d0:	6961      	ldr	r1, [r4, #20]
 80050d2:	2900      	cmp	r1, #0
 80050d4:	d002      	beq.n	80050dc <_reclaim_reent+0x34>
 80050d6:	0020      	movs	r0, r4
 80050d8:	f000 f8c8 	bl	800526c <_free_r>
 80050dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050de:	2900      	cmp	r1, #0
 80050e0:	d002      	beq.n	80050e8 <_reclaim_reent+0x40>
 80050e2:	0020      	movs	r0, r4
 80050e4:	f000 f8c2 	bl	800526c <_free_r>
 80050e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80050ea:	2900      	cmp	r1, #0
 80050ec:	d002      	beq.n	80050f4 <_reclaim_reent+0x4c>
 80050ee:	0020      	movs	r0, r4
 80050f0:	f000 f8bc 	bl	800526c <_free_r>
 80050f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80050f6:	2900      	cmp	r1, #0
 80050f8:	d002      	beq.n	8005100 <_reclaim_reent+0x58>
 80050fa:	0020      	movs	r0, r4
 80050fc:	f000 f8b6 	bl	800526c <_free_r>
 8005100:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005102:	2900      	cmp	r1, #0
 8005104:	d002      	beq.n	800510c <_reclaim_reent+0x64>
 8005106:	0020      	movs	r0, r4
 8005108:	f000 f8b0 	bl	800526c <_free_r>
 800510c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800510e:	2900      	cmp	r1, #0
 8005110:	d002      	beq.n	8005118 <_reclaim_reent+0x70>
 8005112:	0020      	movs	r0, r4
 8005114:	f000 f8aa 	bl	800526c <_free_r>
 8005118:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800511a:	2900      	cmp	r1, #0
 800511c:	d002      	beq.n	8005124 <_reclaim_reent+0x7c>
 800511e:	0020      	movs	r0, r4
 8005120:	f000 f8a4 	bl	800526c <_free_r>
 8005124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005126:	2900      	cmp	r1, #0
 8005128:	d002      	beq.n	8005130 <_reclaim_reent+0x88>
 800512a:	0020      	movs	r0, r4
 800512c:	f000 f89e 	bl	800526c <_free_r>
 8005130:	69a3      	ldr	r3, [r4, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <_reclaim_reent+0xa0>
 8005136:	0020      	movs	r0, r4
 8005138:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800513a:	4798      	blx	r3
 800513c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800513e:	2900      	cmp	r1, #0
 8005140:	d002      	beq.n	8005148 <_reclaim_reent+0xa0>
 8005142:	0020      	movs	r0, r4
 8005144:	f7ff ffa2 	bl	800508c <cleanup_glue>
 8005148:	bd70      	pop	{r4, r5, r6, pc}
 800514a:	5949      	ldr	r1, [r1, r5]
 800514c:	2900      	cmp	r1, #0
 800514e:	d108      	bne.n	8005162 <_reclaim_reent+0xba>
 8005150:	3504      	adds	r5, #4
 8005152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005154:	68d9      	ldr	r1, [r3, #12]
 8005156:	2d80      	cmp	r5, #128	; 0x80
 8005158:	d1f7      	bne.n	800514a <_reclaim_reent+0xa2>
 800515a:	0020      	movs	r0, r4
 800515c:	f000 f886 	bl	800526c <_free_r>
 8005160:	e7af      	b.n	80050c2 <_reclaim_reent+0x1a>
 8005162:	680e      	ldr	r6, [r1, #0]
 8005164:	0020      	movs	r0, r4
 8005166:	f000 f881 	bl	800526c <_free_r>
 800516a:	0031      	movs	r1, r6
 800516c:	e7ee      	b.n	800514c <_reclaim_reent+0xa4>
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	2000000c 	.word	0x2000000c

08005174 <_sbrk_r>:
 8005174:	2300      	movs	r3, #0
 8005176:	b570      	push	{r4, r5, r6, lr}
 8005178:	4d06      	ldr	r5, [pc, #24]	; (8005194 <_sbrk_r+0x20>)
 800517a:	0004      	movs	r4, r0
 800517c:	0008      	movs	r0, r1
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fb fcfe 	bl	8000b80 <_sbrk>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d103      	bne.n	8005190 <_sbrk_r+0x1c>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d000      	beq.n	8005190 <_sbrk_r+0x1c>
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	bd70      	pop	{r4, r5, r6, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	20001c14 	.word	0x20001c14

08005198 <strcat>:
 8005198:	0002      	movs	r2, r0
 800519a:	b510      	push	{r4, lr}
 800519c:	7813      	ldrb	r3, [r2, #0]
 800519e:	0014      	movs	r4, r2
 80051a0:	3201      	adds	r2, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1fa      	bne.n	800519c <strcat+0x4>
 80051a6:	5cca      	ldrb	r2, [r1, r3]
 80051a8:	54e2      	strb	r2, [r4, r3]
 80051aa:	3301      	adds	r3, #1
 80051ac:	2a00      	cmp	r2, #0
 80051ae:	d1fa      	bne.n	80051a6 <strcat+0xe>
 80051b0:	bd10      	pop	{r4, pc}

080051b2 <strstr>:
 80051b2:	780a      	ldrb	r2, [r1, #0]
 80051b4:	b530      	push	{r4, r5, lr}
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	d10c      	bne.n	80051d4 <strstr+0x22>
 80051ba:	bd30      	pop	{r4, r5, pc}
 80051bc:	429a      	cmp	r2, r3
 80051be:	d108      	bne.n	80051d2 <strstr+0x20>
 80051c0:	2301      	movs	r3, #1
 80051c2:	5ccc      	ldrb	r4, [r1, r3]
 80051c4:	2c00      	cmp	r4, #0
 80051c6:	d0f8      	beq.n	80051ba <strstr+0x8>
 80051c8:	5cc5      	ldrb	r5, [r0, r3]
 80051ca:	42a5      	cmp	r5, r4
 80051cc:	d101      	bne.n	80051d2 <strstr+0x20>
 80051ce:	3301      	adds	r3, #1
 80051d0:	e7f7      	b.n	80051c2 <strstr+0x10>
 80051d2:	3001      	adds	r0, #1
 80051d4:	7803      	ldrb	r3, [r0, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <strstr+0xa>
 80051da:	0018      	movs	r0, r3
 80051dc:	e7ed      	b.n	80051ba <strstr+0x8>
	...

080051e0 <__utoa>:
 80051e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e2:	0016      	movs	r6, r2
 80051e4:	b08d      	sub	sp, #52	; 0x34
 80051e6:	0007      	movs	r7, r0
 80051e8:	000c      	movs	r4, r1
 80051ea:	2225      	movs	r2, #37	; 0x25
 80051ec:	4916      	ldr	r1, [pc, #88]	; (8005248 <__utoa+0x68>)
 80051ee:	a802      	add	r0, sp, #8
 80051f0:	f7ff fece 	bl	8004f90 <memcpy>
 80051f4:	1eb3      	subs	r3, r6, #2
 80051f6:	2500      	movs	r5, #0
 80051f8:	2b22      	cmp	r3, #34	; 0x22
 80051fa:	d820      	bhi.n	800523e <__utoa+0x5e>
 80051fc:	1e63      	subs	r3, r4, #1
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	ab02      	add	r3, sp, #8
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	0038      	movs	r0, r7
 8005206:	0031      	movs	r1, r6
 8005208:	f7fb f80c 	bl	8000224 <__aeabi_uidivmod>
 800520c:	000b      	movs	r3, r1
 800520e:	9a01      	ldr	r2, [sp, #4]
 8005210:	0029      	movs	r1, r5
 8005212:	5cd3      	ldrb	r3, [r2, r3]
 8005214:	9a00      	ldr	r2, [sp, #0]
 8005216:	3501      	adds	r5, #1
 8005218:	5553      	strb	r3, [r2, r5]
 800521a:	003b      	movs	r3, r7
 800521c:	0007      	movs	r7, r0
 800521e:	429e      	cmp	r6, r3
 8005220:	d9f0      	bls.n	8005204 <__utoa+0x24>
 8005222:	2300      	movs	r3, #0
 8005224:	0022      	movs	r2, r4
 8005226:	5563      	strb	r3, [r4, r5]
 8005228:	000b      	movs	r3, r1
 800522a:	1ac8      	subs	r0, r1, r3
 800522c:	4283      	cmp	r3, r0
 800522e:	dd08      	ble.n	8005242 <__utoa+0x62>
 8005230:	7810      	ldrb	r0, [r2, #0]
 8005232:	5ce5      	ldrb	r5, [r4, r3]
 8005234:	7015      	strb	r5, [r2, #0]
 8005236:	54e0      	strb	r0, [r4, r3]
 8005238:	3201      	adds	r2, #1
 800523a:	3b01      	subs	r3, #1
 800523c:	e7f5      	b.n	800522a <__utoa+0x4a>
 800523e:	7025      	strb	r5, [r4, #0]
 8005240:	002c      	movs	r4, r5
 8005242:	0020      	movs	r0, r4
 8005244:	b00d      	add	sp, #52	; 0x34
 8005246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005248:	08005548 	.word	0x08005548

0800524c <__malloc_lock>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4802      	ldr	r0, [pc, #8]	; (8005258 <__malloc_lock+0xc>)
 8005250:	f7ff fe9c 	bl	8004f8c <__retarget_lock_acquire_recursive>
 8005254:	bd10      	pop	{r4, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	20001c0c 	.word	0x20001c0c

0800525c <__malloc_unlock>:
 800525c:	b510      	push	{r4, lr}
 800525e:	4802      	ldr	r0, [pc, #8]	; (8005268 <__malloc_unlock+0xc>)
 8005260:	f7ff fe95 	bl	8004f8e <__retarget_lock_release_recursive>
 8005264:	bd10      	pop	{r4, pc}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	20001c0c 	.word	0x20001c0c

0800526c <_free_r>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	0005      	movs	r5, r0
 8005270:	2900      	cmp	r1, #0
 8005272:	d010      	beq.n	8005296 <_free_r+0x2a>
 8005274:	1f0c      	subs	r4, r1, #4
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	da00      	bge.n	800527e <_free_r+0x12>
 800527c:	18e4      	adds	r4, r4, r3
 800527e:	0028      	movs	r0, r5
 8005280:	f7ff ffe4 	bl	800524c <__malloc_lock>
 8005284:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <_free_r+0x90>)
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <_free_r+0x2c>
 800528c:	6063      	str	r3, [r4, #4]
 800528e:	6014      	str	r4, [r2, #0]
 8005290:	0028      	movs	r0, r5
 8005292:	f7ff ffe3 	bl	800525c <__malloc_unlock>
 8005296:	bd70      	pop	{r4, r5, r6, pc}
 8005298:	42a3      	cmp	r3, r4
 800529a:	d908      	bls.n	80052ae <_free_r+0x42>
 800529c:	6821      	ldr	r1, [r4, #0]
 800529e:	1860      	adds	r0, r4, r1
 80052a0:	4283      	cmp	r3, r0
 80052a2:	d1f3      	bne.n	800528c <_free_r+0x20>
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	1841      	adds	r1, r0, r1
 80052aa:	6021      	str	r1, [r4, #0]
 80052ac:	e7ee      	b.n	800528c <_free_r+0x20>
 80052ae:	001a      	movs	r2, r3
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <_free_r+0x4e>
 80052b6:	42a3      	cmp	r3, r4
 80052b8:	d9f9      	bls.n	80052ae <_free_r+0x42>
 80052ba:	6811      	ldr	r1, [r2, #0]
 80052bc:	1850      	adds	r0, r2, r1
 80052be:	42a0      	cmp	r0, r4
 80052c0:	d10b      	bne.n	80052da <_free_r+0x6e>
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	1809      	adds	r1, r1, r0
 80052c6:	1850      	adds	r0, r2, r1
 80052c8:	6011      	str	r1, [r2, #0]
 80052ca:	4283      	cmp	r3, r0
 80052cc:	d1e0      	bne.n	8005290 <_free_r+0x24>
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	1841      	adds	r1, r0, r1
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	6053      	str	r3, [r2, #4]
 80052d8:	e7da      	b.n	8005290 <_free_r+0x24>
 80052da:	42a0      	cmp	r0, r4
 80052dc:	d902      	bls.n	80052e4 <_free_r+0x78>
 80052de:	230c      	movs	r3, #12
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	e7d5      	b.n	8005290 <_free_r+0x24>
 80052e4:	6821      	ldr	r1, [r4, #0]
 80052e6:	1860      	adds	r0, r4, r1
 80052e8:	4283      	cmp	r3, r0
 80052ea:	d103      	bne.n	80052f4 <_free_r+0x88>
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	1841      	adds	r1, r0, r1
 80052f2:	6021      	str	r1, [r4, #0]
 80052f4:	6063      	str	r3, [r4, #4]
 80052f6:	6054      	str	r4, [r2, #4]
 80052f8:	e7ca      	b.n	8005290 <_free_r+0x24>
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	20001a54 	.word	0x20001a54

08005300 <_init>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr

0800530c <_fini>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr
