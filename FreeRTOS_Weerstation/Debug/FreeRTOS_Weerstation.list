
FreeRTOS_Weerstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d1c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005020  08005020  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005020  08005020  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005020  08005020  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b98  20000070  08005098  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000100  20001c08  08005098  00021c08  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a0d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb5  00000000  00000000  00038aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0003ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003cd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003394  00000000  00000000  0003de88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b29  00000000  00000000  0004121c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ec11  00000000  00000000  00055d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ec  00000000  00000000  000c49ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004dc4 	.word	0x08004dc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004dc4 	.word	0x08004dc4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <debugPrintln>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debugPrint(UART_HandleTypeDef *huart, char _out[]){
HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
}
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	0018      	movs	r0, r3
 800023e:	f7ff ff63 	bl	8000108 <strlen>
 8000242:	0003      	movs	r3, r0
 8000244:	b29a      	uxth	r2, r3
 8000246:	6839      	ldr	r1, [r7, #0]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	230a      	movs	r3, #10
 800024c:	f001 fe64 	bl	8001f18 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8000250:	210c      	movs	r1, #12
 8000252:	187b      	adds	r3, r7, r1
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <debugPrintln+0x3c>)
 8000256:	801a      	strh	r2, [r3, #0]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000258:	1879      	adds	r1, r7, r1
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	230a      	movs	r3, #10
 800025e:	2202      	movs	r2, #2
 8000260:	f001 fe5a 	bl	8001f18 <HAL_UART_Transmit>
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}
 800026c:	00000a0d 	.word	0x00000a0d

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fbcc 	bl	8000a10 <HAL_Init>

  /* USER CODE BEGIN Init */
  //Reset sensor data.
  intTemp = 0;
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <main+0x58>)
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
  intHum = 0;
 800027e:	4b13      	ldr	r3, [pc, #76]	; (80002cc <main+0x5c>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
  intPress = 0;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <main+0x60>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
  intError = 0;
 800028a:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <main+0x64>)
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, (uint8_t *) "ATE0\r\n", strlen("ATE0\r\n"), 10); //Disable ESP echo
 8000290:	4911      	ldr	r1, [pc, #68]	; (80002d8 <main+0x68>)
 8000292:	4812      	ldr	r0, [pc, #72]	; (80002dc <main+0x6c>)
 8000294:	230a      	movs	r3, #10
 8000296:	2206      	movs	r2, #6
 8000298:	f001 fe3e 	bl	8001f18 <HAL_UART_Transmit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f826 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f8e6 	bl	8000470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a4:	f000 f8b4 	bl	8000410 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80002a8:	f000 f882 	bl	80003b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002ac:	f002 f9de 	bl	800266c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of dataESP */
  dataESPHandle = osThreadNew(sendDataESP, NULL, &dataESP_attributes);
 80002b0:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <main+0x70>)
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <main+0x74>)
 80002b4:	2100      	movs	r1, #0
 80002b6:	0018      	movs	r0, r3
 80002b8:	f002 fa32 	bl	8002720 <osThreadNew>
 80002bc:	0002      	movs	r2, r0
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <main+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002c2:	f002 f9ff 	bl	80026c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <main+0x56>
 80002c8:	20001b6c 	.word	0x20001b6c
 80002cc:	20001ae4 	.word	0x20001ae4
 80002d0:	20001a54 	.word	0x20001a54
 80002d4:	20001ae0 	.word	0x20001ae0
 80002d8:	08004de4 	.word	0x08004de4
 80002dc:	20001a5c 	.word	0x20001a5c
 80002e0:	08004f34 	.word	0x08004f34
 80002e4:	08000545 	.word	0x08000545
 80002e8:	20001a58 	.word	0x20001a58

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b095      	sub	sp, #84	; 0x54
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	2420      	movs	r4, #32
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0018      	movs	r0, r3
 80002f8:	2330      	movs	r3, #48	; 0x30
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f004 fc48 	bl	8004b92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	2310      	movs	r3, #16
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	0018      	movs	r0, r3
 8000308:	2310      	movs	r3, #16
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f004 fc40 	bl	8004b92 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000312:	003b      	movs	r3, r7
 8000314:	0018      	movs	r0, r3
 8000316:	2310      	movs	r3, #16
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f004 fc39 	bl	8004b92 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000320:	0021      	movs	r1, r4
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2202      	movs	r2, #2
 8000326:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2201      	movs	r2, #1
 800032c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2210      	movs	r2, #16
 8000332:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2202      	movs	r2, #2
 8000338:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	22a0      	movs	r2, #160	; 0xa0
 8000344:	0392      	lsls	r2, r2, #14
 8000346:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2200      	movs	r2, #0
 800034c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	187b      	adds	r3, r7, r1
 8000350:	0018      	movs	r0, r3
 8000352:	f000 fdc9 	bl	8000ee8 <HAL_RCC_OscConfig>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800035a:	f000 fa01 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	2110      	movs	r1, #16
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2207      	movs	r2, #7
 8000364:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2202      	movs	r2, #2
 800036a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2101      	movs	r1, #1
 800037c:	0018      	movs	r0, r3
 800037e:	f001 f8cd 	bl	800151c <HAL_RCC_ClockConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000386:	f000 f9eb 	bl	8000760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800038a:	003b      	movs	r3, r7
 800038c:	2201      	movs	r2, #1
 800038e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000390:	003b      	movs	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000396:	003b      	movs	r3, r7
 8000398:	0018      	movs	r0, r3
 800039a:	f001 fa3b 	bl	8001814 <HAL_RCCEx_PeriphCLKConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003a2:	f000 f9dd 	bl	8000760 <Error_Handler>
  }
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b015      	add	sp, #84	; 0x54
 80003ac:	bd90      	pop	{r4, r7, pc}
	...

080003b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <MX_USART1_UART_Init+0x5c>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003bc:	22e1      	movs	r2, #225	; 0xe1
 80003be:	0252      	lsls	r2, r2, #9
 80003c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 fd3b 	bl	8001e70 <HAL_UART_Init>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003fe:	f000 f9af 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20001a5c 	.word	0x20001a5c
 800040c:	40013800 	.word	0x40013800

08000410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000416:	4a15      	ldr	r2, [pc, #84]	; (800046c <MX_USART2_UART_Init+0x5c>)
 8000418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_USART2_UART_Init+0x58>)
 800041c:	22e1      	movs	r2, #225	; 0xe1
 800041e:	0252      	lsls	r2, r2, #9
 8000420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_USART2_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000436:	220c      	movs	r2, #12
 8000438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <MX_USART2_UART_Init+0x58>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_USART2_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000454:	0018      	movs	r0, r3
 8000456:	f001 fd0b 	bl	8001e70 <HAL_UART_Init>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800045e:	f000 f97f 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20001ae8 	.word	0x20001ae8
 800046c:	40004400 	.word	0x40004400

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b089      	sub	sp, #36	; 0x24
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	240c      	movs	r4, #12
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2314      	movs	r3, #20
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f004 fb86 	bl	8004b92 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b2d      	ldr	r3, [pc, #180]	; (800053c <MX_GPIO_Init+0xcc>)
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b2c      	ldr	r3, [pc, #176]	; (800053c <MX_GPIO_Init+0xcc>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0309      	lsls	r1, r1, #12
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	4b29      	ldr	r3, [pc, #164]	; (800053c <MX_GPIO_Init+0xcc>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	031b      	lsls	r3, r3, #12
 800049c:	4013      	ands	r3, r2
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004a2:	4b26      	ldr	r3, [pc, #152]	; (800053c <MX_GPIO_Init+0xcc>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b25      	ldr	r3, [pc, #148]	; (800053c <MX_GPIO_Init+0xcc>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	03c9      	lsls	r1, r1, #15
 80004ac:	430a      	orrs	r2, r1
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	4b22      	ldr	r3, [pc, #136]	; (800053c <MX_GPIO_Init+0xcc>)
 80004b2:	695a      	ldr	r2, [r3, #20]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	03db      	lsls	r3, r3, #15
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b1f      	ldr	r3, [pc, #124]	; (800053c <MX_GPIO_Init+0xcc>)
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <MX_GPIO_Init+0xcc>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0289      	lsls	r1, r1, #10
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <MX_GPIO_Init+0xcc>)
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	029b      	lsls	r3, r3, #10
 80004d4:	4013      	ands	r3, r2
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004da:	2390      	movs	r3, #144	; 0x90
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fce2 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	0192      	lsls	r2, r2, #6
 80004ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2284      	movs	r2, #132	; 0x84
 80004f4:	0392      	lsls	r2, r2, #14
 80004f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <MX_GPIO_Init+0xd0>)
 8000502:	0019      	movs	r1, r3
 8000504:	0010      	movs	r0, r2
 8000506:	f000 fb61 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800050a:	0021      	movs	r1, r4
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2220      	movs	r2, #32
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000524:	187a      	adds	r2, r7, r1
 8000526:	2390      	movs	r3, #144	; 0x90
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fb4d 	bl	8000bcc <HAL_GPIO_Init>

}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b009      	add	sp, #36	; 0x24
 8000538:	bd90      	pop	{r4, r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40021000 	.word	0x40021000
 8000540:	48000800 	.word	0x48000800

08000544 <sendDataESP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendDataESP */
void sendDataESP(void *argument)
{
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b0bb      	sub	sp, #236	; 0xec
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  debugPrintln(&huart2, "Temp in C: " + intTemp);
 800054c:	4b69      	ldr	r3, [pc, #420]	; (80006f4 <sendDataESP+0x1b0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	001a      	movs	r2, r3
 8000552:	4b69      	ldr	r3, [pc, #420]	; (80006f8 <sendDataESP+0x1b4>)
 8000554:	18d2      	adds	r2, r2, r3
 8000556:	4b69      	ldr	r3, [pc, #420]	; (80006fc <sendDataESP+0x1b8>)
 8000558:	0011      	movs	r1, r2
 800055a:	0018      	movs	r0, r3
 800055c:	f7ff fe68 	bl	8000230 <debugPrintln>
	  debugPrintln(&huart2, "Hum in %: " + intHum);
 8000560:	4b67      	ldr	r3, [pc, #412]	; (8000700 <sendDataESP+0x1bc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	001a      	movs	r2, r3
 8000566:	4b67      	ldr	r3, [pc, #412]	; (8000704 <sendDataESP+0x1c0>)
 8000568:	18d2      	adds	r2, r2, r3
 800056a:	4b64      	ldr	r3, [pc, #400]	; (80006fc <sendDataESP+0x1b8>)
 800056c:	0011      	movs	r1, r2
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff fe5e 	bl	8000230 <debugPrintln>
	  debugPrintln(&huart2, "Press in Pa: " + intPress);
 8000574:	4b64      	ldr	r3, [pc, #400]	; (8000708 <sendDataESP+0x1c4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	001a      	movs	r2, r3
 800057a:	4b64      	ldr	r3, [pc, #400]	; (800070c <sendDataESP+0x1c8>)
 800057c:	18d2      	adds	r2, r2, r3
 800057e:	4b5f      	ldr	r3, [pc, #380]	; (80006fc <sendDataESP+0x1b8>)
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff fe54 	bl	8000230 <debugPrintln>
	  char tmp[] = "Date & Time: ";
 8000588:	21d8      	movs	r1, #216	; 0xd8
 800058a:	187b      	adds	r3, r7, r1
 800058c:	4a60      	ldr	r2, [pc, #384]	; (8000710 <sendDataESP+0x1cc>)
 800058e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000590:	c331      	stmia	r3!, {r0, r4, r5}
 8000592:	8812      	ldrh	r2, [r2, #0]
 8000594:	801a      	strh	r2, [r3, #0]
	  strcat(tmp,NTPdateTime);
 8000596:	4a5f      	ldr	r2, [pc, #380]	; (8000714 <sendDataESP+0x1d0>)
 8000598:	000c      	movs	r4, r1
 800059a:	187b      	adds	r3, r7, r1
 800059c:	0011      	movs	r1, r2
 800059e:	0018      	movs	r0, r3
 80005a0:	f004 fb72 	bl	8004c88 <strcat>
	  debugPrintln(&huart2, tmp);
 80005a4:	193a      	adds	r2, r7, r4
 80005a6:	4b55      	ldr	r3, [pc, #340]	; (80006fc <sendDataESP+0x1b8>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fe40 	bl	8000230 <debugPrintln>
	  debugPrintln(&huart2, "Error: " + intError);
 80005b0:	4b59      	ldr	r3, [pc, #356]	; (8000718 <sendDataESP+0x1d4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	001a      	movs	r2, r3
 80005b6:	4b59      	ldr	r3, [pc, #356]	; (800071c <sendDataESP+0x1d8>)
 80005b8:	18d2      	adds	r2, r2, r3
 80005ba:	4b50      	ldr	r3, [pc, #320]	; (80006fc <sendDataESP+0x1b8>)
 80005bc:	0011      	movs	r1, r2
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff fe36 	bl	8000230 <debugPrintln>
	  char url[] = "GET http://server03.hammer-tech.eu/weerstationProject/connect.php?";
 80005c4:	244c      	movs	r4, #76	; 0x4c
 80005c6:	193a      	adds	r2, r7, r4
 80005c8:	4b55      	ldr	r3, [pc, #340]	; (8000720 <sendDataESP+0x1dc>)
 80005ca:	0010      	movs	r0, r2
 80005cc:	0019      	movs	r1, r3
 80005ce:	2343      	movs	r3, #67	; 0x43
 80005d0:	001a      	movs	r2, r3
 80005d2:	f004 fad5 	bl	8004b80 <memcpy>
	  char temp[] = "&intTemp=";
 80005d6:	25cc      	movs	r5, #204	; 0xcc
 80005d8:	197b      	adds	r3, r7, r5
 80005da:	4a52      	ldr	r2, [pc, #328]	; (8000724 <sendDataESP+0x1e0>)
 80005dc:	ca03      	ldmia	r2!, {r0, r1}
 80005de:	c303      	stmia	r3!, {r0, r1}
 80005e0:	8812      	ldrh	r2, [r2, #0]
 80005e2:	801a      	strh	r2, [r3, #0]
	  itoa(intTemp,temp,10);
 80005e4:	4b43      	ldr	r3, [pc, #268]	; (80006f4 <sendDataESP+0x1b0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	1979      	adds	r1, r7, r5
 80005ea:	220a      	movs	r2, #10
 80005ec:	0018      	movs	r0, r3
 80005ee:	f004 fac1 	bl	8004b74 <itoa>
	  char hum[] = "&intHum=";
 80005f2:	26c0      	movs	r6, #192	; 0xc0
 80005f4:	19bb      	adds	r3, r7, r6
 80005f6:	4a4c      	ldr	r2, [pc, #304]	; (8000728 <sendDataESP+0x1e4>)
 80005f8:	ca03      	ldmia	r2!, {r0, r1}
 80005fa:	c303      	stmia	r3!, {r0, r1}
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	701a      	strb	r2, [r3, #0]
	  itoa(intHum,hum,10);
 8000600:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <sendDataESP+0x1bc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	19b9      	adds	r1, r7, r6
 8000606:	220a      	movs	r2, #10
 8000608:	0018      	movs	r0, r3
 800060a:	f004 fab3 	bl	8004b74 <itoa>
	  char press[] = "&intPress=";
 800060e:	20b4      	movs	r0, #180	; 0xb4
 8000610:	0004      	movs	r4, r0
 8000612:	183b      	adds	r3, r7, r0
 8000614:	4a45      	ldr	r2, [pc, #276]	; (800072c <sendDataESP+0x1e8>)
 8000616:	ca03      	ldmia	r2!, {r0, r1}
 8000618:	c303      	stmia	r3!, {r0, r1}
 800061a:	8811      	ldrh	r1, [r2, #0]
 800061c:	8019      	strh	r1, [r3, #0]
 800061e:	7892      	ldrb	r2, [r2, #2]
 8000620:	709a      	strb	r2, [r3, #2]
	  itoa(intPress,press,10);
 8000622:	4b39      	ldr	r3, [pc, #228]	; (8000708 <sendDataESP+0x1c4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	0020      	movs	r0, r4
 8000628:	1839      	adds	r1, r7, r0
 800062a:	220a      	movs	r2, #10
 800062c:	0018      	movs	r0, r3
 800062e:	f004 faa1 	bl	8004b74 <itoa>
	  char datetime[] = "&dtDateTime=";
 8000632:	21a4      	movs	r1, #164	; 0xa4
 8000634:	000d      	movs	r5, r1
 8000636:	187b      	adds	r3, r7, r1
 8000638:	4a3d      	ldr	r2, [pc, #244]	; (8000730 <sendDataESP+0x1ec>)
 800063a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800063c:	c313      	stmia	r3!, {r0, r1, r4}
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	701a      	strb	r2, [r3, #0]
	  strcat(datetime,NTPdateTime);
 8000642:	4a34      	ldr	r2, [pc, #208]	; (8000714 <sendDataESP+0x1d0>)
 8000644:	0029      	movs	r1, r5
 8000646:	187b      	adds	r3, r7, r1
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f004 fb1c 	bl	8004c88 <strcat>
	  char error[] = "&intStationError=";
 8000650:	2390      	movs	r3, #144	; 0x90
 8000652:	0018      	movs	r0, r3
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	4a37      	ldr	r2, [pc, #220]	; (8000734 <sendDataESP+0x1f0>)
 8000658:	ca32      	ldmia	r2!, {r1, r4, r5}
 800065a:	c332      	stmia	r3!, {r1, r4, r5}
 800065c:	6811      	ldr	r1, [r2, #0]
 800065e:	6019      	str	r1, [r3, #0]
 8000660:	8892      	ldrh	r2, [r2, #4]
 8000662:	809a      	strh	r2, [r3, #4]
	  itoa(intError,error,10);
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <sendDataESP+0x1d4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0002      	movs	r2, r0
 800066a:	18b9      	adds	r1, r7, r2
 800066c:	220a      	movs	r2, #10
 800066e:	0018      	movs	r0, r3
 8000670:	f004 fa80 	bl	8004b74 <itoa>
	  char end[] = " HTTP/1.1\r\nHost: server03.hammer-tech.eu\r\n Connection: close\r\n\r\n";
 8000674:	2308      	movs	r3, #8
 8000676:	18fa      	adds	r2, r7, r3
 8000678:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <sendDataESP+0x1f4>)
 800067a:	0010      	movs	r0, r2
 800067c:	0019      	movs	r1, r3
 800067e:	2341      	movs	r3, #65	; 0x41
 8000680:	001a      	movs	r2, r3
 8000682:	f004 fa7d 	bl	8004b80 <memcpy>
	  strcat(url,temp);
 8000686:	25cc      	movs	r5, #204	; 0xcc
 8000688:	197a      	adds	r2, r7, r5
 800068a:	244c      	movs	r4, #76	; 0x4c
 800068c:	193b      	adds	r3, r7, r4
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f004 faf9 	bl	8004c88 <strcat>
	  strcat(url,hum);
 8000696:	19ba      	adds	r2, r7, r6
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f004 faf3 	bl	8004c88 <strcat>
	  strcat(url,press);
 80006a2:	20b4      	movs	r0, #180	; 0xb4
 80006a4:	183a      	adds	r2, r7, r0
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f004 faec 	bl	8004c88 <strcat>
	  strcat(url,datetime);
 80006b0:	21a4      	movs	r1, #164	; 0xa4
 80006b2:	187a      	adds	r2, r7, r1
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f004 fae5 	bl	8004c88 <strcat>
	  strcat(url,error);
 80006be:	2290      	movs	r2, #144	; 0x90
 80006c0:	18ba      	adds	r2, r7, r2
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	0011      	movs	r1, r2
 80006c6:	0018      	movs	r0, r3
 80006c8:	f004 fade 	bl	8004c88 <strcat>
	  strcat(url,end);
 80006cc:	2308      	movs	r3, #8
 80006ce:	18fa      	adds	r2, r7, r3
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f004 fad7 	bl	8004c88 <strcat>
	  debugPrintln(&huart2, url);
 80006da:	193a      	adds	r2, r7, r4
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <sendDataESP+0x1b8>)
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff fda5 	bl	8000230 <debugPrintln>
	  //HAL_UART_Transmit(&huart1, (uint8_t *) txData, strlen(txData), 10000);

	 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	 osDelay(500);
 80006e6:	23fa      	movs	r3, #250	; 0xfa
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f002 f8c0 	bl	8002870 <osDelay>
  {
 80006f0:	e72c      	b.n	800054c <sendDataESP+0x8>
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	20001b6c 	.word	0x20001b6c
 80006f8:	08004dec 	.word	0x08004dec
 80006fc:	20001ae8 	.word	0x20001ae8
 8000700:	20001ae4 	.word	0x20001ae4
 8000704:	08004df8 	.word	0x08004df8
 8000708:	20001a54 	.word	0x20001a54
 800070c:	08004e04 	.word	0x08004e04
 8000710:	08004e1c 	.word	0x08004e1c
 8000714:	2000008c 	.word	0x2000008c
 8000718:	20001ae0 	.word	0x20001ae0
 800071c:	08004e14 	.word	0x08004e14
 8000720:	08004e2c 	.word	0x08004e2c
 8000724:	08004e70 	.word	0x08004e70
 8000728:	08004e7c 	.word	0x08004e7c
 800072c:	08004e88 	.word	0x08004e88
 8000730:	08004e94 	.word	0x08004e94
 8000734:	08004ea4 	.word	0x08004ea4
 8000738:	08004eb8 	.word	0x08004eb8

0800073c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d101      	bne.n	8000752 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074e:	f000 f973 	bl	8000a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b002      	add	sp, #8
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	40014800 	.word	0x40014800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_MspInit+0x50>)
 8000774:	699a      	ldr	r2, [r3, #24]
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <HAL_MspInit+0x50>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	619a      	str	r2, [r3, #24]
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x50>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x50>)
 800078c:	69da      	ldr	r2, [r3, #28]
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_MspInit+0x50>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	0549      	lsls	r1, r1, #21
 8000794:	430a      	orrs	r2, r1
 8000796:	61da      	str	r2, [r3, #28]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_MspInit+0x50>)
 800079a:	69da      	ldr	r2, [r3, #28]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	055b      	lsls	r3, r3, #21
 80007a0:	4013      	ands	r3, r2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007a6:	2302      	movs	r3, #2
 80007a8:	425b      	negs	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	2103      	movs	r1, #3
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f9e6 	bl	8000b80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b08d      	sub	sp, #52	; 0x34
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	241c      	movs	r4, #28
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f004 f9dd 	bl	8004b92 <memset>
  if(huart->Instance==USART1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a39      	ldr	r2, [pc, #228]	; (80008c4 <HAL_UART_MspInit+0x104>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d134      	bne.n	800084c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <HAL_UART_MspInit+0x108>)
 80007e4:	699a      	ldr	r2, [r3, #24]
 80007e6:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <HAL_UART_MspInit+0x108>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	01c9      	lsls	r1, r1, #7
 80007ec:	430a      	orrs	r2, r1
 80007ee:	619a      	str	r2, [r3, #24]
 80007f0:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <HAL_UART_MspInit+0x108>)
 80007f2:	699a      	ldr	r2, [r3, #24]
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	01db      	lsls	r3, r3, #7
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <HAL_UART_MspInit+0x108>)
 8000800:	695a      	ldr	r2, [r3, #20]
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <HAL_UART_MspInit+0x108>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0289      	lsls	r1, r1, #10
 8000808:	430a      	orrs	r2, r1
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <HAL_UART_MspInit+0x108>)
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	029b      	lsls	r3, r3, #10
 8000814:	4013      	ands	r3, r2
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	22c0      	movs	r2, #192	; 0xc0
 800081e:	00d2      	lsls	r2, r2, #3
 8000820:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	0021      	movs	r1, r4
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2202      	movs	r2, #2
 8000828:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2203      	movs	r2, #3
 8000834:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2201      	movs	r2, #1
 800083a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	187a      	adds	r2, r7, r1
 800083e:	2390      	movs	r3, #144	; 0x90
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f9c1 	bl	8000bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084a:	e037      	b.n	80008bc <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <HAL_UART_MspInit+0x10c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d132      	bne.n	80008bc <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <HAL_UART_MspInit+0x108>)
 8000858:	69da      	ldr	r2, [r3, #28]
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_UART_MspInit+0x108>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0289      	lsls	r1, r1, #10
 8000860:	430a      	orrs	r2, r1
 8000862:	61da      	str	r2, [r3, #28]
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_UART_MspInit+0x108>)
 8000866:	69da      	ldr	r2, [r3, #28]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	029b      	lsls	r3, r3, #10
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_MspInit+0x108>)
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_UART_MspInit+0x108>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0289      	lsls	r1, r1, #10
 800087c:	430a      	orrs	r2, r1
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_UART_MspInit+0x108>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	029b      	lsls	r3, r3, #10
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088e:	211c      	movs	r1, #28
 8000890:	187b      	adds	r3, r7, r1
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2202      	movs	r2, #2
 800089a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2201      	movs	r2, #1
 80008ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	187a      	adds	r2, r7, r1
 80008b0:	2390      	movs	r3, #144	; 0x90
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 f988 	bl	8000bcc <HAL_GPIO_Init>
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b00d      	add	sp, #52	; 0x34
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40004400 	.word	0x40004400

080008d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	0019      	movs	r1, r3
 80008e6:	2016      	movs	r0, #22
 80008e8:	f000 f94a 	bl	8000b80 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80008ec:	2016      	movs	r0, #22
 80008ee:	f000 f95c 	bl	8000baa <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_InitTick+0xa8>)
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_InitTick+0xa8>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	02c9      	lsls	r1, r1, #11
 80008fc:	430a      	orrs	r2, r1
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_InitTick+0xa8>)
 8000902:	699a      	ldr	r2, [r3, #24]
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	02db      	lsls	r3, r3, #11
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090e:	230c      	movs	r3, #12
 8000910:	18fa      	adds	r2, r7, r3
 8000912:	2310      	movs	r3, #16
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 ff51 	bl	80017c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800091e:	f000 ff39 	bl	8001794 <HAL_RCC_GetPCLK1Freq>
 8000922:	0003      	movs	r3, r0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	4914      	ldr	r1, [pc, #80]	; (800097c <HAL_InitTick+0xac>)
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff fbf4 	bl	8000118 <__udivsi3>
 8000930:	0003      	movs	r3, r0
 8000932:	3b01      	subs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0xb0>)
 8000938:	4a12      	ldr	r2, [pc, #72]	; (8000984 <HAL_InitTick+0xb4>)
 800093a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_InitTick+0xb0>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <HAL_InitTick+0xb8>)
 8000940:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_InitTick+0xb0>)
 8000944:	6a3a      	ldr	r2, [r7, #32]
 8000946:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_InitTick+0xb0>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_InitTick+0xb0>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_InitTick+0xb0>)
 8000956:	0018      	movs	r0, r3
 8000958:	f001 f82a 	bl	80019b0 <HAL_TIM_Base_Init>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d105      	bne.n	800096c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_InitTick+0xb0>)
 8000962:	0018      	movs	r0, r3
 8000964:	f001 f87c 	bl	8001a60 <HAL_TIM_Base_Start_IT>
 8000968:	0003      	movs	r3, r0
 800096a:	e000      	b.n	800096e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b00a      	add	sp, #40	; 0x28
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000
 800097c:	000f4240 	.word	0x000f4240
 8000980:	20001b70 	.word	0x20001b70
 8000984:	40014800 	.word	0x40014800
 8000988:	000003e7 	.word	0x000003e7

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <TIM17_IRQHandler+0x14>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 f8aa 	bl	8001af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	20001b70 	.word	0x20001b70

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e6:	f7ff ffe3 	bl	80009b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ea:	f004 f887 	bl	8004afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ee:	f7ff fc3f 	bl	8000270 <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   r0, =_estack
 80009f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a00:	08005028 	.word	0x08005028
  ldr r2, =_sbss
 8000a04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a08:	20001c08 	.word	0x20001c08

08000a0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_IRQHandler>
	...

08000a10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_Init+0x24>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_Init+0x24>)
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f7ff ff55 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a26:	f7ff fea1 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x1c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	001a      	movs	r2, r3
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_IncTick+0x20>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	18d2      	adds	r2, r2, r3
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_IncTick+0x20>)
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	20000004 	.word	0x20000004
 8000a58:	20001bb8 	.word	0x20001bb8

08000a5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <HAL_GetTick+0x10>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20001bb8 	.word	0x20001bb8

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	0002      	movs	r2, r0
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b7f      	cmp	r3, #127	; 0x7f
 8000a82:	d809      	bhi.n	8000a98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	001a      	movs	r2, r3
 8000a8a:	231f      	movs	r3, #31
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_EnableIRQ+0x30>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	4091      	lsls	r1, r2
 8000a94:	000a      	movs	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]
  }
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	0002      	movs	r2, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab8:	d828      	bhi.n	8000b0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aba:	4a2f      	ldr	r2, [pc, #188]	; (8000b78 <__NVIC_SetPriority+0xd4>)
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	33c0      	adds	r3, #192	; 0xc0
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	589b      	ldr	r3, [r3, r2]
 8000aca:	1dfa      	adds	r2, r7, #7
 8000acc:	7812      	ldrb	r2, [r2, #0]
 8000ace:	0011      	movs	r1, r2
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	400a      	ands	r2, r1
 8000ad4:	00d2      	lsls	r2, r2, #3
 8000ad6:	21ff      	movs	r1, #255	; 0xff
 8000ad8:	4091      	lsls	r1, r2
 8000ada:	000a      	movs	r2, r1
 8000adc:	43d2      	mvns	r2, r2
 8000ade:	401a      	ands	r2, r3
 8000ae0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	019b      	lsls	r3, r3, #6
 8000ae6:	22ff      	movs	r2, #255	; 0xff
 8000ae8:	401a      	ands	r2, r3
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0018      	movs	r0, r3
 8000af0:	2303      	movs	r3, #3
 8000af2:	4003      	ands	r3, r0
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af8:	481f      	ldr	r0, [pc, #124]	; (8000b78 <__NVIC_SetPriority+0xd4>)
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	430a      	orrs	r2, r1
 8000b04:	33c0      	adds	r3, #192	; 0xc0
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b0a:	e031      	b.n	8000b70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <__NVIC_SetPriority+0xd8>)
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0019      	movs	r1, r3
 8000b14:	230f      	movs	r3, #15
 8000b16:	400b      	ands	r3, r1
 8000b18:	3b08      	subs	r3, #8
 8000b1a:	089b      	lsrs	r3, r3, #2
 8000b1c:	3306      	adds	r3, #6
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	18d3      	adds	r3, r2, r3
 8000b22:	3304      	adds	r3, #4
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1dfa      	adds	r2, r7, #7
 8000b28:	7812      	ldrb	r2, [r2, #0]
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	400a      	ands	r2, r1
 8000b30:	00d2      	lsls	r2, r2, #3
 8000b32:	21ff      	movs	r1, #255	; 0xff
 8000b34:	4091      	lsls	r1, r2
 8000b36:	000a      	movs	r2, r1
 8000b38:	43d2      	mvns	r2, r2
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	019b      	lsls	r3, r3, #6
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	401a      	ands	r2, r3
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	4003      	ands	r3, r0
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <__NVIC_SetPriority+0xd8>)
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	001c      	movs	r4, r3
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	4023      	ands	r3, r4
 8000b60:	3b08      	subs	r3, #8
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	430a      	orrs	r2, r1
 8000b66:	3306      	adds	r3, #6
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	18c3      	adds	r3, r0, r3
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b003      	add	sp, #12
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	1c02      	adds	r2, r0, #0
 8000b90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ff81 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	0002      	movs	r2, r0
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff57 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bda:	e14f      	b.n	8000e7c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	4091      	lsls	r1, r2
 8000be6:	000a      	movs	r2, r1
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d100      	bne.n	8000bf4 <HAL_GPIO_Init+0x28>
 8000bf2:	e140      	b.n	8000e76 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d005      	beq.n	8000c0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2203      	movs	r2, #3
 8000c06:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d130      	bne.n	8000c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	409a      	lsls	r2, r3
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	0013      	movs	r3, r2
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c42:	2201      	movs	r2, #1
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	091b      	lsrs	r3, r3, #4
 8000c58:	2201      	movs	r2, #1
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2203      	movs	r2, #3
 8000c74:	4013      	ands	r3, r2
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d017      	beq.n	8000caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	409a      	lsls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2203      	movs	r2, #3
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d123      	bne.n	8000cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	58d3      	ldr	r3, [r2, r3]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	4013      	ands	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	220f      	movs	r2, #15
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	691a      	ldr	r2, [r3, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2107      	movs	r1, #7
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	6939      	ldr	r1, [r7, #16]
 8000cfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	23c0      	movs	r3, #192	; 0xc0
 8000d38:	029b      	lsls	r3, r3, #10
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d100      	bne.n	8000d40 <HAL_GPIO_Init+0x174>
 8000d3e:	e09a      	b.n	8000e76 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d40:	4b54      	ldr	r3, [pc, #336]	; (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d42:	699a      	ldr	r2, [r3, #24]
 8000d44:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d46:	2101      	movs	r1, #1
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	619a      	str	r2, [r3, #24]
 8000d4c:	4b51      	ldr	r3, [pc, #324]	; (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	2201      	movs	r2, #1
 8000d52:	4013      	ands	r3, r2
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d58:	4a4f      	ldr	r2, [pc, #316]	; (8000e98 <HAL_GPIO_Init+0x2cc>)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3302      	adds	r3, #2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	589b      	ldr	r3, [r3, r2]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	409a      	lsls	r2, r3
 8000d72:	0013      	movs	r3, r2
 8000d74:	43da      	mvns	r2, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	2390      	movs	r3, #144	; 0x90
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d013      	beq.n	8000dae <HAL_GPIO_Init+0x1e2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a44      	ldr	r2, [pc, #272]	; (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d00d      	beq.n	8000daa <HAL_GPIO_Init+0x1de>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a43      	ldr	r2, [pc, #268]	; (8000ea0 <HAL_GPIO_Init+0x2d4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d007      	beq.n	8000da6 <HAL_GPIO_Init+0x1da>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a42      	ldr	r2, [pc, #264]	; (8000ea4 <HAL_GPIO_Init+0x2d8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_GPIO_Init+0x1d6>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000da2:	2305      	movs	r3, #5
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000dae:	2300      	movs	r3, #0
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	2103      	movs	r1, #3
 8000db4:	400a      	ands	r2, r1
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc0:	4935      	ldr	r1, [pc, #212]	; (8000e98 <HAL_GPIO_Init+0x2cc>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	025b      	lsls	r3, r3, #9
 8000de6:	4013      	ands	r3, r2
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	4013      	ands	r3, r2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	035b      	lsls	r3, r3, #13
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	039b      	lsls	r3, r3, #14
 8000e64:	4013      	ands	r3, r2
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	40da      	lsrs	r2, r3
 8000e84:	1e13      	subs	r3, r2, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_GPIO_Init+0x2be>
 8000e88:	e6a8      	b.n	8000bdc <HAL_GPIO_Init+0x10>
  } 
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b006      	add	sp, #24
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48000c00 	.word	0x48000c00
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	0008      	movs	r0, r1
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	1cbb      	adds	r3, r7, #2
 8000eba:	1c02      	adds	r2, r0, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	1c7b      	adds	r3, r7, #1
 8000ec0:	1c0a      	adds	r2, r1, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec4:	1c7b      	adds	r3, r7, #1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d004      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ecc:	1cbb      	adds	r3, r7, #2
 8000ece:	881a      	ldrh	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed4:	e003      	b.n	8000ede <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed6:	1cbb      	adds	r3, r7, #2
 8000ed8:	881a      	ldrh	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e301      	b.n	80014fe <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2201      	movs	r2, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	d100      	bne.n	8000f06 <HAL_RCC_OscConfig+0x1e>
 8000f04:	e08d      	b.n	8001022 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f06:	4bc3      	ldr	r3, [pc, #780]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d00e      	beq.n	8000f30 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f12:	4bc0      	ldr	r3, [pc, #768]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	220c      	movs	r2, #12
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d116      	bne.n	8000f4c <HAL_RCC_OscConfig+0x64>
 8000f1e:	4bbd      	ldr	r3, [pc, #756]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	025b      	lsls	r3, r3, #9
 8000f26:	401a      	ands	r2, r3
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d10d      	bne.n	8000f4c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	4bb8      	ldr	r3, [pc, #736]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	029b      	lsls	r3, r3, #10
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d100      	bne.n	8000f3e <HAL_RCC_OscConfig+0x56>
 8000f3c:	e070      	b.n	8001020 <HAL_RCC_OscConfig+0x138>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d000      	beq.n	8000f48 <HAL_RCC_OscConfig+0x60>
 8000f46:	e06b      	b.n	8001020 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e2d8      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d107      	bne.n	8000f64 <HAL_RCC_OscConfig+0x7c>
 8000f54:	4baf      	ldr	r3, [pc, #700]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4bae      	ldr	r3, [pc, #696]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	0249      	lsls	r1, r1, #9
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e02f      	b.n	8000fc4 <HAL_RCC_OscConfig+0xdc>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10c      	bne.n	8000f86 <HAL_RCC_OscConfig+0x9e>
 8000f6c:	4ba9      	ldr	r3, [pc, #676]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4ba8      	ldr	r3, [pc, #672]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f72:	49a9      	ldr	r1, [pc, #676]	; (8001218 <HAL_RCC_OscConfig+0x330>)
 8000f74:	400a      	ands	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	4ba6      	ldr	r3, [pc, #664]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4ba5      	ldr	r3, [pc, #660]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	49a7      	ldr	r1, [pc, #668]	; (800121c <HAL_RCC_OscConfig+0x334>)
 8000f80:	400a      	ands	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e01e      	b.n	8000fc4 <HAL_RCC_OscConfig+0xdc>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b05      	cmp	r3, #5
 8000f8c:	d10e      	bne.n	8000fac <HAL_RCC_OscConfig+0xc4>
 8000f8e:	4ba1      	ldr	r3, [pc, #644]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4ba0      	ldr	r3, [pc, #640]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	02c9      	lsls	r1, r1, #11
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	4b9d      	ldr	r3, [pc, #628]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b9c      	ldr	r3, [pc, #624]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e00b      	b.n	8000fc4 <HAL_RCC_OscConfig+0xdc>
 8000fac:	4b99      	ldr	r3, [pc, #612]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b98      	ldr	r3, [pc, #608]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	4999      	ldr	r1, [pc, #612]	; (8001218 <HAL_RCC_OscConfig+0x330>)
 8000fb4:	400a      	ands	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	4b96      	ldr	r3, [pc, #600]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b95      	ldr	r3, [pc, #596]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	4997      	ldr	r1, [pc, #604]	; (800121c <HAL_RCC_OscConfig+0x334>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d014      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fd46 	bl	8000a5c <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fd41 	bl	8000a5c <HAL_GetTick>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b64      	cmp	r3, #100	; 0x64
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e28a      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe8:	4b8a      	ldr	r3, [pc, #552]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	029b      	lsls	r3, r3, #10
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0xee>
 8000ff4:	e015      	b.n	8001022 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fd31 	bl	8000a5c <HAL_GetTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fd2c 	bl	8000a5c <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e275      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	4b80      	ldr	r3, [pc, #512]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	029b      	lsls	r3, r3, #10
 800101a:	4013      	ands	r3, r2
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x118>
 800101e:	e000      	b.n	8001022 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	4013      	ands	r3, r2
 800102a:	d100      	bne.n	800102e <HAL_RCC_OscConfig+0x146>
 800102c:	e069      	b.n	8001102 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800102e:	4b79      	ldr	r3, [pc, #484]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	220c      	movs	r2, #12
 8001034:	4013      	ands	r3, r2
 8001036:	d00b      	beq.n	8001050 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001038:	4b76      	ldr	r3, [pc, #472]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	220c      	movs	r2, #12
 800103e:	4013      	ands	r3, r2
 8001040:	2b08      	cmp	r3, #8
 8001042:	d11c      	bne.n	800107e <HAL_RCC_OscConfig+0x196>
 8001044:	4b73      	ldr	r3, [pc, #460]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	025b      	lsls	r3, r3, #9
 800104c:	4013      	ands	r3, r2
 800104e:	d116      	bne.n	800107e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001050:	4b70      	ldr	r3, [pc, #448]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2202      	movs	r2, #2
 8001056:	4013      	ands	r3, r2
 8001058:	d005      	beq.n	8001066 <HAL_RCC_OscConfig+0x17e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d001      	beq.n	8001066 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e24b      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001066:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	22f8      	movs	r2, #248	; 0xf8
 800106c:	4393      	bics	r3, r2
 800106e:	0019      	movs	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	00da      	lsls	r2, r3, #3
 8001076:	4b67      	ldr	r3, [pc, #412]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107c:	e041      	b.n	8001102 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d024      	beq.n	80010d0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001086:	4b63      	ldr	r3, [pc, #396]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 800108c:	2101      	movs	r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fce3 	bl	8000a5c <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff fcde 	bl	8000a5c <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e227      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ae:	4b59      	ldr	r3, [pc, #356]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2202      	movs	r2, #2
 80010b4:	4013      	ands	r3, r2
 80010b6:	d0f1      	beq.n	800109c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b8:	4b56      	ldr	r3, [pc, #344]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	22f8      	movs	r2, #248	; 0xf8
 80010be:	4393      	bics	r3, r2
 80010c0:	0019      	movs	r1, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	00da      	lsls	r2, r3, #3
 80010c8:	4b52      	ldr	r3, [pc, #328]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 80010ca:	430a      	orrs	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e018      	b.n	8001102 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d0:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b4f      	ldr	r3, [pc, #316]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	438a      	bics	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010dc:	f7ff fcbe 	bl	8000a5c <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e6:	f7ff fcb9 	bl	8000a5c <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e202      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f8:	4b46      	ldr	r3, [pc, #280]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d1f1      	bne.n	80010e6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2208      	movs	r2, #8
 8001108:	4013      	ands	r3, r2
 800110a:	d036      	beq.n	800117a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d019      	beq.n	8001148 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001114:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001118:	4b3e      	ldr	r3, [pc, #248]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 800111a:	2101      	movs	r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001120:	f7ff fc9c 	bl	8000a5c <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112a:	f7ff fc97 	bl	8000a5c <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1e0      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	2202      	movs	r2, #2
 8001142:	4013      	ands	r3, r2
 8001144:	d0f1      	beq.n	800112a <HAL_RCC_OscConfig+0x242>
 8001146:	e018      	b.n	800117a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001148:	4b32      	ldr	r3, [pc, #200]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 800114a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 800114e:	2101      	movs	r1, #1
 8001150:	438a      	bics	r2, r1
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001154:	f7ff fc82 	bl	8000a5c <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115e:	f7ff fc7d 	bl	8000a5c <HAL_GetTick>
 8001162:	0002      	movs	r2, r0
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1c6      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	2202      	movs	r2, #2
 8001176:	4013      	ands	r3, r2
 8001178:	d1f1      	bne.n	800115e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2204      	movs	r2, #4
 8001180:	4013      	ands	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x29e>
 8001184:	e0b4      	b.n	80012f0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001186:	201f      	movs	r0, #31
 8001188:	183b      	adds	r3, r7, r0
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001190:	69da      	ldr	r2, [r3, #28]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	055b      	lsls	r3, r3, #21
 8001196:	4013      	ands	r3, r2
 8001198:	d110      	bne.n	80011bc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 800119c:	69da      	ldr	r2, [r3, #28]
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0549      	lsls	r1, r1, #21
 80011a4:	430a      	orrs	r2, r1
 80011a6:	61da      	str	r2, [r3, #28]
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 80011aa:	69da      	ldr	r2, [r3, #28]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	055b      	lsls	r3, r3, #21
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011b6:	183b      	adds	r3, r7, r0
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_RCC_OscConfig+0x338>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4013      	ands	r3, r2
 80011c6:	d11a      	bne.n	80011fe <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_RCC_OscConfig+0x338>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_RCC_OscConfig+0x338>)
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	0049      	lsls	r1, r1, #1
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fc41 	bl	8000a5c <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e0:	f7ff fc3c 	bl	8000a5c <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e185      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_RCC_OscConfig+0x338>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d10e      	bne.n	8001224 <HAL_RCC_OscConfig+0x33c>
 8001206:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8001208:	6a1a      	ldr	r2, [r3, #32]
 800120a:	4b02      	ldr	r3, [pc, #8]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 800120c:	2101      	movs	r1, #1
 800120e:	430a      	orrs	r2, r1
 8001210:	621a      	str	r2, [r3, #32]
 8001212:	e035      	b.n	8001280 <HAL_RCC_OscConfig+0x398>
 8001214:	40021000 	.word	0x40021000
 8001218:	fffeffff 	.word	0xfffeffff
 800121c:	fffbffff 	.word	0xfffbffff
 8001220:	40007000 	.word	0x40007000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10c      	bne.n	8001246 <HAL_RCC_OscConfig+0x35e>
 800122c:	4bb6      	ldr	r3, [pc, #728]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800122e:	6a1a      	ldr	r2, [r3, #32]
 8001230:	4bb5      	ldr	r3, [pc, #724]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001232:	2101      	movs	r1, #1
 8001234:	438a      	bics	r2, r1
 8001236:	621a      	str	r2, [r3, #32]
 8001238:	4bb3      	ldr	r3, [pc, #716]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800123a:	6a1a      	ldr	r2, [r3, #32]
 800123c:	4bb2      	ldr	r3, [pc, #712]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800123e:	2104      	movs	r1, #4
 8001240:	438a      	bics	r2, r1
 8001242:	621a      	str	r2, [r3, #32]
 8001244:	e01c      	b.n	8001280 <HAL_RCC_OscConfig+0x398>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b05      	cmp	r3, #5
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x380>
 800124e:	4bae      	ldr	r3, [pc, #696]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001250:	6a1a      	ldr	r2, [r3, #32]
 8001252:	4bad      	ldr	r3, [pc, #692]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001254:	2104      	movs	r1, #4
 8001256:	430a      	orrs	r2, r1
 8001258:	621a      	str	r2, [r3, #32]
 800125a:	4bab      	ldr	r3, [pc, #684]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800125c:	6a1a      	ldr	r2, [r3, #32]
 800125e:	4baa      	ldr	r3, [pc, #680]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001260:	2101      	movs	r1, #1
 8001262:	430a      	orrs	r2, r1
 8001264:	621a      	str	r2, [r3, #32]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0x398>
 8001268:	4ba7      	ldr	r3, [pc, #668]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800126a:	6a1a      	ldr	r2, [r3, #32]
 800126c:	4ba6      	ldr	r3, [pc, #664]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800126e:	2101      	movs	r1, #1
 8001270:	438a      	bics	r2, r1
 8001272:	621a      	str	r2, [r3, #32]
 8001274:	4ba4      	ldr	r3, [pc, #656]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001276:	6a1a      	ldr	r2, [r3, #32]
 8001278:	4ba3      	ldr	r3, [pc, #652]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800127a:	2104      	movs	r1, #4
 800127c:	438a      	bics	r2, r1
 800127e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d014      	beq.n	80012b2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001288:	f7ff fbe8 	bl	8000a5c <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	e009      	b.n	80012a6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fbe3 	bl	8000a5c <HAL_GetTick>
 8001296:	0002      	movs	r2, r0
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	4a9b      	ldr	r2, [pc, #620]	; (800150c <HAL_RCC_OscConfig+0x624>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e12b      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a6:	4b98      	ldr	r3, [pc, #608]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	2202      	movs	r2, #2
 80012ac:	4013      	ands	r3, r2
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x3aa>
 80012b0:	e013      	b.n	80012da <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fbd3 	bl	8000a5c <HAL_GetTick>
 80012b6:	0003      	movs	r3, r0
 80012b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ba:	e009      	b.n	80012d0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f7ff fbce 	bl	8000a5c <HAL_GetTick>
 80012c0:	0002      	movs	r2, r0
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	4a91      	ldr	r2, [pc, #580]	; (800150c <HAL_RCC_OscConfig+0x624>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e116      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d0:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	2202      	movs	r2, #2
 80012d6:	4013      	ands	r3, r2
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012da:	231f      	movs	r3, #31
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e4:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80012e6:	69da      	ldr	r2, [r3, #28]
 80012e8:	4b87      	ldr	r3, [pc, #540]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80012ea:	4989      	ldr	r1, [pc, #548]	; (8001510 <HAL_RCC_OscConfig+0x628>)
 80012ec:	400a      	ands	r2, r1
 80012ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2210      	movs	r2, #16
 80012f6:	4013      	ands	r3, r2
 80012f8:	d063      	beq.n	80013c2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d12a      	bne.n	8001358 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001302:	4b81      	ldr	r3, [pc, #516]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001306:	4b80      	ldr	r3, [pc, #512]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001308:	2104      	movs	r1, #4
 800130a:	430a      	orrs	r2, r1
 800130c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800130e:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001312:	4b7d      	ldr	r3, [pc, #500]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001314:	2101      	movs	r1, #1
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb9f 	bl	8000a5c <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001324:	f7ff fb9a 	bl	8000a5c <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e0e3      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001336:	4b74      	ldr	r3, [pc, #464]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d0f1      	beq.n	8001324 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001340:	4b71      	ldr	r3, [pc, #452]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001344:	22f8      	movs	r2, #248	; 0xf8
 8001346:	4393      	bics	r3, r2
 8001348:	0019      	movs	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	00da      	lsls	r2, r3, #3
 8001350:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001352:	430a      	orrs	r2, r1
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
 8001356:	e034      	b.n	80013c2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	3305      	adds	r3, #5
 800135e:	d111      	bne.n	8001384 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001360:	4b69      	ldr	r3, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001364:	4b68      	ldr	r3, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001366:	2104      	movs	r1, #4
 8001368:	438a      	bics	r2, r1
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	22f8      	movs	r2, #248	; 0xf8
 8001372:	4393      	bics	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	00da      	lsls	r2, r3, #3
 800137c:	4b62      	ldr	r3, [pc, #392]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800137e:	430a      	orrs	r2, r1
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
 8001382:	e01e      	b.n	80013c2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001384:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001388:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800138a:	2104      	movs	r1, #4
 800138c:	430a      	orrs	r2, r1
 800138e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001390:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001394:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001396:	2101      	movs	r1, #1
 8001398:	438a      	bics	r2, r1
 800139a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff fb5e 	bl	8000a5c <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013a6:	f7ff fb59 	bl	8000a5c <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e0a2      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80013ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d1f1      	bne.n	80013a6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d100      	bne.n	80013cc <HAL_RCC_OscConfig+0x4e4>
 80013ca:	e097      	b.n	80014fc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013cc:	4b4e      	ldr	r3, [pc, #312]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	220c      	movs	r2, #12
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d100      	bne.n	80013da <HAL_RCC_OscConfig+0x4f2>
 80013d8:	e06b      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d14c      	bne.n	800147c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80013e8:	494a      	ldr	r1, [pc, #296]	; (8001514 <HAL_RCC_OscConfig+0x62c>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fb35 	bl	8000a5c <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fb30 	bl	8000a5c <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e079      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140a:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	049b      	lsls	r3, r3, #18
 8001412:	4013      	ands	r3, r2
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001416:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	220f      	movs	r2, #15
 800141c:	4393      	bics	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001424:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001426:	430a      	orrs	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a3a      	ldr	r2, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x630>)
 8001430:	4013      	ands	r3, r2
 8001432:	0019      	movs	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	431a      	orrs	r2, r3
 800143e:	4b32      	ldr	r3, [pc, #200]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	0449      	lsls	r1, r1, #17
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fb03 	bl	8000a5c <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fafe 	bl	8000a5c <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e047      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	049b      	lsls	r3, r3, #18
 8001476:	4013      	ands	r3, r2
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x574>
 800147a:	e03f      	b.n	80014fc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 8001482:	4924      	ldr	r1, [pc, #144]	; (8001514 <HAL_RCC_OscConfig+0x62c>)
 8001484:	400a      	ands	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fae8 	bl	8000a5c <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fae3 	bl	8000a5c <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e02c      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	049b      	lsls	r3, r3, #18
 80014ac:	4013      	ands	r3, r2
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x5aa>
 80014b0:	e024      	b.n	80014fc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e01f      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_RCC_OscConfig+0x620>)
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	025b      	lsls	r3, r3, #9
 80014d0:	401a      	ands	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d10e      	bne.n	80014f8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	220f      	movs	r2, #15
 80014de:	401a      	ands	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	23f0      	movs	r3, #240	; 0xf0
 80014ec:	039b      	lsls	r3, r3, #14
 80014ee:	401a      	ands	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b008      	add	sp, #32
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40021000 	.word	0x40021000
 800150c:	00001388 	.word	0x00001388
 8001510:	efffffff 	.word	0xefffffff
 8001514:	feffffff 	.word	0xfeffffff
 8001518:	ffc2ffff 	.word	0xffc2ffff

0800151c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0b3      	b.n	8001698 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <HAL_RCC_ClockConfig+0x184>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2201      	movs	r2, #1
 8001536:	4013      	ands	r3, r2
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d911      	bls.n	8001562 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_RCC_ClockConfig+0x184>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2201      	movs	r2, #1
 8001544:	4393      	bics	r3, r2
 8001546:	0019      	movs	r1, r3
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_RCC_ClockConfig+0x184>)
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_ClockConfig+0x184>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2201      	movs	r2, #1
 8001556:	4013      	ands	r3, r2
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d001      	beq.n	8001562 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e09a      	b.n	8001698 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2202      	movs	r2, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d015      	beq.n	8001598 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2204      	movs	r2, #4
 8001572:	4013      	ands	r3, r2
 8001574:	d006      	beq.n	8001584 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001576:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 800157c:	21e0      	movs	r1, #224	; 0xe0
 800157e:	00c9      	lsls	r1, r1, #3
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001584:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	22f0      	movs	r2, #240	; 0xf0
 800158a:	4393      	bics	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2201      	movs	r2, #1
 800159e:	4013      	ands	r3, r2
 80015a0:	d040      	beq.n	8001624 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	029b      	lsls	r3, r3, #10
 80015b2:	4013      	ands	r3, r2
 80015b4:	d114      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e06e      	b.n	8001698 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	049b      	lsls	r3, r3, #18
 80015ca:	4013      	ands	r3, r2
 80015cc:	d108      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e062      	b.n	8001698 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e05b      	b.n	8001698 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2203      	movs	r2, #3
 80015e6:	4393      	bics	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f4:	f7ff fa32 	bl	8000a5c <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fc:	e009      	b.n	8001612 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	f7ff fa2d 	bl	8000a5c <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <HAL_RCC_ClockConfig+0x18c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e042      	b.n	8001698 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	220c      	movs	r2, #12
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	429a      	cmp	r2, r3
 8001622:	d1ec      	bne.n	80015fe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_RCC_ClockConfig+0x184>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2201      	movs	r2, #1
 800162a:	4013      	ands	r3, r2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d211      	bcs.n	8001656 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_ClockConfig+0x184>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	4393      	bics	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_RCC_ClockConfig+0x184>)
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_RCC_ClockConfig+0x184>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e020      	b.n	8001698 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2204      	movs	r2, #4
 800165c:	4013      	ands	r3, r2
 800165e:	d009      	beq.n	8001674 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_RCC_ClockConfig+0x190>)
 8001666:	4013      	ands	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001674:	f000 f820 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 8001678:	0001      	movs	r1, r0
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_RCC_ClockConfig+0x188>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	220f      	movs	r2, #15
 8001682:	4013      	ands	r3, r2
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_RCC_ClockConfig+0x194>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	000a      	movs	r2, r1
 800168a:	40da      	lsrs	r2, r3
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x198>)
 800168e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001690:	2003      	movs	r0, #3
 8001692:	f7ff f91d 	bl	80008d0 <HAL_InitTick>
  
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	00001388 	.word	0x00001388
 80016ac:	fffff8ff 	.word	0xfffff8ff
 80016b0:	08004f58 	.word	0x08004f58
 80016b4:	20000000 	.word	0x20000000

080016b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b08f      	sub	sp, #60	; 0x3c
 80016bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016be:	2314      	movs	r3, #20
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016c6:	c313      	stmia	r3!, {r0, r1, r4}
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016d2:	c313      	stmia	r3!, {r0, r1, r4}
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	220c      	movs	r2, #12
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d002      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x4a>
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d003      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x50>
 8001700:	e02d      	b.n	800175e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001706:	e02d      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	220f      	movs	r2, #15
 800170e:	4013      	ands	r3, r2
 8001710:	2214      	movs	r2, #20
 8001712:	18ba      	adds	r2, r7, r2
 8001714:	5cd3      	ldrb	r3, [r2, r3]
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_RCC_GetSysClockFreq+0xc0>)
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	220f      	movs	r2, #15
 800171e:	4013      	ands	r3, r2
 8001720:	1d3a      	adds	r2, r7, #4
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	025b      	lsls	r3, r3, #9
 800172c:	4013      	ands	r3, r2
 800172e:	d009      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001732:	4812      	ldr	r0, [pc, #72]	; (800177c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001734:	f7fe fcf0 	bl	8000118 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	001a      	movs	r2, r3
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	4353      	muls	r3, r2
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
 8001742:	e009      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001746:	000a      	movs	r2, r1
 8001748:	0152      	lsls	r2, r2, #5
 800174a:	1a52      	subs	r2, r2, r1
 800174c:	0193      	lsls	r3, r2, #6
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	185b      	adds	r3, r3, r1
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800175c:	e002      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001762:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b00f      	add	sp, #60	; 0x3c
 800176c:	bd90      	pop	{r4, r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	08004efc 	.word	0x08004efc
 8001774:	08004f0c 	.word	0x08004f0c
 8001778:	40021000 	.word	0x40021000
 800177c:	007a1200 	.word	0x007a1200

08001780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001784:	4b02      	ldr	r3, [pc, #8]	; (8001790 <HAL_RCC_GetHCLKFreq+0x10>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	20000000 	.word	0x20000000

08001794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001798:	f7ff fff2 	bl	8001780 <HAL_RCC_GetHCLKFreq>
 800179c:	0001      	movs	r1, r0
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	2207      	movs	r2, #7
 80017a6:	4013      	ands	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	40d9      	lsrs	r1, r3
 80017ae:	000b      	movs	r3, r1
}    
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	40021000 	.word	0x40021000
 80017bc:	08004f68 	.word	0x08004f68

080017c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_RCC_GetClockConfig+0x4c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	401a      	ands	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_GetClockConfig+0x4c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	22f0      	movs	r2, #240	; 0xf0
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_RCC_GetClockConfig+0x4c>)
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	23e0      	movs	r3, #224	; 0xe0
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	401a      	ands	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_GetClockConfig+0x50>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	401a      	ands	r2, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b002      	add	sp, #8
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	40021000 	.word	0x40021000
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	025b      	lsls	r3, r3, #9
 800182c:	4013      	ands	r3, r2
 800182e:	d100      	bne.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001830:	e08e      	b.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2017      	movs	r0, #23
 8001834:	183b      	adds	r3, r7, r0
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183a:	4b57      	ldr	r3, [pc, #348]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	055b      	lsls	r3, r3, #21
 8001842:	4013      	ands	r3, r2
 8001844:	d110      	bne.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b54      	ldr	r3, [pc, #336]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001848:	69da      	ldr	r2, [r3, #28]
 800184a:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	0549      	lsls	r1, r1, #21
 8001850:	430a      	orrs	r2, r1
 8001852:	61da      	str	r2, [r3, #28]
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	055b      	lsls	r3, r3, #21
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	183b      	adds	r3, r7, r0
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4013      	ands	r3, r2
 8001872:	d11a      	bne.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001874:	4b49      	ldr	r3, [pc, #292]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b48      	ldr	r3, [pc, #288]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0049      	lsls	r1, r1, #1
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001882:	f7ff f8eb 	bl	8000a5c <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	e008      	b.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188c:	f7ff f8e6 	bl	8000a5c <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e077      	b.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189e:	4b3f      	ldr	r3, [pc, #252]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	d0f0      	beq.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018ac:	6a1a      	ldr	r2, [r3, #32]
 80018ae:	23c0      	movs	r3, #192	; 0xc0
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d034      	beq.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	23c0      	movs	r3, #192	; 0xc0
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d02c      	beq.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018d8:	6a1a      	ldr	r2, [r3, #32]
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0249      	lsls	r1, r1, #9
 80018e0:	430a      	orrs	r2, r1
 80018e2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018ea:	492e      	ldr	r1, [pc, #184]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f8ad 	bl	8000a5c <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	e009      	b.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff f8a8 	bl	8000a5c <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e038      	b.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	2202      	movs	r2, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d0f0      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800192c:	4013      	ands	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001936:	430a      	orrs	r2, r1
 8001938:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800193a:	2317      	movs	r3, #23
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001946:	69da      	ldr	r2, [r3, #28]
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800194a:	4918      	ldr	r1, [pc, #96]	; (80019ac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800194c:	400a      	ands	r2, r1
 800194e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2201      	movs	r2, #1
 8001956:	4013      	ands	r3, r2
 8001958:	d009      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	2203      	movs	r2, #3
 8001960:	4393      	bics	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800196a:	430a      	orrs	r2, r1
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2220      	movs	r2, #32
 8001974:	4013      	ands	r3, r2
 8001976:	d009      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	2210      	movs	r2, #16
 800197e:	4393      	bics	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001988:	430a      	orrs	r2, r1
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b006      	add	sp, #24
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	40021000 	.word	0x40021000
 800199c:	40007000 	.word	0x40007000
 80019a0:	fffffcff 	.word	0xfffffcff
 80019a4:	fffeffff 	.word	0xfffeffff
 80019a8:	00001388 	.word	0x00001388
 80019ac:	efffffff 	.word	0xefffffff

080019b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e042      	b.n	8001a48 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	223d      	movs	r2, #61	; 0x3d
 80019c6:	5c9b      	ldrb	r3, [r3, r2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	223c      	movs	r2, #60	; 0x3c
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 f839 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	223d      	movs	r2, #61	; 0x3d
 80019e2:	2102      	movs	r1, #2
 80019e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3304      	adds	r3, #4
 80019ee:	0019      	movs	r1, r3
 80019f0:	0010      	movs	r0, r2
 80019f2:	f000 f9b7 	bl	8001d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2246      	movs	r2, #70	; 0x46
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	223e      	movs	r2, #62	; 0x3e
 8001a02:	2101      	movs	r1, #1
 8001a04:	5499      	strb	r1, [r3, r2]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	223f      	movs	r2, #63	; 0x3f
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	5499      	strb	r1, [r3, r2]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2240      	movs	r2, #64	; 0x40
 8001a12:	2101      	movs	r1, #1
 8001a14:	5499      	strb	r1, [r3, r2]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2241      	movs	r2, #65	; 0x41
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2242      	movs	r2, #66	; 0x42
 8001a22:	2101      	movs	r1, #1
 8001a24:	5499      	strb	r1, [r3, r2]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2243      	movs	r2, #67	; 0x43
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	5499      	strb	r1, [r3, r2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2244      	movs	r2, #68	; 0x44
 8001a32:	2101      	movs	r1, #1
 8001a34:	5499      	strb	r1, [r3, r2]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2245      	movs	r2, #69	; 0x45
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	223d      	movs	r2, #61	; 0x3d
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	223d      	movs	r2, #61	; 0x3d
 8001a6c:	5c9b      	ldrb	r3, [r3, r2]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d001      	beq.n	8001a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e035      	b.n	8001ae4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	223d      	movs	r2, #61	; 0x3d
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a15      	ldr	r2, [pc, #84]	; (8001aec <HAL_TIM_Base_Start_IT+0x8c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_TIM_Base_Start_IT+0x4e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <HAL_TIM_Base_Start_IT+0x90>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_TIM_Base_Start_IT+0x4e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_TIM_Base_Start_IT+0x94>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d111      	bne.n	8001ad2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b06      	cmp	r3, #6
 8001abe:	d010      	beq.n	8001ae2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2101      	movs	r1, #1
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad0:	e007      	b.n	8001ae2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b004      	add	sp, #16
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40012c00 	.word	0x40012c00
 8001af0:	40000400 	.word	0x40000400
 8001af4:	40014000 	.word	0x40014000

08001af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d124      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d11d      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2203      	movs	r2, #3
 8001b22:	4252      	negs	r2, r2
 8001b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2203      	movs	r2, #3
 8001b34:	4013      	ands	r3, r2
 8001b36:	d004      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 f8fa 	bl	8001d34 <HAL_TIM_IC_CaptureCallback>
 8001b40:	e007      	b.n	8001b52 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	0018      	movs	r0, r3
 8001b46:	f000 f8ed 	bl	8001d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 f8f9 	bl	8001d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d125      	bne.n	8001bb2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d11e      	bne.n	8001bb2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2205      	movs	r2, #5
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2202      	movs	r2, #2
 8001b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	23c0      	movs	r3, #192	; 0xc0
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f8cd 	bl	8001d34 <HAL_TIM_IC_CaptureCallback>
 8001b9a:	e007      	b.n	8001bac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f000 f8c0 	bl	8001d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 f8cc 	bl	8001d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2208      	movs	r2, #8
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d124      	bne.n	8001c0a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d11d      	bne.n	8001c0a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2209      	movs	r2, #9
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2204      	movs	r2, #4
 8001bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	d004      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f000 f8a1 	bl	8001d34 <HAL_TIM_IC_CaptureCallback>
 8001bf2:	e007      	b.n	8001c04 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 f894 	bl	8001d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 f8a0 	bl	8001d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2210      	movs	r2, #16
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	d125      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2210      	movs	r2, #16
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d11e      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2211      	movs	r2, #17
 8001c2c:	4252      	negs	r2, r2
 8001c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2208      	movs	r2, #8
 8001c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4013      	ands	r3, r2
 8001c42:	d004      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 f874 	bl	8001d34 <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e007      	b.n	8001c5e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f000 f867 	bl	8001d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 f873 	bl	8001d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d10f      	bne.n	8001c92 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d108      	bne.n	8001c92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2202      	movs	r2, #2
 8001c86:	4252      	negs	r2, r2
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7fe fd55 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b80      	cmp	r3, #128	; 0x80
 8001c9e:	d10f      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b80      	cmp	r3, #128	; 0x80
 8001cac:	d108      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2281      	movs	r2, #129	; 0x81
 8001cb4:	4252      	negs	r2, r2
 8001cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 f8d0 	bl	8001e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b40      	cmp	r3, #64	; 0x40
 8001ccc:	d10f      	bne.n	8001cee <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b40      	cmp	r3, #64	; 0x40
 8001cda:	d108      	bne.n	8001cee <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2241      	movs	r2, #65	; 0x41
 8001ce2:	4252      	negs	r2, r2
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 f833 	bl	8001d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d10f      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d108      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2221      	movs	r2, #33	; 0x21
 8001d10:	4252      	negs	r2, r2
 8001d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 f89a 	bl	8001e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b002      	add	sp, #8
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <TIM_Base_SetConfig+0xd0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <TIM_Base_SetConfig+0x20>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a2e      	ldr	r2, [pc, #184]	; (8001e38 <TIM_Base_SetConfig+0xd4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d108      	bne.n	8001d96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2270      	movs	r2, #112	; 0x70
 8001d88:	4393      	bics	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <TIM_Base_SetConfig+0xd0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <TIM_Base_SetConfig+0x62>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <TIM_Base_SetConfig+0xd4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00f      	beq.n	8001dc6 <TIM_Base_SetConfig+0x62>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <TIM_Base_SetConfig+0xd8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00b      	beq.n	8001dc6 <TIM_Base_SetConfig+0x62>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <TIM_Base_SetConfig+0xdc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <TIM_Base_SetConfig+0x62>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <TIM_Base_SetConfig+0xe0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <TIM_Base_SetConfig+0x62>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <TIM_Base_SetConfig+0xe4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d108      	bne.n	8001dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <TIM_Base_SetConfig+0xe8>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	4393      	bics	r3, r2
 8001dde:	001a      	movs	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <TIM_Base_SetConfig+0xd0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00b      	beq.n	8001e1e <TIM_Base_SetConfig+0xba>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <TIM_Base_SetConfig+0xdc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <TIM_Base_SetConfig+0xba>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <TIM_Base_SetConfig+0xe0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d003      	beq.n	8001e1e <TIM_Base_SetConfig+0xba>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <TIM_Base_SetConfig+0xe4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d103      	bne.n	8001e26 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	615a      	str	r2, [r3, #20]
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b004      	add	sp, #16
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40002000 	.word	0x40002000
 8001e40:	40014000 	.word	0x40014000
 8001e44:	40014400 	.word	0x40014400
 8001e48:	40014800 	.word	0x40014800
 8001e4c:	fffffcff 	.word	0xfffffcff

08001e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e044      	b.n	8001f0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d107      	bne.n	8001e9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2274      	movs	r2, #116	; 0x74
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7fe fc93 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2224      	movs	r2, #36	; 0x24
 8001e9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f8da 	bl	800206c <UART_SetConfig>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e024      	b.n	8001f0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 fa0d 	bl	80022ec <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	490d      	ldr	r1, [pc, #52]	; (8001f14 <HAL_UART_Init+0xa4>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2108      	movs	r1, #8
 8001eee:	438a      	bics	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f000 faa5 	bl	8002454 <UART_CheckIdleState>
 8001f0a:	0003      	movs	r3, r0
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	fffff7ff 	.word	0xfffff7ff

08001f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	1dbb      	adds	r3, r7, #6
 8001f26:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d000      	beq.n	8001f32 <HAL_UART_Transmit+0x1a>
 8001f30:	e096      	b.n	8002060 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_UART_Transmit+0x28>
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e08e      	b.n	8002062 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	015b      	lsls	r3, r3, #5
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d109      	bne.n	8001f64 <HAL_UART_Transmit+0x4c>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d001      	beq.n	8001f64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e07e      	b.n	8002062 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2274      	movs	r2, #116	; 0x74
 8001f68:	5c9b      	ldrb	r3, [r3, r2]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_UART_Transmit+0x5a>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e077      	b.n	8002062 <HAL_UART_Transmit+0x14a>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2274      	movs	r2, #116	; 0x74
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2221      	movs	r2, #33	; 0x21
 8001f86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f88:	f7fe fd68 	bl	8000a5c <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1dba      	adds	r2, r7, #6
 8001f94:	2150      	movs	r1, #80	; 0x50
 8001f96:	8812      	ldrh	r2, [r2, #0]
 8001f98:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1dba      	adds	r2, r7, #6
 8001f9e:	2152      	movs	r1, #82	; 0x52
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	015b      	lsls	r3, r3, #5
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d108      	bne.n	8001fc2 <HAL_UART_Transmit+0xaa>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d104      	bne.n	8001fc2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e003      	b.n	8001fca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2274      	movs	r2, #116	; 0x74
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001fd2:	e02d      	b.n	8002030 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	0013      	movs	r3, r2
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2180      	movs	r1, #128	; 0x80
 8001fe2:	f000 fa7f 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 8001fe6:	1e03      	subs	r3, r0, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e039      	b.n	8002062 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10b      	bne.n	800200c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	881a      	ldrh	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	05d2      	lsls	r2, r2, #23
 8001ffe:	0dd2      	lsrs	r2, r2, #23
 8002000:	b292      	uxth	r2, r2
 8002002:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	3302      	adds	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	e008      	b.n	800201e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	b292      	uxth	r2, r2
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3301      	adds	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2252      	movs	r2, #82	; 0x52
 8002022:	5a9b      	ldrh	r3, [r3, r2]
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b299      	uxth	r1, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2252      	movs	r2, #82	; 0x52
 800202e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2252      	movs	r2, #82	; 0x52
 8002034:	5a9b      	ldrh	r3, [r3, r2]
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1cb      	bne.n	8001fd4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	0013      	movs	r3, r2
 8002046:	2200      	movs	r2, #0
 8002048:	2140      	movs	r1, #64	; 0x40
 800204a:	f000 fa4b 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d001      	beq.n	8002056 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e005      	b.n	8002062 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2220      	movs	r2, #32
 800205a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
  }
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b008      	add	sp, #32
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002074:	231e      	movs	r3, #30
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a8d      	ldr	r2, [pc, #564]	; (80022d0 <UART_SetConfig+0x264>)
 800209c:	4013      	ands	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a88      	ldr	r2, [pc, #544]	; (80022d4 <UART_SetConfig+0x268>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a7f      	ldr	r2, [pc, #508]	; (80022d8 <UART_SetConfig+0x26c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a7b      	ldr	r2, [pc, #492]	; (80022dc <UART_SetConfig+0x270>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d127      	bne.n	8002142 <UART_SetConfig+0xd6>
 80020f2:	4b7b      	ldr	r3, [pc, #492]	; (80022e0 <UART_SetConfig+0x274>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	2203      	movs	r2, #3
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d00d      	beq.n	800211a <UART_SetConfig+0xae>
 80020fe:	d81b      	bhi.n	8002138 <UART_SetConfig+0xcc>
 8002100:	2b02      	cmp	r3, #2
 8002102:	d014      	beq.n	800212e <UART_SetConfig+0xc2>
 8002104:	d818      	bhi.n	8002138 <UART_SetConfig+0xcc>
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <UART_SetConfig+0xa4>
 800210a:	2b01      	cmp	r3, #1
 800210c:	d00a      	beq.n	8002124 <UART_SetConfig+0xb8>
 800210e:	e013      	b.n	8002138 <UART_SetConfig+0xcc>
 8002110:	231f      	movs	r3, #31
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e021      	b.n	800215e <UART_SetConfig+0xf2>
 800211a:	231f      	movs	r3, #31
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	2202      	movs	r2, #2
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e01c      	b.n	800215e <UART_SetConfig+0xf2>
 8002124:	231f      	movs	r3, #31
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2204      	movs	r2, #4
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e017      	b.n	800215e <UART_SetConfig+0xf2>
 800212e:	231f      	movs	r3, #31
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2208      	movs	r2, #8
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e012      	b.n	800215e <UART_SetConfig+0xf2>
 8002138:	231f      	movs	r3, #31
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2210      	movs	r2, #16
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	e00d      	b.n	800215e <UART_SetConfig+0xf2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a67      	ldr	r2, [pc, #412]	; (80022e4 <UART_SetConfig+0x278>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d104      	bne.n	8002156 <UART_SetConfig+0xea>
 800214c:	231f      	movs	r3, #31
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	e003      	b.n	800215e <UART_SetConfig+0xf2>
 8002156:	231f      	movs	r3, #31
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2210      	movs	r2, #16
 800215c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	429a      	cmp	r2, r3
 8002168:	d15d      	bne.n	8002226 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800216a:	231f      	movs	r3, #31
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d015      	beq.n	80021a0 <UART_SetConfig+0x134>
 8002174:	dc18      	bgt.n	80021a8 <UART_SetConfig+0x13c>
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00d      	beq.n	8002196 <UART_SetConfig+0x12a>
 800217a:	dc15      	bgt.n	80021a8 <UART_SetConfig+0x13c>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <UART_SetConfig+0x11a>
 8002180:	2b02      	cmp	r3, #2
 8002182:	d005      	beq.n	8002190 <UART_SetConfig+0x124>
 8002184:	e010      	b.n	80021a8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002186:	f7ff fb05 	bl	8001794 <HAL_RCC_GetPCLK1Freq>
 800218a:	0003      	movs	r3, r0
 800218c:	61bb      	str	r3, [r7, #24]
        break;
 800218e:	e012      	b.n	80021b6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002190:	4b55      	ldr	r3, [pc, #340]	; (80022e8 <UART_SetConfig+0x27c>)
 8002192:	61bb      	str	r3, [r7, #24]
        break;
 8002194:	e00f      	b.n	80021b6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002196:	f7ff fa8f 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 800219a:	0003      	movs	r3, r0
 800219c:	61bb      	str	r3, [r7, #24]
        break;
 800219e:	e00a      	b.n	80021b6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	61bb      	str	r3, [r7, #24]
        break;
 80021a6:	e006      	b.n	80021b6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021ac:	231e      	movs	r3, #30
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
        break;
 80021b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d100      	bne.n	80021be <UART_SetConfig+0x152>
 80021bc:	e07b      	b.n	80022b6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	005a      	lsls	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	18d2      	adds	r2, r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0019      	movs	r1, r3
 80021d0:	0010      	movs	r0, r2
 80021d2:	f7fd ffa1 	bl	8000118 <__udivsi3>
 80021d6:	0003      	movs	r3, r0
 80021d8:	b29b      	uxth	r3, r3
 80021da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	d91c      	bls.n	800221c <UART_SetConfig+0x1b0>
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d217      	bcs.n	800221c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	200e      	movs	r0, #14
 80021f2:	183b      	adds	r3, r7, r0
 80021f4:	210f      	movs	r1, #15
 80021f6:	438a      	bics	r2, r1
 80021f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2207      	movs	r2, #7
 8002202:	4013      	ands	r3, r2
 8002204:	b299      	uxth	r1, r3
 8002206:	183b      	adds	r3, r7, r0
 8002208:	183a      	adds	r2, r7, r0
 800220a:	8812      	ldrh	r2, [r2, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	183a      	adds	r2, r7, r0
 8002216:	8812      	ldrh	r2, [r2, #0]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	e04c      	b.n	80022b6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800221c:	231e      	movs	r3, #30
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e047      	b.n	80022b6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002226:	231f      	movs	r3, #31
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d015      	beq.n	800225c <UART_SetConfig+0x1f0>
 8002230:	dc18      	bgt.n	8002264 <UART_SetConfig+0x1f8>
 8002232:	2b04      	cmp	r3, #4
 8002234:	d00d      	beq.n	8002252 <UART_SetConfig+0x1e6>
 8002236:	dc15      	bgt.n	8002264 <UART_SetConfig+0x1f8>
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <UART_SetConfig+0x1d6>
 800223c:	2b02      	cmp	r3, #2
 800223e:	d005      	beq.n	800224c <UART_SetConfig+0x1e0>
 8002240:	e010      	b.n	8002264 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002242:	f7ff faa7 	bl	8001794 <HAL_RCC_GetPCLK1Freq>
 8002246:	0003      	movs	r3, r0
 8002248:	61bb      	str	r3, [r7, #24]
        break;
 800224a:	e012      	b.n	8002272 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800224c:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <UART_SetConfig+0x27c>)
 800224e:	61bb      	str	r3, [r7, #24]
        break;
 8002250:	e00f      	b.n	8002272 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002252:	f7ff fa31 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 8002256:	0003      	movs	r3, r0
 8002258:	61bb      	str	r3, [r7, #24]
        break;
 800225a:	e00a      	b.n	8002272 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	61bb      	str	r3, [r7, #24]
        break;
 8002262:	e006      	b.n	8002272 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002268:	231e      	movs	r3, #30
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
        break;
 8002270:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01e      	beq.n	80022b6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	085a      	lsrs	r2, r3, #1
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	18d2      	adds	r2, r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0019      	movs	r1, r3
 8002288:	0010      	movs	r0, r2
 800228a:	f7fd ff45 	bl	8000118 <__udivsi3>
 800228e:	0003      	movs	r3, r0
 8002290:	b29b      	uxth	r3, r3
 8002292:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	d909      	bls.n	80022ae <UART_SetConfig+0x242>
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d204      	bcs.n	80022ae <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	e003      	b.n	80022b6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80022ae:	231e      	movs	r3, #30
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80022c2:	231e      	movs	r3, #30
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	781b      	ldrb	r3, [r3, #0]
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b008      	add	sp, #32
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	ffff69f3 	.word	0xffff69f3
 80022d4:	ffffcfff 	.word	0xffffcfff
 80022d8:	fffff4ff 	.word	0xfffff4ff
 80022dc:	40013800 	.word	0x40013800
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40004400 	.word	0x40004400
 80022e8:	007a1200 	.word	0x007a1200

080022ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2201      	movs	r2, #1
 80022fa:	4013      	ands	r3, r2
 80022fc:	d00b      	beq.n	8002316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a4a      	ldr	r2, [pc, #296]	; (8002430 <UART_AdvFeatureConfig+0x144>)
 8002306:	4013      	ands	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
 800231e:	d00b      	beq.n	8002338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a43      	ldr	r2, [pc, #268]	; (8002434 <UART_AdvFeatureConfig+0x148>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2204      	movs	r2, #4
 800233e:	4013      	ands	r3, r2
 8002340:	d00b      	beq.n	800235a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <UART_AdvFeatureConfig+0x14c>)
 800234a:	4013      	ands	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2208      	movs	r2, #8
 8002360:	4013      	ands	r3, r2
 8002362:	d00b      	beq.n	800237c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4a34      	ldr	r2, [pc, #208]	; (800243c <UART_AdvFeatureConfig+0x150>)
 800236c:	4013      	ands	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	2210      	movs	r2, #16
 8002382:	4013      	ands	r3, r2
 8002384:	d00b      	beq.n	800239e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <UART_AdvFeatureConfig+0x154>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	2220      	movs	r2, #32
 80023a4:	4013      	ands	r3, r2
 80023a6:	d00b      	beq.n	80023c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4a25      	ldr	r2, [pc, #148]	; (8002444 <UART_AdvFeatureConfig+0x158>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2240      	movs	r2, #64	; 0x40
 80023c6:	4013      	ands	r3, r2
 80023c8:	d01d      	beq.n	8002406 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <UART_AdvFeatureConfig+0x15c>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	035b      	lsls	r3, r3, #13
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d10b      	bne.n	8002406 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a15      	ldr	r2, [pc, #84]	; (800244c <UART_AdvFeatureConfig+0x160>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	4013      	ands	r3, r2
 800240e:	d00b      	beq.n	8002428 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <UART_AdvFeatureConfig+0x164>)
 8002418:	4013      	ands	r3, r2
 800241a:	0019      	movs	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]
  }
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b002      	add	sp, #8
 800242e:	bd80      	pop	{r7, pc}
 8002430:	fffdffff 	.word	0xfffdffff
 8002434:	fffeffff 	.word	0xfffeffff
 8002438:	fffbffff 	.word	0xfffbffff
 800243c:	ffff7fff 	.word	0xffff7fff
 8002440:	ffffefff 	.word	0xffffefff
 8002444:	ffffdfff 	.word	0xffffdfff
 8002448:	ffefffff 	.word	0xffefffff
 800244c:	ff9fffff 	.word	0xff9fffff
 8002450:	fff7ffff 	.word	0xfff7ffff

08002454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	2100      	movs	r1, #0
 8002462:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002464:	f7fe fafa 	bl	8000a5c <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2208      	movs	r2, #8
 8002474:	4013      	ands	r3, r2
 8002476:	2b08      	cmp	r3, #8
 8002478:	d10c      	bne.n	8002494 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	0391      	lsls	r1, r2, #14
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <UART_CheckIdleState+0x8c>)
 8002484:	9200      	str	r2, [sp, #0]
 8002486:	2200      	movs	r2, #0
 8002488:	f000 f82c 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d001      	beq.n	8002494 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e021      	b.n	80024d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2204      	movs	r2, #4
 800249c:	4013      	ands	r3, r2
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d10c      	bne.n	80024bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	03d1      	lsls	r1, r2, #15
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4a0d      	ldr	r2, [pc, #52]	; (80024e0 <UART_CheckIdleState+0x8c>)
 80024ac:	9200      	str	r2, [sp, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f000 f818 	bl	80024e4 <UART_WaitOnFlagUntilTimeout>
 80024b4:	1e03      	subs	r3, r0, #0
 80024b6:	d001      	beq.n	80024bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e00d      	b.n	80024d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2274      	movs	r2, #116	; 0x74
 80024d2:	2100      	movs	r1, #0
 80024d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	01ffffff 	.word	0x01ffffff

080024e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b094      	sub	sp, #80	; 0x50
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f4:	e0a3      	b.n	800263e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f8:	3301      	adds	r3, #1
 80024fa:	d100      	bne.n	80024fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80024fc:	e09f      	b.n	800263e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7fe faad 	bl	8000a5c <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <UART_WaitOnFlagUntilTimeout+0x30>
 800250e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002510:	2b00      	cmp	r3, #0
 8002512:	d13d      	bne.n	8002590 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002514:	f3ef 8310 	mrs	r3, PRIMASK
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800251c:	647b      	str	r3, [r7, #68]	; 0x44
 800251e:	2301      	movs	r3, #1
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	f383 8810 	msr	PRIMASK, r3
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	494c      	ldr	r1, [pc, #304]	; (8002668 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002536:	400a      	ands	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	f383 8810 	msr	PRIMASK, r3
}
 8002544:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002546:	f3ef 8310 	mrs	r3, PRIMASK
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254e:	643b      	str	r3, [r7, #64]	; 0x40
 8002550:	2301      	movs	r3, #1
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002556:	f383 8810 	msr	PRIMASK, r3
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2101      	movs	r1, #1
 8002568:	438a      	bics	r2, r1
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002572:	f383 8810 	msr	PRIMASK, r3
}
 8002576:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2274      	movs	r2, #116	; 0x74
 8002588:	2100      	movs	r1, #0
 800258a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e067      	b.n	8002660 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2204      	movs	r2, #4
 8002598:	4013      	ands	r3, r2
 800259a:	d050      	beq.n	800263e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	401a      	ands	r2, r3
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d146      	bne.n	800263e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ba:	f3ef 8310 	mrs	r3, PRIMASK
 80025be:	613b      	str	r3, [r7, #16]
  return(result);
 80025c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c4:	2301      	movs	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f383 8810 	msr	PRIMASK, r3
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4923      	ldr	r1, [pc, #140]	; (8002668 <UART_WaitOnFlagUntilTimeout+0x184>)
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f383 8810 	msr	PRIMASK, r3
}
 80025ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ec:	f3ef 8310 	mrs	r3, PRIMASK
 80025f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80025f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f6:	2301      	movs	r3, #1
 80025f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	f383 8810 	msr	PRIMASK, r3
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2101      	movs	r1, #1
 800260e:	438a      	bics	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	f383 8810 	msr	PRIMASK, r3
}
 800261c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	2120      	movs	r1, #32
 8002630:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2274      	movs	r2, #116	; 0x74
 8002636:	2100      	movs	r1, #0
 8002638:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e010      	b.n	8002660 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	4013      	ands	r3, r2
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	425a      	negs	r2, r3
 800264e:	4153      	adcs	r3, r2
 8002650:	b2db      	uxtb	r3, r3
 8002652:	001a      	movs	r2, r3
 8002654:	1dfb      	adds	r3, r7, #7
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d100      	bne.n	800265e <UART_WaitOnFlagUntilTimeout+0x17a>
 800265c:	e74b      	b.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b014      	add	sp, #80	; 0x50
 8002666:	bd80      	pop	{r7, pc}
 8002668:	fffffe5f 	.word	0xfffffe5f

0800266c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002672:	f3ef 8305 	mrs	r3, IPSR
 8002676:	60bb      	str	r3, [r7, #8]
  return(result);
 8002678:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800267e:	f3ef 8310 	mrs	r3, PRIMASK
 8002682:	607b      	str	r3, [r7, #4]
  return(result);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <osKernelInitialize+0x2e>
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <osKernelInitialize+0x54>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d103      	bne.n	800269a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8002692:	2306      	movs	r3, #6
 8002694:	425b      	negs	r3, r3
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e00c      	b.n	80026b4 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <osKernelInitialize+0x54>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <osKernelInitialize+0x54>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e002      	b.n	80026b4 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80026ae:	2301      	movs	r3, #1
 80026b0:	425b      	negs	r3, r3
 80026b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80026b4:	68fb      	ldr	r3, [r7, #12]
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	20000090 	.word	0x20000090

080026c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ca:	f3ef 8305 	mrs	r3, IPSR
 80026ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80026d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d6:	f3ef 8310 	mrs	r3, PRIMASK
 80026da:	607b      	str	r3, [r7, #4]
  return(result);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <osKernelStart+0x2e>
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <osKernelStart+0x58>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d103      	bne.n	80026f2 <osKernelStart+0x2e>
    stat = osErrorISR;
 80026ea:	2306      	movs	r3, #6
 80026ec:	425b      	negs	r3, r3
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e00e      	b.n	8002710 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <osKernelStart+0x58>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <osKernelStart+0x58>)
 80026fc:	2202      	movs	r2, #2
 80026fe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002700:	f000 ff94 	bl	800362c <vTaskStartScheduler>
      stat = osOK;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e002      	b.n	8002710 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800270a:	2301      	movs	r3, #1
 800270c:	425b      	negs	r3, r3
 800270e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002710:	68fb      	ldr	r3, [r7, #12]
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b004      	add	sp, #16
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	20000090 	.word	0x20000090

08002720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b090      	sub	sp, #64	; 0x40
 8002724:	af04      	add	r7, sp, #16
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002730:	f3ef 8305 	mrs	r3, IPSR
 8002734:	61fb      	str	r3, [r7, #28]
  return(result);
 8002736:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002738:	2b00      	cmp	r3, #0
 800273a:	d000      	beq.n	800273e <osThreadNew+0x1e>
 800273c:	e090      	b.n	8002860 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273e:	f3ef 8310 	mrs	r3, PRIMASK
 8002742:	61bb      	str	r3, [r7, #24]
  return(result);
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <osThreadNew+0x34>
 800274a:	4b48      	ldr	r3, [pc, #288]	; (800286c <osThreadNew+0x14c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d100      	bne.n	8002754 <osThreadNew+0x34>
 8002752:	e085      	b.n	8002860 <osThreadNew+0x140>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d100      	bne.n	800275c <osThreadNew+0x3c>
 800275a:	e081      	b.n	8002860 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002760:	2318      	movs	r3, #24
 8002762:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8002764:	2117      	movs	r1, #23
 8002766:	187b      	adds	r3, r7, r1
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800276c:	187b      	adds	r3, r7, r1
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8002770:	2301      	movs	r3, #1
 8002772:	425b      	negs	r3, r3
 8002774:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d044      	beq.n	8002806 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <osThreadNew+0x6a>
        name = attr->name;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <osThreadNew+0x8e>
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	2b38      	cmp	r3, #56	; 0x38
 80027a2:	d804      	bhi.n	80027ae <osThreadNew+0x8e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	d001      	beq.n	80027b2 <osThreadNew+0x92>
        return (NULL);
 80027ae:	2300      	movs	r3, #0
 80027b0:	e057      	b.n	8002862 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00e      	beq.n	80027e8 <osThreadNew+0xc8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2bbb      	cmp	r3, #187	; 0xbb
 80027d0:	d90a      	bls.n	80027e8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <osThreadNew+0xc8>
        mem = 1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	623b      	str	r3, [r7, #32]
 80027e6:	e010      	b.n	800280a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10c      	bne.n	800280a <osThreadNew+0xea>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d108      	bne.n	800280a <osThreadNew+0xea>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d104      	bne.n	800280a <osThreadNew+0xea>
          mem = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
 8002804:	e001      	b.n	800280a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d112      	bne.n	8002836 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002818:	68bd      	ldr	r5, [r7, #8]
 800281a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800281c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	9302      	str	r3, [sp, #8]
 8002822:	9201      	str	r2, [sp, #4]
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	002b      	movs	r3, r5
 800282a:	0022      	movs	r2, r4
 800282c:	f000 fd49 	bl	80032c2 <xTaskCreateStatic>
 8002830:	0003      	movs	r3, r0
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e014      	b.n	8002860 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	b29a      	uxth	r2, r3
 8002840:	68bc      	ldr	r4, [r7, #8]
 8002842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	2310      	movs	r3, #16
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	0023      	movs	r3, r4
 8002852:	f000 fd79 	bl	8003348 <xTaskCreate>
 8002856:	0003      	movs	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <osThreadNew+0x140>
          hTask = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002860:	693b      	ldr	r3, [r7, #16]
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b00c      	add	sp, #48	; 0x30
 8002868:	bdb0      	pop	{r4, r5, r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	20000090 	.word	0x20000090

08002870 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002878:	f3ef 8305 	mrs	r3, IPSR
 800287c:	613b      	str	r3, [r7, #16]
  return(result);
 800287e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002884:	f3ef 8310 	mrs	r3, PRIMASK
 8002888:	60fb      	str	r3, [r7, #12]
  return(result);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <osDelay+0x30>
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <osDelay+0x4c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d103      	bne.n	80028a0 <osDelay+0x30>
    stat = osErrorISR;
 8002898:	2306      	movs	r3, #6
 800289a:	425b      	negs	r3, r3
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e008      	b.n	80028b2 <osDelay+0x42>
  }
  else {
    stat = osOK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <osDelay+0x42>
      vTaskDelay(ticks);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 fe97 	bl	80035e0 <vTaskDelay>
    }
  }

  return (stat);
 80028b2:	697b      	ldr	r3, [r7, #20]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b006      	add	sp, #24
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000090 	.word	0x20000090

080028c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <vApplicationGetIdleTaskMemory+0x28>)
 80028d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4a05      	ldr	r2, [pc, #20]	; (80028ec <vApplicationGetIdleTaskMemory+0x2c>)
 80028d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	601a      	str	r2, [r3, #0]
}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	20000094 	.word	0x20000094
 80028ec:	20000150 	.word	0x20000150

080028f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a06      	ldr	r2, [pc, #24]	; (8002918 <vApplicationGetTimerTaskMemory+0x28>)
 8002900:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4a05      	ldr	r2, [pc, #20]	; (800291c <vApplicationGetTimerTaskMemory+0x2c>)
 8002906:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	0052      	lsls	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b004      	add	sp, #16
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000350 	.word	0x20000350
 800291c:	2000040c 	.word	0x2000040c

08002920 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3308      	adds	r3, #8
 800292c:	001a      	movs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	4252      	negs	r2, r2
 8002938:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3308      	adds	r3, #8
 800293e:	001a      	movs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3308      	adds	r3, #8
 8002948:	001a      	movs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}

0800295c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}

08002972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b004      	add	sp, #16
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3301      	adds	r3, #1
 80029ca:	d103      	bne.n	80029d4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e00c      	b.n	80029ee <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3308      	adds	r3, #8
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e002      	b.n	80029e2 <vListInsert+0x2c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d2f6      	bcs.n	80029dc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6852      	ldr	r2, [r2, #4]
 8002a42:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d103      	bne.n	8002a56 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	1e5a      	subs	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <xQueueGenericReset+0x18>
 8002a86:	b672      	cpsid	i
 8002a88:	e7fe      	b.n	8002a88 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8002a8a:	f001 fdf9 	bl	8004680 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	434b      	muls	r3, r1
 8002a9c:	18d2      	adds	r2, r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	1e59      	subs	r1, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	434b      	muls	r3, r1
 8002ac0:	18d2      	adds	r2, r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2244      	movs	r2, #68	; 0x44
 8002aca:	21ff      	movs	r1, #255	; 0xff
 8002acc:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2245      	movs	r2, #69	; 0x45
 8002ad2:	21ff      	movs	r1, #255	; 0xff
 8002ad4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 fff5 	bl	8003ad8 <xTaskRemoveFromEventList>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d00c      	beq.n	8002b0c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002af2:	f001 fdb5 	bl	8004660 <vPortYield>
 8002af6:	e009      	b.n	8002b0c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3310      	adds	r3, #16
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff ff0f 	bl	8002920 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3324      	adds	r3, #36	; 0x24
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7ff ff0a 	bl	8002920 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b0c:	f001 fdca 	bl	80046a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b10:	2301      	movs	r3, #1
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b1a:	b590      	push	{r4, r7, lr}
 8002b1c:	b089      	sub	sp, #36	; 0x24
 8002b1e:	af02      	add	r7, sp, #8
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <xQueueGenericCreateStatic+0x18>
 8002b2e:	b672      	cpsid	i
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <xQueueGenericCreateStatic+0x22>
 8002b38:	b672      	cpsid	i
 8002b3a:	e7fe      	b.n	8002b3a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <xQueueGenericCreateStatic+0x2e>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <xQueueGenericCreateStatic+0x32>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <xQueueGenericCreateStatic+0x34>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <xQueueGenericCreateStatic+0x3c>
 8002b52:	b672      	cpsid	i
 8002b54:	e7fe      	b.n	8002b54 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <xQueueGenericCreateStatic+0x48>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <xQueueGenericCreateStatic+0x4c>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <xQueueGenericCreateStatic+0x4e>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <xQueueGenericCreateStatic+0x56>
 8002b6c:	b672      	cpsid	i
 8002b6e:	e7fe      	b.n	8002b6e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b70:	2350      	movs	r3, #80	; 0x50
 8002b72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b50      	cmp	r3, #80	; 0x50
 8002b78:	d001      	beq.n	8002b7e <xQueueGenericCreateStatic+0x64>
 8002b7a:	b672      	cpsid	i
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00e      	beq.n	8002ba6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2246      	movs	r2, #70	; 0x46
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b90:	2328      	movs	r3, #40	; 0x28
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	781c      	ldrb	r4, [r3, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	0023      	movs	r3, r4
 8002ba2:	f000 f805 	bl	8002bb0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ba6:	697b      	ldr	r3, [r7, #20]
	}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b007      	add	sp, #28
 8002bae:	bd90      	pop	{r4, r7, pc}

08002bb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	1cfb      	adds	r3, r7, #3
 8002bc0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e002      	b.n	8002bd6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2101      	movs	r1, #1
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff ff43 	bl	8002a72 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1cfa      	adds	r2, r7, #3
 8002bf0:	214c      	movs	r1, #76	; 0x4c
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b004      	add	sp, #16
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08a      	sub	sp, #40	; 0x28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <xQueueGenericSend+0x20>
 8002c1a:	b672      	cpsid	i
 8002c1c:	e7fe      	b.n	8002c1c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <xQueueGenericSend+0x2e>
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <xQueueGenericSend+0x32>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <xQueueGenericSend+0x34>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <xQueueGenericSend+0x3c>
 8002c36:	b672      	cpsid	i
 8002c38:	e7fe      	b.n	8002c38 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d103      	bne.n	8002c48 <xQueueGenericSend+0x4a>
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <xQueueGenericSend+0x4e>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <xQueueGenericSend+0x50>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <xQueueGenericSend+0x58>
 8002c52:	b672      	cpsid	i
 8002c54:	e7fe      	b.n	8002c54 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c56:	f001 f8dd 	bl	8003e14 <xTaskGetSchedulerState>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d102      	bne.n	8002c64 <xQueueGenericSend+0x66>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <xQueueGenericSend+0x6a>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <xQueueGenericSend+0x6c>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <xQueueGenericSend+0x74>
 8002c6e:	b672      	cpsid	i
 8002c70:	e7fe      	b.n	8002c70 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c72:	f001 fd05 	bl	8004680 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <xQueueGenericSend+0x8a>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d11e      	bne.n	8002cc6 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f99f 	bl	8002fd2 <prvCopyDataToQueue>
 8002c94:	0003      	movs	r3, r0
 8002c96:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	3324      	adds	r3, #36	; 0x24
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 ff17 	bl	8003ad8 <xTaskRemoveFromEventList>
 8002caa:	1e03      	subs	r3, r0, #0
 8002cac:	d007      	beq.n	8002cbe <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cae:	f001 fcd7 	bl	8004660 <vPortYield>
 8002cb2:	e004      	b.n	8002cbe <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cba:	f001 fcd1 	bl	8004660 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cbe:	f001 fcf1 	bl	80046a4 <vPortExitCritical>
				return pdPASS;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e05b      	b.n	8002d7e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ccc:	f001 fcea 	bl	80046a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e054      	b.n	8002d7e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cda:	2314      	movs	r3, #20
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 ff56 	bl	8003b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ce8:	f001 fcdc 	bl	80046a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cec:	f000 fcfc 	bl	80036e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cf0:	f001 fcc6 	bl	8004680 <vPortEnterCritical>
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	2244      	movs	r2, #68	; 0x44
 8002cf8:	5c9b      	ldrb	r3, [r3, r2]
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	d103      	bne.n	8002d08 <xQueueGenericSend+0x10a>
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2244      	movs	r2, #68	; 0x44
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	2245      	movs	r2, #69	; 0x45
 8002d0c:	5c9b      	ldrb	r3, [r3, r2]
 8002d0e:	b25b      	sxtb	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	d103      	bne.n	8002d1c <xQueueGenericSend+0x11e>
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	2245      	movs	r2, #69	; 0x45
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]
 8002d1c:	f001 fcc2 	bl	80046a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d20:	1d3a      	adds	r2, r7, #4
 8002d22:	2314      	movs	r3, #20
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 ff45 	bl	8003bb8 <xTaskCheckForTimeOut>
 8002d2e:	1e03      	subs	r3, r0, #0
 8002d30:	d11e      	bne.n	8002d70 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 fa51 	bl	80031dc <prvIsQueueFull>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d011      	beq.n	8002d62 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	3310      	adds	r3, #16
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	0011      	movs	r1, r2
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 fe82 	bl	8003a50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 f9d0 	bl	80030f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d54:	f000 fcd4 	bl	8003700 <xTaskResumeAll>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d18a      	bne.n	8002c72 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002d5c:	f001 fc80 	bl	8004660 <vPortYield>
 8002d60:	e787      	b.n	8002c72 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f9c5 	bl	80030f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d6a:	f000 fcc9 	bl	8003700 <xTaskResumeAll>
 8002d6e:	e780      	b.n	8002c72 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f9be 	bl	80030f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d78:	f000 fcc2 	bl	8003700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d7c:	2300      	movs	r3, #0
		}
	}
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b00a      	add	sp, #40	; 0x28
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d86:	b590      	push	{r4, r7, lr}
 8002d88:	b089      	sub	sp, #36	; 0x24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <xQueueGenericSendFromISR+0x1c>
 8002d9e:	b672      	cpsid	i
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <xQueueGenericSendFromISR+0x2a>
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <xQueueGenericSendFromISR+0x2e>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <xQueueGenericSendFromISR+0x30>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <xQueueGenericSendFromISR+0x38>
 8002dba:	b672      	cpsid	i
 8002dbc:	e7fe      	b.n	8002dbc <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d103      	bne.n	8002dcc <xQueueGenericSendFromISR+0x46>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <xQueueGenericSendFromISR+0x4a>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <xQueueGenericSendFromISR+0x4c>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <xQueueGenericSendFromISR+0x54>
 8002dd6:	b672      	cpsid	i
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dda:	f001 fc7b 	bl	80046d4 <ulSetInterruptMaskFromISR>
 8002dde:	0003      	movs	r3, r0
 8002de0:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <xQueueGenericSendFromISR+0x6e>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d12e      	bne.n	8002e52 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002df4:	2413      	movs	r4, #19
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	2145      	movs	r1, #69	; 0x45
 8002dfc:	5c52      	ldrb	r2, [r2, r1]
 8002dfe:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 f8e3 	bl	8002fd2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	d111      	bne.n	8002e3a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	3324      	adds	r3, #36	; 0x24
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fe58 	bl	8003ad8 <xTaskRemoveFromEventList>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d00f      	beq.n	8002e4c <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e008      	b.n	8002e4c <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e3a:	2313      	movs	r3, #19
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	b259      	sxtb	r1, r3
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2245      	movs	r2, #69	; 0x45
 8002e4a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	61fb      	str	r3, [r7, #28]
		{
 8002e50:	e001      	b.n	8002e56 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f001 fc41 	bl	80046e0 <vClearInterruptMaskFromISR>

	return xReturn;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b009      	add	sp, #36	; 0x24
 8002e66:	bd90      	pop	{r4, r7, pc}

08002e68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <xQueueReceive+0x1e>
 8002e82:	b672      	cpsid	i
 8002e84:	e7fe      	b.n	8002e84 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <xQueueReceive+0x2c>
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <xQueueReceive+0x30>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <xQueueReceive+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <xQueueReceive+0x3a>
 8002e9e:	b672      	cpsid	i
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ea2:	f000 ffb7 	bl	8003e14 <xTaskGetSchedulerState>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d102      	bne.n	8002eb0 <xQueueReceive+0x48>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <xQueueReceive+0x4c>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <xQueueReceive+0x4e>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <xQueueReceive+0x56>
 8002eba:	b672      	cpsid	i
 8002ebc:	e7fe      	b.n	8002ebc <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ebe:	f001 fbdf 	bl	8004680 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01a      	beq.n	8002f04 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	0011      	movs	r1, r2
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 f8e7 	bl	80030a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	3310      	adds	r3, #16
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fdf2 	bl	8003ad8 <xTaskRemoveFromEventList>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d001      	beq.n	8002efc <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ef8:	f001 fbb2 	bl	8004660 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002efc:	f001 fbd2 	bl	80046a4 <vPortExitCritical>
				return pdPASS;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e062      	b.n	8002fca <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f0a:	f001 fbcb 	bl	80046a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e05b      	b.n	8002fca <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f18:	2314      	movs	r3, #20
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 fe37 	bl	8003b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f26:	f001 fbbd 	bl	80046a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f2a:	f000 fbdd 	bl	80036e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f2e:	f001 fba7 	bl	8004680 <vPortEnterCritical>
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	2244      	movs	r2, #68	; 0x44
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	d103      	bne.n	8002f46 <xQueueReceive+0xde>
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	2244      	movs	r2, #68	; 0x44
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	2245      	movs	r2, #69	; 0x45
 8002f4a:	5c9b      	ldrb	r3, [r3, r2]
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	d103      	bne.n	8002f5a <xQueueReceive+0xf2>
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	2245      	movs	r2, #69	; 0x45
 8002f56:	2100      	movs	r1, #0
 8002f58:	5499      	strb	r1, [r3, r2]
 8002f5a:	f001 fba3 	bl	80046a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f5e:	1d3a      	adds	r2, r7, #4
 8002f60:	2314      	movs	r3, #20
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	0011      	movs	r1, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 fe26 	bl	8003bb8 <xTaskCheckForTimeOut>
 8002f6c:	1e03      	subs	r3, r0, #0
 8002f6e:	d11e      	bne.n	8002fae <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 f91c 	bl	80031b0 <prvIsQueueEmpty>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d011      	beq.n	8002fa0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	3324      	adds	r3, #36	; 0x24
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	0011      	movs	r1, r2
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 fd63 	bl	8003a50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 f8b1 	bl	80030f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f92:	f000 fbb5 	bl	8003700 <xTaskResumeAll>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d191      	bne.n	8002ebe <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002f9a:	f001 fb61 	bl	8004660 <vPortYield>
 8002f9e:	e78e      	b.n	8002ebe <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f8a6 	bl	80030f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fa8:	f000 fbaa 	bl	8003700 <xTaskResumeAll>
 8002fac:	e787      	b.n	8002ebe <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 f89f 	bl	80030f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fb6:	f000 fba3 	bl	8003700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 f8f7 	bl	80031b0 <prvIsQueueEmpty>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d100      	bne.n	8002fc8 <xQueueReceive+0x160>
 8002fc6:	e77a      	b.n	8002ebe <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b00a      	add	sp, #40	; 0x28
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10e      	bne.n	800300e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d14e      	bne.n	8003096 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f000 ff25 	bl	8003e4c <xTaskPriorityDisinherit>
 8003002:	0003      	movs	r3, r0
 8003004:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	e043      	b.n	8003096 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d119      	bne.n	8003048 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6898      	ldr	r0, [r3, #8]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	0019      	movs	r1, r3
 8003020:	f001 fdae 	bl	8004b80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	18d2      	adds	r2, r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d32b      	bcc.n	8003096 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	e026      	b.n	8003096 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68d8      	ldr	r0, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	0019      	movs	r1, r3
 8003054:	f001 fd94 	bl	8004b80 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	425b      	negs	r3, r3
 8003062:	18d2      	adds	r2, r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	425b      	negs	r3, r3
 800307e:	18d2      	adds	r2, r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d105      	bne.n	8003096 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	3b01      	subs	r3, #1
 8003094:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800309e:	697b      	ldr	r3, [r7, #20]
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b006      	add	sp, #24
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d018      	beq.n	80030ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	18d2      	adds	r2, r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d303      	bcc.n	80030dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68d9      	ldr	r1, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f001 fd4a 	bl	8004b80 <memcpy>
	}
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030fc:	f001 fac0 	bl	8004680 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003100:	230f      	movs	r3, #15
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	2145      	movs	r1, #69	; 0x45
 8003108:	5c52      	ldrb	r2, [r2, r1]
 800310a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800310c:	e013      	b.n	8003136 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3324      	adds	r3, #36	; 0x24
 800311a:	0018      	movs	r0, r3
 800311c:	f000 fcdc 	bl	8003ad8 <xTaskRemoveFromEventList>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d001      	beq.n	8003128 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003124:	f000 fd98 	bl	8003c58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003128:	210f      	movs	r1, #15
 800312a:	187b      	adds	r3, r7, r1
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	3b01      	subs	r3, #1
 8003130:	b2da      	uxtb	r2, r3
 8003132:	187b      	adds	r3, r7, r1
 8003134:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003136:	230f      	movs	r3, #15
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b25b      	sxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	dce5      	bgt.n	800310e <prvUnlockQueue+0x1a>
 8003142:	e000      	b.n	8003146 <prvUnlockQueue+0x52>
					break;
 8003144:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2245      	movs	r2, #69	; 0x45
 800314a:	21ff      	movs	r1, #255	; 0xff
 800314c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800314e:	f001 faa9 	bl	80046a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003152:	f001 fa95 	bl	8004680 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003156:	230e      	movs	r3, #14
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	2144      	movs	r1, #68	; 0x44
 800315e:	5c52      	ldrb	r2, [r2, r1]
 8003160:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003162:	e013      	b.n	800318c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d016      	beq.n	800319a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3310      	adds	r3, #16
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fcb1 	bl	8003ad8 <xTaskRemoveFromEventList>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d001      	beq.n	800317e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800317a:	f000 fd6d 	bl	8003c58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800317e:	210e      	movs	r1, #14
 8003180:	187b      	adds	r3, r7, r1
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	3b01      	subs	r3, #1
 8003186:	b2da      	uxtb	r2, r3
 8003188:	187b      	adds	r3, r7, r1
 800318a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800318c:	230e      	movs	r3, #14
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	b25b      	sxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	dce5      	bgt.n	8003164 <prvUnlockQueue+0x70>
 8003198:	e000      	b.n	800319c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800319a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2244      	movs	r2, #68	; 0x44
 80031a0:	21ff      	movs	r1, #255	; 0xff
 80031a2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80031a4:	f001 fa7e 	bl	80046a4 <vPortExitCritical>
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b004      	add	sp, #16
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031b8:	f001 fa62 	bl	8004680 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031c4:	2301      	movs	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e001      	b.n	80031ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031ce:	f001 fa69 	bl	80046a4 <vPortExitCritical>

	return xReturn;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b004      	add	sp, #16
 80031da:	bd80      	pop	{r7, pc}

080031dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031e4:	f001 fa4c 	bl	8004680 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d102      	bne.n	80031fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e001      	b.n	80031fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031fe:	f001 fa51 	bl	80046a4 <vPortExitCritical>

	return xReturn;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b004      	add	sp, #16
 800320a:	bd80      	pop	{r7, pc}

0800320c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	e015      	b.n	8003248 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <vQueueAddToRegistry+0x4c>)
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	00d2      	lsls	r2, r2, #3
 8003222:	58d3      	ldr	r3, [r2, r3]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10c      	bne.n	8003242 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <vQueueAddToRegistry+0x4c>)
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	00d2      	lsls	r2, r2, #3
 800322e:	6839      	ldr	r1, [r7, #0]
 8003230:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <vQueueAddToRegistry+0x4c>)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	18d3      	adds	r3, r2, r3
 800323a:	3304      	adds	r3, #4
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003240:	e006      	b.n	8003250 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3301      	adds	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b07      	cmp	r3, #7
 800324c:	d9e6      	bls.n	800321c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b004      	add	sp, #16
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20001bbc 	.word	0x20001bbc

0800325c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800326c:	f001 fa08 	bl	8004680 <vPortEnterCritical>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2244      	movs	r2, #68	; 0x44
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	b25b      	sxtb	r3, r3
 8003278:	3301      	adds	r3, #1
 800327a:	d103      	bne.n	8003284 <vQueueWaitForMessageRestricted+0x28>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2244      	movs	r2, #68	; 0x44
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2245      	movs	r2, #69	; 0x45
 8003288:	5c9b      	ldrb	r3, [r3, r2]
 800328a:	b25b      	sxtb	r3, r3
 800328c:	3301      	adds	r3, #1
 800328e:	d103      	bne.n	8003298 <vQueueWaitForMessageRestricted+0x3c>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2245      	movs	r2, #69	; 0x45
 8003294:	2100      	movs	r1, #0
 8003296:	5499      	strb	r1, [r3, r2]
 8003298:	f001 fa04 	bl	80046a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3324      	adds	r3, #36	; 0x24
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 fbed 	bl	8003a8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff ff1d 	bl	80030f4 <prvUnlockQueue>
	}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032c2:	b590      	push	{r4, r7, lr}
 80032c4:	b08d      	sub	sp, #52	; 0x34
 80032c6:	af04      	add	r7, sp, #16
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <xTaskCreateStatic+0x18>
 80032d6:	b672      	cpsid	i
 80032d8:	e7fe      	b.n	80032d8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <xTaskCreateStatic+0x22>
 80032e0:	b672      	cpsid	i
 80032e2:	e7fe      	b.n	80032e2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032e4:	23bc      	movs	r3, #188	; 0xbc
 80032e6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2bbc      	cmp	r3, #188	; 0xbc
 80032ec:	d001      	beq.n	80032f2 <xTaskCreateStatic+0x30>
 80032ee:	b672      	cpsid	i
 80032f0:	e7fe      	b.n	80032f0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <xTaskCreateStatic+0x78>
 80032f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01d      	beq.n	800333a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003306:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	22b9      	movs	r2, #185	; 0xb9
 800330c:	2102      	movs	r1, #2
 800330e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003310:	683c      	ldr	r4, [r7, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	2300      	movs	r3, #0
 800331a:	9303      	str	r3, [sp, #12]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	2318      	movs	r3, #24
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	0023      	movs	r3, r4
 800332c:	f000 f858 	bl	80033e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 f8ec 	bl	8003510 <prvAddNewTaskToReadyList>
 8003338:	e001      	b.n	800333e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800333e:	69bb      	ldr	r3, [r7, #24]
	}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b009      	add	sp, #36	; 0x24
 8003346:	bd90      	pop	{r4, r7, pc}

08003348 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b08d      	sub	sp, #52	; 0x34
 800334c:	af04      	add	r7, sp, #16
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	1dbb      	adds	r3, r7, #6
 8003356:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003358:	1dbb      	adds	r3, r7, #6
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	0018      	movs	r0, r3
 8003360:	f001 fa26 	bl	80047b0 <pvPortMalloc>
 8003364:	0003      	movs	r3, r0
 8003366:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d010      	beq.n	8003390 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800336e:	20bc      	movs	r0, #188	; 0xbc
 8003370:	f001 fa1e 	bl	80047b0 <pvPortMalloc>
 8003374:	0003      	movs	r3, r0
 8003376:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
 8003384:	e006      	b.n	8003394 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	0018      	movs	r0, r3
 800338a:	f001 fab7 	bl	80048fc <vPortFree>
 800338e:	e001      	b.n	8003394 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01a      	beq.n	80033d0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	22b9      	movs	r2, #185	; 0xb9
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033a2:	1dbb      	adds	r3, r7, #6
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	683c      	ldr	r4, [r7, #0]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	2300      	movs	r3, #0
 80033ae:	9303      	str	r3, [sp, #12]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	0023      	movs	r3, r4
 80033be:	f000 f80f 	bl	80033e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 f8a3 	bl	8003510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033ca:	2301      	movs	r3, #1
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	e002      	b.n	80033d6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033d0:	2301      	movs	r3, #1
 80033d2:	425b      	negs	r3, r3
 80033d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033d6:	69bb      	ldr	r3, [r7, #24]
	}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b009      	add	sp, #36	; 0x24
 80033de:	bd90      	pop	{r4, r7, pc}

080033e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	001a      	movs	r2, r3
 80033f8:	21a5      	movs	r1, #165	; 0xa5
 80033fa:	f001 fbca 	bl	8004b92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	493e      	ldr	r1, [pc, #248]	; (8003500 <prvInitialiseNewTask+0x120>)
 8003406:	468c      	mov	ip, r1
 8003408:	4463      	add	r3, ip
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	18d3      	adds	r3, r2, r3
 800340e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2207      	movs	r2, #7
 8003414:	4393      	bics	r3, r2
 8003416:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2207      	movs	r2, #7
 800341c:	4013      	ands	r3, r2
 800341e:	d001      	beq.n	8003424 <prvInitialiseNewTask+0x44>
 8003420:	b672      	cpsid	i
 8003422:	e7fe      	b.n	8003422 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e013      	b.n	8003452 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	18d3      	adds	r3, r2, r3
 8003430:	7818      	ldrb	r0, [r3, #0]
 8003432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003434:	2134      	movs	r1, #52	; 0x34
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	18d3      	adds	r3, r2, r3
 800343a:	185b      	adds	r3, r3, r1
 800343c:	1c02      	adds	r2, r0, #0
 800343e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	18d3      	adds	r3, r2, r3
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d006      	beq.n	800345a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3301      	adds	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b0f      	cmp	r3, #15
 8003456:	d9e8      	bls.n	800342a <prvInitialiseNewTask+0x4a>
 8003458:	e000      	b.n	800345c <prvInitialiseNewTask+0x7c>
		{
			break;
 800345a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	2243      	movs	r2, #67	; 0x43
 8003460:	2100      	movs	r1, #0
 8003462:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	2b37      	cmp	r3, #55	; 0x37
 8003468:	d901      	bls.n	800346e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800346a:	2337      	movs	r3, #55	; 0x37
 800346c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	6a3a      	ldr	r2, [r7, #32]
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	6a3a      	ldr	r2, [r7, #32]
 8003478:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	2200      	movs	r2, #0
 800347e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	3304      	adds	r3, #4
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff fa69 	bl	800295c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	3318      	adds	r3, #24
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff fa64 	bl	800295c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003498:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	2238      	movs	r2, #56	; 0x38
 800349e:	1ad2      	subs	r2, r2, r3
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	22b4      	movs	r2, #180	; 0xb4
 80034ae:	2100      	movs	r1, #0
 80034b0:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	22b8      	movs	r2, #184	; 0xb8
 80034b6:	2100      	movs	r1, #0
 80034b8:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	3354      	adds	r3, #84	; 0x54
 80034be:	2260      	movs	r2, #96	; 0x60
 80034c0:	2100      	movs	r1, #0
 80034c2:	0018      	movs	r0, r3
 80034c4:	f001 fb65 	bl	8004b92 <memset>
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <prvInitialiseNewTask+0x124>)
 80034cc:	659a      	str	r2, [r3, #88]	; 0x58
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <prvInitialiseNewTask+0x128>)
 80034d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	4a0d      	ldr	r2, [pc, #52]	; (800350c <prvInitialiseNewTask+0x12c>)
 80034d8:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	68f9      	ldr	r1, [r7, #12]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f001 f833 	bl	800454c <pxPortInitialiseStack>
 80034e6:	0002      	movs	r2, r0
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b006      	add	sp, #24
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	3fffffff 	.word	0x3fffffff
 8003504:	08004fb8 	.word	0x08004fb8
 8003508:	08004fd8 	.word	0x08004fd8
 800350c:	08004f98 	.word	0x08004f98

08003510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003518:	f001 f8b2 	bl	8004680 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <prvAddNewTaskToReadyList+0xb8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <prvAddNewTaskToReadyList+0xb8>)
 8003524:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <prvAddNewTaskToReadyList+0xbc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <prvAddNewTaskToReadyList+0xbc>)
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <prvAddNewTaskToReadyList+0xb8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d110      	bne.n	800355e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800353c:	f000 fba6 	bl	8003c8c <prvInitialiseTaskLists>
 8003540:	e00d      	b.n	800355e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <prvAddNewTaskToReadyList+0xc0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <prvAddNewTaskToReadyList+0xbc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	429a      	cmp	r2, r3
 8003556:	d802      	bhi.n	800355e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003558:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <prvAddNewTaskToReadyList+0xbc>)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <prvAddNewTaskToReadyList+0xc4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <prvAddNewTaskToReadyList+0xc4>)
 8003566:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <prvAddNewTaskToReadyList+0xc4>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <prvAddNewTaskToReadyList+0xc8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d903      	bls.n	8003584 <prvAddNewTaskToReadyList+0x74>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <prvAddNewTaskToReadyList+0xc8>)
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	0013      	movs	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	189b      	adds	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4a12      	ldr	r2, [pc, #72]	; (80035dc <prvAddNewTaskToReadyList+0xcc>)
 8003592:	189a      	adds	r2, r3, r2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	0019      	movs	r1, r3
 800359a:	0010      	movs	r0, r2
 800359c:	f7ff f9e9 	bl	8002972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035a0:	f001 f880 	bl	80046a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <prvAddNewTaskToReadyList+0xc0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <prvAddNewTaskToReadyList+0xbc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d201      	bcs.n	80035be <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035ba:	f001 f851 	bl	8004660 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b002      	add	sp, #8
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	20000ce0 	.word	0x20000ce0
 80035cc:	2000080c 	.word	0x2000080c
 80035d0:	20000cec 	.word	0x20000cec
 80035d4:	20000cfc 	.word	0x20000cfc
 80035d8:	20000ce8 	.word	0x20000ce8
 80035dc:	20000810 	.word	0x20000810

080035e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d010      	beq.n	8003614 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <vTaskDelay+0x48>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <vTaskDelay+0x1e>
 80035fa:	b672      	cpsid	i
 80035fc:	e7fe      	b.n	80035fc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80035fe:	f000 f873 	bl	80036e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2100      	movs	r1, #0
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fc7c 	bl	8003f04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800360c:	f000 f878 	bl	8003700 <xTaskResumeAll>
 8003610:	0003      	movs	r3, r0
 8003612:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800361a:	f001 f821 	bl	8004660 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	20000d08 	.word	0x20000d08

0800362c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b089      	sub	sp, #36	; 0x24
 8003630:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800363a:	003a      	movs	r2, r7
 800363c:	1d39      	adds	r1, r7, #4
 800363e:	2308      	movs	r3, #8
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	0018      	movs	r0, r3
 8003644:	f7ff f93c 	bl	80028c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003648:	683c      	ldr	r4, [r7, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	491e      	ldr	r1, [pc, #120]	; (80036c8 <vTaskStartScheduler+0x9c>)
 8003650:	481e      	ldr	r0, [pc, #120]	; (80036cc <vTaskStartScheduler+0xa0>)
 8003652:	9202      	str	r2, [sp, #8]
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	2300      	movs	r3, #0
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2300      	movs	r3, #0
 800365c:	0022      	movs	r2, r4
 800365e:	f7ff fe30 	bl	80032c2 <xTaskCreateStatic>
 8003662:	0002      	movs	r2, r0
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <vTaskStartScheduler+0xa4>)
 8003666:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003668:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <vTaskStartScheduler+0xa4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003670:	2301      	movs	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e001      	b.n	800367a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d103      	bne.n	8003688 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003680:	f000 fc94 	bl	8003fac <xTimerCreateTimerTask>
 8003684:	0003      	movs	r3, r0
 8003686:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d113      	bne.n	80036b6 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800368e:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <vTaskStartScheduler+0xa8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3354      	adds	r3, #84	; 0x54
 8003696:	001a      	movs	r2, r3
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <vTaskStartScheduler+0xac>)
 800369a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <vTaskStartScheduler+0xb0>)
 800369e:	2201      	movs	r2, #1
 80036a0:	4252      	negs	r2, r2
 80036a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <vTaskStartScheduler+0xb4>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <vTaskStartScheduler+0xb8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036b0:	f000 ffb2 	bl	8004618 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036b4:	e004      	b.n	80036c0 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3301      	adds	r3, #1
 80036ba:	d101      	bne.n	80036c0 <vTaskStartScheduler+0x94>
 80036bc:	b672      	cpsid	i
 80036be:	e7fe      	b.n	80036be <vTaskStartScheduler+0x92>
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b005      	add	sp, #20
 80036c6:	bd90      	pop	{r4, r7, pc}
 80036c8:	08004f1c 	.word	0x08004f1c
 80036cc:	08003c6d 	.word	0x08003c6d
 80036d0:	20000d04 	.word	0x20000d04
 80036d4:	2000080c 	.word	0x2000080c
 80036d8:	2000000c 	.word	0x2000000c
 80036dc:	20000d00 	.word	0x20000d00
 80036e0:	20000cec 	.word	0x20000cec
 80036e4:	20000ce4 	.word	0x20000ce4

080036e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <vTaskSuspendAll+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	4b02      	ldr	r3, [pc, #8]	; (80036fc <vTaskSuspendAll+0x14>)
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000d08 	.word	0x20000d08

08003700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800370e:	4b3a      	ldr	r3, [pc, #232]	; (80037f8 <xTaskResumeAll+0xf8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <xTaskResumeAll+0x1a>
 8003716:	b672      	cpsid	i
 8003718:	e7fe      	b.n	8003718 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800371a:	f000 ffb1 	bl	8004680 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <xTaskResumeAll+0xf8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	1e5a      	subs	r2, r3, #1
 8003724:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <xTaskResumeAll+0xf8>)
 8003726:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003728:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <xTaskResumeAll+0xf8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d15b      	bne.n	80037e8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <xTaskResumeAll+0xfc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d057      	beq.n	80037e8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003738:	e02f      	b.n	800379a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <xTaskResumeAll+0x100>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3318      	adds	r3, #24
 8003746:	0018      	movs	r0, r3
 8003748:	f7ff f96b 	bl	8002a22 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3304      	adds	r3, #4
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff f966 	bl	8002a22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375a:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <xTaskResumeAll+0x104>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d903      	bls.n	800376a <xTaskResumeAll+0x6a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	4b27      	ldr	r3, [pc, #156]	; (8003804 <xTaskResumeAll+0x104>)
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376e:	0013      	movs	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	189b      	adds	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4a24      	ldr	r2, [pc, #144]	; (8003808 <xTaskResumeAll+0x108>)
 8003778:	189a      	adds	r2, r3, r2
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3304      	adds	r3, #4
 800377e:	0019      	movs	r1, r3
 8003780:	0010      	movs	r0, r2
 8003782:	f7ff f8f6 	bl	8002972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	4b20      	ldr	r3, [pc, #128]	; (800380c <xTaskResumeAll+0x10c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <xTaskResumeAll+0x110>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800379a:	4b19      	ldr	r3, [pc, #100]	; (8003800 <xTaskResumeAll+0x100>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1cb      	bne.n	800373a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037a8:	f000 fb10 	bl	8003dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <xTaskResumeAll+0x114>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00f      	beq.n	80037d8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037b8:	f000 f83c 	bl	8003834 <xTaskIncrementTick>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d002      	beq.n	80037c6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80037c0:	4b13      	ldr	r3, [pc, #76]	; (8003810 <xTaskResumeAll+0x110>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f2      	bne.n	80037b8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <xTaskResumeAll+0x114>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <xTaskResumeAll+0x110>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037e0:	2301      	movs	r3, #1
 80037e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037e4:	f000 ff3c 	bl	8004660 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037e8:	f000 ff5c 	bl	80046a4 <vPortExitCritical>

	return xAlreadyYielded;
 80037ec:	68bb      	ldr	r3, [r7, #8]
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b004      	add	sp, #16
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	20000d08 	.word	0x20000d08
 80037fc:	20000ce0 	.word	0x20000ce0
 8003800:	20000ca0 	.word	0x20000ca0
 8003804:	20000ce8 	.word	0x20000ce8
 8003808:	20000810 	.word	0x20000810
 800380c:	2000080c 	.word	0x2000080c
 8003810:	20000cf4 	.word	0x20000cf4
 8003814:	20000cf0 	.word	0x20000cf0

08003818 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <xTaskGetTickCount+0x18>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003824:	687b      	ldr	r3, [r7, #4]
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	20000ce4 	.word	0x20000ce4

08003834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383e:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <xTaskIncrementTick+0x13c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d000      	beq.n	8003848 <xTaskIncrementTick+0x14>
 8003846:	e083      	b.n	8003950 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003848:	4b4a      	ldr	r3, [pc, #296]	; (8003974 <xTaskIncrementTick+0x140>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003850:	4b48      	ldr	r3, [pc, #288]	; (8003974 <xTaskIncrementTick+0x140>)
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d117      	bne.n	800388c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800385c:	4b46      	ldr	r3, [pc, #280]	; (8003978 <xTaskIncrementTick+0x144>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <xTaskIncrementTick+0x36>
 8003866:	b672      	cpsid	i
 8003868:	e7fe      	b.n	8003868 <xTaskIncrementTick+0x34>
 800386a:	4b43      	ldr	r3, [pc, #268]	; (8003978 <xTaskIncrementTick+0x144>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	4b42      	ldr	r3, [pc, #264]	; (800397c <xTaskIncrementTick+0x148>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b40      	ldr	r3, [pc, #256]	; (8003978 <xTaskIncrementTick+0x144>)
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	4b40      	ldr	r3, [pc, #256]	; (800397c <xTaskIncrementTick+0x148>)
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	4b40      	ldr	r3, [pc, #256]	; (8003980 <xTaskIncrementTick+0x14c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <xTaskIncrementTick+0x14c>)
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	f000 faa0 	bl	8003dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800388c:	4b3d      	ldr	r3, [pc, #244]	; (8003984 <xTaskIncrementTick+0x150>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	429a      	cmp	r2, r3
 8003894:	d34e      	bcc.n	8003934 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <xTaskIncrementTick+0x144>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <xTaskIncrementTick+0x70>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <xTaskIncrementTick+0x72>
 80038a4:	2300      	movs	r3, #0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d004      	beq.n	80038b4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <xTaskIncrementTick+0x150>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	4252      	negs	r2, r2
 80038b0:	601a      	str	r2, [r3, #0]
					break;
 80038b2:	e03f      	b.n	8003934 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038b4:	4b30      	ldr	r3, [pc, #192]	; (8003978 <xTaskIncrementTick+0x144>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d203      	bcs.n	80038d4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038cc:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <xTaskIncrementTick+0x150>)
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
						break;
 80038d2:	e02f      	b.n	8003934 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	3304      	adds	r3, #4
 80038d8:	0018      	movs	r0, r3
 80038da:	f7ff f8a2 	bl	8002a22 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3318      	adds	r3, #24
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7ff f899 	bl	8002a22 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	4b24      	ldr	r3, [pc, #144]	; (8003988 <xTaskIncrementTick+0x154>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d903      	bls.n	8003904 <xTaskIncrementTick+0xd0>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <xTaskIncrementTick+0x154>)
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003908:	0013      	movs	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	189b      	adds	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <xTaskIncrementTick+0x158>)
 8003912:	189a      	adds	r2, r3, r2
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	3304      	adds	r3, #4
 8003918:	0019      	movs	r1, r3
 800391a:	0010      	movs	r0, r2
 800391c:	f7ff f829 	bl	8002972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <xTaskIncrementTick+0x15c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	429a      	cmp	r2, r3
 800392c:	d3b3      	bcc.n	8003896 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800392e:	2301      	movs	r3, #1
 8003930:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003932:	e7b0      	b.n	8003896 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <xTaskIncrementTick+0x15c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	4914      	ldr	r1, [pc, #80]	; (800398c <xTaskIncrementTick+0x158>)
 800393c:	0013      	movs	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	189b      	adds	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	585b      	ldr	r3, [r3, r1]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d907      	bls.n	800395a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800394a:	2301      	movs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e004      	b.n	800395a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003950:	4b10      	ldr	r3, [pc, #64]	; (8003994 <xTaskIncrementTick+0x160>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <xTaskIncrementTick+0x160>)
 8003958:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <xTaskIncrementTick+0x164>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003962:	2301      	movs	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003966:	697b      	ldr	r3, [r7, #20]
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b006      	add	sp, #24
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000d08 	.word	0x20000d08
 8003974:	20000ce4 	.word	0x20000ce4
 8003978:	20000c98 	.word	0x20000c98
 800397c:	20000c9c 	.word	0x20000c9c
 8003980:	20000cf8 	.word	0x20000cf8
 8003984:	20000d00 	.word	0x20000d00
 8003988:	20000ce8 	.word	0x20000ce8
 800398c:	20000810 	.word	0x20000810
 8003990:	2000080c 	.word	0x2000080c
 8003994:	20000cf0 	.word	0x20000cf0
 8003998:	20000cf4 	.word	0x20000cf4

0800399c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039a2:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <vTaskSwitchContext+0x9c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <vTaskSwitchContext+0xa0>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039b0:	e03d      	b.n	8003a2e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <vTaskSwitchContext+0xa0>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80039b8:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <vTaskSwitchContext+0xa4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	e007      	b.n	80039d0 <vTaskSwitchContext+0x34>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <vTaskSwitchContext+0x2e>
 80039c6:	b672      	cpsid	i
 80039c8:	e7fe      	b.n	80039c8 <vTaskSwitchContext+0x2c>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	491c      	ldr	r1, [pc, #112]	; (8003a44 <vTaskSwitchContext+0xa8>)
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	0013      	movs	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	585b      	ldr	r3, [r3, r1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ee      	beq.n	80039c0 <vTaskSwitchContext+0x24>
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	0013      	movs	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	189b      	adds	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <vTaskSwitchContext+0xa8>)
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	3308      	adds	r3, #8
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d104      	bne.n	8003a12 <vTaskSwitchContext+0x76>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <vTaskSwitchContext+0xac>)
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <vTaskSwitchContext+0xa4>)
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <vTaskSwitchContext+0xac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3354      	adds	r3, #84	; 0x54
 8003a28:	001a      	movs	r2, r3
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <vTaskSwitchContext+0xb0>)
 8003a2c:	601a      	str	r2, [r3, #0]
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b002      	add	sp, #8
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	20000d08 	.word	0x20000d08
 8003a3c:	20000cf4 	.word	0x20000cf4
 8003a40:	20000ce8 	.word	0x20000ce8
 8003a44:	20000810 	.word	0x20000810
 8003a48:	2000080c 	.word	0x2000080c
 8003a4c:	2000000c 	.word	0x2000000c

08003a50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <vTaskPlaceOnEventList+0x14>
 8003a60:	b672      	cpsid	i
 8003a62:	e7fe      	b.n	8003a62 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <vTaskPlaceOnEventList+0x38>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3318      	adds	r3, #24
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7fe ffa0 	bl	80029b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fa42 	bl	8003f04 <prvAddCurrentTaskToDelayedList>
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b002      	add	sp, #8
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	2000080c 	.word	0x2000080c

08003a8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <vTaskPlaceOnEventListRestricted+0x16>
 8003a9e:	b672      	cpsid	i
 8003aa0:	e7fe      	b.n	8003aa0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <vTaskPlaceOnEventListRestricted+0x48>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	0011      	movs	r1, r2
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f7fe ff5f 	bl	8002972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8003aba:	2301      	movs	r3, #1
 8003abc:	425b      	negs	r3, r3
 8003abe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	0011      	movs	r1, r2
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 fa1c 	bl	8003f04 <prvAddCurrentTaskToDelayedList>
	}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b004      	add	sp, #16
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	2000080c 	.word	0x2000080c

08003ad8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <xTaskRemoveFromEventList+0x1a>
 8003aee:	b672      	cpsid	i
 8003af0:	e7fe      	b.n	8003af0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3318      	adds	r3, #24
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7fe ff93 	bl	8002a22 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003afc:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <xTaskRemoveFromEventList+0xa0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11d      	bne.n	8003b40 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3304      	adds	r3, #4
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7fe ff8a 	bl	8002a22 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <xTaskRemoveFromEventList+0xa4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d903      	bls.n	8003b22 <xTaskRemoveFromEventList+0x4a>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <xTaskRemoveFromEventList+0xa4>)
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b26:	0013      	movs	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4a14      	ldr	r2, [pc, #80]	; (8003b80 <xTaskRemoveFromEventList+0xa8>)
 8003b30:	189a      	adds	r2, r3, r2
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3304      	adds	r3, #4
 8003b36:	0019      	movs	r1, r3
 8003b38:	0010      	movs	r0, r2
 8003b3a:	f7fe ff1a 	bl	8002972 <vListInsertEnd>
 8003b3e:	e007      	b.n	8003b50 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	3318      	adds	r3, #24
 8003b44:	001a      	movs	r2, r3
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <xTaskRemoveFromEventList+0xac>)
 8003b48:	0011      	movs	r1, r2
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f7fe ff11 	bl	8002972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <xTaskRemoveFromEventList+0xb0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d905      	bls.n	8003b6a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <xTaskRemoveFromEventList+0xb4>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e001      	b.n	8003b6e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b004      	add	sp, #16
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000d08 	.word	0x20000d08
 8003b7c:	20000ce8 	.word	0x20000ce8
 8003b80:	20000810 	.word	0x20000810
 8003b84:	20000ca0 	.word	0x20000ca0
 8003b88:	2000080c 	.word	0x2000080c
 8003b8c:	20000cf4 	.word	0x20000cf4

08003b90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <vTaskInternalSetTimeOutState+0x20>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <vTaskInternalSetTimeOutState+0x24>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	605a      	str	r2, [r3, #4]
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000cf8 	.word	0x20000cf8
 8003bb4:	20000ce4 	.word	0x20000ce4

08003bb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <xTaskCheckForTimeOut+0x14>
 8003bc8:	b672      	cpsid	i
 8003bca:	e7fe      	b.n	8003bca <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <xTaskCheckForTimeOut+0x1e>
 8003bd2:	b672      	cpsid	i
 8003bd4:	e7fe      	b.n	8003bd4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003bd6:	f000 fd53 	bl	8004680 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bda:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <xTaskCheckForTimeOut+0x98>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e024      	b.n	8003c42 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <xTaskCheckForTimeOut+0x9c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d007      	beq.n	8003c14 <xTaskCheckForTimeOut+0x5c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d302      	bcc.n	8003c14 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e016      	b.n	8003c42 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d20c      	bcs.n	8003c38 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad2      	subs	r2, r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff ffaf 	bl	8003b90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e004      	b.n	8003c42 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003c42:	f000 fd2f 	bl	80046a4 <vPortExitCritical>

	return xReturn;
 8003c46:	697b      	ldr	r3, [r7, #20]
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b006      	add	sp, #24
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000ce4 	.word	0x20000ce4
 8003c54:	20000cf8 	.word	0x20000cf8

08003c58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c5c:	4b02      	ldr	r3, [pc, #8]	; (8003c68 <vTaskMissedYield+0x10>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000cf4 	.word	0x20000cf4

08003c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c74:	f000 f84e 	bl	8003d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <prvIdleTask+0x1c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d9f9      	bls.n	8003c74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c80:	f000 fcee 	bl	8004660 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003c84:	e7f6      	b.n	8003c74 <prvIdleTask+0x8>
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	20000810 	.word	0x20000810

08003c8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	e00c      	b.n	8003cb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	0013      	movs	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <prvInitialiseTaskLists+0x68>)
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7fe fe3a 	bl	8002920 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b37      	cmp	r3, #55	; 0x37
 8003cb6:	d9ef      	bls.n	8003c98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <prvInitialiseTaskLists+0x6c>)
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7fe fe30 	bl	8002920 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <prvInitialiseTaskLists+0x70>)
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fe fe2c 	bl	8002920 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <prvInitialiseTaskLists+0x74>)
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7fe fe28 	bl	8002920 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <prvInitialiseTaskLists+0x78>)
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f7fe fe24 	bl	8002920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <prvInitialiseTaskLists+0x7c>)
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7fe fe20 	bl	8002920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <prvInitialiseTaskLists+0x80>)
 8003ce2:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <prvInitialiseTaskLists+0x6c>)
 8003ce4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <prvInitialiseTaskLists+0x84>)
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <prvInitialiseTaskLists+0x70>)
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000810 	.word	0x20000810
 8003cf8:	20000c70 	.word	0x20000c70
 8003cfc:	20000c84 	.word	0x20000c84
 8003d00:	20000ca0 	.word	0x20000ca0
 8003d04:	20000cb4 	.word	0x20000cb4
 8003d08:	20000ccc 	.word	0x20000ccc
 8003d0c:	20000c98 	.word	0x20000c98
 8003d10:	20000c9c 	.word	0x20000c9c

08003d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d1a:	e01a      	b.n	8003d52 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003d1c:	f000 fcb0 	bl	8004680 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <prvCheckTasksWaitingTermination+0x50>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fe fe78 	bl	8002a22 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <prvCheckTasksWaitingTermination+0x54>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	1e5a      	subs	r2, r3, #1
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <prvCheckTasksWaitingTermination+0x54>)
 8003d3a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <prvCheckTasksWaitingTermination+0x58>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <prvCheckTasksWaitingTermination+0x58>)
 8003d44:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003d46:	f000 fcad 	bl	80046a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 f80f 	bl	8003d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <prvCheckTasksWaitingTermination+0x58>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e0      	bne.n	8003d1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b002      	add	sp, #8
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000cb4 	.word	0x20000cb4
 8003d68:	20000ce0 	.word	0x20000ce0
 8003d6c:	20000cc8 	.word	0x20000cc8

08003d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3354      	adds	r3, #84	; 0x54
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f000 ff1d 	bl	8004bbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	22b9      	movs	r2, #185	; 0xb9
 8003d86:	5c9b      	ldrb	r3, [r3, r2]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 fdb3 	bl	80048fc <vPortFree>
				vPortFree( pxTCB );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f000 fdaf 	bl	80048fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d9e:	e010      	b.n	8003dc2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	22b9      	movs	r2, #185	; 0xb9
 8003da4:	5c9b      	ldrb	r3, [r3, r2]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d104      	bne.n	8003db4 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 fda5 	bl	80048fc <vPortFree>
	}
 8003db2:	e006      	b.n	8003dc2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	22b9      	movs	r2, #185	; 0xb9
 8003db8:	5c9b      	ldrb	r3, [r3, r2]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d001      	beq.n	8003dc2 <prvDeleteTCB+0x52>
 8003dbe:	b672      	cpsid	i
 8003dc0:	e7fe      	b.n	8003dc0 <prvDeleteTCB+0x50>
	}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <prvResetNextTaskUnblockTime+0x40>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <prvResetNextTaskUnblockTime+0x14>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <prvResetNextTaskUnblockTime+0x16>
 8003de0:	2300      	movs	r3, #0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <prvResetNextTaskUnblockTime+0x44>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	4252      	negs	r2, r2
 8003dec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dee:	e008      	b.n	8003e02 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <prvResetNextTaskUnblockTime+0x40>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <prvResetNextTaskUnblockTime+0x44>)
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b002      	add	sp, #8
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	20000c98 	.word	0x20000c98
 8003e10:	20000d00 	.word	0x20000d00

08003e14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <xTaskGetSchedulerState+0x30>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e22:	2301      	movs	r3, #1
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	e008      	b.n	8003e3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <xTaskGetSchedulerState+0x34>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e30:	2302      	movs	r3, #2
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	e001      	b.n	8003e3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e36:	2300      	movs	r3, #0
 8003e38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e3a:	687b      	ldr	r3, [r7, #4]
	}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b002      	add	sp, #8
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000cec 	.word	0x20000cec
 8003e48:	20000d08 	.word	0x20000d08

08003e4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d044      	beq.n	8003eec <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e62:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <xTaskPriorityDisinherit+0xac>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <xTaskPriorityDisinherit+0x24>
 8003e6c:	b672      	cpsid	i
 8003e6e:	e7fe      	b.n	8003e6e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <xTaskPriorityDisinherit+0x30>
 8003e78:	b672      	cpsid	i
 8003e7a:	e7fe      	b.n	8003e7a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	1e5a      	subs	r2, r3, #1
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d02c      	beq.n	8003eec <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d128      	bne.n	8003eec <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fe fdbf 	bl	8002a22 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	2238      	movs	r2, #56	; 0x38
 8003eb2:	1ad2      	subs	r2, r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <xTaskPriorityDisinherit+0xb0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d903      	bls.n	8003ecc <xTaskPriorityDisinherit+0x80>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <xTaskPriorityDisinherit+0xb0>)
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	0013      	movs	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <xTaskPriorityDisinherit+0xb4>)
 8003eda:	189a      	adds	r2, r3, r2
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	0010      	movs	r0, r2
 8003ee4:	f7fe fd45 	bl	8002972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003eec:	68fb      	ldr	r3, [r7, #12]
	}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	2000080c 	.word	0x2000080c
 8003efc:	20000ce8 	.word	0x20000ce8
 8003f00:	20000810 	.word	0x20000810

08003f04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f0e:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fe fd81 	bl	8002a22 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3301      	adds	r3, #1
 8003f24:	d10b      	bne.n	8003f3e <prvAddCurrentTaskToDelayedList+0x3a>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	1d1a      	adds	r2, r3, #4
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <prvAddCurrentTaskToDelayedList+0x98>)
 8003f34:	0011      	movs	r1, r2
 8003f36:	0018      	movs	r0, r3
 8003f38:	f7fe fd1b 	bl	8002972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f3c:	e026      	b.n	8003f8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	18d3      	adds	r3, r2, r3
 8003f44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f46:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d209      	bcs.n	8003f6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	0019      	movs	r1, r3
 8003f62:	0010      	movs	r0, r2
 8003f64:	f7fe fd27 	bl	80029b6 <vListInsert>
}
 8003f68:	e010      	b.n	8003f8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3304      	adds	r3, #4
 8003f74:	0019      	movs	r1, r3
 8003f76:	0010      	movs	r0, r2
 8003f78:	f7fe fd1d 	bl	80029b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d202      	bcs.n	8003f8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	601a      	str	r2, [r3, #0]
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000ce4 	.word	0x20000ce4
 8003f98:	2000080c 	.word	0x2000080c
 8003f9c:	20000ccc 	.word	0x20000ccc
 8003fa0:	20000c9c 	.word	0x20000c9c
 8003fa4:	20000c98 	.word	0x20000c98
 8003fa8:	20000d00 	.word	0x20000d00

08003fac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fb6:	f000 fa87 	bl	80044c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fba:	4b17      	ldr	r3, [pc, #92]	; (8004018 <xTimerCreateTimerTask+0x6c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d020      	beq.n	8004004 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fca:	003a      	movs	r2, r7
 8003fcc:	1d39      	adds	r1, r7, #4
 8003fce:	2308      	movs	r3, #8
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7fe fc8c 	bl	80028f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fd8:	683c      	ldr	r4, [r7, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	490f      	ldr	r1, [pc, #60]	; (800401c <xTimerCreateTimerTask+0x70>)
 8003fe0:	480f      	ldr	r0, [pc, #60]	; (8004020 <xTimerCreateTimerTask+0x74>)
 8003fe2:	9202      	str	r2, [sp, #8]
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	0022      	movs	r2, r4
 8003fee:	f7ff f968 	bl	80032c2 <xTaskCreateStatic>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <xTimerCreateTimerTask+0x78>)
 8003ff6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <xTimerCreateTimerTask+0x78>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004000:	2301      	movs	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <xTimerCreateTimerTask+0x62>
 800400a:	b672      	cpsid	i
 800400c:	e7fe      	b.n	800400c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b005      	add	sp, #20
 8004016:	bd90      	pop	{r4, r7, pc}
 8004018:	20000d3c 	.word	0x20000d3c
 800401c:	08004f24 	.word	0x08004f24
 8004020:	0800412d 	.word	0x0800412d
 8004024:	20000d40 	.word	0x20000d40

08004028 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b08b      	sub	sp, #44	; 0x2c
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <xTimerGenericCommand+0x1c>
 8004040:	b672      	cpsid	i
 8004042:	e7fe      	b.n	8004042 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004044:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <xTimerGenericCommand+0x90>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d030      	beq.n	80040ae <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800404c:	2414      	movs	r4, #20
 800404e:	193b      	adds	r3, r7, r4
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004054:	193b      	adds	r3, r7, r4
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800405a:	193b      	adds	r3, r7, r4
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b05      	cmp	r3, #5
 8004064:	dc19      	bgt.n	800409a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004066:	f7ff fed5 	bl	8003e14 <xTaskGetSchedulerState>
 800406a:	0003      	movs	r3, r0
 800406c:	2b02      	cmp	r3, #2
 800406e:	d109      	bne.n	8004084 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <xTimerGenericCommand+0x90>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004076:	1939      	adds	r1, r7, r4
 8004078:	2300      	movs	r3, #0
 800407a:	f7fe fdc0 	bl	8002bfe <xQueueGenericSend>
 800407e:	0003      	movs	r3, r0
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
 8004082:	e014      	b.n	80040ae <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <xTimerGenericCommand+0x90>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	2314      	movs	r3, #20
 800408a:	18f9      	adds	r1, r7, r3
 800408c:	2300      	movs	r3, #0
 800408e:	2200      	movs	r2, #0
 8004090:	f7fe fdb5 	bl	8002bfe <xQueueGenericSend>
 8004094:	0003      	movs	r3, r0
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
 8004098:	e009      	b.n	80040ae <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <xTimerGenericCommand+0x90>)
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	2314      	movs	r3, #20
 80040a2:	18f9      	adds	r1, r7, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	f7fe fe6e 	bl	8002d86 <xQueueGenericSendFromISR>
 80040aa:	0003      	movs	r3, r0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b00b      	add	sp, #44	; 0x2c
 80040b6:	bd90      	pop	{r4, r7, pc}
 80040b8:	20000d3c 	.word	0x20000d3c

080040bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <prvProcessExpiredTimer+0x6c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3304      	adds	r3, #4
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7fe fca4 	bl	8002a22 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d119      	bne.n	8004116 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	18d1      	adds	r1, r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f8b6 	bl	8004260 <prvInsertTimerInActiveList>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d00e      	beq.n	8004116 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	2100      	movs	r1, #0
 8004104:	f7ff ff90 	bl	8004028 <xTimerGenericCommand>
 8004108:	0003      	movs	r3, r0
 800410a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <prvProcessExpiredTimer+0x5a>
 8004112:	b672      	cpsid	i
 8004114:	e7fe      	b.n	8004114 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	0010      	movs	r0, r2
 800411e:	4798      	blx	r3
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b004      	add	sp, #16
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000d34 	.word	0x20000d34

0800412c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004134:	2308      	movs	r3, #8
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	0018      	movs	r0, r3
 800413a:	f000 f851 	bl	80041e0 <prvGetNextExpireTime>
 800413e:	0003      	movs	r3, r0
 8004140:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	0011      	movs	r1, r2
 8004148:	0018      	movs	r0, r3
 800414a:	f000 f803 	bl	8004154 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800414e:	f000 f8c9 	bl	80042e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004152:	e7ef      	b.n	8004134 <prvTimerTask+0x8>

08004154 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800415e:	f7ff fac3 	bl	80036e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004162:	2308      	movs	r3, #8
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	0018      	movs	r0, r3
 8004168:	f000 f85a 	bl	8004220 <prvSampleTimeNow>
 800416c:	0003      	movs	r3, r0
 800416e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d129      	bne.n	80041ca <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10c      	bne.n	8004196 <prvProcessTimerOrBlockTask+0x42>
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d808      	bhi.n	8004196 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004184:	f7ff fabc 	bl	8003700 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0011      	movs	r1, r2
 800418e:	0018      	movs	r0, r3
 8004190:	f7ff ff94 	bl	80040bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004194:	e01b      	b.n	80041ce <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <prvProcessTimerOrBlockTask+0x84>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	425a      	negs	r2, r3
 80041a4:	4153      	adcs	r3, r2
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <prvProcessTimerOrBlockTask+0x88>)
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	0019      	movs	r1, r3
 80041b8:	f7ff f850 	bl	800325c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041bc:	f7ff faa0 	bl	8003700 <xTaskResumeAll>
 80041c0:	1e03      	subs	r3, r0, #0
 80041c2:	d104      	bne.n	80041ce <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80041c4:	f000 fa4c 	bl	8004660 <vPortYield>
}
 80041c8:	e001      	b.n	80041ce <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80041ca:	f7ff fa99 	bl	8003700 <xTaskResumeAll>
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b004      	add	sp, #16
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	20000d38 	.word	0x20000d38
 80041dc:	20000d3c 	.word	0x20000d3c

080041e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <prvGetNextExpireTime+0x3c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	425a      	negs	r2, r3
 80041f0:	4153      	adcs	r3, r2
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	001a      	movs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <prvGetNextExpireTime+0x3c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e001      	b.n	8004212 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b004      	add	sp, #16
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000d34 	.word	0x20000d34

08004220 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004228:	f7ff faf6 	bl	8003818 <xTaskGetTickCount>
 800422c:	0003      	movs	r3, r0
 800422e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <prvSampleTimeNow+0x3c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	429a      	cmp	r2, r3
 8004238:	d205      	bcs.n	8004246 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800423a:	f000 f8eb 	bl	8004414 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e002      	b.n	800424c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <prvSampleTimeNow+0x3c>)
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004252:	68fb      	ldr	r3, [r7, #12]
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b004      	add	sp, #16
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000d44 	.word	0x20000d44

08004260 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d812      	bhi.n	80042ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	1ad2      	subs	r2, r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	429a      	cmp	r2, r3
 8004292:	d302      	bcc.n	800429a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e01b      	b.n	80042d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <prvInsertTimerInActiveList+0x7c>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3304      	adds	r3, #4
 80042a2:	0019      	movs	r1, r3
 80042a4:	0010      	movs	r0, r2
 80042a6:	f7fe fb86 	bl	80029b6 <vListInsert>
 80042aa:	e012      	b.n	80042d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d206      	bcs.n	80042c2 <prvInsertTimerInActiveList+0x62>
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d302      	bcc.n	80042c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	e007      	b.n	80042d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <prvInsertTimerInActiveList+0x80>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3304      	adds	r3, #4
 80042ca:	0019      	movs	r1, r3
 80042cc:	0010      	movs	r0, r2
 80042ce:	f7fe fb72 	bl	80029b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042d2:	697b      	ldr	r3, [r7, #20]
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b006      	add	sp, #24
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000d38 	.word	0x20000d38
 80042e0:	20000d34 	.word	0x20000d34

080042e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b08d      	sub	sp, #52	; 0x34
 80042e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042ea:	e07f      	b.n	80043ec <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042ec:	2208      	movs	r2, #8
 80042ee:	18bb      	adds	r3, r7, r2
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da0f      	bge.n	8004316 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042f6:	18bb      	adds	r3, r7, r2
 80042f8:	3304      	adds	r3, #4
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <prvProcessReceivedCommands+0x22>
 8004302:	b672      	cpsid	i
 8004304:	e7fe      	b.n	8004304 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	6858      	ldr	r0, [r3, #4]
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0019      	movs	r1, r3
 8004314:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004316:	2208      	movs	r2, #8
 8004318:	18bb      	adds	r3, r7, r2
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	db64      	blt.n	80043ea <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004320:	18bb      	adds	r3, r7, r2
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	3304      	adds	r3, #4
 8004332:	0018      	movs	r0, r3
 8004334:	f7fe fb75 	bl	8002a22 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004338:	1d3b      	adds	r3, r7, #4
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff ff70 	bl	8004220 <prvSampleTimeNow>
 8004340:	0003      	movs	r3, r0
 8004342:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004344:	2308      	movs	r3, #8
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b09      	cmp	r3, #9
 800434c:	d84e      	bhi.n	80043ec <prvProcessReceivedCommands+0x108>
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	4b2e      	ldr	r3, [pc, #184]	; (800440c <prvProcessReceivedCommands+0x128>)
 8004352:	18d3      	adds	r3, r2, r3
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004358:	2408      	movs	r4, #8
 800435a:	193b      	adds	r3, r7, r4
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	18d1      	adds	r1, r2, r3
 8004364:	193b      	adds	r3, r7, r4
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	6a38      	ldr	r0, [r7, #32]
 800436c:	f7ff ff78 	bl	8004260 <prvInsertTimerInActiveList>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d03b      	beq.n	80043ec <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	0010      	movs	r0, r2
 800437c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d132      	bne.n	80043ec <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004386:	193b      	adds	r3, r7, r4
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	18d2      	adds	r2, r2, r3
 8004390:	6a38      	ldr	r0, [r7, #32]
 8004392:	2300      	movs	r3, #0
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	2300      	movs	r3, #0
 8004398:	2100      	movs	r1, #0
 800439a:	f7ff fe45 	bl	8004028 <xTimerGenericCommand>
 800439e:	0003      	movs	r3, r0
 80043a0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d121      	bne.n	80043ec <prvProcessReceivedCommands+0x108>
 80043a8:	b672      	cpsid	i
 80043aa:	e7fe      	b.n	80043aa <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043ac:	2308      	movs	r3, #8
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <prvProcessReceivedCommands+0xde>
 80043be:	b672      	cpsid	i
 80043c0:	e7fe      	b.n	80043c0 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	18d1      	adds	r1, r2, r3
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	6a38      	ldr	r0, [r7, #32]
 80043d0:	f7ff ff46 	bl	8004260 <prvInsertTimerInActiveList>
					break;
 80043d4:	e00a      	b.n	80043ec <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	222c      	movs	r2, #44	; 0x2c
 80043da:	5c9b      	ldrb	r3, [r3, r2]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f000 fa8a 	bl	80048fc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043e8:	e000      	b.n	80043ec <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043ea:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <prvProcessReceivedCommands+0x12c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2208      	movs	r2, #8
 80043f2:	18b9      	adds	r1, r7, r2
 80043f4:	2200      	movs	r2, #0
 80043f6:	0018      	movs	r0, r3
 80043f8:	f7fe fd36 	bl	8002e68 <xQueueReceive>
 80043fc:	1e03      	subs	r3, r0, #0
 80043fe:	d000      	beq.n	8004402 <prvProcessReceivedCommands+0x11e>
 8004400:	e774      	b.n	80042ec <prvProcessReceivedCommands+0x8>
	}
}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b00b      	add	sp, #44	; 0x2c
 800440a:	bd90      	pop	{r4, r7, pc}
 800440c:	08004f70 	.word	0x08004f70
 8004410:	20000d3c 	.word	0x20000d3c

08004414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800441a:	e03e      	b.n	800449a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800441c:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <prvSwitchTimerLists+0xac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004426:	4b26      	ldr	r3, [pc, #152]	; (80044c0 <prvSwitchTimerLists+0xac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3304      	adds	r3, #4
 8004434:	0018      	movs	r0, r3
 8004436:	f7fe faf4 	bl	8002a22 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	0010      	movs	r0, r2
 8004442:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d126      	bne.n	800449a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	18d3      	adds	r3, r2, r3
 8004454:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	429a      	cmp	r2, r3
 800445c:	d90e      	bls.n	800447c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <prvSwitchTimerLists+0xac>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3304      	adds	r3, #4
 8004472:	0019      	movs	r1, r3
 8004474:	0010      	movs	r0, r2
 8004476:	f7fe fa9e 	bl	80029b6 <vListInsert>
 800447a:	e00e      	b.n	800449a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	2300      	movs	r3, #0
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2300      	movs	r3, #0
 8004486:	2100      	movs	r1, #0
 8004488:	f7ff fdce 	bl	8004028 <xTimerGenericCommand>
 800448c:	0003      	movs	r3, r0
 800448e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <prvSwitchTimerLists+0x86>
 8004496:	b672      	cpsid	i
 8004498:	e7fe      	b.n	8004498 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <prvSwitchTimerLists+0xac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1bb      	bne.n	800441c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <prvSwitchTimerLists+0xac>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <prvSwitchTimerLists+0xb0>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <prvSwitchTimerLists+0xac>)
 80044b0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <prvSwitchTimerLists+0xb0>)
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	601a      	str	r2, [r3, #0]
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b006      	add	sp, #24
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000d34 	.word	0x20000d34
 80044c4:	20000d38 	.word	0x20000d38

080044c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044ce:	f000 f8d7 	bl	8004680 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <prvCheckForValidListAndQueue+0x64>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d123      	bne.n	8004522 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <prvCheckForValidListAndQueue+0x68>)
 80044dc:	0018      	movs	r0, r3
 80044de:	f7fe fa1f 	bl	8002920 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <prvCheckForValidListAndQueue+0x6c>)
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7fe fa1b 	bl	8002920 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <prvCheckForValidListAndQueue+0x70>)
 80044ec:	4a10      	ldr	r2, [pc, #64]	; (8004530 <prvCheckForValidListAndQueue+0x68>)
 80044ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044f0:	4b12      	ldr	r3, [pc, #72]	; (800453c <prvCheckForValidListAndQueue+0x74>)
 80044f2:	4a10      	ldr	r2, [pc, #64]	; (8004534 <prvCheckForValidListAndQueue+0x6c>)
 80044f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <prvCheckForValidListAndQueue+0x78>)
 80044f8:	4a12      	ldr	r2, [pc, #72]	; (8004544 <prvCheckForValidListAndQueue+0x7c>)
 80044fa:	2100      	movs	r1, #0
 80044fc:	9100      	str	r1, [sp, #0]
 80044fe:	2110      	movs	r1, #16
 8004500:	200a      	movs	r0, #10
 8004502:	f7fe fb0a 	bl	8002b1a <xQueueGenericCreateStatic>
 8004506:	0002      	movs	r2, r0
 8004508:	4b08      	ldr	r3, [pc, #32]	; (800452c <prvCheckForValidListAndQueue+0x64>)
 800450a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <prvCheckForValidListAndQueue+0x64>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d006      	beq.n	8004522 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <prvCheckForValidListAndQueue+0x64>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <prvCheckForValidListAndQueue+0x80>)
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f7fe fe75 	bl	800320c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004522:	f000 f8bf 	bl	80046a4 <vPortExitCritical>
}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000d3c 	.word	0x20000d3c
 8004530:	20000d0c 	.word	0x20000d0c
 8004534:	20000d20 	.word	0x20000d20
 8004538:	20000d34 	.word	0x20000d34
 800453c:	20000d38 	.word	0x20000d38
 8004540:	20000de8 	.word	0x20000de8
 8004544:	20000d48 	.word	0x20000d48
 8004548:	08004f2c 	.word	0x08004f2c

0800454c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3b04      	subs	r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2280      	movs	r2, #128	; 0x80
 8004562:	0452      	lsls	r2, r2, #17
 8004564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3b04      	subs	r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b04      	subs	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004578:	4a08      	ldr	r2, [pc, #32]	; (800459c <pxPortInitialiseStack+0x50>)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3b14      	subs	r3, #20
 8004582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3b20      	subs	r3, #32
 800458e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004590:	68fb      	ldr	r3, [r7, #12]
}
 8004592:	0018      	movs	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	b004      	add	sp, #16
 8004598:	bd80      	pop	{r7, pc}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	080045a1 	.word	0x080045a1

080045a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <prvTaskExitError+0x2c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	d001      	beq.n	80045b6 <prvTaskExitError+0x16>
 80045b2:	b672      	cpsid	i
 80045b4:	e7fe      	b.n	80045b4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80045b6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0fc      	beq.n	80045ba <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b002      	add	sp, #8
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	20000008 	.word	0x20000008

080045d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	0000      	movs	r0, r0
 80045dc:	0000      	movs	r0, r0
	...

080045e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80045e0:	4a0b      	ldr	r2, [pc, #44]	; (8004610 <pxCurrentTCBConst2>)
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	3020      	adds	r0, #32
 80045e8:	f380 8809 	msr	PSP, r0
 80045ec:	2002      	movs	r0, #2
 80045ee:	f380 8814 	msr	CONTROL, r0
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80045f8:	46ae      	mov	lr, r5
 80045fa:	bc08      	pop	{r3}
 80045fc:	bc04      	pop	{r2}
 80045fe:	b662      	cpsie	i
 8004600:	4718      	bx	r3
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46c0      	nop			; (mov r8, r8)

08004610 <pxCurrentTCBConst2>:
 8004610:	2000080c 	.word	0x2000080c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004614:	46c0      	nop			; (mov r8, r8)
 8004616:	46c0      	nop			; (mov r8, r8)

08004618 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <xPortStartScheduler+0x40>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <xPortStartScheduler+0x40>)
 8004622:	21ff      	movs	r1, #255	; 0xff
 8004624:	0409      	lsls	r1, r1, #16
 8004626:	430a      	orrs	r2, r1
 8004628:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800462a:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <xPortStartScheduler+0x40>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <xPortStartScheduler+0x40>)
 8004630:	21ff      	movs	r1, #255	; 0xff
 8004632:	0609      	lsls	r1, r1, #24
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004638:	f000 f898 	bl	800476c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <xPortStartScheduler+0x44>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004642:	f7ff ffcd 	bl	80045e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004646:	f7ff f9a9 	bl	800399c <vTaskSwitchContext>
	prvTaskExitError();
 800464a:	f7ff ffa9 	bl	80045a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800464e:	2300      	movs	r3, #0
}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	e000ed20 	.word	0xe000ed20
 800465c:	20000008 	.word	0x20000008

08004660 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <vPortYield+0x1c>)
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	0552      	lsls	r2, r2, #21
 800466a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800466c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004670:	f3bf 8f6f 	isb	sy
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	e000ed04 	.word	0xe000ed04

08004680 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004684:	b672      	cpsid	i
    uxCriticalNesting++;
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <vPortEnterCritical+0x20>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <vPortEnterCritical+0x20>)
 800468e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004690:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004694:	f3bf 8f6f 	isb	sy
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	20000008 	.word	0x20000008

080046a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <vPortExitCritical+0x2c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <vPortExitCritical+0x10>
 80046b0:	b672      	cpsid	i
 80046b2:	e7fe      	b.n	80046b2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <vPortExitCritical+0x2c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <vPortExitCritical+0x2c>)
 80046bc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80046be:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <vPortExitCritical+0x2c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d100      	bne.n	80046c8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80046c6:	b662      	cpsie	i
    }
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	20000008 	.word	0x20000008

080046d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80046d4:	f3ef 8010 	mrs	r0, PRIMASK
 80046d8:	b672      	cpsid	i
 80046da:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80046dc:	46c0      	nop			; (mov r8, r8)
 80046de:	0018      	movs	r0, r3

080046e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80046e0:	f380 8810 	msr	PRIMASK, r0
 80046e4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80046e6:	46c0      	nop			; (mov r8, r8)
	...

080046f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046f0:	f3ef 8009 	mrs	r0, PSP
 80046f4:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <pxCurrentTCBConst>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	3820      	subs	r0, #32
 80046fa:	6010      	str	r0, [r2, #0]
 80046fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80046fe:	4644      	mov	r4, r8
 8004700:	464d      	mov	r5, r9
 8004702:	4656      	mov	r6, sl
 8004704:	465f      	mov	r7, fp
 8004706:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004708:	b508      	push	{r3, lr}
 800470a:	b672      	cpsid	i
 800470c:	f7ff f946 	bl	800399c <vTaskSwitchContext>
 8004710:	b662      	cpsie	i
 8004712:	bc0c      	pop	{r2, r3}
 8004714:	6811      	ldr	r1, [r2, #0]
 8004716:	6808      	ldr	r0, [r1, #0]
 8004718:	3010      	adds	r0, #16
 800471a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800471c:	46a0      	mov	r8, r4
 800471e:	46a9      	mov	r9, r5
 8004720:	46b2      	mov	sl, r6
 8004722:	46bb      	mov	fp, r7
 8004724:	f380 8809 	msr	PSP, r0
 8004728:	3820      	subs	r0, #32
 800472a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800472c:	4718      	bx	r3
 800472e:	46c0      	nop			; (mov r8, r8)

08004730 <pxCurrentTCBConst>:
 8004730:	2000080c 	.word	0x2000080c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46c0      	nop			; (mov r8, r8)

08004738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800473e:	f7ff ffc9 	bl	80046d4 <ulSetInterruptMaskFromISR>
 8004742:	0003      	movs	r3, r0
 8004744:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004746:	f7ff f875 	bl	8003834 <xTaskIncrementTick>
 800474a:	1e03      	subs	r3, r0, #0
 800474c:	d003      	beq.n	8004756 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <SysTick_Handler+0x30>)
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	0552      	lsls	r2, r2, #21
 8004754:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f7ff ffc1 	bl	80046e0 <vClearInterruptMaskFromISR>
}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b002      	add	sp, #8
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <prvSetupTimerInterrupt+0x34>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <prvSetupTimerInterrupt+0x38>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <prvSetupTimerInterrupt+0x3c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	22fa      	movs	r2, #250	; 0xfa
 8004782:	0091      	lsls	r1, r2, #2
 8004784:	0018      	movs	r0, r3
 8004786:	f7fb fcc7 	bl	8000118 <__udivsi3>
 800478a:	0003      	movs	r3, r0
 800478c:	001a      	movs	r2, r3
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <prvSetupTimerInterrupt+0x40>)
 8004790:	3a01      	subs	r2, #1
 8004792:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004794:	4b02      	ldr	r3, [pc, #8]	; (80047a0 <prvSetupTimerInterrupt+0x34>)
 8004796:	2207      	movs	r2, #7
 8004798:	601a      	str	r2, [r3, #0]
}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	e000e010 	.word	0xe000e010
 80047a4:	e000e018 	.word	0xe000e018
 80047a8:	20000000 	.word	0x20000000
 80047ac:	e000e014 	.word	0xe000e014

080047b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80047bc:	f7fe ff94 	bl	80036e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047c0:	4b49      	ldr	r3, [pc, #292]	; (80048e8 <pvPortMalloc+0x138>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047c8:	f000 f8e0 	bl	800498c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047cc:	4b47      	ldr	r3, [pc, #284]	; (80048ec <pvPortMalloc+0x13c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	4013      	ands	r3, r2
 80047d4:	d000      	beq.n	80047d8 <pvPortMalloc+0x28>
 80047d6:	e079      	b.n	80048cc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80047de:	2208      	movs	r2, #8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	189b      	adds	r3, r3, r2
 80047e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2207      	movs	r2, #7
 80047ea:	4013      	ands	r3, r2
 80047ec:	d00a      	beq.n	8004804 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2207      	movs	r2, #7
 80047f2:	4393      	bics	r3, r2
 80047f4:	3308      	adds	r3, #8
 80047f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2207      	movs	r2, #7
 80047fc:	4013      	ands	r3, r2
 80047fe:	d001      	beq.n	8004804 <pvPortMalloc+0x54>
 8004800:	b672      	cpsid	i
 8004802:	e7fe      	b.n	8004802 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d060      	beq.n	80048cc <pvPortMalloc+0x11c>
 800480a:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <pvPortMalloc+0x140>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	429a      	cmp	r2, r3
 8004812:	d85b      	bhi.n	80048cc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004814:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <pvPortMalloc+0x144>)
 8004816:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004818:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <pvPortMalloc+0x144>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800481e:	e004      	b.n	800482a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d903      	bls.n	800483c <pvPortMalloc+0x8c>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f1      	bne.n	8004820 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800483c:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <pvPortMalloc+0x138>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	429a      	cmp	r2, r3
 8004844:	d042      	beq.n	80048cc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2208      	movs	r2, #8
 800484c:	189b      	adds	r3, r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	1ad2      	subs	r2, r2, r3
 8004860:	2308      	movs	r3, #8
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	429a      	cmp	r2, r3
 8004866:	d916      	bls.n	8004896 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	18d3      	adds	r3, r2, r3
 800486e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2207      	movs	r2, #7
 8004874:	4013      	ands	r3, r2
 8004876:	d001      	beq.n	800487c <pvPortMalloc+0xcc>
 8004878:	b672      	cpsid	i
 800487a:	e7fe      	b.n	800487a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1ad2      	subs	r2, r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	0018      	movs	r0, r3
 8004892:	f000 f8db 	bl	8004a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004896:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <pvPortMalloc+0x140>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <pvPortMalloc+0x140>)
 80048a2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048a4:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <pvPortMalloc+0x140>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <pvPortMalloc+0x148>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d203      	bcs.n	80048b8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <pvPortMalloc+0x140>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <pvPortMalloc+0x148>)
 80048b6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <pvPortMalloc+0x13c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	431a      	orrs	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048cc:	f7fe ff18 	bl	8003700 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2207      	movs	r2, #7
 80048d4:	4013      	ands	r3, r2
 80048d6:	d001      	beq.n	80048dc <pvPortMalloc+0x12c>
 80048d8:	b672      	cpsid	i
 80048da:	e7fe      	b.n	80048da <pvPortMalloc+0x12a>
	return pvReturn;
 80048dc:	68fb      	ldr	r3, [r7, #12]
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b006      	add	sp, #24
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	20001a40 	.word	0x20001a40
 80048ec:	20001a4c 	.word	0x20001a4c
 80048f0:	20001a44 	.word	0x20001a44
 80048f4:	20001a38 	.word	0x20001a38
 80048f8:	20001a48 	.word	0x20001a48

080048fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d035      	beq.n	800497a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800490e:	2308      	movs	r3, #8
 8004910:	425b      	negs	r3, r3
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	18d3      	adds	r3, r2, r3
 8004916:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	4b18      	ldr	r3, [pc, #96]	; (8004984 <vPortFree+0x88>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4013      	ands	r3, r2
 8004926:	d101      	bne.n	800492c <vPortFree+0x30>
 8004928:	b672      	cpsid	i
 800492a:	e7fe      	b.n	800492a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <vPortFree+0x3c>
 8004934:	b672      	cpsid	i
 8004936:	e7fe      	b.n	8004936 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <vPortFree+0x88>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4013      	ands	r3, r2
 8004942:	d01a      	beq.n	800497a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d116      	bne.n	800497a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <vPortFree+0x88>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	43db      	mvns	r3, r3
 8004956:	401a      	ands	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800495c:	f7fe fec4 	bl	80036e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <vPortFree+0x8c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	18d2      	adds	r2, r2, r3
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <vPortFree+0x8c>)
 800496c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	0018      	movs	r0, r3
 8004972:	f000 f86b 	bl	8004a4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004976:	f7fe fec3 	bl	8003700 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b004      	add	sp, #16
 8004980:	bd80      	pop	{r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	20001a4c 	.word	0x20001a4c
 8004988:	20001a44 	.word	0x20001a44

0800498c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004992:	23c0      	movs	r3, #192	; 0xc0
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004998:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <prvHeapInit+0xa8>)
 800499a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2207      	movs	r2, #7
 80049a0:	4013      	ands	r3, r2
 80049a2:	d00c      	beq.n	80049be <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3307      	adds	r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2207      	movs	r2, #7
 80049ae:	4393      	bics	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <prvHeapInit+0xa8>)
 80049ba:	18d3      	adds	r3, r2, r3
 80049bc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049c2:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <prvHeapInit+0xac>)
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <prvHeapInit+0xac>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	18d3      	adds	r3, r2, r3
 80049d4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049d6:	2208      	movs	r2, #8
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2207      	movs	r2, #7
 80049e2:	4393      	bics	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <prvHeapInit+0xb0>)
 80049ea:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80049ec:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <prvHeapInit+0xb0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2200      	movs	r2, #0
 80049f2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049f4:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <prvHeapInit+0xb0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	1ad2      	subs	r2, r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a0a:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <prvHeapInit+0xb0>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <prvHeapInit+0xb4>)
 8004a18:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <prvHeapInit+0xb8>)
 8004a20:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <prvHeapInit+0xbc>)
 8004a24:	2280      	movs	r2, #128	; 0x80
 8004a26:	0612      	lsls	r2, r2, #24
 8004a28:	601a      	str	r2, [r3, #0]
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b004      	add	sp, #16
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	20000e38 	.word	0x20000e38
 8004a38:	20001a38 	.word	0x20001a38
 8004a3c:	20001a40 	.word	0x20001a40
 8004a40:	20001a48 	.word	0x20001a48
 8004a44:	20001a44 	.word	0x20001a44
 8004a48:	20001a4c 	.word	0x20001a4c

08004a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a54:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <prvInsertBlockIntoFreeList+0xa8>)
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e002      	b.n	8004a60 <prvInsertBlockIntoFreeList+0x14>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d8f7      	bhi.n	8004a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	18d3      	adds	r3, r2, r3
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d108      	bne.n	8004a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	18d2      	adds	r2, r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	18d2      	adds	r2, r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d118      	bne.n	8004ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <prvInsertBlockIntoFreeList+0xac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d00d      	beq.n	8004aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	18d2      	adds	r2, r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e008      	b.n	8004adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <prvInsertBlockIntoFreeList+0xac>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e003      	b.n	8004adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d002      	beq.n	8004aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b004      	add	sp, #16
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	20001a38 	.word	0x20001a38
 8004af8:	20001a40 	.word	0x20001a40

08004afc <__libc_init_array>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	2600      	movs	r6, #0
 8004b00:	4d0c      	ldr	r5, [pc, #48]	; (8004b34 <__libc_init_array+0x38>)
 8004b02:	4c0d      	ldr	r4, [pc, #52]	; (8004b38 <__libc_init_array+0x3c>)
 8004b04:	1b64      	subs	r4, r4, r5
 8004b06:	10a4      	asrs	r4, r4, #2
 8004b08:	42a6      	cmp	r6, r4
 8004b0a:	d109      	bne.n	8004b20 <__libc_init_array+0x24>
 8004b0c:	2600      	movs	r6, #0
 8004b0e:	f000 f959 	bl	8004dc4 <_init>
 8004b12:	4d0a      	ldr	r5, [pc, #40]	; (8004b3c <__libc_init_array+0x40>)
 8004b14:	4c0a      	ldr	r4, [pc, #40]	; (8004b40 <__libc_init_array+0x44>)
 8004b16:	1b64      	subs	r4, r4, r5
 8004b18:	10a4      	asrs	r4, r4, #2
 8004b1a:	42a6      	cmp	r6, r4
 8004b1c:	d105      	bne.n	8004b2a <__libc_init_array+0x2e>
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	00b3      	lsls	r3, r6, #2
 8004b22:	58eb      	ldr	r3, [r5, r3]
 8004b24:	4798      	blx	r3
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7ee      	b.n	8004b08 <__libc_init_array+0xc>
 8004b2a:	00b3      	lsls	r3, r6, #2
 8004b2c:	58eb      	ldr	r3, [r5, r3]
 8004b2e:	4798      	blx	r3
 8004b30:	3601      	adds	r6, #1
 8004b32:	e7f2      	b.n	8004b1a <__libc_init_array+0x1e>
 8004b34:	08005020 	.word	0x08005020
 8004b38:	08005020 	.word	0x08005020
 8004b3c:	08005020 	.word	0x08005020
 8004b40:	08005024 	.word	0x08005024

08004b44 <__itoa>:
 8004b44:	1e93      	subs	r3, r2, #2
 8004b46:	b510      	push	{r4, lr}
 8004b48:	000c      	movs	r4, r1
 8004b4a:	2b22      	cmp	r3, #34	; 0x22
 8004b4c:	d904      	bls.n	8004b58 <__itoa+0x14>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	001c      	movs	r4, r3
 8004b52:	700b      	strb	r3, [r1, #0]
 8004b54:	0020      	movs	r0, r4
 8004b56:	bd10      	pop	{r4, pc}
 8004b58:	2a0a      	cmp	r2, #10
 8004b5a:	d109      	bne.n	8004b70 <__itoa+0x2c>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	da07      	bge.n	8004b70 <__itoa+0x2c>
 8004b60:	232d      	movs	r3, #45	; 0x2d
 8004b62:	700b      	strb	r3, [r1, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	4240      	negs	r0, r0
 8004b68:	1861      	adds	r1, r4, r1
 8004b6a:	f000 f89b 	bl	8004ca4 <__utoa>
 8004b6e:	e7f1      	b.n	8004b54 <__itoa+0x10>
 8004b70:	2100      	movs	r1, #0
 8004b72:	e7f9      	b.n	8004b68 <__itoa+0x24>

08004b74 <itoa>:
 8004b74:	b510      	push	{r4, lr}
 8004b76:	f7ff ffe5 	bl	8004b44 <__itoa>
 8004b7a:	bd10      	pop	{r4, pc}

08004b7c <__retarget_lock_acquire_recursive>:
 8004b7c:	4770      	bx	lr

08004b7e <__retarget_lock_release_recursive>:
 8004b7e:	4770      	bx	lr

08004b80 <memcpy>:
 8004b80:	2300      	movs	r3, #0
 8004b82:	b510      	push	{r4, lr}
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d100      	bne.n	8004b8a <memcpy+0xa>
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	5ccc      	ldrb	r4, [r1, r3]
 8004b8c:	54c4      	strb	r4, [r0, r3]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	e7f8      	b.n	8004b84 <memcpy+0x4>

08004b92 <memset>:
 8004b92:	0003      	movs	r3, r0
 8004b94:	1882      	adds	r2, r0, r2
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d100      	bne.n	8004b9c <memset+0xa>
 8004b9a:	4770      	bx	lr
 8004b9c:	7019      	strb	r1, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	e7f9      	b.n	8004b96 <memset+0x4>

08004ba2 <cleanup_glue>:
 8004ba2:	b570      	push	{r4, r5, r6, lr}
 8004ba4:	000d      	movs	r5, r1
 8004ba6:	6809      	ldr	r1, [r1, #0]
 8004ba8:	0004      	movs	r4, r0
 8004baa:	2900      	cmp	r1, #0
 8004bac:	d001      	beq.n	8004bb2 <cleanup_glue+0x10>
 8004bae:	f7ff fff8 	bl	8004ba2 <cleanup_glue>
 8004bb2:	0029      	movs	r1, r5
 8004bb4:	0020      	movs	r0, r4
 8004bb6:	f000 f8bb 	bl	8004d30 <_free_r>
 8004bba:	bd70      	pop	{r4, r5, r6, pc}

08004bbc <_reclaim_reent>:
 8004bbc:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <_reclaim_reent+0xc8>)
 8004bbe:	b570      	push	{r4, r5, r6, lr}
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	0004      	movs	r4, r0
 8004bc4:	4283      	cmp	r3, r0
 8004bc6:	d049      	beq.n	8004c5c <_reclaim_reent+0xa0>
 8004bc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <_reclaim_reent+0x28>
 8004bce:	2500      	movs	r5, #0
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	42ab      	cmp	r3, r5
 8004bd4:	d147      	bne.n	8004c66 <_reclaim_reent+0xaa>
 8004bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bd8:	6819      	ldr	r1, [r3, #0]
 8004bda:	2900      	cmp	r1, #0
 8004bdc:	d002      	beq.n	8004be4 <_reclaim_reent+0x28>
 8004bde:	0020      	movs	r0, r4
 8004be0:	f000 f8a6 	bl	8004d30 <_free_r>
 8004be4:	6961      	ldr	r1, [r4, #20]
 8004be6:	2900      	cmp	r1, #0
 8004be8:	d002      	beq.n	8004bf0 <_reclaim_reent+0x34>
 8004bea:	0020      	movs	r0, r4
 8004bec:	f000 f8a0 	bl	8004d30 <_free_r>
 8004bf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004bf2:	2900      	cmp	r1, #0
 8004bf4:	d002      	beq.n	8004bfc <_reclaim_reent+0x40>
 8004bf6:	0020      	movs	r0, r4
 8004bf8:	f000 f89a 	bl	8004d30 <_free_r>
 8004bfc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004bfe:	2900      	cmp	r1, #0
 8004c00:	d002      	beq.n	8004c08 <_reclaim_reent+0x4c>
 8004c02:	0020      	movs	r0, r4
 8004c04:	f000 f894 	bl	8004d30 <_free_r>
 8004c08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004c0a:	2900      	cmp	r1, #0
 8004c0c:	d002      	beq.n	8004c14 <_reclaim_reent+0x58>
 8004c0e:	0020      	movs	r0, r4
 8004c10:	f000 f88e 	bl	8004d30 <_free_r>
 8004c14:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004c16:	2900      	cmp	r1, #0
 8004c18:	d002      	beq.n	8004c20 <_reclaim_reent+0x64>
 8004c1a:	0020      	movs	r0, r4
 8004c1c:	f000 f888 	bl	8004d30 <_free_r>
 8004c20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d002      	beq.n	8004c2c <_reclaim_reent+0x70>
 8004c26:	0020      	movs	r0, r4
 8004c28:	f000 f882 	bl	8004d30 <_free_r>
 8004c2c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004c2e:	2900      	cmp	r1, #0
 8004c30:	d002      	beq.n	8004c38 <_reclaim_reent+0x7c>
 8004c32:	0020      	movs	r0, r4
 8004c34:	f000 f87c 	bl	8004d30 <_free_r>
 8004c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	d002      	beq.n	8004c44 <_reclaim_reent+0x88>
 8004c3e:	0020      	movs	r0, r4
 8004c40:	f000 f876 	bl	8004d30 <_free_r>
 8004c44:	69a3      	ldr	r3, [r4, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <_reclaim_reent+0xa0>
 8004c4a:	0020      	movs	r0, r4
 8004c4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c4e:	4798      	blx	r3
 8004c50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c52:	2900      	cmp	r1, #0
 8004c54:	d002      	beq.n	8004c5c <_reclaim_reent+0xa0>
 8004c56:	0020      	movs	r0, r4
 8004c58:	f7ff ffa3 	bl	8004ba2 <cleanup_glue>
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
 8004c5e:	5949      	ldr	r1, [r1, r5]
 8004c60:	2900      	cmp	r1, #0
 8004c62:	d108      	bne.n	8004c76 <_reclaim_reent+0xba>
 8004c64:	3504      	adds	r5, #4
 8004c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c68:	68d9      	ldr	r1, [r3, #12]
 8004c6a:	2d80      	cmp	r5, #128	; 0x80
 8004c6c:	d1f7      	bne.n	8004c5e <_reclaim_reent+0xa2>
 8004c6e:	0020      	movs	r0, r4
 8004c70:	f000 f85e 	bl	8004d30 <_free_r>
 8004c74:	e7af      	b.n	8004bd6 <_reclaim_reent+0x1a>
 8004c76:	680e      	ldr	r6, [r1, #0]
 8004c78:	0020      	movs	r0, r4
 8004c7a:	f000 f859 	bl	8004d30 <_free_r>
 8004c7e:	0031      	movs	r1, r6
 8004c80:	e7ee      	b.n	8004c60 <_reclaim_reent+0xa4>
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	2000000c 	.word	0x2000000c

08004c88 <strcat>:
 8004c88:	0002      	movs	r2, r0
 8004c8a:	b510      	push	{r4, lr}
 8004c8c:	7813      	ldrb	r3, [r2, #0]
 8004c8e:	0014      	movs	r4, r2
 8004c90:	3201      	adds	r2, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1fa      	bne.n	8004c8c <strcat+0x4>
 8004c96:	5cca      	ldrb	r2, [r1, r3]
 8004c98:	54e2      	strb	r2, [r4, r3]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	d1fa      	bne.n	8004c96 <strcat+0xe>
 8004ca0:	bd10      	pop	{r4, pc}
	...

08004ca4 <__utoa>:
 8004ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca6:	0016      	movs	r6, r2
 8004ca8:	b08d      	sub	sp, #52	; 0x34
 8004caa:	0007      	movs	r7, r0
 8004cac:	000c      	movs	r4, r1
 8004cae:	2225      	movs	r2, #37	; 0x25
 8004cb0:	4916      	ldr	r1, [pc, #88]	; (8004d0c <__utoa+0x68>)
 8004cb2:	a802      	add	r0, sp, #8
 8004cb4:	f7ff ff64 	bl	8004b80 <memcpy>
 8004cb8:	1eb3      	subs	r3, r6, #2
 8004cba:	2500      	movs	r5, #0
 8004cbc:	2b22      	cmp	r3, #34	; 0x22
 8004cbe:	d820      	bhi.n	8004d02 <__utoa+0x5e>
 8004cc0:	1e63      	subs	r3, r4, #1
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	ab02      	add	r3, sp, #8
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	0038      	movs	r0, r7
 8004cca:	0031      	movs	r1, r6
 8004ccc:	f7fb faaa 	bl	8000224 <__aeabi_uidivmod>
 8004cd0:	000b      	movs	r3, r1
 8004cd2:	9a01      	ldr	r2, [sp, #4]
 8004cd4:	0029      	movs	r1, r5
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	9a00      	ldr	r2, [sp, #0]
 8004cda:	3501      	adds	r5, #1
 8004cdc:	5553      	strb	r3, [r2, r5]
 8004cde:	003b      	movs	r3, r7
 8004ce0:	0007      	movs	r7, r0
 8004ce2:	429e      	cmp	r6, r3
 8004ce4:	d9f0      	bls.n	8004cc8 <__utoa+0x24>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	0022      	movs	r2, r4
 8004cea:	5563      	strb	r3, [r4, r5]
 8004cec:	000b      	movs	r3, r1
 8004cee:	1ac8      	subs	r0, r1, r3
 8004cf0:	4283      	cmp	r3, r0
 8004cf2:	dd08      	ble.n	8004d06 <__utoa+0x62>
 8004cf4:	7810      	ldrb	r0, [r2, #0]
 8004cf6:	5ce5      	ldrb	r5, [r4, r3]
 8004cf8:	7015      	strb	r5, [r2, #0]
 8004cfa:	54e0      	strb	r0, [r4, r3]
 8004cfc:	3201      	adds	r2, #1
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	e7f5      	b.n	8004cee <__utoa+0x4a>
 8004d02:	7025      	strb	r5, [r4, #0]
 8004d04:	002c      	movs	r4, r5
 8004d06:	0020      	movs	r0, r4
 8004d08:	b00d      	add	sp, #52	; 0x34
 8004d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d0c:	08004ff8 	.word	0x08004ff8

08004d10 <__malloc_lock>:
 8004d10:	b510      	push	{r4, lr}
 8004d12:	4802      	ldr	r0, [pc, #8]	; (8004d1c <__malloc_lock+0xc>)
 8004d14:	f7ff ff32 	bl	8004b7c <__retarget_lock_acquire_recursive>
 8004d18:	bd10      	pop	{r4, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	20001c00 	.word	0x20001c00

08004d20 <__malloc_unlock>:
 8004d20:	b510      	push	{r4, lr}
 8004d22:	4802      	ldr	r0, [pc, #8]	; (8004d2c <__malloc_unlock+0xc>)
 8004d24:	f7ff ff2b 	bl	8004b7e <__retarget_lock_release_recursive>
 8004d28:	bd10      	pop	{r4, pc}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	20001c00 	.word	0x20001c00

08004d30 <_free_r>:
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	0005      	movs	r5, r0
 8004d34:	2900      	cmp	r1, #0
 8004d36:	d010      	beq.n	8004d5a <_free_r+0x2a>
 8004d38:	1f0c      	subs	r4, r1, #4
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	da00      	bge.n	8004d42 <_free_r+0x12>
 8004d40:	18e4      	adds	r4, r4, r3
 8004d42:	0028      	movs	r0, r5
 8004d44:	f7ff ffe4 	bl	8004d10 <__malloc_lock>
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <_free_r+0x90>)
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <_free_r+0x2c>
 8004d50:	6063      	str	r3, [r4, #4]
 8004d52:	6014      	str	r4, [r2, #0]
 8004d54:	0028      	movs	r0, r5
 8004d56:	f7ff ffe3 	bl	8004d20 <__malloc_unlock>
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	d908      	bls.n	8004d72 <_free_r+0x42>
 8004d60:	6821      	ldr	r1, [r4, #0]
 8004d62:	1860      	adds	r0, r4, r1
 8004d64:	4283      	cmp	r3, r0
 8004d66:	d1f3      	bne.n	8004d50 <_free_r+0x20>
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	1841      	adds	r1, r0, r1
 8004d6e:	6021      	str	r1, [r4, #0]
 8004d70:	e7ee      	b.n	8004d50 <_free_r+0x20>
 8004d72:	001a      	movs	r2, r3
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <_free_r+0x4e>
 8004d7a:	42a3      	cmp	r3, r4
 8004d7c:	d9f9      	bls.n	8004d72 <_free_r+0x42>
 8004d7e:	6811      	ldr	r1, [r2, #0]
 8004d80:	1850      	adds	r0, r2, r1
 8004d82:	42a0      	cmp	r0, r4
 8004d84:	d10b      	bne.n	8004d9e <_free_r+0x6e>
 8004d86:	6820      	ldr	r0, [r4, #0]
 8004d88:	1809      	adds	r1, r1, r0
 8004d8a:	1850      	adds	r0, r2, r1
 8004d8c:	6011      	str	r1, [r2, #0]
 8004d8e:	4283      	cmp	r3, r0
 8004d90:	d1e0      	bne.n	8004d54 <_free_r+0x24>
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	1841      	adds	r1, r0, r1
 8004d98:	6011      	str	r1, [r2, #0]
 8004d9a:	6053      	str	r3, [r2, #4]
 8004d9c:	e7da      	b.n	8004d54 <_free_r+0x24>
 8004d9e:	42a0      	cmp	r0, r4
 8004da0:	d902      	bls.n	8004da8 <_free_r+0x78>
 8004da2:	230c      	movs	r3, #12
 8004da4:	602b      	str	r3, [r5, #0]
 8004da6:	e7d5      	b.n	8004d54 <_free_r+0x24>
 8004da8:	6821      	ldr	r1, [r4, #0]
 8004daa:	1860      	adds	r0, r4, r1
 8004dac:	4283      	cmp	r3, r0
 8004dae:	d103      	bne.n	8004db8 <_free_r+0x88>
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	1841      	adds	r1, r0, r1
 8004db6:	6021      	str	r1, [r4, #0]
 8004db8:	6063      	str	r3, [r4, #4]
 8004dba:	6054      	str	r4, [r2, #4]
 8004dbc:	e7ca      	b.n	8004d54 <_free_r+0x24>
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	20001a50 	.word	0x20001a50

08004dc4 <_init>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr

08004dd0 <_fini>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr
